
STM32_protobuf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c0  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  0800766c  0800766c  0001766c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007888  08007888  00017888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007890  08007890  00017890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007894  08007894  00017894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000010  080078a8  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000c4  080078a8  000200c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00011015  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002309  00000000  00000000  00031096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000bf8  00000000  00000000  000333a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000952  00000000  00000000  00033f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002f97a  00000000  00000000  000348ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010ccd  00000000  00000000  00064264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00138000  00000000  00000000  00074f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003100  00000000  00000000  001acf34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000a3  00000000  00000000  001b0034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08007654 	.word	0x08007654

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08007654 	.word	0x08007654

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b970 	b.w	80005e4 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
 8000326:	460f      	mov	r7, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4694      	mov	ip, r2
 8000330:	d965      	bls.n	80003fe <__udivmoddi4+0xe2>
 8000332:	fab2 f382 	clz	r3, r2
 8000336:	b143      	cbz	r3, 800034a <__udivmoddi4+0x2e>
 8000338:	fa02 fc03 	lsl.w	ip, r2, r3
 800033c:	f1c3 0220 	rsb	r2, r3, #32
 8000340:	409f      	lsls	r7, r3
 8000342:	fa20 f202 	lsr.w	r2, r0, r2
 8000346:	4317      	orrs	r7, r2
 8000348:	409c      	lsls	r4, r3
 800034a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034e:	fa1f f58c 	uxth.w	r5, ip
 8000352:	fbb7 f1fe 	udiv	r1, r7, lr
 8000356:	0c22      	lsrs	r2, r4, #16
 8000358:	fb0e 7711 	mls	r7, lr, r1, r7
 800035c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000360:	fb01 f005 	mul.w	r0, r1, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90a      	bls.n	800037e <__udivmoddi4+0x62>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000370:	f080 811c 	bcs.w	80005ac <__udivmoddi4+0x290>
 8000374:	4290      	cmp	r0, r2
 8000376:	f240 8119 	bls.w	80005ac <__udivmoddi4+0x290>
 800037a:	3902      	subs	r1, #2
 800037c:	4462      	add	r2, ip
 800037e:	1a12      	subs	r2, r2, r0
 8000380:	b2a4      	uxth	r4, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	fb00 f505 	mul.w	r5, r0, r5
 8000392:	42a5      	cmp	r5, r4
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x90>
 8000396:	eb1c 0404 	adds.w	r4, ip, r4
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x294>
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x294>
 80003a8:	4464      	add	r4, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11e      	cbz	r6, 80003be <__udivmoddi4+0xa2>
 80003b6:	40dc      	lsrs	r4, r3
 80003b8:	2300      	movs	r3, #0
 80003ba:	e9c6 4300 	strd	r4, r3, [r6]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0xbc>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80ed 	beq.w	80005a6 <__udivmoddi4+0x28a>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e9c6 0500 	strd	r0, r5, [r6]
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d149      	bne.n	8000474 <__udivmoddi4+0x158>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d302      	bcc.n	80003ea <__udivmoddi4+0xce>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	f200 80f8 	bhi.w	80005da <__udivmoddi4+0x2be>
 80003ea:	1a84      	subs	r4, r0, r2
 80003ec:	eb65 0203 	sbc.w	r2, r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	4617      	mov	r7, r2
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d0e2      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f8:	e9c6 4700 	strd	r4, r7, [r6]
 80003fc:	e7df      	b.n	80003be <__udivmoddi4+0xa2>
 80003fe:	b902      	cbnz	r2, 8000402 <__udivmoddi4+0xe6>
 8000400:	deff      	udf	#255	; 0xff
 8000402:	fab2 f382 	clz	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x210>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	2101      	movs	r1, #1
 8000418:	fbb2 f5f7 	udiv	r5, r2, r7
 800041c:	fb07 2015 	mls	r0, r7, r5, r2
 8000420:	0c22      	lsrs	r2, r4, #16
 8000422:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000426:	fb0e f005 	mul.w	r0, lr, r5
 800042a:	4290      	cmp	r0, r2
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x124>
 800042e:	eb1c 0202 	adds.w	r2, ip, r2
 8000432:	f105 38ff 	add.w	r8, r5, #4294967295
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4290      	cmp	r0, r2
 800043a:	f200 80cb 	bhi.w	80005d4 <__udivmoddi4+0x2b8>
 800043e:	4645      	mov	r5, r8
 8000440:	1a12      	subs	r2, r2, r0
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb2 f0f7 	udiv	r0, r2, r7
 8000448:	fb07 2210 	mls	r2, r7, r0, r2
 800044c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000450:	fb0e fe00 	mul.w	lr, lr, r0
 8000454:	45a6      	cmp	lr, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x14e>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x14c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f200 80bb 	bhi.w	80005de <__udivmoddi4+0x2c2>
 8000468:	4610      	mov	r0, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x98>
 8000474:	f1c1 0720 	rsb	r7, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 fc07 	lsr.w	ip, r2, r7
 800047e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000482:	fa05 f401 	lsl.w	r4, r5, r1
 8000486:	fa20 f307 	lsr.w	r3, r0, r7
 800048a:	40fd      	lsrs	r5, r7
 800048c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000490:	4323      	orrs	r3, r4
 8000492:	fbb5 f8f9 	udiv	r8, r5, r9
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fb09 5518 	mls	r5, r9, r8, r5
 800049e:	0c1c      	lsrs	r4, r3, #16
 80004a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a4:	fb08 f50e 	mul.w	r5, r8, lr
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	fa00 f001 	lsl.w	r0, r0, r1
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004bc:	f080 8088 	bcs.w	80005d0 <__udivmoddi4+0x2b4>
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	f240 8085 	bls.w	80005d0 <__udivmoddi4+0x2b4>
 80004c6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ca:	4464      	add	r4, ip
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	b29d      	uxth	r5, r3
 80004d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d4:	fb09 4413 	mls	r4, r9, r3, r4
 80004d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80004ec:	d26c      	bcs.n	80005c8 <__udivmoddi4+0x2ac>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	d96a      	bls.n	80005c8 <__udivmoddi4+0x2ac>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fa:	fba3 9502 	umull	r9, r5, r3, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	42ac      	cmp	r4, r5
 8000504:	46c8      	mov	r8, r9
 8000506:	46ae      	mov	lr, r5
 8000508:	d356      	bcc.n	80005b8 <__udivmoddi4+0x29c>
 800050a:	d053      	beq.n	80005b4 <__udivmoddi4+0x298>
 800050c:	b156      	cbz	r6, 8000524 <__udivmoddi4+0x208>
 800050e:	ebb0 0208 	subs.w	r2, r0, r8
 8000512:	eb64 040e 	sbc.w	r4, r4, lr
 8000516:	fa04 f707 	lsl.w	r7, r4, r7
 800051a:	40ca      	lsrs	r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	4317      	orrs	r7, r2
 8000520:	e9c6 7400 	strd	r7, r4, [r6]
 8000524:	4618      	mov	r0, r3
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	f1c3 0120 	rsb	r1, r3, #32
 8000530:	fa02 fc03 	lsl.w	ip, r2, r3
 8000534:	fa20 f201 	lsr.w	r2, r0, r1
 8000538:	fa25 f101 	lsr.w	r1, r5, r1
 800053c:	409d      	lsls	r5, r3
 800053e:	432a      	orrs	r2, r5
 8000540:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fbb1 f0f7 	udiv	r0, r1, r7
 800054c:	fb07 1510 	mls	r5, r7, r0, r1
 8000550:	0c11      	lsrs	r1, r2, #16
 8000552:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000556:	fb00 f50e 	mul.w	r5, r0, lr
 800055a:	428d      	cmp	r5, r1
 800055c:	fa04 f403 	lsl.w	r4, r4, r3
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x258>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f100 38ff 	add.w	r8, r0, #4294967295
 800056a:	d22f      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800056c:	428d      	cmp	r5, r1
 800056e:	d92d      	bls.n	80005cc <__udivmoddi4+0x2b0>
 8000570:	3802      	subs	r0, #2
 8000572:	4461      	add	r1, ip
 8000574:	1b49      	subs	r1, r1, r5
 8000576:	b292      	uxth	r2, r2
 8000578:	fbb1 f5f7 	udiv	r5, r1, r7
 800057c:	fb07 1115 	mls	r1, r7, r5, r1
 8000580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000584:	fb05 f10e 	mul.w	r1, r5, lr
 8000588:	4291      	cmp	r1, r2
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x282>
 800058c:	eb1c 0202 	adds.w	r2, ip, r2
 8000590:	f105 38ff 	add.w	r8, r5, #4294967295
 8000594:	d216      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000596:	4291      	cmp	r1, r2
 8000598:	d914      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	1a52      	subs	r2, r2, r1
 80005a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a4:	e738      	b.n	8000418 <__udivmoddi4+0xfc>
 80005a6:	4631      	mov	r1, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e708      	b.n	80003be <__udivmoddi4+0xa2>
 80005ac:	4639      	mov	r1, r7
 80005ae:	e6e6      	b.n	800037e <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x90>
 80005b4:	4548      	cmp	r0, r9
 80005b6:	d2a9      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b8:	ebb9 0802 	subs.w	r8, r9, r2
 80005bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c0:	3b01      	subs	r3, #1
 80005c2:	e7a3      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c4:	4645      	mov	r5, r8
 80005c6:	e7ea      	b.n	800059e <__udivmoddi4+0x282>
 80005c8:	462b      	mov	r3, r5
 80005ca:	e794      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005cc:	4640      	mov	r0, r8
 80005ce:	e7d1      	b.n	8000574 <__udivmoddi4+0x258>
 80005d0:	46d0      	mov	r8, sl
 80005d2:	e77b      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d4:	3d02      	subs	r5, #2
 80005d6:	4462      	add	r2, ip
 80005d8:	e732      	b.n	8000440 <__udivmoddi4+0x124>
 80005da:	4608      	mov	r0, r1
 80005dc:	e70a      	b.n	80003f4 <__udivmoddi4+0xd8>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	e742      	b.n	800046a <__udivmoddi4+0x14e>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	; 0x28
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  // Buffer to receive messages
  uint8_t buffer[2] = {0};
 80005ee:	2300      	movs	r3, #0
 80005f0:	83bb      	strh	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fba7 	bl	8000d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f86b 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f933 	bl	8000864 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005fe:	f000 f8dd 	bl	80007bc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000602:	f000 f927 	bl	8000854 <MX_USB_OTG_HS_USB_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Wait for and receive 2 bytes UART data.
	uart_status = HAL_UART_Receive(&huart3, buffer, 2, 5000);
 8000606:	f107 011c 	add.w	r1, r7, #28
 800060a:	f241 3388 	movw	r3, #5000	; 0x1388
 800060e:	2202      	movs	r2, #2
 8000610:	482b      	ldr	r0, [pc, #172]	; (80006c0 <main+0xd8>)
 8000612:	f003 fd1f 	bl	8004054 <HAL_UART_Receive>
 8000616:	4603      	mov	r3, r0
 8000618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// Successfully received 2 bytes.
	if ( uart_status == HAL_OK )
 800061c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000620:	2b00      	cmp	r3, #0
 8000622:	d142      	bne.n	80006aa <main+0xc2>
	{

		// Set yellow led to signal data transaction to the user.
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2102      	movs	r1, #2
 8000628:	4826      	ldr	r0, [pc, #152]	; (80006c4 <main+0xdc>)
 800062a:	f000 feb1 	bl	8001390 <HAL_GPIO_WritePin>

		// Allocate space for the decoded message.
		ChangeLedStateMsg message = ChangeLedStateMsg_init_zero;
 800062e:	2300      	movs	r3, #0
 8000630:	753b      	strb	r3, [r7, #20]
 8000632:	2300      	movs	r3, #0
 8000634:	61bb      	str	r3, [r7, #24]

		//Create a stream that reads from the buffer.
		pb_istream_t stream = pb_istream_from_buffer(buffer, LED_STATE_MSG_LENGTH);
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	f107 011c 	add.w	r1, r7, #28
 800063c:	2202      	movs	r2, #2
 800063e:	4618      	mov	r0, r3
 8000640:	f005 fada 	bl	8005bf8 <pb_istream_from_buffer>

		//Now we are ready to decode the message.
		pb_decode_status = pb_decode(&stream, ChangeLedStateMsg_fields, &message);
 8000644:	f107 0214 	add.w	r2, r7, #20
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	491f      	ldr	r1, [pc, #124]	; (80006c8 <main+0xe0>)
 800064c:	4618      	mov	r0, r3
 800064e:	f006 fc0d 	bl	8006e6c <pb_decode>
 8000652:	4603      	mov	r3, r0
 8000654:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		// Check for errors
		if ( !pb_decode_status )
 8000658:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800065c:	f083 0301 	eor.w	r3, r3, #1
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d007      	beq.n	8000676 <main+0x8e>
		{
			// Unused, only for debugging
			char *errorMessage = stream.errmsg;
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	623b      	str	r3, [r7, #32]

			// Set red led to signal error to the user
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000670:	4816      	ldr	r0, [pc, #88]	; (80006cc <main+0xe4>)
 8000672:	f000 fe8d 	bl	8001390 <HAL_GPIO_WritePin>
		}

		/* Change led state based on protobuf message */
		if ( message.has_led_state )
 8000676:	7d3b      	ldrb	r3, [r7, #20]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d010      	beq.n	800069e <main+0xb6>
		{
			if ( message.led_state == 1 )
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d105      	bne.n	800068e <main+0xa6>
			{
				// Set green led
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	2101      	movs	r1, #1
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <main+0xe4>)
 8000688:	f000 fe82 	bl	8001390 <HAL_GPIO_WritePin>
 800068c:	e007      	b.n	800069e <main+0xb6>
			}
			else if ( message.led_state == 0 )
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d104      	bne.n	800069e <main+0xb6>
			{
				// Reset green led
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2101      	movs	r1, #1
 8000698:	480c      	ldr	r0, [pc, #48]	; (80006cc <main+0xe4>)
 800069a:	f000 fe79 	bl	8001390 <HAL_GPIO_WritePin>
			}
		}

		// Reset yellow led
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2102      	movs	r1, #2
 80006a2:	4808      	ldr	r0, [pc, #32]	; (80006c4 <main+0xdc>)
 80006a4:	f000 fe74 	bl	8001390 <HAL_GPIO_WritePin>
 80006a8:	e7ad      	b.n	8000606 <main+0x1e>

	}
	else if ( uart_status == HAL_ERROR )
 80006aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d1a9      	bne.n	8000606 <main+0x1e>
	{
		// Set red led to signal error to the user
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <main+0xe4>)
 80006ba:	f000 fe69 	bl	8001390 <HAL_GPIO_WritePin>
	uart_status = HAL_UART_Receive(&huart3, buffer, 2, 5000);
 80006be:	e7a2      	b.n	8000606 <main+0x1e>
 80006c0:	2400002c 	.word	0x2400002c
 80006c4:	58021000 	.word	0x58021000
 80006c8:	08007870 	.word	0x08007870
 80006cc:	58020400 	.word	0x58020400

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09c      	sub	sp, #112	; 0x70
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006da:	224c      	movs	r2, #76	; 0x4c
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f006 ff7e 	bl	80075e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2220      	movs	r2, #32
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 ff78 	bl	80075e0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006f0:	4b30      	ldr	r3, [pc, #192]	; (80007b4 <SystemClock_Config+0xe4>)
 80006f2:	f04f 32ff 	mov.w	r2, #4294967295
 80006f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006fa:	2004      	movs	r0, #4
 80006fc:	f000 fe62 	bl	80013c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <SystemClock_Config+0xe8>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a2b      	ldr	r2, [pc, #172]	; (80007b8 <SystemClock_Config+0xe8>)
 800070a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <SystemClock_Config+0xe8>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800071c:	bf00      	nop
 800071e:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <SystemClock_Config+0xe8>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800072a:	d1f8      	bne.n	800071e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800072c:	2321      	movs	r3, #33	; 0x21
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000730:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000736:	2301      	movs	r3, #1
 8000738:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	2302      	movs	r3, #2
 8000740:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000742:	2301      	movs	r3, #1
 8000744:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000746:	2318      	movs	r3, #24
 8000748:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800074a:	2302      	movs	r3, #2
 800074c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800074e:	2304      	movs	r3, #4
 8000750:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000756:	230c      	movs	r3, #12
 8000758:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075a:	2300      	movs	r3, #0
 800075c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fe86 	bl	8001478 <HAL_RCC_OscConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000772:	f000 f991 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000776:	233f      	movs	r3, #63	; 0x3f
 8000778:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	2303      	movs	r3, #3
 800077c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2102      	movs	r1, #2
 800079a:	4618      	mov	r0, r3
 800079c:	f001 fa9e 	bl	8001cdc <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xda>
  {
    Error_Handler();
 80007a6:	f000 f977 	bl	8000a98 <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3770      	adds	r7, #112	; 0x70
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	58024400 	.word	0x58024400
 80007b8:	58024800 	.word	0x58024800

080007bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <MX_USART3_UART_Init+0x90>)
 80007c2:	4a23      	ldr	r2, [pc, #140]	; (8000850 <MX_USART3_UART_Init+0x94>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <MX_USART3_UART_Init+0x90>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_USART3_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b1d      	ldr	r3, [pc, #116]	; (800084c <MX_USART3_UART_Init+0x90>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_USART3_UART_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_USART3_UART_Init+0x90>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_USART3_UART_Init+0x90>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_USART3_UART_Init+0x90>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_USART3_UART_Init+0x90>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_USART3_UART_Init+0x90>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_USART3_UART_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000804:	4811      	ldr	r0, [pc, #68]	; (800084c <MX_USART3_UART_Init+0x90>)
 8000806:	f003 fbd5 	bl	8003fb4 <HAL_UART_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000810:	f000 f942 	bl	8000a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000814:	2100      	movs	r1, #0
 8000816:	480d      	ldr	r0, [pc, #52]	; (800084c <MX_USART3_UART_Init+0x90>)
 8000818:	f004 fda3 	bl	8005362 <HAL_UARTEx_SetTxFifoThreshold>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000822:	f000 f939 	bl	8000a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000826:	2100      	movs	r1, #0
 8000828:	4808      	ldr	r0, [pc, #32]	; (800084c <MX_USART3_UART_Init+0x90>)
 800082a:	f004 fdd8 	bl	80053de <HAL_UARTEx_SetRxFifoThreshold>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000834:	f000 f930 	bl	8000a98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_USART3_UART_Init+0x90>)
 800083a:	f004 fd59 	bl	80052f0 <HAL_UARTEx_DisableFifoMode>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000844:	f000 f928 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2400002c 	.word	0x2400002c
 8000850:	40004800 	.word	0x40004800

08000854 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
	...

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08e      	sub	sp, #56	; 0x38
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b80      	ldr	r3, [pc, #512]	; (8000a7c <MX_GPIO_Init+0x218>)
 800087c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000880:	4a7e      	ldr	r2, [pc, #504]	; (8000a7c <MX_GPIO_Init+0x218>)
 8000882:	f043 0304 	orr.w	r3, r3, #4
 8000886:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800088a:	4b7c      	ldr	r3, [pc, #496]	; (8000a7c <MX_GPIO_Init+0x218>)
 800088c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	623b      	str	r3, [r7, #32]
 8000896:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000898:	4b78      	ldr	r3, [pc, #480]	; (8000a7c <MX_GPIO_Init+0x218>)
 800089a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089e:	4a77      	ldr	r2, [pc, #476]	; (8000a7c <MX_GPIO_Init+0x218>)
 80008a0:	f043 0320 	orr.w	r3, r3, #32
 80008a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008a8:	4b74      	ldr	r3, [pc, #464]	; (8000a7c <MX_GPIO_Init+0x218>)
 80008aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ae:	f003 0320 	and.w	r3, r3, #32
 80008b2:	61fb      	str	r3, [r7, #28]
 80008b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	4b71      	ldr	r3, [pc, #452]	; (8000a7c <MX_GPIO_Init+0x218>)
 80008b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008bc:	4a6f      	ldr	r2, [pc, #444]	; (8000a7c <MX_GPIO_Init+0x218>)
 80008be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008c6:	4b6d      	ldr	r3, [pc, #436]	; (8000a7c <MX_GPIO_Init+0x218>)
 80008c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d0:	61bb      	str	r3, [r7, #24]
 80008d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d4:	4b69      	ldr	r3, [pc, #420]	; (8000a7c <MX_GPIO_Init+0x218>)
 80008d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008da:	4a68      	ldr	r2, [pc, #416]	; (8000a7c <MX_GPIO_Init+0x218>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008e4:	4b65      	ldr	r3, [pc, #404]	; (8000a7c <MX_GPIO_Init+0x218>)
 80008e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	4b62      	ldr	r3, [pc, #392]	; (8000a7c <MX_GPIO_Init+0x218>)
 80008f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f8:	4a60      	ldr	r2, [pc, #384]	; (8000a7c <MX_GPIO_Init+0x218>)
 80008fa:	f043 0308 	orr.w	r3, r3, #8
 80008fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000902:	4b5e      	ldr	r3, [pc, #376]	; (8000a7c <MX_GPIO_Init+0x218>)
 8000904:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000908:	f003 0308 	and.w	r3, r3, #8
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000910:	4b5a      	ldr	r3, [pc, #360]	; (8000a7c <MX_GPIO_Init+0x218>)
 8000912:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000916:	4a59      	ldr	r2, [pc, #356]	; (8000a7c <MX_GPIO_Init+0x218>)
 8000918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000920:	4b56      	ldr	r3, [pc, #344]	; (8000a7c <MX_GPIO_Init+0x218>)
 8000922:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b53      	ldr	r3, [pc, #332]	; (8000a7c <MX_GPIO_Init+0x218>)
 8000930:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000934:	4a51      	ldr	r2, [pc, #324]	; (8000a7c <MX_GPIO_Init+0x218>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800093e:	4b4f      	ldr	r3, [pc, #316]	; (8000a7c <MX_GPIO_Init+0x218>)
 8000940:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094c:	4b4b      	ldr	r3, [pc, #300]	; (8000a7c <MX_GPIO_Init+0x218>)
 800094e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000952:	4a4a      	ldr	r2, [pc, #296]	; (8000a7c <MX_GPIO_Init+0x218>)
 8000954:	f043 0310 	orr.w	r3, r3, #16
 8000958:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800095c:	4b47      	ldr	r3, [pc, #284]	; (8000a7c <MX_GPIO_Init+0x218>)
 800095e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000962:	f003 0310 	and.w	r3, r3, #16
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000970:	4843      	ldr	r0, [pc, #268]	; (8000a80 <MX_GPIO_Init+0x21c>)
 8000972:	f000 fd0d 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f244 0101 	movw	r1, #16385	; 0x4001
 800097c:	4841      	ldr	r0, [pc, #260]	; (8000a84 <MX_GPIO_Init+0x220>)
 800097e:	f000 fd07 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2102      	movs	r1, #2
 8000986:	4840      	ldr	r0, [pc, #256]	; (8000a88 <MX_GPIO_Init+0x224>)
 8000988:	f000 fd02 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099e:	4619      	mov	r1, r3
 80009a0:	483a      	ldr	r0, [pc, #232]	; (8000a8c <MX_GPIO_Init+0x228>)
 80009a2:	f000 fb45 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80009a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	4830      	ldr	r0, [pc, #192]	; (8000a80 <MX_GPIO_Init+0x21c>)
 80009c0:	f000 fb36 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009c4:	f244 0301 	movw	r3, #16385	; 0x4001
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009da:	4619      	mov	r1, r3
 80009dc:	4829      	ldr	r0, [pc, #164]	; (8000a84 <MX_GPIO_Init+0x220>)
 80009de:	f000 fb27 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009e2:	2380      	movs	r3, #128	; 0x80
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f4:	4619      	mov	r1, r3
 80009f6:	4826      	ldr	r0, [pc, #152]	; (8000a90 <MX_GPIO_Init+0x22c>)
 80009f8:	f000 fb1a 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4820      	ldr	r0, [pc, #128]	; (8000a94 <MX_GPIO_Init+0x230>)
 8000a12:	f000 fb0d 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a28:	230a      	movs	r3, #10
 8000a2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4818      	ldr	r0, [pc, #96]	; (8000a94 <MX_GPIO_Init+0x230>)
 8000a34:	f000 fafc 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000a38:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4810      	ldr	r0, [pc, #64]	; (8000a94 <MX_GPIO_Init+0x230>)
 8000a52:	f000 faed 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a56:	2302      	movs	r3, #2
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4806      	ldr	r0, [pc, #24]	; (8000a88 <MX_GPIO_Init+0x224>)
 8000a6e:	f000 fadf 	bl	8001030 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a72:	bf00      	nop
 8000a74:	3738      	adds	r7, #56	; 0x38
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	58024400 	.word	0x58024400
 8000a80:	58021400 	.word	0x58021400
 8000a84:	58020400 	.word	0x58020400
 8000a88:	58021000 	.word	0x58021000
 8000a8c:	58020800 	.word	0x58020800
 8000a90:	58021800 	.word	0x58021800
 8000a94:	58020000 	.word	0x58020000

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <Error_Handler+0x8>
	...

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <HAL_MspInit+0x30>)
 8000aac:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ab0:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_MspInit+0x30>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_MspInit+0x30>)
 8000abc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ac0:	f003 0302 	and.w	r3, r3, #2
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	58024400 	.word	0x58024400

08000ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b0ba      	sub	sp, #232	; 0xe8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	22c0      	movs	r2, #192	; 0xc0
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f006 fd71 	bl	80075e0 <memset>
  if(huart->Instance==USART3)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a27      	ldr	r2, [pc, #156]	; (8000ba0 <HAL_UART_MspInit+0xc8>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d146      	bne.n	8000b96 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b08:	f04f 0202 	mov.w	r2, #2
 8000b0c:	f04f 0300 	mov.w	r3, #0
 8000b10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 fc68 	bl	80023f4 <HAL_RCCEx_PeriphCLKConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b2a:	f7ff ffb5 	bl	8000a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <HAL_UART_MspInit+0xcc>)
 8000b30:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b34:	4a1b      	ldr	r2, [pc, #108]	; (8000ba4 <HAL_UART_MspInit+0xcc>)
 8000b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b3a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <HAL_UART_MspInit+0xcc>)
 8000b40:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_UART_MspInit+0xcc>)
 8000b4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b52:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <HAL_UART_MspInit+0xcc>)
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_UART_MspInit+0xcc>)
 8000b5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b84:	2307      	movs	r3, #7
 8000b86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <HAL_UART_MspInit+0xd0>)
 8000b92:	f000 fa4d 	bl	8001030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	37e8      	adds	r7, #232	; 0xe8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40004800 	.word	0x40004800
 8000ba4:	58024400 	.word	0x58024400
 8000ba8:	58020c00 	.word	0x58020c00

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf8:	f000 f916 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c04:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <SystemInit+0xd0>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a31      	ldr	r2, [pc, #196]	; (8000cd0 <SystemInit+0xd0>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <SystemInit+0xd4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 030f 	and.w	r3, r3, #15
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d807      	bhi.n	8000c30 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <SystemInit+0xd4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f023 030f 	bic.w	r3, r3, #15
 8000c28:	4a2a      	ldr	r2, [pc, #168]	; (8000cd4 <SystemInit+0xd4>)
 8000c2a:	f043 0303 	orr.w	r3, r3, #3
 8000c2e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c30:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <SystemInit+0xd8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a28      	ldr	r2, [pc, #160]	; (8000cd8 <SystemInit+0xd8>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <SystemInit+0xd8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c42:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <SystemInit+0xd8>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4924      	ldr	r1, [pc, #144]	; (8000cd8 <SystemInit+0xd8>)
 8000c48:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <SystemInit+0xdc>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <SystemInit+0xd4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 030c 	and.w	r3, r3, #12
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d007      	beq.n	8000c6a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <SystemInit+0xd4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f023 030f 	bic.w	r3, r3, #15
 8000c62:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <SystemInit+0xd4>)
 8000c64:	f043 0303 	orr.w	r3, r3, #3
 8000c68:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <SystemInit+0xd8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <SystemInit+0xd8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <SystemInit+0xd8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <SystemInit+0xd8>)
 8000c7e:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <SystemInit+0xe0>)
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <SystemInit+0xd8>)
 8000c84:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <SystemInit+0xe4>)
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <SystemInit+0xd8>)
 8000c8a:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <SystemInit+0xe8>)
 8000c8c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <SystemInit+0xd8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <SystemInit+0xd8>)
 8000c96:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <SystemInit+0xe8>)
 8000c98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <SystemInit+0xd8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <SystemInit+0xd8>)
 8000ca2:	4a11      	ldr	r2, [pc, #68]	; (8000ce8 <SystemInit+0xe8>)
 8000ca4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <SystemInit+0xd8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <SystemInit+0xd8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a09      	ldr	r2, [pc, #36]	; (8000cd8 <SystemInit+0xd8>)
 8000cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cb6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <SystemInit+0xd8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <SystemInit+0xec>)
 8000cc0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000cc4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00
 8000cd4:	52002000 	.word	0x52002000
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ce0:	02020200 	.word	0x02020200
 8000ce4:	01ff0000 	.word	0x01ff0000
 8000ce8:	01010280 	.word	0x01010280
 8000cec:	52004000 	.word	0x52004000

08000cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cf4:	f7ff ff84 	bl	8000c00 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cfa:	490d      	ldr	r1, [pc, #52]	; (8000d30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d10:	4c0a      	ldr	r4, [pc, #40]	; (8000d3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d1e:	f006 fc67 	bl	80075f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d22:	f7ff fc61 	bl	80005e8 <main>
  bx  lr
 8000d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d28:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000d2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d30:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000d34:	08007898 	.word	0x08007898
  ldr r2, =_sbss
 8000d38:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000d3c:	240000c4 	.word	0x240000c4

08000d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC_IRQHandler>
	...

08000d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	f000 f93e 	bl	8000fcc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000d50:	f001 f97a 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8000d54:	4602      	mov	r2, r0
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_Init+0x68>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	0a1b      	lsrs	r3, r3, #8
 8000d5c:	f003 030f 	and.w	r3, r3, #15
 8000d60:	4913      	ldr	r1, [pc, #76]	; (8000db0 <HAL_Init+0x6c>)
 8000d62:	5ccb      	ldrb	r3, [r1, r3]
 8000d64:	f003 031f 	and.w	r3, r3, #31
 8000d68:	fa22 f303 	lsr.w	r3, r2, r3
 8000d6c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <HAL_Init+0x68>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <HAL_Init+0x6c>)
 8000d78:	5cd3      	ldrb	r3, [r2, r3]
 8000d7a:	f003 031f 	and.w	r3, r3, #31
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	fa22 f303 	lsr.w	r3, r2, r3
 8000d84:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <HAL_Init+0x70>)
 8000d86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d88:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <HAL_Init+0x74>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f000 f814 	bl	8000dbc <HAL_InitTick>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e002      	b.n	8000da4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9e:	f7ff fe81 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	58024400 	.word	0x58024400
 8000db0:	0800782c 	.word	0x0800782c
 8000db4:	24000004 	.word	0x24000004
 8000db8:	24000000 	.word	0x24000000

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_InitTick+0x60>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e021      	b.n	8000e14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <HAL_InitTick+0x64>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_InitTick+0x60>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f915 	bl	8001016 <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 f8ed 	bl	8000fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_InitTick+0x68>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2400000c 	.word	0x2400000c
 8000e20:	24000000 	.word	0x24000000
 8000e24:	24000008 	.word	0x24000008

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	2400000c 	.word	0x2400000c
 8000e4c:	240000c0 	.word	0x240000c0

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	240000c0 	.word	0x240000c0

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	4313      	orrs	r3, r2
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00
 8000eac:	05fa0000 	.word	0x05fa0000

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db0a      	blt.n	8000ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	490c      	ldr	r1, [pc, #48]	; (8000f18 <__NVIC_SetPriority+0x4c>)
 8000ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eea:	0112      	lsls	r2, r2, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef4:	e00a      	b.n	8000f0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	; (8000f1c <__NVIC_SetPriority+0x50>)
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	3b04      	subs	r3, #4
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2304      	movcs	r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2b06      	cmp	r3, #6
 8000f48:	d902      	bls.n	8000f50 <NVIC_EncodePriority+0x30>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	e000      	b.n	8000f52 <NVIC_EncodePriority+0x32>
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4313      	orrs	r3, r2
         );
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f98:	d301      	bcc.n	8000f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00f      	b.n	8000fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <SysTick_Config+0x40>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f7ff ff8e 	bl	8000ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb8:	2207      	movs	r2, #7
 8000fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	e000e010 	.word	0xe000e010

08000fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff47 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff0:	f7ff ff5e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff90 	bl	8000f20 <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff5f 	bl	8000ecc <__NVIC_SetPriority>
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffb2 	bl	8000f88 <SysTick_Config>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800103e:	4b89      	ldr	r3, [pc, #548]	; (8001264 <HAL_GPIO_Init+0x234>)
 8001040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001042:	e194      	b.n	800136e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	2101      	movs	r1, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 8186 	beq.w	8001368 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b01      	cmp	r3, #1
 8001066:	d005      	beq.n	8001074 <HAL_GPIO_Init+0x44>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d130      	bne.n	80010d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010aa:	2201      	movs	r2, #1
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	091b      	lsrs	r3, r3, #4
 80010c0:	f003 0201 	and.w	r2, r3, #1
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d017      	beq.n	8001112 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d123      	bne.n	8001166 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	08da      	lsrs	r2, r3, #3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3208      	adds	r2, #8
 8001126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	220f      	movs	r2, #15
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	691a      	ldr	r2, [r3, #16]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	08da      	lsrs	r2, r3, #3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3208      	adds	r2, #8
 8001160:	69b9      	ldr	r1, [r7, #24]
 8001162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0203 	and.w	r2, r3, #3
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80e0 	beq.w	8001368 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a8:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <HAL_GPIO_Init+0x238>)
 80011aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011ae:	4a2e      	ldr	r2, [pc, #184]	; (8001268 <HAL_GPIO_Init+0x238>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80011b8:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <HAL_GPIO_Init+0x238>)
 80011ba:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c6:	4a29      	ldr	r2, [pc, #164]	; (800126c <HAL_GPIO_Init+0x23c>)
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	3302      	adds	r3, #2
 80011ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a20      	ldr	r2, [pc, #128]	; (8001270 <HAL_GPIO_Init+0x240>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d052      	beq.n	8001298 <HAL_GPIO_Init+0x268>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a1f      	ldr	r2, [pc, #124]	; (8001274 <HAL_GPIO_Init+0x244>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d031      	beq.n	800125e <HAL_GPIO_Init+0x22e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a1e      	ldr	r2, [pc, #120]	; (8001278 <HAL_GPIO_Init+0x248>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d02b      	beq.n	800125a <HAL_GPIO_Init+0x22a>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a1d      	ldr	r2, [pc, #116]	; (800127c <HAL_GPIO_Init+0x24c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d025      	beq.n	8001256 <HAL_GPIO_Init+0x226>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <HAL_GPIO_Init+0x250>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d01f      	beq.n	8001252 <HAL_GPIO_Init+0x222>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <HAL_GPIO_Init+0x254>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d019      	beq.n	800124e <HAL_GPIO_Init+0x21e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a1a      	ldr	r2, [pc, #104]	; (8001288 <HAL_GPIO_Init+0x258>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d013      	beq.n	800124a <HAL_GPIO_Init+0x21a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a19      	ldr	r2, [pc, #100]	; (800128c <HAL_GPIO_Init+0x25c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d00d      	beq.n	8001246 <HAL_GPIO_Init+0x216>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a18      	ldr	r2, [pc, #96]	; (8001290 <HAL_GPIO_Init+0x260>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d007      	beq.n	8001242 <HAL_GPIO_Init+0x212>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a17      	ldr	r2, [pc, #92]	; (8001294 <HAL_GPIO_Init+0x264>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d101      	bne.n	800123e <HAL_GPIO_Init+0x20e>
 800123a:	2309      	movs	r3, #9
 800123c:	e02d      	b.n	800129a <HAL_GPIO_Init+0x26a>
 800123e:	230a      	movs	r3, #10
 8001240:	e02b      	b.n	800129a <HAL_GPIO_Init+0x26a>
 8001242:	2308      	movs	r3, #8
 8001244:	e029      	b.n	800129a <HAL_GPIO_Init+0x26a>
 8001246:	2307      	movs	r3, #7
 8001248:	e027      	b.n	800129a <HAL_GPIO_Init+0x26a>
 800124a:	2306      	movs	r3, #6
 800124c:	e025      	b.n	800129a <HAL_GPIO_Init+0x26a>
 800124e:	2305      	movs	r3, #5
 8001250:	e023      	b.n	800129a <HAL_GPIO_Init+0x26a>
 8001252:	2304      	movs	r3, #4
 8001254:	e021      	b.n	800129a <HAL_GPIO_Init+0x26a>
 8001256:	2303      	movs	r3, #3
 8001258:	e01f      	b.n	800129a <HAL_GPIO_Init+0x26a>
 800125a:	2302      	movs	r3, #2
 800125c:	e01d      	b.n	800129a <HAL_GPIO_Init+0x26a>
 800125e:	2301      	movs	r3, #1
 8001260:	e01b      	b.n	800129a <HAL_GPIO_Init+0x26a>
 8001262:	bf00      	nop
 8001264:	58000080 	.word	0x58000080
 8001268:	58024400 	.word	0x58024400
 800126c:	58000400 	.word	0x58000400
 8001270:	58020000 	.word	0x58020000
 8001274:	58020400 	.word	0x58020400
 8001278:	58020800 	.word	0x58020800
 800127c:	58020c00 	.word	0x58020c00
 8001280:	58021000 	.word	0x58021000
 8001284:	58021400 	.word	0x58021400
 8001288:	58021800 	.word	0x58021800
 800128c:	58021c00 	.word	0x58021c00
 8001290:	58022000 	.word	0x58022000
 8001294:	58022400 	.word	0x58022400
 8001298:	2300      	movs	r3, #0
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	f002 0203 	and.w	r2, r2, #3
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	4093      	lsls	r3, r2
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012aa:	4938      	ldr	r1, [pc, #224]	; (800138c <HAL_GPIO_Init+0x35c>)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80012de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800130c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	3301      	adds	r3, #1
 800136c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa22 f303 	lsr.w	r3, r2, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	f47f ae63 	bne.w	8001044 <HAL_GPIO_Init+0x14>
  }
}
 800137e:	bf00      	nop
 8001380:	bf00      	nop
 8001382:	3724      	adds	r7, #36	; 0x24
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	58000400 	.word	0x58000400

08001390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
 800139c:	4613      	mov	r3, r2
 800139e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a0:	787b      	ldrb	r3, [r7, #1]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80013ac:	e003      	b.n	80013b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013ae:	887b      	ldrh	r3, [r7, #2]
 80013b0:	041a      	lsls	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	619a      	str	r2, [r3, #24]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80013cc:	4b29      	ldr	r3, [pc, #164]	; (8001474 <HAL_PWREx_ConfigSupply+0xb0>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	2b06      	cmp	r3, #6
 80013d6:	d00a      	beq.n	80013ee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80013d8:	4b26      	ldr	r3, [pc, #152]	; (8001474 <HAL_PWREx_ConfigSupply+0xb0>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d001      	beq.n	80013ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e040      	b.n	800146c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	e03e      	b.n	800146c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <HAL_PWREx_ConfigSupply+0xb0>)
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80013f6:	491f      	ldr	r1, [pc, #124]	; (8001474 <HAL_PWREx_ConfigSupply+0xb0>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80013fe:	f7ff fd27 	bl	8000e50 <HAL_GetTick>
 8001402:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001404:	e009      	b.n	800141a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001406:	f7ff fd23 	bl	8000e50 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001414:	d901      	bls.n	800141a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e028      	b.n	800146c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_PWREx_ConfigSupply+0xb0>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001426:	d1ee      	bne.n	8001406 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b1e      	cmp	r3, #30
 800142c:	d008      	beq.n	8001440 <HAL_PWREx_ConfigSupply+0x7c>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b2e      	cmp	r3, #46	; 0x2e
 8001432:	d005      	beq.n	8001440 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b1d      	cmp	r3, #29
 8001438:	d002      	beq.n	8001440 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b2d      	cmp	r3, #45	; 0x2d
 800143e:	d114      	bne.n	800146a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001440:	f7ff fd06 	bl	8000e50 <HAL_GetTick>
 8001444:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001446:	e009      	b.n	800145c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001448:	f7ff fd02 	bl	8000e50 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001456:	d901      	bls.n	800145c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e007      	b.n	800146c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_PWREx_ConfigSupply+0xb0>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001468:	d1ee      	bne.n	8001448 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	58024800 	.word	0x58024800

08001478 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	f000 bc1f 	b.w	8001cca <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80b3 	beq.w	8001600 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800149a:	4b95      	ldr	r3, [pc, #596]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014a4:	4b92      	ldr	r3, [pc, #584]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80014aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ac:	2b10      	cmp	r3, #16
 80014ae:	d007      	beq.n	80014c0 <HAL_RCC_OscConfig+0x48>
 80014b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b2:	2b18      	cmp	r3, #24
 80014b4:	d112      	bne.n	80014dc <HAL_RCC_OscConfig+0x64>
 80014b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d10d      	bne.n	80014dc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c0:	4b8b      	ldr	r3, [pc, #556]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 8098 	beq.w	80015fe <HAL_RCC_OscConfig+0x186>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f040 8093 	bne.w	80015fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e3f6      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e4:	d106      	bne.n	80014f4 <HAL_RCC_OscConfig+0x7c>
 80014e6:	4b82      	ldr	r3, [pc, #520]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a81      	ldr	r2, [pc, #516]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 80014ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e058      	b.n	80015a6 <HAL_RCC_OscConfig+0x12e>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d112      	bne.n	8001522 <HAL_RCC_OscConfig+0xaa>
 80014fc:	4b7c      	ldr	r3, [pc, #496]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a7b      	ldr	r2, [pc, #492]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 8001502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b79      	ldr	r3, [pc, #484]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a78      	ldr	r2, [pc, #480]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 800150e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b76      	ldr	r3, [pc, #472]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a75      	ldr	r2, [pc, #468]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 800151a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	e041      	b.n	80015a6 <HAL_RCC_OscConfig+0x12e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800152a:	d112      	bne.n	8001552 <HAL_RCC_OscConfig+0xda>
 800152c:	4b70      	ldr	r3, [pc, #448]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a6f      	ldr	r2, [pc, #444]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 8001532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b6d      	ldr	r3, [pc, #436]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a6c      	ldr	r2, [pc, #432]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 800153e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b6a      	ldr	r3, [pc, #424]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a69      	ldr	r2, [pc, #420]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 800154a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	e029      	b.n	80015a6 <HAL_RCC_OscConfig+0x12e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800155a:	d112      	bne.n	8001582 <HAL_RCC_OscConfig+0x10a>
 800155c:	4b64      	ldr	r3, [pc, #400]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a63      	ldr	r2, [pc, #396]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 8001562:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b61      	ldr	r3, [pc, #388]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a60      	ldr	r2, [pc, #384]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 800156e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b5e      	ldr	r3, [pc, #376]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a5d      	ldr	r2, [pc, #372]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 800157a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	e011      	b.n	80015a6 <HAL_RCC_OscConfig+0x12e>
 8001582:	4b5b      	ldr	r3, [pc, #364]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a5a      	ldr	r2, [pc, #360]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 8001588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b58      	ldr	r3, [pc, #352]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a57      	ldr	r2, [pc, #348]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 8001594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4b55      	ldr	r3, [pc, #340]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a54      	ldr	r2, [pc, #336]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 80015a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d013      	beq.n	80015d6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ae:	f7ff fc4f 	bl	8000e50 <HAL_GetTick>
 80015b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b6:	f7ff fc4b 	bl	8000e50 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b64      	cmp	r3, #100	; 0x64
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e380      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015c8:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x13e>
 80015d4:	e014      	b.n	8001600 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d6:	f7ff fc3b 	bl	8000e50 <HAL_GetTick>
 80015da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015de:	f7ff fc37 	bl	8000e50 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b64      	cmp	r3, #100	; 0x64
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e36c      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015f0:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1f0      	bne.n	80015de <HAL_RCC_OscConfig+0x166>
 80015fc:	e000      	b.n	8001600 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 808c 	beq.w	8001726 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800160e:	4b38      	ldr	r3, [pc, #224]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001616:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001618:	4b35      	ldr	r3, [pc, #212]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d007      	beq.n	8001634 <HAL_RCC_OscConfig+0x1bc>
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	2b18      	cmp	r3, #24
 8001628:	d137      	bne.n	800169a <HAL_RCC_OscConfig+0x222>
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b00      	cmp	r3, #0
 8001632:	d132      	bne.n	800169a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001634:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_OscConfig+0x1d4>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e33e      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800164c:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f023 0219 	bic.w	r2, r3, #25
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	4925      	ldr	r1, [pc, #148]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165e:	f7ff fbf7 	bl	8000e50 <HAL_GetTick>
 8001662:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001666:	f7ff fbf3 	bl	8000e50 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e328      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	061b      	lsls	r3, r3, #24
 8001692:	4917      	ldr	r1, [pc, #92]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001698:	e045      	b.n	8001726 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d028      	beq.n	80016f4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 0219 	bic.w	r2, r3, #25
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	4910      	ldr	r1, [pc, #64]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff fbcc 	bl	8000e50 <HAL_GetTick>
 80016b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016bc:	f7ff fbc8 	bl	8000e50 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e2fd      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	061b      	lsls	r3, r3, #24
 80016e8:	4901      	ldr	r1, [pc, #4]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	604b      	str	r3, [r1, #4]
 80016ee:	e01a      	b.n	8001726 <HAL_RCC_OscConfig+0x2ae>
 80016f0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f4:	4b97      	ldr	r3, [pc, #604]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a96      	ldr	r2, [pc, #600]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 80016fa:	f023 0301 	bic.w	r3, r3, #1
 80016fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fba6 	bl	8000e50 <HAL_GetTick>
 8001704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001708:	f7ff fba2 	bl	8000e50 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e2d7      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800171a:	4b8e      	ldr	r3, [pc, #568]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	2b00      	cmp	r3, #0
 8001730:	d06a      	beq.n	8001808 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001732:	4b88      	ldr	r3, [pc, #544]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800173a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800173c:	4b85      	ldr	r3, [pc, #532]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	2b08      	cmp	r3, #8
 8001746:	d007      	beq.n	8001758 <HAL_RCC_OscConfig+0x2e0>
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2b18      	cmp	r3, #24
 800174c:	d11b      	bne.n	8001786 <HAL_RCC_OscConfig+0x30e>
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d116      	bne.n	8001786 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001758:	4b7e      	ldr	r3, [pc, #504]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_OscConfig+0x2f8>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	2b80      	cmp	r3, #128	; 0x80
 800176a:	d001      	beq.n	8001770 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e2ac      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001770:	4b78      	ldr	r3, [pc, #480]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	061b      	lsls	r3, r3, #24
 800177e:	4975      	ldr	r1, [pc, #468]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 8001780:	4313      	orrs	r3, r2
 8001782:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001784:	e040      	b.n	8001808 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d023      	beq.n	80017d6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800178e:	4b71      	ldr	r3, [pc, #452]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a70      	ldr	r2, [pc, #448]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 8001794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179a:	f7ff fb59 	bl	8000e50 <HAL_GetTick>
 800179e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80017a2:	f7ff fb55 	bl	8000e50 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e28a      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017b4:	4b67      	ldr	r3, [pc, #412]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017c0:	4b64      	ldr	r3, [pc, #400]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	061b      	lsls	r3, r3, #24
 80017ce:	4961      	ldr	r1, [pc, #388]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60cb      	str	r3, [r1, #12]
 80017d4:	e018      	b.n	8001808 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80017d6:	4b5f      	ldr	r3, [pc, #380]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a5e      	ldr	r2, [pc, #376]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 80017dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e2:	f7ff fb35 	bl	8000e50 <HAL_GetTick>
 80017e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80017ea:	f7ff fb31 	bl	8000e50 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e266      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017fc:	4b55      	ldr	r3, [pc, #340]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f0      	bne.n	80017ea <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d036      	beq.n	8001882 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d019      	beq.n	8001850 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181c:	4b4d      	ldr	r3, [pc, #308]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 800181e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001820:	4a4c      	ldr	r2, [pc, #304]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001828:	f7ff fb12 	bl	8000e50 <HAL_GetTick>
 800182c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001830:	f7ff fb0e 	bl	8000e50 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e243      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001842:	4b44      	ldr	r3, [pc, #272]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 8001844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0x3b8>
 800184e:	e018      	b.n	8001882 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001850:	4b40      	ldr	r3, [pc, #256]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 8001852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001854:	4a3f      	ldr	r2, [pc, #252]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 8001856:	f023 0301 	bic.w	r3, r3, #1
 800185a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185c:	f7ff faf8 	bl	8000e50 <HAL_GetTick>
 8001860:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001864:	f7ff faf4 	bl	8000e50 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e229      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001876:	4b37      	ldr	r3, [pc, #220]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 8001878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0320 	and.w	r3, r3, #32
 800188a:	2b00      	cmp	r3, #0
 800188c:	d036      	beq.n	80018fc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d019      	beq.n	80018ca <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001896:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a2e      	ldr	r2, [pc, #184]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 800189c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018a2:	f7ff fad5 	bl	8000e50 <HAL_GetTick>
 80018a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018aa:	f7ff fad1 	bl	8000e50 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e206      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018bc:	4b25      	ldr	r3, [pc, #148]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x432>
 80018c8:	e018      	b.n	80018fc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018ca:	4b22      	ldr	r3, [pc, #136]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a21      	ldr	r2, [pc, #132]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 80018d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018d6:	f7ff fabb 	bl	8000e50 <HAL_GetTick>
 80018da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018de:	f7ff fab7 	bl	8000e50 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e1ec      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f0      	bne.n	80018de <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 80af 	beq.w	8001a68 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800190a:	4b13      	ldr	r3, [pc, #76]	; (8001958 <HAL_RCC_OscConfig+0x4e0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <HAL_RCC_OscConfig+0x4e0>)
 8001910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001914:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001916:	f7ff fa9b 	bl	8000e50 <HAL_GetTick>
 800191a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800191e:	f7ff fa97 	bl	8000e50 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b64      	cmp	r3, #100	; 0x64
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e1cc      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_RCC_OscConfig+0x4e0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d10b      	bne.n	800195c <HAL_RCC_OscConfig+0x4e4>
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001948:	4a02      	ldr	r2, [pc, #8]	; (8001954 <HAL_RCC_OscConfig+0x4dc>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6713      	str	r3, [r2, #112]	; 0x70
 8001950:	e05b      	b.n	8001a0a <HAL_RCC_OscConfig+0x592>
 8001952:	bf00      	nop
 8001954:	58024400 	.word	0x58024400
 8001958:	58024800 	.word	0x58024800
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d112      	bne.n	800198a <HAL_RCC_OscConfig+0x512>
 8001964:	4b9d      	ldr	r3, [pc, #628]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001968:	4a9c      	ldr	r2, [pc, #624]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	6713      	str	r3, [r2, #112]	; 0x70
 8001970:	4b9a      	ldr	r3, [pc, #616]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001974:	4a99      	ldr	r2, [pc, #612]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800197a:	6713      	str	r3, [r2, #112]	; 0x70
 800197c:	4b97      	ldr	r3, [pc, #604]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001980:	4a96      	ldr	r2, [pc, #600]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001982:	f023 0304 	bic.w	r3, r3, #4
 8001986:	6713      	str	r3, [r2, #112]	; 0x70
 8001988:	e03f      	b.n	8001a0a <HAL_RCC_OscConfig+0x592>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b05      	cmp	r3, #5
 8001990:	d112      	bne.n	80019b8 <HAL_RCC_OscConfig+0x540>
 8001992:	4b92      	ldr	r3, [pc, #584]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001996:	4a91      	ldr	r2, [pc, #580]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6713      	str	r3, [r2, #112]	; 0x70
 800199e:	4b8f      	ldr	r3, [pc, #572]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	4a8e      	ldr	r2, [pc, #568]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 80019a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019a8:	6713      	str	r3, [r2, #112]	; 0x70
 80019aa:	4b8c      	ldr	r3, [pc, #560]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 80019ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ae:	4a8b      	ldr	r2, [pc, #556]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6713      	str	r3, [r2, #112]	; 0x70
 80019b6:	e028      	b.n	8001a0a <HAL_RCC_OscConfig+0x592>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b85      	cmp	r3, #133	; 0x85
 80019be:	d112      	bne.n	80019e6 <HAL_RCC_OscConfig+0x56e>
 80019c0:	4b86      	ldr	r3, [pc, #536]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 80019c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c4:	4a85      	ldr	r2, [pc, #532]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6713      	str	r3, [r2, #112]	; 0x70
 80019cc:	4b83      	ldr	r3, [pc, #524]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 80019ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d0:	4a82      	ldr	r2, [pc, #520]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 80019d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d6:	6713      	str	r3, [r2, #112]	; 0x70
 80019d8:	4b80      	ldr	r3, [pc, #512]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 80019da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019dc:	4a7f      	ldr	r2, [pc, #508]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6713      	str	r3, [r2, #112]	; 0x70
 80019e4:	e011      	b.n	8001a0a <HAL_RCC_OscConfig+0x592>
 80019e6:	4b7d      	ldr	r3, [pc, #500]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ea:	4a7c      	ldr	r2, [pc, #496]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6713      	str	r3, [r2, #112]	; 0x70
 80019f2:	4b7a      	ldr	r3, [pc, #488]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 80019f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f6:	4a79      	ldr	r2, [pc, #484]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 80019f8:	f023 0304 	bic.w	r3, r3, #4
 80019fc:	6713      	str	r3, [r2, #112]	; 0x70
 80019fe:	4b77      	ldr	r3, [pc, #476]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a02:	4a76      	ldr	r2, [pc, #472]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d015      	beq.n	8001a3e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a12:	f7ff fa1d 	bl	8000e50 <HAL_GetTick>
 8001a16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a18:	e00a      	b.n	8001a30 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f7ff fa19 	bl	8000e50 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e14c      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a30:	4b6a      	ldr	r3, [pc, #424]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0ee      	beq.n	8001a1a <HAL_RCC_OscConfig+0x5a2>
 8001a3c:	e014      	b.n	8001a68 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3e:	f7ff fa07 	bl	8000e50 <HAL_GetTick>
 8001a42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a44:	e00a      	b.n	8001a5c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a46:	f7ff fa03 	bl	8000e50 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e136      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a5c:	4b5f      	ldr	r3, [pc, #380]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1ee      	bne.n	8001a46 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 812b 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a72:	4b5a      	ldr	r3, [pc, #360]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a7a:	2b18      	cmp	r3, #24
 8001a7c:	f000 80bb 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	f040 8095 	bne.w	8001bb4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8a:	4b54      	ldr	r3, [pc, #336]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a53      	ldr	r2, [pc, #332]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001a90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7ff f9db 	bl	8000e50 <HAL_GetTick>
 8001a9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff f9d7 	bl	8000e50 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e10c      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ab0:	4b4a      	ldr	r3, [pc, #296]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001abc:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001abe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ac0:	4b47      	ldr	r3, [pc, #284]	; (8001be0 <HAL_RCC_OscConfig+0x768>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001acc:	0112      	lsls	r2, r2, #4
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	4942      	ldr	r1, [pc, #264]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	628b      	str	r3, [r1, #40]	; 0x28
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	3b01      	subs	r3, #1
 8001adc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	025b      	lsls	r3, r3, #9
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af0:	3b01      	subs	r3, #1
 8001af2:	041b      	lsls	r3, r3, #16
 8001af4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afe:	3b01      	subs	r3, #1
 8001b00:	061b      	lsls	r3, r3, #24
 8001b02:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001b06:	4935      	ldr	r1, [pc, #212]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001b0c:	4b33      	ldr	r3, [pc, #204]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	4a32      	ldr	r2, [pc, #200]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b18:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b1c:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <HAL_RCC_OscConfig+0x76c>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b24:	00d2      	lsls	r2, r2, #3
 8001b26:	492d      	ldr	r1, [pc, #180]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	f023 020c 	bic.w	r2, r3, #12
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	4928      	ldr	r1, [pc, #160]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b3e:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	f023 0202 	bic.w	r2, r3, #2
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	4924      	ldr	r1, [pc, #144]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b50:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	4a21      	ldr	r2, [pc, #132]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	4a1e      	ldr	r2, [pc, #120]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b68:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	4a18      	ldr	r2, [pc, #96]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b80:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f960 	bl	8000e50 <HAL_GetTick>
 8001b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b94:	f7ff f95c 	bl	8000e50 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e091      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x71c>
 8001bb2:	e089      	b.n	8001cc8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <HAL_RCC_OscConfig+0x764>)
 8001bba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f946 	bl	8000e50 <HAL_GetTick>
 8001bc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bc6:	e00f      	b.n	8001be8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff f942 	bl	8000e50 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d908      	bls.n	8001be8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e077      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
 8001bda:	bf00      	nop
 8001bdc:	58024400 	.word	0x58024400
 8001be0:	fffffc0c 	.word	0xfffffc0c
 8001be4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001be8:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <HAL_RCC_OscConfig+0x85c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1e9      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x750>
 8001bf4:	e068      	b.n	8001cc8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001bf6:	4b37      	ldr	r3, [pc, #220]	; (8001cd4 <HAL_RCC_OscConfig+0x85c>)
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001bfc:	4b35      	ldr	r3, [pc, #212]	; (8001cd4 <HAL_RCC_OscConfig+0x85c>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d031      	beq.n	8001c6e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	f003 0203 	and.w	r2, r3, #3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d12a      	bne.n	8001c6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d122      	bne.n	8001c6e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d11a      	bne.n	8001c6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	0a5b      	lsrs	r3, r3, #9
 8001c3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c44:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d111      	bne.n	8001c6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	0c1b      	lsrs	r3, r3, #16
 8001c4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d108      	bne.n	8001c6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	0e1b      	lsrs	r3, r3, #24
 8001c60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e02b      	b.n	8001cca <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_RCC_OscConfig+0x85c>)
 8001c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c76:	08db      	lsrs	r3, r3, #3
 8001c78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c7c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d01f      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_RCC_OscConfig+0x85c>)
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	4a11      	ldr	r2, [pc, #68]	; (8001cd4 <HAL_RCC_OscConfig+0x85c>)
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c94:	f7ff f8dc 	bl	8000e50 <HAL_GetTick>
 8001c98:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001c9a:	bf00      	nop
 8001c9c:	f7ff f8d8 	bl	8000e50 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d0f9      	beq.n	8001c9c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_RCC_OscConfig+0x85c>)
 8001caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_RCC_OscConfig+0x860>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cb4:	00d2      	lsls	r2, r2, #3
 8001cb6:	4907      	ldr	r1, [pc, #28]	; (8001cd4 <HAL_RCC_OscConfig+0x85c>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_RCC_OscConfig+0x85c>)
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <HAL_RCC_OscConfig+0x85c>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3730      	adds	r7, #48	; 0x30
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	58024400 	.word	0x58024400
 8001cd8:	ffff0007 	.word	0xffff0007

08001cdc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e19c      	b.n	800202a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf0:	4b8a      	ldr	r3, [pc, #552]	; (8001f1c <HAL_RCC_ClockConfig+0x240>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d910      	bls.n	8001d20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfe:	4b87      	ldr	r3, [pc, #540]	; (8001f1c <HAL_RCC_ClockConfig+0x240>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 020f 	bic.w	r2, r3, #15
 8001d06:	4985      	ldr	r1, [pc, #532]	; (8001f1c <HAL_RCC_ClockConfig+0x240>)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0e:	4b83      	ldr	r3, [pc, #524]	; (8001f1c <HAL_RCC_ClockConfig+0x240>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e184      	b.n	800202a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d010      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	4b7b      	ldr	r3, [pc, #492]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d908      	bls.n	8001d4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d3c:	4b78      	ldr	r3, [pc, #480]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	4975      	ldr	r1, [pc, #468]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d010      	beq.n	8001d7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	4b70      	ldr	r3, [pc, #448]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d908      	bls.n	8001d7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d6a:	4b6d      	ldr	r3, [pc, #436]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	496a      	ldr	r1, [pc, #424]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d010      	beq.n	8001daa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	4b64      	ldr	r3, [pc, #400]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d908      	bls.n	8001daa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d98:	4b61      	ldr	r3, [pc, #388]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	495e      	ldr	r1, [pc, #376]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0320 	and.w	r3, r3, #32
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d010      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69da      	ldr	r2, [r3, #28]
 8001dba:	4b59      	ldr	r3, [pc, #356]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d908      	bls.n	8001dd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001dc6:	4b56      	ldr	r3, [pc, #344]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4953      	ldr	r1, [pc, #332]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d010      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	4b4d      	ldr	r3, [pc, #308]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d908      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df4:	4b4a      	ldr	r3, [pc, #296]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f023 020f 	bic.w	r2, r3, #15
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	4947      	ldr	r1, [pc, #284]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d055      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e12:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	4940      	ldr	r1, [pc, #256]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d107      	bne.n	8001e3c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e2c:	4b3c      	ldr	r3, [pc, #240]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d121      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0f6      	b.n	800202a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d107      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e44:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d115      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0ea      	b.n	800202a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d107      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e5c:	4b30      	ldr	r3, [pc, #192]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d109      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0de      	b.n	800202a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e6c:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0d6      	b.n	800202a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e7c:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	f023 0207 	bic.w	r2, r3, #7
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	4925      	ldr	r1, [pc, #148]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e8e:	f7fe ffdf 	bl	8000e50 <HAL_GetTick>
 8001e92:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e94:	e00a      	b.n	8001eac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e96:	f7fe ffdb 	bl	8000e50 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e0be      	b.n	800202a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eac:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d1eb      	bne.n	8001e96 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d010      	beq.n	8001eec <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d208      	bcs.n	8001eec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	f023 020f 	bic.w	r2, r3, #15
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	490e      	ldr	r1, [pc, #56]	; (8001f20 <HAL_RCC_ClockConfig+0x244>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_RCC_ClockConfig+0x240>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d214      	bcs.n	8001f24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_RCC_ClockConfig+0x240>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 020f 	bic.w	r2, r3, #15
 8001f02:	4906      	ldr	r1, [pc, #24]	; (8001f1c <HAL_RCC_ClockConfig+0x240>)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <HAL_RCC_ClockConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e086      	b.n	800202a <HAL_RCC_ClockConfig+0x34e>
 8001f1c:	52002000 	.word	0x52002000
 8001f20:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d010      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	4b3f      	ldr	r3, [pc, #252]	; (8002034 <HAL_RCC_ClockConfig+0x358>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d208      	bcs.n	8001f52 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f40:	4b3c      	ldr	r3, [pc, #240]	; (8002034 <HAL_RCC_ClockConfig+0x358>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	4939      	ldr	r1, [pc, #228]	; (8002034 <HAL_RCC_ClockConfig+0x358>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d010      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	4b34      	ldr	r3, [pc, #208]	; (8002034 <HAL_RCC_ClockConfig+0x358>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d208      	bcs.n	8001f80 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f6e:	4b31      	ldr	r3, [pc, #196]	; (8002034 <HAL_RCC_ClockConfig+0x358>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	492e      	ldr	r1, [pc, #184]	; (8002034 <HAL_RCC_ClockConfig+0x358>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d010      	beq.n	8001fae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699a      	ldr	r2, [r3, #24]
 8001f90:	4b28      	ldr	r3, [pc, #160]	; (8002034 <HAL_RCC_ClockConfig+0x358>)
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d208      	bcs.n	8001fae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <HAL_RCC_ClockConfig+0x358>)
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4922      	ldr	r1, [pc, #136]	; (8002034 <HAL_RCC_ClockConfig+0x358>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d010      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69da      	ldr	r2, [r3, #28]
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_RCC_ClockConfig+0x358>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d208      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <HAL_RCC_ClockConfig+0x358>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	4917      	ldr	r1, [pc, #92]	; (8002034 <HAL_RCC_ClockConfig+0x358>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001fdc:	f000 f834 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4b14      	ldr	r3, [pc, #80]	; (8002034 <HAL_RCC_ClockConfig+0x358>)
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	0a1b      	lsrs	r3, r3, #8
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	4912      	ldr	r1, [pc, #72]	; (8002038 <HAL_RCC_ClockConfig+0x35c>)
 8001fee:	5ccb      	ldrb	r3, [r1, r3]
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_RCC_ClockConfig+0x358>)
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	4a0d      	ldr	r2, [pc, #52]	; (8002038 <HAL_RCC_ClockConfig+0x35c>)
 8002004:	5cd3      	ldrb	r3, [r2, r3]
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <HAL_RCC_ClockConfig+0x360>)
 8002012:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002014:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <HAL_RCC_ClockConfig+0x364>)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_RCC_ClockConfig+0x368>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fecc 	bl	8000dbc <HAL_InitTick>
 8002024:	4603      	mov	r3, r0
 8002026:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	58024400 	.word	0x58024400
 8002038:	0800782c 	.word	0x0800782c
 800203c:	24000004 	.word	0x24000004
 8002040:	24000000 	.word	0x24000000
 8002044:	24000008 	.word	0x24000008

08002048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800204e:	4bb3      	ldr	r3, [pc, #716]	; (800231c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002056:	2b18      	cmp	r3, #24
 8002058:	f200 8155 	bhi.w	8002306 <HAL_RCC_GetSysClockFreq+0x2be>
 800205c:	a201      	add	r2, pc, #4	; (adr r2, 8002064 <HAL_RCC_GetSysClockFreq+0x1c>)
 800205e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002062:	bf00      	nop
 8002064:	080020c9 	.word	0x080020c9
 8002068:	08002307 	.word	0x08002307
 800206c:	08002307 	.word	0x08002307
 8002070:	08002307 	.word	0x08002307
 8002074:	08002307 	.word	0x08002307
 8002078:	08002307 	.word	0x08002307
 800207c:	08002307 	.word	0x08002307
 8002080:	08002307 	.word	0x08002307
 8002084:	080020ef 	.word	0x080020ef
 8002088:	08002307 	.word	0x08002307
 800208c:	08002307 	.word	0x08002307
 8002090:	08002307 	.word	0x08002307
 8002094:	08002307 	.word	0x08002307
 8002098:	08002307 	.word	0x08002307
 800209c:	08002307 	.word	0x08002307
 80020a0:	08002307 	.word	0x08002307
 80020a4:	080020f5 	.word	0x080020f5
 80020a8:	08002307 	.word	0x08002307
 80020ac:	08002307 	.word	0x08002307
 80020b0:	08002307 	.word	0x08002307
 80020b4:	08002307 	.word	0x08002307
 80020b8:	08002307 	.word	0x08002307
 80020bc:	08002307 	.word	0x08002307
 80020c0:	08002307 	.word	0x08002307
 80020c4:	080020fb 	.word	0x080020fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020c8:	4b94      	ldr	r3, [pc, #592]	; (800231c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80020d4:	4b91      	ldr	r3, [pc, #580]	; (800231c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	08db      	lsrs	r3, r3, #3
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	4a90      	ldr	r2, [pc, #576]	; (8002320 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020e0:	fa22 f303 	lsr.w	r3, r2, r3
 80020e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80020e6:	e111      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80020e8:	4b8d      	ldr	r3, [pc, #564]	; (8002320 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020ea:	61bb      	str	r3, [r7, #24]
      break;
 80020ec:	e10e      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80020ee:	4b8d      	ldr	r3, [pc, #564]	; (8002324 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020f0:	61bb      	str	r3, [r7, #24]
      break;
 80020f2:	e10b      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80020f4:	4b8c      	ldr	r3, [pc, #560]	; (8002328 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80020f6:	61bb      	str	r3, [r7, #24]
      break;
 80020f8:	e108      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80020fa:	4b88      	ldr	r3, [pc, #544]	; (800231c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002104:	4b85      	ldr	r3, [pc, #532]	; (800231c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800210e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002110:	4b82      	ldr	r3, [pc, #520]	; (800231c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800211a:	4b80      	ldr	r3, [pc, #512]	; (800231c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800211c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211e:	08db      	lsrs	r3, r3, #3
 8002120:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	fb02 f303 	mul.w	r3, r2, r3
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002132:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 80e1 	beq.w	8002300 <HAL_RCC_GetSysClockFreq+0x2b8>
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b02      	cmp	r3, #2
 8002142:	f000 8083 	beq.w	800224c <HAL_RCC_GetSysClockFreq+0x204>
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b02      	cmp	r3, #2
 800214a:	f200 80a1 	bhi.w	8002290 <HAL_RCC_GetSysClockFreq+0x248>
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0x114>
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d056      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x1c0>
 800215a:	e099      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800215c:	4b6f      	ldr	r3, [pc, #444]	; (800231c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0320 	and.w	r3, r3, #32
 8002164:	2b00      	cmp	r3, #0
 8002166:	d02d      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002168:	4b6c      	ldr	r3, [pc, #432]	; (800231c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	08db      	lsrs	r3, r3, #3
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	4a6b      	ldr	r2, [pc, #428]	; (8002320 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
 8002178:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	ee07 3a90 	vmov	s15, r3
 8002180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	ee07 3a90 	vmov	s15, r3
 800218a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800218e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002192:	4b62      	ldr	r3, [pc, #392]	; (800231c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800219a:	ee07 3a90 	vmov	s15, r3
 800219e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80021a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800232c <HAL_RCC_GetSysClockFreq+0x2e4>
 80021aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021be:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80021c2:	e087      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	ee07 3a90 	vmov	s15, r3
 80021ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002330 <HAL_RCC_GetSysClockFreq+0x2e8>
 80021d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021d6:	4b51      	ldr	r3, [pc, #324]	; (800231c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800232c <HAL_RCC_GetSysClockFreq+0x2e4>
 80021ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002202:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002206:	e065      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	ee07 3a90 	vmov	s15, r3
 800220e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002212:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002334 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800221a:	4b40      	ldr	r3, [pc, #256]	; (800231c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800222a:	ed97 6a02 	vldr	s12, [r7, #8]
 800222e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800232c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800223a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800223e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002246:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800224a:	e043      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	ee07 3a90 	vmov	s15, r3
 8002252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002256:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002338 <HAL_RCC_GetSysClockFreq+0x2f0>
 800225a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800225e:	4b2f      	ldr	r3, [pc, #188]	; (800231c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002266:	ee07 3a90 	vmov	s15, r3
 800226a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800226e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002272:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800232c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800227a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800227e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800228e:	e021      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	ee07 3a90 	vmov	s15, r3
 8002296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800229a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002334 <HAL_RCC_GetSysClockFreq+0x2ec>
 800229e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022a2:	4b1e      	ldr	r3, [pc, #120]	; (800231c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80022b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800232c <HAL_RCC_GetSysClockFreq+0x2e4>
 80022ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	0a5b      	lsrs	r3, r3, #9
 80022da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022de:	3301      	adds	r3, #1
 80022e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	ee07 3a90 	vmov	s15, r3
 80022e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80022f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022f8:	ee17 3a90 	vmov	r3, s15
 80022fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80022fe:	e005      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	61bb      	str	r3, [r7, #24]
      break;
 8002304:	e002      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002308:	61bb      	str	r3, [r7, #24]
      break;
 800230a:	bf00      	nop
  }

  return sysclockfreq;
 800230c:	69bb      	ldr	r3, [r7, #24]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	; 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	58024400 	.word	0x58024400
 8002320:	03d09000 	.word	0x03d09000
 8002324:	003d0900 	.word	0x003d0900
 8002328:	007a1200 	.word	0x007a1200
 800232c:	46000000 	.word	0x46000000
 8002330:	4c742400 	.word	0x4c742400
 8002334:	4a742400 	.word	0x4a742400
 8002338:	4af42400 	.word	0x4af42400

0800233c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002342:	f7ff fe81 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8002346:	4602      	mov	r2, r0
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <HAL_RCC_GetHCLKFreq+0x50>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	490f      	ldr	r1, [pc, #60]	; (8002390 <HAL_RCC_GetHCLKFreq+0x54>)
 8002354:	5ccb      	ldrb	r3, [r1, r3]
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	fa22 f303 	lsr.w	r3, r2, r3
 800235e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <HAL_RCC_GetHCLKFreq+0x50>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	4a09      	ldr	r2, [pc, #36]	; (8002390 <HAL_RCC_GetHCLKFreq+0x54>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	fa22 f303 	lsr.w	r3, r2, r3
 8002376:	4a07      	ldr	r2, [pc, #28]	; (8002394 <HAL_RCC_GetHCLKFreq+0x58>)
 8002378:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800237a:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_RCC_GetHCLKFreq+0x5c>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <HAL_RCC_GetHCLKFreq+0x58>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	58024400 	.word	0x58024400
 8002390:	0800782c 	.word	0x0800782c
 8002394:	24000004 	.word	0x24000004
 8002398:	24000000 	.word	0x24000000

0800239c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80023a0:	f7ff ffcc 	bl	800233c <HAL_RCC_GetHCLKFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4904      	ldr	r1, [pc, #16]	; (80023c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80023bc:	4618      	mov	r0, r3
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	58024400 	.word	0x58024400
 80023c4:	0800782c 	.word	0x0800782c

080023c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80023cc:	f7ff ffb6 	bl	800233c <HAL_RCC_GetHCLKFreq>
 80023d0:	4602      	mov	r2, r0
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	4904      	ldr	r1, [pc, #16]	; (80023f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023de:	5ccb      	ldrb	r3, [r1, r3]
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	58024400 	.word	0x58024400
 80023f0:	0800782c 	.word	0x0800782c

080023f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f8:	b0c8      	sub	sp, #288	; 0x120
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002400:	2300      	movs	r3, #0
 8002402:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002406:	2300      	movs	r3, #0
 8002408:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800240c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002418:	2500      	movs	r5, #0
 800241a:	ea54 0305 	orrs.w	r3, r4, r5
 800241e:	d049      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002426:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800242a:	d02f      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800242c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002430:	d828      	bhi.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002432:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002436:	d01a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002438:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800243c:	d822      	bhi.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002446:	d007      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002448:	e01c      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800244a:	4ba7      	ldr	r3, [pc, #668]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800244c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244e:	4aa6      	ldr	r2, [pc, #664]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002454:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002456:	e01a      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800245c:	3308      	adds	r3, #8
 800245e:	2102      	movs	r1, #2
 8002460:	4618      	mov	r0, r3
 8002462:	f001 fc43 	bl	8003cec <RCCEx_PLL2_Config>
 8002466:	4603      	mov	r3, r0
 8002468:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800246c:	e00f      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800246e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002472:	3328      	adds	r3, #40	; 0x28
 8002474:	2102      	movs	r1, #2
 8002476:	4618      	mov	r0, r3
 8002478:	f001 fcea 	bl	8003e50 <RCCEx_PLL3_Config>
 800247c:	4603      	mov	r3, r0
 800247e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002482:	e004      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800248a:	e000      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800248c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800248e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10a      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002496:	4b94      	ldr	r3, [pc, #592]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800249a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800249e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024a4:	4a90      	ldr	r2, [pc, #576]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024a6:	430b      	orrs	r3, r1
 80024a8:	6513      	str	r3, [r2, #80]	; 0x50
 80024aa:	e003      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80024b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80024c0:	f04f 0900 	mov.w	r9, #0
 80024c4:	ea58 0309 	orrs.w	r3, r8, r9
 80024c8:	d047      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80024ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d82a      	bhi.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80024d4:	a201      	add	r2, pc, #4	; (adr r2, 80024dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80024d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024da:	bf00      	nop
 80024dc:	080024f1 	.word	0x080024f1
 80024e0:	080024ff 	.word	0x080024ff
 80024e4:	08002515 	.word	0x08002515
 80024e8:	08002533 	.word	0x08002533
 80024ec:	08002533 	.word	0x08002533
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024f0:	4b7d      	ldr	r3, [pc, #500]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	4a7c      	ldr	r2, [pc, #496]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024fc:	e01a      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002502:	3308      	adds	r3, #8
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f001 fbf0 	bl	8003cec <RCCEx_PLL2_Config>
 800250c:	4603      	mov	r3, r0
 800250e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002512:	e00f      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002518:	3328      	adds	r3, #40	; 0x28
 800251a:	2100      	movs	r1, #0
 800251c:	4618      	mov	r0, r3
 800251e:	f001 fc97 	bl	8003e50 <RCCEx_PLL3_Config>
 8002522:	4603      	mov	r3, r0
 8002524:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002528:	e004      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002530:	e000      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002534:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800253c:	4b6a      	ldr	r3, [pc, #424]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800253e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002540:	f023 0107 	bic.w	r1, r3, #7
 8002544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254a:	4a67      	ldr	r2, [pc, #412]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800254c:	430b      	orrs	r3, r1
 800254e:	6513      	str	r3, [r2, #80]	; 0x50
 8002550:	e003      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002552:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002556:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800255a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002566:	f04f 0b00 	mov.w	fp, #0
 800256a:	ea5a 030b 	orrs.w	r3, sl, fp
 800256e:	d054      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002576:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800257a:	d036      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800257c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002580:	d82f      	bhi.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002586:	d032      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800258c:	d829      	bhi.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800258e:	2bc0      	cmp	r3, #192	; 0xc0
 8002590:	d02f      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002592:	2bc0      	cmp	r3, #192	; 0xc0
 8002594:	d825      	bhi.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002596:	2b80      	cmp	r3, #128	; 0x80
 8002598:	d018      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800259a:	2b80      	cmp	r3, #128	; 0x80
 800259c:	d821      	bhi.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80025a2:	2b40      	cmp	r3, #64	; 0x40
 80025a4:	d007      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80025a6:	e01c      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025a8:	4b4f      	ldr	r3, [pc, #316]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	4a4e      	ldr	r2, [pc, #312]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80025b4:	e01e      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025ba:	3308      	adds	r3, #8
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f001 fb94 	bl	8003cec <RCCEx_PLL2_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80025ca:	e013      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025d0:	3328      	adds	r3, #40	; 0x28
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f001 fc3b 	bl	8003e50 <RCCEx_PLL3_Config>
 80025da:	4603      	mov	r3, r0
 80025dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80025e0:	e008      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80025e8:	e004      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80025ea:	bf00      	nop
 80025ec:	e002      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80025ee:	bf00      	nop
 80025f0:	e000      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80025f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10a      	bne.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80025fc:	4b3a      	ldr	r3, [pc, #232]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002600:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260a:	4a37      	ldr	r2, [pc, #220]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800260c:	430b      	orrs	r3, r1
 800260e:	6513      	str	r3, [r2, #80]	; 0x50
 8002610:	e003      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002612:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002616:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800261a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002622:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002626:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800262a:	2300      	movs	r3, #0
 800262c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002630:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002634:	460b      	mov	r3, r1
 8002636:	4313      	orrs	r3, r2
 8002638:	d05c      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800263a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800263e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002640:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002644:	d03b      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002646:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800264a:	d834      	bhi.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800264c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002650:	d037      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002656:	d82e      	bhi.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002658:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800265c:	d033      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800265e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002662:	d828      	bhi.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002668:	d01a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800266a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266e:	d822      	bhi.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002678:	d007      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800267a:	e01c      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800267c:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	4a19      	ldr	r2, [pc, #100]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002686:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002688:	e01e      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800268a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800268e:	3308      	adds	r3, #8
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f001 fb2a 	bl	8003cec <RCCEx_PLL2_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800269e:	e013      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026a4:	3328      	adds	r3, #40	; 0x28
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f001 fbd1 	bl	8003e50 <RCCEx_PLL3_Config>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80026b4:	e008      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80026bc:	e004      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80026be:	bf00      	nop
 80026c0:	e002      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80026c2:	bf00      	nop
 80026c4:	e000      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80026c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10d      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80026d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026de:	4a02      	ldr	r2, [pc, #8]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026e0:	430b      	orrs	r3, r1
 80026e2:	6513      	str	r3, [r2, #80]	; 0x50
 80026e4:	e006      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80026e6:	bf00      	nop
 80026e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80026f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002700:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800270a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800270e:	460b      	mov	r3, r1
 8002710:	4313      	orrs	r3, r2
 8002712:	d03a      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271a:	2b30      	cmp	r3, #48	; 0x30
 800271c:	d01f      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800271e:	2b30      	cmp	r3, #48	; 0x30
 8002720:	d819      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002722:	2b20      	cmp	r3, #32
 8002724:	d00c      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002726:	2b20      	cmp	r3, #32
 8002728:	d815      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800272a:	2b00      	cmp	r3, #0
 800272c:	d019      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800272e:	2b10      	cmp	r3, #16
 8002730:	d111      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002732:	4bae      	ldr	r3, [pc, #696]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002736:	4aad      	ldr	r2, [pc, #692]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800273c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800273e:	e011      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002744:	3308      	adds	r3, #8
 8002746:	2102      	movs	r1, #2
 8002748:	4618      	mov	r0, r3
 800274a:	f001 facf 	bl	8003cec <RCCEx_PLL2_Config>
 800274e:	4603      	mov	r3, r0
 8002750:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002754:	e006      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800275c:	e002      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800275e:	bf00      	nop
 8002760:	e000      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002764:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10a      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800276c:	4b9f      	ldr	r3, [pc, #636]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800276e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002770:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277a:	4a9c      	ldr	r2, [pc, #624]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800277c:	430b      	orrs	r3, r1
 800277e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002780:	e003      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002782:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002786:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800278a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002796:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800279a:	2300      	movs	r3, #0
 800279c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80027a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4313      	orrs	r3, r2
 80027a8:	d051      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80027aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027b4:	d035      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80027b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027ba:	d82e      	bhi.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80027bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027c0:	d031      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80027c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027c6:	d828      	bhi.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80027c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027cc:	d01a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80027ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d2:	d822      	bhi.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80027d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027dc:	d007      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80027de:	e01c      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027e0:	4b82      	ldr	r3, [pc, #520]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	4a81      	ldr	r2, [pc, #516]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027ec:	e01c      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027f2:	3308      	adds	r3, #8
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f001 fa78 	bl	8003cec <RCCEx_PLL2_Config>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002802:	e011      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002808:	3328      	adds	r3, #40	; 0x28
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f001 fb1f 	bl	8003e50 <RCCEx_PLL3_Config>
 8002812:	4603      	mov	r3, r0
 8002814:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002818:	e006      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002820:	e002      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002822:	bf00      	nop
 8002824:	e000      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002828:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002830:	4b6e      	ldr	r3, [pc, #440]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002834:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800283c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800283e:	4a6b      	ldr	r2, [pc, #428]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002840:	430b      	orrs	r3, r1
 8002842:	6513      	str	r3, [r2, #80]	; 0x50
 8002844:	e003      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002846:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800284a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800284e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800285a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800285e:	2300      	movs	r3, #0
 8002860:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002864:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002868:	460b      	mov	r3, r1
 800286a:	4313      	orrs	r3, r2
 800286c:	d053      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800286e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002878:	d033      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800287a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800287e:	d82c      	bhi.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002880:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002884:	d02f      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002886:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800288a:	d826      	bhi.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800288c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002890:	d02b      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002892:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002896:	d820      	bhi.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002898:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800289c:	d012      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800289e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028a2:	d81a      	bhi.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d022      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ac:	d115      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80028ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028b2:	3308      	adds	r3, #8
 80028b4:	2101      	movs	r1, #1
 80028b6:	4618      	mov	r0, r3
 80028b8:	f001 fa18 	bl	8003cec <RCCEx_PLL2_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80028c2:	e015      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80028c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028c8:	3328      	adds	r3, #40	; 0x28
 80028ca:	2101      	movs	r1, #1
 80028cc:	4618      	mov	r0, r3
 80028ce:	f001 fabf 	bl	8003e50 <RCCEx_PLL3_Config>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80028d8:	e00a      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80028e0:	e006      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80028e2:	bf00      	nop
 80028e4:	e004      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80028e6:	bf00      	nop
 80028e8:	e002      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80028ea:	bf00      	nop
 80028ec:	e000      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80028ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10a      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80028f8:	4b3c      	ldr	r3, [pc, #240]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002906:	4a39      	ldr	r2, [pc, #228]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002908:	430b      	orrs	r3, r1
 800290a:	6513      	str	r3, [r2, #80]	; 0x50
 800290c:	e003      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800290e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002912:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002922:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002926:	2300      	movs	r3, #0
 8002928:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800292c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002930:	460b      	mov	r3, r1
 8002932:	4313      	orrs	r3, r2
 8002934:	d060      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800293a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800293e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002942:	d039      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002944:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002948:	d832      	bhi.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800294a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800294e:	d035      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002954:	d82c      	bhi.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295a:	d031      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002960:	d826      	bhi.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002962:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002966:	d02d      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002968:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800296c:	d820      	bhi.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800296e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002972:	d012      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002978:	d81a      	bhi.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800297a:	2b00      	cmp	r3, #0
 800297c:	d024      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800297e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002982:	d115      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002988:	3308      	adds	r3, #8
 800298a:	2101      	movs	r1, #1
 800298c:	4618      	mov	r0, r3
 800298e:	f001 f9ad 	bl	8003cec <RCCEx_PLL2_Config>
 8002992:	4603      	mov	r3, r0
 8002994:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002998:	e017      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800299a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800299e:	3328      	adds	r3, #40	; 0x28
 80029a0:	2101      	movs	r1, #1
 80029a2:	4618      	mov	r0, r3
 80029a4:	f001 fa54 	bl	8003e50 <RCCEx_PLL3_Config>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80029ae:	e00c      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80029b6:	e008      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80029b8:	bf00      	nop
 80029ba:	e006      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80029bc:	bf00      	nop
 80029be:	e004      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80029c0:	bf00      	nop
 80029c2:	e002      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80029c4:	bf00      	nop
 80029c6:	e000      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80029c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10e      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80029da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029e2:	4a02      	ldr	r2, [pc, #8]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029e4:	430b      	orrs	r3, r1
 80029e6:	6593      	str	r3, [r2, #88]	; 0x58
 80029e8:	e006      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80029ea:	bf00      	nop
 80029ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002a04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002a0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a12:	460b      	mov	r3, r1
 8002a14:	4313      	orrs	r3, r2
 8002a16:	d037      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a22:	d00e      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a28:	d816      	bhi.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d018      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002a2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a32:	d111      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a34:	4bc4      	ldr	r3, [pc, #784]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	4ac3      	ldr	r2, [pc, #780]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a40:	e00f      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a46:	3308      	adds	r3, #8
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f001 f94e 	bl	8003cec <RCCEx_PLL2_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a56:	e004      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a5e:	e000      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a6a:	4bb7      	ldr	r3, [pc, #732]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a78:	4ab3      	ldr	r2, [pc, #716]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a7a:	430b      	orrs	r3, r1
 8002a7c:	6513      	str	r3, [r2, #80]	; 0x50
 8002a7e:	e003      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002a9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	d039      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d81c      	bhi.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002ab2:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab8:	08002af5 	.word	0x08002af5
 8002abc:	08002ac9 	.word	0x08002ac9
 8002ac0:	08002ad7 	.word	0x08002ad7
 8002ac4:	08002af5 	.word	0x08002af5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ac8:	4b9f      	ldr	r3, [pc, #636]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	4a9e      	ldr	r2, [pc, #632]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ad4:	e00f      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ada:	3308      	adds	r3, #8
 8002adc:	2102      	movs	r1, #2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f001 f904 	bl	8003cec <RCCEx_PLL2_Config>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002aea:	e004      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002af2:	e000      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002af6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002afe:	4b92      	ldr	r3, [pc, #584]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	f023 0103 	bic.w	r1, r3, #3
 8002b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0c:	4a8e      	ldr	r2, [pc, #568]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b0e:	430b      	orrs	r3, r1
 8002b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b12:	e003      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b24:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002b28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002b36:	460b      	mov	r3, r1
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f000 8099 	beq.w	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b3e:	4b83      	ldr	r3, [pc, #524]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a82      	ldr	r2, [pc, #520]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b4a:	f7fe f981 	bl	8000e50 <HAL_GetTick>
 8002b4e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b52:	e00b      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b54:	f7fe f97c 	bl	8000e50 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b64      	cmp	r3, #100	; 0x64
 8002b62:	d903      	bls.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b6a:	e005      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b6c:	4b77      	ldr	r3, [pc, #476]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ed      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002b78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d173      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b80:	4b71      	ldr	r3, [pc, #452]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b8c:	4053      	eors	r3, r2
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d015      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b96:	4b6c      	ldr	r3, [pc, #432]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ba2:	4b69      	ldr	r3, [pc, #420]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba6:	4a68      	ldr	r2, [pc, #416]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bae:	4b66      	ldr	r3, [pc, #408]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	4a65      	ldr	r2, [pc, #404]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002bba:	4a63      	ldr	r2, [pc, #396]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bce:	d118      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd0:	f7fe f93e 	bl	8000e50 <HAL_GetTick>
 8002bd4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bd8:	e00d      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7fe f939 	bl	8000e50 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002be4:	1ad2      	subs	r2, r2, r3
 8002be6:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d903      	bls.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002bf4:	e005      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bf6:	4b54      	ldr	r3, [pc, #336]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0eb      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002c02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d129      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c1a:	d10e      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002c1c:	4b4a      	ldr	r3, [pc, #296]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c2c:	091a      	lsrs	r2, r3, #4
 8002c2e:	4b48      	ldr	r3, [pc, #288]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	4a45      	ldr	r2, [pc, #276]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c34:	430b      	orrs	r3, r1
 8002c36:	6113      	str	r3, [r2, #16]
 8002c38:	e005      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002c3a:	4b43      	ldr	r3, [pc, #268]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	4a42      	ldr	r2, [pc, #264]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c44:	6113      	str	r3, [r2, #16]
 8002c46:	4b40      	ldr	r3, [pc, #256]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c48:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c56:	4a3c      	ldr	r2, [pc, #240]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5c:	e008      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c62:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002c66:	e003      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c78:	f002 0301 	and.w	r3, r2, #1
 8002c7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c80:	2300      	movs	r3, #0
 8002c82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f000 8090 	beq.w	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c9a:	2b28      	cmp	r3, #40	; 0x28
 8002c9c:	d870      	bhi.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002c9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca4:	08002d89 	.word	0x08002d89
 8002ca8:	08002d81 	.word	0x08002d81
 8002cac:	08002d81 	.word	0x08002d81
 8002cb0:	08002d81 	.word	0x08002d81
 8002cb4:	08002d81 	.word	0x08002d81
 8002cb8:	08002d81 	.word	0x08002d81
 8002cbc:	08002d81 	.word	0x08002d81
 8002cc0:	08002d81 	.word	0x08002d81
 8002cc4:	08002d55 	.word	0x08002d55
 8002cc8:	08002d81 	.word	0x08002d81
 8002ccc:	08002d81 	.word	0x08002d81
 8002cd0:	08002d81 	.word	0x08002d81
 8002cd4:	08002d81 	.word	0x08002d81
 8002cd8:	08002d81 	.word	0x08002d81
 8002cdc:	08002d81 	.word	0x08002d81
 8002ce0:	08002d81 	.word	0x08002d81
 8002ce4:	08002d6b 	.word	0x08002d6b
 8002ce8:	08002d81 	.word	0x08002d81
 8002cec:	08002d81 	.word	0x08002d81
 8002cf0:	08002d81 	.word	0x08002d81
 8002cf4:	08002d81 	.word	0x08002d81
 8002cf8:	08002d81 	.word	0x08002d81
 8002cfc:	08002d81 	.word	0x08002d81
 8002d00:	08002d81 	.word	0x08002d81
 8002d04:	08002d89 	.word	0x08002d89
 8002d08:	08002d81 	.word	0x08002d81
 8002d0c:	08002d81 	.word	0x08002d81
 8002d10:	08002d81 	.word	0x08002d81
 8002d14:	08002d81 	.word	0x08002d81
 8002d18:	08002d81 	.word	0x08002d81
 8002d1c:	08002d81 	.word	0x08002d81
 8002d20:	08002d81 	.word	0x08002d81
 8002d24:	08002d89 	.word	0x08002d89
 8002d28:	08002d81 	.word	0x08002d81
 8002d2c:	08002d81 	.word	0x08002d81
 8002d30:	08002d81 	.word	0x08002d81
 8002d34:	08002d81 	.word	0x08002d81
 8002d38:	08002d81 	.word	0x08002d81
 8002d3c:	08002d81 	.word	0x08002d81
 8002d40:	08002d81 	.word	0x08002d81
 8002d44:	08002d89 	.word	0x08002d89
 8002d48:	58024400 	.word	0x58024400
 8002d4c:	58024800 	.word	0x58024800
 8002d50:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d58:	3308      	adds	r3, #8
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 ffc5 	bl	8003cec <RCCEx_PLL2_Config>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d68:	e00f      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d6e:	3328      	adds	r3, #40	; 0x28
 8002d70:	2101      	movs	r1, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 f86c 	bl	8003e50 <RCCEx_PLL3_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d7e:	e004      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d86:	e000      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10b      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d92:	4bc0      	ldr	r3, [pc, #768]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d96:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da2:	4abc      	ldr	r2, [pc, #752]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002da4:	430b      	orrs	r3, r1
 8002da6:	6553      	str	r3, [r2, #84]	; 0x54
 8002da8:	e003      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002daa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dba:	f002 0302 	and.w	r3, r2, #2
 8002dbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002dc8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	d043      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dda:	2b05      	cmp	r3, #5
 8002ddc:	d824      	bhi.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002dde:	a201      	add	r2, pc, #4	; (adr r2, 8002de4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de4:	08002e31 	.word	0x08002e31
 8002de8:	08002dfd 	.word	0x08002dfd
 8002dec:	08002e13 	.word	0x08002e13
 8002df0:	08002e31 	.word	0x08002e31
 8002df4:	08002e31 	.word	0x08002e31
 8002df8:	08002e31 	.word	0x08002e31
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e00:	3308      	adds	r3, #8
 8002e02:	2101      	movs	r1, #1
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 ff71 	bl	8003cec <RCCEx_PLL2_Config>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e10:	e00f      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e16:	3328      	adds	r3, #40	; 0x28
 8002e18:	2101      	movs	r1, #1
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f001 f818 	bl	8003e50 <RCCEx_PLL3_Config>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e26:	e004      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e2e:	e000      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10b      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e3a:	4b96      	ldr	r3, [pc, #600]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3e:	f023 0107 	bic.w	r1, r3, #7
 8002e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e4a:	4a92      	ldr	r2, [pc, #584]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6553      	str	r3, [r2, #84]	; 0x54
 8002e50:	e003      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e56:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	f002 0304 	and.w	r3, r2, #4
 8002e66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e70:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4313      	orrs	r3, r2
 8002e78:	d043      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	d824      	bhi.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002e86:	a201      	add	r2, pc, #4	; (adr r2, 8002e8c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8002e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8c:	08002ed9 	.word	0x08002ed9
 8002e90:	08002ea5 	.word	0x08002ea5
 8002e94:	08002ebb 	.word	0x08002ebb
 8002e98:	08002ed9 	.word	0x08002ed9
 8002e9c:	08002ed9 	.word	0x08002ed9
 8002ea0:	08002ed9 	.word	0x08002ed9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ea8:	3308      	adds	r3, #8
 8002eaa:	2101      	movs	r1, #1
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 ff1d 	bl	8003cec <RCCEx_PLL2_Config>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002eb8:	e00f      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ebe:	3328      	adds	r3, #40	; 0x28
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 ffc4 	bl	8003e50 <RCCEx_PLL3_Config>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002ece:	e004      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ed6:	e000      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8002ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10b      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ee2:	4b6c      	ldr	r3, [pc, #432]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	f023 0107 	bic.w	r1, r3, #7
 8002eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ef2:	4a68      	ldr	r2, [pc, #416]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ef8:	e003      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002efe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	f002 0320 	and.w	r3, r2, #32
 8002f0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	d055      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f2e:	d033      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f34:	d82c      	bhi.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3a:	d02f      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f40:	d826      	bhi.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002f42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f46:	d02b      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002f48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f4c:	d820      	bhi.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f52:	d012      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f58:	d81a      	bhi.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d022      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8002f5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f62:	d115      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f68:	3308      	adds	r3, #8
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 febd 	bl	8003cec <RCCEx_PLL2_Config>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f78:	e015      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f7e:	3328      	adds	r3, #40	; 0x28
 8002f80:	2102      	movs	r1, #2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 ff64 	bl	8003e50 <RCCEx_PLL3_Config>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f96:	e006      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f98:	bf00      	nop
 8002f9a:	e004      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f9c:	bf00      	nop
 8002f9e:	e002      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002fa0:	bf00      	nop
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fa6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10b      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fae:	4b39      	ldr	r3, [pc, #228]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fbe:	4a35      	ldr	r2, [pc, #212]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	6553      	str	r3, [r2, #84]	; 0x54
 8002fc4:	e003      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002fe4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4313      	orrs	r3, r2
 8002fec:	d058      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ff2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ff6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ffa:	d033      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8002ffc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003000:	d82c      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003006:	d02f      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300c:	d826      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800300e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003012:	d02b      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003014:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003018:	d820      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800301a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800301e:	d012      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003024:	d81a      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d022      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800302a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302e:	d115      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003034:	3308      	adds	r3, #8
 8003036:	2100      	movs	r1, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fe57 	bl	8003cec <RCCEx_PLL2_Config>
 800303e:	4603      	mov	r3, r0
 8003040:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003044:	e015      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800304a:	3328      	adds	r3, #40	; 0x28
 800304c:	2102      	movs	r1, #2
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fefe 	bl	8003e50 <RCCEx_PLL3_Config>
 8003054:	4603      	mov	r3, r0
 8003056:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800305a:	e00a      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003062:	e006      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003064:	bf00      	nop
 8003066:	e004      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003068:	bf00      	nop
 800306a:	e002      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800306c:	bf00      	nop
 800306e:	e000      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003072:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10e      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003086:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800308a:	4a02      	ldr	r2, [pc, #8]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800308c:	430b      	orrs	r3, r1
 800308e:	6593      	str	r3, [r2, #88]	; 0x58
 8003090:	e006      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003092:	bf00      	nop
 8003094:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003098:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800309c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80030ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030b0:	2300      	movs	r3, #0
 80030b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80030ba:	460b      	mov	r3, r1
 80030bc:	4313      	orrs	r3, r2
 80030be:	d055      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80030c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030cc:	d033      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80030ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030d2:	d82c      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80030d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d8:	d02f      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80030da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030de:	d826      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80030e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030e4:	d02b      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80030e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030ea:	d820      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80030ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030f0:	d012      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80030f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030f6:	d81a      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d022      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80030fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003100:	d115      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003106:	3308      	adds	r3, #8
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fdee 	bl	8003cec <RCCEx_PLL2_Config>
 8003110:	4603      	mov	r3, r0
 8003112:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003116:	e015      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800311c:	3328      	adds	r3, #40	; 0x28
 800311e:	2102      	movs	r1, #2
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fe95 	bl	8003e50 <RCCEx_PLL3_Config>
 8003126:	4603      	mov	r3, r0
 8003128:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800312c:	e00a      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003134:	e006      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003136:	bf00      	nop
 8003138:	e004      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800313a:	bf00      	nop
 800313c:	e002      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800313e:	bf00      	nop
 8003140:	e000      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003144:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10b      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800314c:	4ba1      	ldr	r3, [pc, #644]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800314e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003150:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003158:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800315c:	4a9d      	ldr	r2, [pc, #628]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800315e:	430b      	orrs	r3, r1
 8003160:	6593      	str	r3, [r2, #88]	; 0x58
 8003162:	e003      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003164:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003168:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800316c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	f002 0308 	and.w	r3, r2, #8
 8003178:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800317c:	2300      	movs	r3, #0
 800317e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003182:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003186:	460b      	mov	r3, r1
 8003188:	4313      	orrs	r3, r2
 800318a:	d01e      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800318c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003198:	d10c      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800319a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800319e:	3328      	adds	r3, #40	; 0x28
 80031a0:	2102      	movs	r1, #2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fe54 	bl	8003e50 <RCCEx_PLL3_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80031b4:	4b87      	ldr	r3, [pc, #540]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c4:	4a83      	ldr	r2, [pc, #524]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031c6:	430b      	orrs	r3, r1
 80031c8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d2:	f002 0310 	and.w	r3, r2, #16
 80031d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031da:	2300      	movs	r3, #0
 80031dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80031e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80031e4:	460b      	mov	r3, r1
 80031e6:	4313      	orrs	r3, r2
 80031e8:	d01e      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80031ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f6:	d10c      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80031f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031fc:	3328      	adds	r3, #40	; 0x28
 80031fe:	2102      	movs	r1, #2
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fe25 	bl	8003e50 <RCCEx_PLL3_Config>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003212:	4b70      	ldr	r3, [pc, #448]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003216:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800321a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800321e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003222:	4a6c      	ldr	r2, [pc, #432]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003224:	430b      	orrs	r3, r1
 8003226:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003238:	2300      	movs	r3, #0
 800323a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800323e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003242:	460b      	mov	r3, r1
 8003244:	4313      	orrs	r3, r2
 8003246:	d03e      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800324c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003254:	d022      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003256:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800325a:	d81b      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003264:	d00b      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003266:	e015      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800326c:	3308      	adds	r3, #8
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fd3b 	bl	8003cec <RCCEx_PLL2_Config>
 8003276:	4603      	mov	r3, r0
 8003278:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800327c:	e00f      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800327e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003282:	3328      	adds	r3, #40	; 0x28
 8003284:	2102      	movs	r1, #2
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fde2 	bl	8003e50 <RCCEx_PLL3_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003292:	e004      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800329a:	e000      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800329c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800329e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10b      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032a6:	4b4b      	ldr	r3, [pc, #300]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032aa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80032ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032b6:	4a47      	ldr	r2, [pc, #284]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032b8:	430b      	orrs	r3, r1
 80032ba:	6593      	str	r3, [r2, #88]	; 0x58
 80032bc:	e003      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80032d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80032d4:	2300      	movs	r3, #0
 80032d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80032dc:	460b      	mov	r3, r1
 80032de:	4313      	orrs	r3, r2
 80032e0:	d03b      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80032e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032ee:	d01f      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80032f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032f4:	d818      	bhi.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80032f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032fa:	d003      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80032fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003300:	d007      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003302:	e011      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003304:	4b33      	ldr	r3, [pc, #204]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	4a32      	ldr	r2, [pc, #200]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800330a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800330e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003310:	e00f      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003316:	3328      	adds	r3, #40	; 0x28
 8003318:	2101      	movs	r1, #1
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fd98 	bl	8003e50 <RCCEx_PLL3_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003326:	e004      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800332e:	e000      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003332:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10b      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800333a:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334a:	4a22      	ldr	r2, [pc, #136]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800334c:	430b      	orrs	r3, r1
 800334e:	6553      	str	r3, [r2, #84]	; 0x54
 8003350:	e003      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003352:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003356:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800335a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003366:	673b      	str	r3, [r7, #112]	; 0x70
 8003368:	2300      	movs	r3, #0
 800336a:	677b      	str	r3, [r7, #116]	; 0x74
 800336c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003370:	460b      	mov	r3, r1
 8003372:	4313      	orrs	r3, r2
 8003374:	d034      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800337a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003384:	d007      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003386:	e011      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003388:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	4a11      	ldr	r2, [pc, #68]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800338e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003392:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003394:	e00e      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003396:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800339a:	3308      	adds	r3, #8
 800339c:	2102      	movs	r1, #2
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fca4 	bl	8003cec <RCCEx_PLL2_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80033aa:	e003      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10d      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ca:	4a02      	ldr	r2, [pc, #8]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033cc:	430b      	orrs	r3, r1
 80033ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033d0:	e006      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80033d2:	bf00      	nop
 80033d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80033ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ee:	2300      	movs	r3, #0
 80033f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80033f6:	460b      	mov	r3, r1
 80033f8:	4313      	orrs	r3, r2
 80033fa:	d00c      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003400:	3328      	adds	r3, #40	; 0x28
 8003402:	2102      	movs	r1, #2
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fd23 	bl	8003e50 <RCCEx_PLL3_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003422:	663b      	str	r3, [r7, #96]	; 0x60
 8003424:	2300      	movs	r3, #0
 8003426:	667b      	str	r3, [r7, #100]	; 0x64
 8003428:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800342c:	460b      	mov	r3, r1
 800342e:	4313      	orrs	r3, r2
 8003430:	d038      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800343e:	d018      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003440:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003444:	d811      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800344a:	d014      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800344c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003450:	d80b      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003452:	2b00      	cmp	r3, #0
 8003454:	d011      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800345a:	d106      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800345c:	4bc3      	ldr	r3, [pc, #780]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	4ac2      	ldr	r2, [pc, #776]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003468:	e008      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003470:	e004      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003472:	bf00      	nop
 8003474:	e002      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003476:	bf00      	nop
 8003478:	e000      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800347a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800347c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10b      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003484:	4bb9      	ldr	r3, [pc, #740]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003488:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800348c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	4ab5      	ldr	r2, [pc, #724]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003496:	430b      	orrs	r3, r1
 8003498:	6553      	str	r3, [r2, #84]	; 0x54
 800349a:	e003      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80034b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80034b2:	2300      	movs	r3, #0
 80034b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80034ba:	460b      	mov	r3, r1
 80034bc:	4313      	orrs	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034c0:	4baa      	ldr	r3, [pc, #680]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80034c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ce:	4aa7      	ldr	r2, [pc, #668]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80034e0:	653b      	str	r3, [r7, #80]	; 0x50
 80034e2:	2300      	movs	r3, #0
 80034e4:	657b      	str	r3, [r7, #84]	; 0x54
 80034e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80034ea:	460b      	mov	r3, r1
 80034ec:	4313      	orrs	r3, r2
 80034ee:	d009      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034f0:	4b9e      	ldr	r3, [pc, #632]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80034f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	4a9b      	ldr	r2, [pc, #620]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003500:	430b      	orrs	r3, r1
 8003502:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003510:	64bb      	str	r3, [r7, #72]	; 0x48
 8003512:	2300      	movs	r3, #0
 8003514:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003516:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800351a:	460b      	mov	r3, r1
 800351c:	4313      	orrs	r3, r2
 800351e:	d009      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003520:	4b92      	ldr	r3, [pc, #584]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003528:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800352c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352e:	4a8f      	ldr	r2, [pc, #572]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003530:	430b      	orrs	r3, r1
 8003532:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003540:	643b      	str	r3, [r7, #64]	; 0x40
 8003542:	2300      	movs	r3, #0
 8003544:	647b      	str	r3, [r7, #68]	; 0x44
 8003546:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800354a:	460b      	mov	r3, r1
 800354c:	4313      	orrs	r3, r2
 800354e:	d00e      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003550:	4b86      	ldr	r3, [pc, #536]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	4a85      	ldr	r2, [pc, #532]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003556:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800355a:	6113      	str	r3, [r2, #16]
 800355c:	4b83      	ldr	r3, [pc, #524]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800355e:	6919      	ldr	r1, [r3, #16]
 8003560:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003564:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003568:	4a80      	ldr	r2, [pc, #512]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800356a:	430b      	orrs	r3, r1
 800356c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800356e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003576:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800357a:	63bb      	str	r3, [r7, #56]	; 0x38
 800357c:	2300      	movs	r3, #0
 800357e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003580:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003584:	460b      	mov	r3, r1
 8003586:	4313      	orrs	r3, r2
 8003588:	d009      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800358a:	4b78      	ldr	r3, [pc, #480]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800358c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003598:	4a74      	ldr	r2, [pc, #464]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800359a:	430b      	orrs	r3, r1
 800359c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800359e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80035aa:	633b      	str	r3, [r7, #48]	; 0x30
 80035ac:	2300      	movs	r3, #0
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
 80035b0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80035b4:	460b      	mov	r3, r1
 80035b6:	4313      	orrs	r3, r2
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035ba:	4b6c      	ldr	r3, [pc, #432]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80035c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ca:	4a68      	ldr	r2, [pc, #416]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035cc:	430b      	orrs	r3, r1
 80035ce:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80035d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	2100      	movs	r1, #0
 80035da:	62b9      	str	r1, [r7, #40]	; 0x28
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80035e6:	460b      	mov	r3, r1
 80035e8:	4313      	orrs	r3, r2
 80035ea:	d011      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035f0:	3308      	adds	r3, #8
 80035f2:	2100      	movs	r1, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fb79 	bl	8003cec <RCCEx_PLL2_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003600:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003608:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800360c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	2100      	movs	r1, #0
 800361a:	6239      	str	r1, [r7, #32]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
 8003622:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003626:	460b      	mov	r3, r1
 8003628:	4313      	orrs	r3, r2
 800362a:	d011      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800362c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003630:	3308      	adds	r3, #8
 8003632:	2101      	movs	r1, #1
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fb59 	bl	8003cec <RCCEx_PLL2_Config>
 800363a:	4603      	mov	r3, r0
 800363c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003640:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003648:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800364c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003658:	2100      	movs	r1, #0
 800365a:	61b9      	str	r1, [r7, #24]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003666:	460b      	mov	r3, r1
 8003668:	4313      	orrs	r3, r2
 800366a:	d011      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800366c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003670:	3308      	adds	r3, #8
 8003672:	2102      	movs	r1, #2
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fb39 	bl	8003cec <RCCEx_PLL2_Config>
 800367a:	4603      	mov	r3, r0
 800367c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003680:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003688:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800368c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003698:	2100      	movs	r1, #0
 800369a:	6139      	str	r1, [r7, #16]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80036a6:	460b      	mov	r3, r1
 80036a8:	4313      	orrs	r3, r2
 80036aa:	d011      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036b0:	3328      	adds	r3, #40	; 0x28
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fbcb 	bl	8003e50 <RCCEx_PLL3_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80036c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80036d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	2100      	movs	r1, #0
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80036e6:	460b      	mov	r3, r1
 80036e8:	4313      	orrs	r3, r2
 80036ea:	d011      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036f0:	3328      	adds	r3, #40	; 0x28
 80036f2:	2101      	movs	r1, #1
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fbab 	bl	8003e50 <RCCEx_PLL3_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003700:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003708:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800370c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	2100      	movs	r1, #0
 800371a:	6039      	str	r1, [r7, #0]
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	607b      	str	r3, [r7, #4]
 8003722:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003726:	460b      	mov	r3, r1
 8003728:	4313      	orrs	r3, r2
 800372a:	d011      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800372c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003730:	3328      	adds	r3, #40	; 0x28
 8003732:	2102      	movs	r1, #2
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fb8b 	bl	8003e50 <RCCEx_PLL3_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003740:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003748:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800374c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003750:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
}
 800375e:	4618      	mov	r0, r3
 8003760:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003764:	46bd      	mov	sp, r7
 8003766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800376a:	bf00      	nop
 800376c:	58024400 	.word	0x58024400

08003770 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003774:	f7fe fde2 	bl	800233c <HAL_RCC_GetHCLKFreq>
 8003778:	4602      	mov	r2, r0
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	4904      	ldr	r1, [pc, #16]	; (8003798 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003786:	5ccb      	ldrb	r3, [r1, r3]
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	58024400 	.word	0x58024400
 8003798:	0800782c 	.word	0x0800782c

0800379c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800379c:	b480      	push	{r7}
 800379e:	b089      	sub	sp, #36	; 0x24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037a4:	4ba1      	ldr	r3, [pc, #644]	; (8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80037ae:	4b9f      	ldr	r3, [pc, #636]	; (8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	0b1b      	lsrs	r3, r3, #12
 80037b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80037ba:	4b9c      	ldr	r3, [pc, #624]	; (8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80037c6:	4b99      	ldr	r3, [pc, #612]	; (8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ca:	08db      	lsrs	r3, r3, #3
 80037cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 8111 	beq.w	8003a0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	f000 8083 	beq.w	80038f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	f200 80a1 	bhi.w	800393c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d056      	beq.n	80038b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003806:	e099      	b.n	800393c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003808:	4b88      	ldr	r3, [pc, #544]	; (8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d02d      	beq.n	8003870 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003814:	4b85      	ldr	r3, [pc, #532]	; (8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	08db      	lsrs	r3, r3, #3
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	4a84      	ldr	r2, [pc, #528]	; (8003a30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
 8003824:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	ee07 3a90 	vmov	s15, r3
 800382c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800383e:	4b7b      	ldr	r3, [pc, #492]	; (8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800384e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003852:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800385a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800385e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800386e:	e087      	b.n	8003980 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	ee07 3a90 	vmov	s15, r3
 8003876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800387e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003882:	4b6a      	ldr	r3, [pc, #424]	; (8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003892:	ed97 6a03 	vldr	s12, [r7, #12]
 8003896:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800389a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800389e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038b2:	e065      	b.n	8003980 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038c6:	4b59      	ldr	r3, [pc, #356]	; (8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038f6:	e043      	b.n	8003980 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003902:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800390a:	4b48      	ldr	r3, [pc, #288]	; (8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391a:	ed97 6a03 	vldr	s12, [r7, #12]
 800391e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800392e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800393a:	e021      	b.n	8003980 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003946:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800394a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800394e:	4b37      	ldr	r3, [pc, #220]	; (8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003962:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800396a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800397e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003980:	4b2a      	ldr	r3, [pc, #168]	; (8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003984:	0a5b      	lsrs	r3, r3, #9
 8003986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800398a:	ee07 3a90 	vmov	s15, r3
 800398e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003992:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003996:	ee37 7a87 	vadd.f32	s14, s15, s14
 800399a:	edd7 6a07 	vldr	s13, [r7, #28]
 800399e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039a6:	ee17 2a90 	vmov	r2, s15
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80039ae:	4b1f      	ldr	r3, [pc, #124]	; (8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	0c1b      	lsrs	r3, r3, #16
 80039b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b8:	ee07 3a90 	vmov	s15, r3
 80039bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80039cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039d4:	ee17 2a90 	vmov	r2, s15
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80039dc:	4b13      	ldr	r3, [pc, #76]	; (8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	0e1b      	lsrs	r3, r3, #24
 80039e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e6:	ee07 3a90 	vmov	s15, r3
 80039ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80039fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a02:	ee17 2a90 	vmov	r2, s15
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003a0a:	e008      	b.n	8003a1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	609a      	str	r2, [r3, #8]
}
 8003a1e:	bf00      	nop
 8003a20:	3724      	adds	r7, #36	; 0x24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	58024400 	.word	0x58024400
 8003a30:	03d09000 	.word	0x03d09000
 8003a34:	46000000 	.word	0x46000000
 8003a38:	4c742400 	.word	0x4c742400
 8003a3c:	4a742400 	.word	0x4a742400
 8003a40:	4af42400 	.word	0x4af42400

08003a44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b089      	sub	sp, #36	; 0x24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a4c:	4ba1      	ldr	r3, [pc, #644]	; (8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003a56:	4b9f      	ldr	r3, [pc, #636]	; (8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	0d1b      	lsrs	r3, r3, #20
 8003a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003a62:	4b9c      	ldr	r3, [pc, #624]	; (8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003a6e:	4b99      	ldr	r3, [pc, #612]	; (8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	08db      	lsrs	r3, r3, #3
 8003a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	fb02 f303 	mul.w	r3, r2, r3
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 8111 	beq.w	8003cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	f000 8083 	beq.w	8003ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	f200 80a1 	bhi.w	8003be4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d056      	beq.n	8003b5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003aae:	e099      	b.n	8003be4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ab0:	4b88      	ldr	r3, [pc, #544]	; (8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d02d      	beq.n	8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003abc:	4b85      	ldr	r3, [pc, #532]	; (8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	08db      	lsrs	r3, r3, #3
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	4a84      	ldr	r2, [pc, #528]	; (8003cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8003acc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	ee07 3a90 	vmov	s15, r3
 8003ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ae6:	4b7b      	ldr	r3, [pc, #492]	; (8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003afa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003b16:	e087      	b.n	8003c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b2a:	4b6a      	ldr	r3, [pc, #424]	; (8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b5a:	e065      	b.n	8003c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b6e:	4b59      	ldr	r3, [pc, #356]	; (8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b9e:	e043      	b.n	8003c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003baa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bb2:	4b48      	ldr	r3, [pc, #288]	; (8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003be2:	e021      	b.n	8003c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bf6:	4b37      	ldr	r3, [pc, #220]	; (8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003c28:	4b2a      	ldr	r3, [pc, #168]	; (8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	0a5b      	lsrs	r3, r3, #9
 8003c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c4e:	ee17 2a90 	vmov	r2, s15
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003c56:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	0c1b      	lsrs	r3, r3, #16
 8003c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c60:	ee07 3a90 	vmov	s15, r3
 8003c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c70:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c7c:	ee17 2a90 	vmov	r2, s15
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003c84:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	0e1b      	lsrs	r3, r3, #24
 8003c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003caa:	ee17 2a90 	vmov	r2, s15
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	609a      	str	r2, [r3, #8]
}
 8003cc6:	bf00      	nop
 8003cc8:	3724      	adds	r7, #36	; 0x24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	58024400 	.word	0x58024400
 8003cd8:	03d09000 	.word	0x03d09000
 8003cdc:	46000000 	.word	0x46000000
 8003ce0:	4c742400 	.word	0x4c742400
 8003ce4:	4a742400 	.word	0x4a742400
 8003ce8:	4af42400 	.word	0x4af42400

08003cec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cfa:	4b53      	ldr	r3, [pc, #332]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d101      	bne.n	8003d0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e099      	b.n	8003e3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d0a:	4b4f      	ldr	r3, [pc, #316]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a4e      	ldr	r2, [pc, #312]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003d10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d16:	f7fd f89b 	bl	8000e50 <HAL_GetTick>
 8003d1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d1c:	e008      	b.n	8003d30 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d1e:	f7fd f897 	bl	8000e50 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e086      	b.n	8003e3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d30:	4b45      	ldr	r3, [pc, #276]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f0      	bne.n	8003d1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d3c:	4b42      	ldr	r3, [pc, #264]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	031b      	lsls	r3, r3, #12
 8003d4a:	493f      	ldr	r1, [pc, #252]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	628b      	str	r3, [r1, #40]	; 0x28
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	025b      	lsls	r3, r3, #9
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	041b      	lsls	r3, r3, #16
 8003d6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	061b      	lsls	r3, r3, #24
 8003d7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d80:	4931      	ldr	r1, [pc, #196]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d86:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	492d      	ldr	r1, [pc, #180]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d98:	4b2b      	ldr	r3, [pc, #172]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	f023 0220 	bic.w	r2, r3, #32
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	4928      	ldr	r1, [pc, #160]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003daa:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	4a26      	ldr	r2, [pc, #152]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003db0:	f023 0310 	bic.w	r3, r3, #16
 8003db4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003db6:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003db8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dba:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <RCCEx_PLL2_Config+0x160>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	69d2      	ldr	r2, [r2, #28]
 8003dc2:	00d2      	lsls	r2, r2, #3
 8003dc4:	4920      	ldr	r1, [pc, #128]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003dca:	4b1f      	ldr	r3, [pc, #124]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	4a1e      	ldr	r2, [pc, #120]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003dd0:	f043 0310 	orr.w	r3, r3, #16
 8003dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d106      	bne.n	8003dea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ddc:	4b1a      	ldr	r3, [pc, #104]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	4a19      	ldr	r2, [pc, #100]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003de2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003de6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003de8:	e00f      	b.n	8003e0a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d106      	bne.n	8003dfe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003df0:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	4a14      	ldr	r2, [pc, #80]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003dfc:	e005      	b.n	8003e0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003dfe:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	4a11      	ldr	r2, [pc, #68]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003e04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e0a:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a0e      	ldr	r2, [pc, #56]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003e10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e16:	f7fd f81b 	bl	8000e50 <HAL_GetTick>
 8003e1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e1c:	e008      	b.n	8003e30 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e1e:	f7fd f817 	bl	8000e50 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e006      	b.n	8003e3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <RCCEx_PLL2_Config+0x15c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	58024400 	.word	0x58024400
 8003e4c:	ffff0007 	.word	0xffff0007

08003e50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e5e:	4b53      	ldr	r3, [pc, #332]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d101      	bne.n	8003e6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e099      	b.n	8003fa2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e6e:	4b4f      	ldr	r3, [pc, #316]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a4e      	ldr	r2, [pc, #312]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7a:	f7fc ffe9 	bl	8000e50 <HAL_GetTick>
 8003e7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e80:	e008      	b.n	8003e94 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e82:	f7fc ffe5 	bl	8000e50 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e086      	b.n	8003fa2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e94:	4b45      	ldr	r3, [pc, #276]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f0      	bne.n	8003e82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ea0:	4b42      	ldr	r3, [pc, #264]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	051b      	lsls	r3, r3, #20
 8003eae:	493f      	ldr	r1, [pc, #252]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	628b      	str	r3, [r1, #40]	; 0x28
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	025b      	lsls	r3, r3, #9
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	041b      	lsls	r3, r3, #16
 8003ed2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	061b      	lsls	r3, r3, #24
 8003ee0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ee4:	4931      	ldr	r1, [pc, #196]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003eea:	4b30      	ldr	r3, [pc, #192]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	492d      	ldr	r1, [pc, #180]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003efc:	4b2b      	ldr	r3, [pc, #172]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	4928      	ldr	r1, [pc, #160]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f0e:	4b27      	ldr	r3, [pc, #156]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	4a26      	ldr	r2, [pc, #152]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f1a:	4b24      	ldr	r3, [pc, #144]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f1e:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <RCCEx_PLL3_Config+0x160>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	69d2      	ldr	r2, [r2, #28]
 8003f26:	00d2      	lsls	r2, r2, #3
 8003f28:	4920      	ldr	r1, [pc, #128]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f2e:	4b1f      	ldr	r3, [pc, #124]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	4a1e      	ldr	r2, [pc, #120]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d106      	bne.n	8003f4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f40:	4b1a      	ldr	r3, [pc, #104]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	4a19      	ldr	r2, [pc, #100]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003f46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f4c:	e00f      	b.n	8003f6e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d106      	bne.n	8003f62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f54:	4b15      	ldr	r3, [pc, #84]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	4a14      	ldr	r2, [pc, #80]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003f5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f60:	e005      	b.n	8003f6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f62:	4b12      	ldr	r3, [pc, #72]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	4a11      	ldr	r2, [pc, #68]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003f68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f6e:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a0e      	ldr	r2, [pc, #56]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f7a:	f7fc ff69 	bl	8000e50 <HAL_GetTick>
 8003f7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f80:	e008      	b.n	8003f94 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f82:	f7fc ff65 	bl	8000e50 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e006      	b.n	8003fa2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <RCCEx_PLL3_Config+0x15c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0f0      	beq.n	8003f82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	58024400 	.word	0x58024400
 8003fb0:	ffff0007 	.word	0xffff0007

08003fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e042      	b.n	800404c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d106      	bne.n	8003fde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fc fd7d 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2224      	movs	r2, #36	; 0x24
 8003fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8f4 	bl	80041e4 <UART_SetConfig>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e022      	b.n	800404c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 ff54 	bl	8004ebc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 ffdb 	bl	8005000 <UART_CheckIdleState>
 800404a:	4603      	mov	r3, r0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	; 0x28
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800406a:	2b20      	cmp	r3, #32
 800406c:	f040 80b5 	bne.w	80041da <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_UART_Receive+0x28>
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0ad      	b.n	80041dc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2222      	movs	r2, #34	; 0x22
 800408c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004096:	f7fc fedb 	bl	8000e50 <HAL_GetTick>
 800409a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	88fa      	ldrh	r2, [r7, #6]
 80040a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	88fa      	ldrh	r2, [r7, #6]
 80040a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b4:	d10e      	bne.n	80040d4 <HAL_UART_Receive+0x80>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d105      	bne.n	80040ca <HAL_UART_Receive+0x76>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80040c8:	e02d      	b.n	8004126 <HAL_UART_Receive+0xd2>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	22ff      	movs	r2, #255	; 0xff
 80040ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80040d2:	e028      	b.n	8004126 <HAL_UART_Receive+0xd2>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10d      	bne.n	80040f8 <HAL_UART_Receive+0xa4>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <HAL_UART_Receive+0x9a>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	22ff      	movs	r2, #255	; 0xff
 80040e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80040ec:	e01b      	b.n	8004126 <HAL_UART_Receive+0xd2>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	227f      	movs	r2, #127	; 0x7f
 80040f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80040f6:	e016      	b.n	8004126 <HAL_UART_Receive+0xd2>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004100:	d10d      	bne.n	800411e <HAL_UART_Receive+0xca>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d104      	bne.n	8004114 <HAL_UART_Receive+0xc0>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	227f      	movs	r2, #127	; 0x7f
 800410e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004112:	e008      	b.n	8004126 <HAL_UART_Receive+0xd2>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	223f      	movs	r2, #63	; 0x3f
 8004118:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800411c:	e003      	b.n	8004126 <HAL_UART_Receive+0xd2>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800412c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004136:	d108      	bne.n	800414a <HAL_UART_Receive+0xf6>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d104      	bne.n	800414a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	61bb      	str	r3, [r7, #24]
 8004148:	e003      	b.n	8004152 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800414e:	2300      	movs	r3, #0
 8004150:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004152:	e036      	b.n	80041c2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2200      	movs	r2, #0
 800415c:	2120      	movs	r1, #32
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 fff8 	bl	8005154 <UART_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d005      	beq.n	8004176 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e032      	b.n	80041dc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10c      	bne.n	8004196 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	b29a      	uxth	r2, r3
 8004184:	8a7b      	ldrh	r3, [r7, #18]
 8004186:	4013      	ands	r3, r2
 8004188:	b29a      	uxth	r2, r3
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	3302      	adds	r3, #2
 8004192:	61bb      	str	r3, [r7, #24]
 8004194:	e00c      	b.n	80041b0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	b2da      	uxtb	r2, r3
 800419e:	8a7b      	ldrh	r3, [r7, #18]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	4013      	ands	r3, r2
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	3301      	adds	r3, #1
 80041ae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1c2      	bne.n	8004154 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e000      	b.n	80041dc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80041da:	2302      	movs	r3, #2
  }
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e8:	b092      	sub	sp, #72	; 0x48
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	431a      	orrs	r2, r3
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	431a      	orrs	r2, r3
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	4313      	orrs	r3, r2
 800420a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4bbe      	ldr	r3, [pc, #760]	; (800450c <UART_SetConfig+0x328>)
 8004214:	4013      	ands	r3, r2
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	6812      	ldr	r2, [r2, #0]
 800421a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800421c:	430b      	orrs	r3, r1
 800421e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4ab3      	ldr	r2, [pc, #716]	; (8004510 <UART_SetConfig+0x32c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800424c:	4313      	orrs	r3, r2
 800424e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	4baf      	ldr	r3, [pc, #700]	; (8004514 <UART_SetConfig+0x330>)
 8004258:	4013      	ands	r3, r2
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	6812      	ldr	r2, [r2, #0]
 800425e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004260:	430b      	orrs	r3, r1
 8004262:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	f023 010f 	bic.w	r1, r3, #15
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4aa6      	ldr	r2, [pc, #664]	; (8004518 <UART_SetConfig+0x334>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d177      	bne.n	8004374 <UART_SetConfig+0x190>
 8004284:	4ba5      	ldr	r3, [pc, #660]	; (800451c <UART_SetConfig+0x338>)
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800428c:	2b28      	cmp	r3, #40	; 0x28
 800428e:	d86d      	bhi.n	800436c <UART_SetConfig+0x188>
 8004290:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <UART_SetConfig+0xb4>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	0800433d 	.word	0x0800433d
 800429c:	0800436d 	.word	0x0800436d
 80042a0:	0800436d 	.word	0x0800436d
 80042a4:	0800436d 	.word	0x0800436d
 80042a8:	0800436d 	.word	0x0800436d
 80042ac:	0800436d 	.word	0x0800436d
 80042b0:	0800436d 	.word	0x0800436d
 80042b4:	0800436d 	.word	0x0800436d
 80042b8:	08004345 	.word	0x08004345
 80042bc:	0800436d 	.word	0x0800436d
 80042c0:	0800436d 	.word	0x0800436d
 80042c4:	0800436d 	.word	0x0800436d
 80042c8:	0800436d 	.word	0x0800436d
 80042cc:	0800436d 	.word	0x0800436d
 80042d0:	0800436d 	.word	0x0800436d
 80042d4:	0800436d 	.word	0x0800436d
 80042d8:	0800434d 	.word	0x0800434d
 80042dc:	0800436d 	.word	0x0800436d
 80042e0:	0800436d 	.word	0x0800436d
 80042e4:	0800436d 	.word	0x0800436d
 80042e8:	0800436d 	.word	0x0800436d
 80042ec:	0800436d 	.word	0x0800436d
 80042f0:	0800436d 	.word	0x0800436d
 80042f4:	0800436d 	.word	0x0800436d
 80042f8:	08004355 	.word	0x08004355
 80042fc:	0800436d 	.word	0x0800436d
 8004300:	0800436d 	.word	0x0800436d
 8004304:	0800436d 	.word	0x0800436d
 8004308:	0800436d 	.word	0x0800436d
 800430c:	0800436d 	.word	0x0800436d
 8004310:	0800436d 	.word	0x0800436d
 8004314:	0800436d 	.word	0x0800436d
 8004318:	0800435d 	.word	0x0800435d
 800431c:	0800436d 	.word	0x0800436d
 8004320:	0800436d 	.word	0x0800436d
 8004324:	0800436d 	.word	0x0800436d
 8004328:	0800436d 	.word	0x0800436d
 800432c:	0800436d 	.word	0x0800436d
 8004330:	0800436d 	.word	0x0800436d
 8004334:	0800436d 	.word	0x0800436d
 8004338:	08004365 	.word	0x08004365
 800433c:	2301      	movs	r3, #1
 800433e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004342:	e326      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004344:	2304      	movs	r3, #4
 8004346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800434a:	e322      	b.n	8004992 <UART_SetConfig+0x7ae>
 800434c:	2308      	movs	r3, #8
 800434e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004352:	e31e      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004354:	2310      	movs	r3, #16
 8004356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800435a:	e31a      	b.n	8004992 <UART_SetConfig+0x7ae>
 800435c:	2320      	movs	r3, #32
 800435e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004362:	e316      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004364:	2340      	movs	r3, #64	; 0x40
 8004366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800436a:	e312      	b.n	8004992 <UART_SetConfig+0x7ae>
 800436c:	2380      	movs	r3, #128	; 0x80
 800436e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004372:	e30e      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a69      	ldr	r2, [pc, #420]	; (8004520 <UART_SetConfig+0x33c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d130      	bne.n	80043e0 <UART_SetConfig+0x1fc>
 800437e:	4b67      	ldr	r3, [pc, #412]	; (800451c <UART_SetConfig+0x338>)
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	2b05      	cmp	r3, #5
 8004388:	d826      	bhi.n	80043d8 <UART_SetConfig+0x1f4>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <UART_SetConfig+0x1ac>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043a9 	.word	0x080043a9
 8004394:	080043b1 	.word	0x080043b1
 8004398:	080043b9 	.word	0x080043b9
 800439c:	080043c1 	.word	0x080043c1
 80043a0:	080043c9 	.word	0x080043c9
 80043a4:	080043d1 	.word	0x080043d1
 80043a8:	2300      	movs	r3, #0
 80043aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ae:	e2f0      	b.n	8004992 <UART_SetConfig+0x7ae>
 80043b0:	2304      	movs	r3, #4
 80043b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043b6:	e2ec      	b.n	8004992 <UART_SetConfig+0x7ae>
 80043b8:	2308      	movs	r3, #8
 80043ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043be:	e2e8      	b.n	8004992 <UART_SetConfig+0x7ae>
 80043c0:	2310      	movs	r3, #16
 80043c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043c6:	e2e4      	b.n	8004992 <UART_SetConfig+0x7ae>
 80043c8:	2320      	movs	r3, #32
 80043ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ce:	e2e0      	b.n	8004992 <UART_SetConfig+0x7ae>
 80043d0:	2340      	movs	r3, #64	; 0x40
 80043d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043d6:	e2dc      	b.n	8004992 <UART_SetConfig+0x7ae>
 80043d8:	2380      	movs	r3, #128	; 0x80
 80043da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043de:	e2d8      	b.n	8004992 <UART_SetConfig+0x7ae>
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a4f      	ldr	r2, [pc, #316]	; (8004524 <UART_SetConfig+0x340>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d130      	bne.n	800444c <UART_SetConfig+0x268>
 80043ea:	4b4c      	ldr	r3, [pc, #304]	; (800451c <UART_SetConfig+0x338>)
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	2b05      	cmp	r3, #5
 80043f4:	d826      	bhi.n	8004444 <UART_SetConfig+0x260>
 80043f6:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <UART_SetConfig+0x218>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	08004415 	.word	0x08004415
 8004400:	0800441d 	.word	0x0800441d
 8004404:	08004425 	.word	0x08004425
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004435 	.word	0x08004435
 8004410:	0800443d 	.word	0x0800443d
 8004414:	2300      	movs	r3, #0
 8004416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800441a:	e2ba      	b.n	8004992 <UART_SetConfig+0x7ae>
 800441c:	2304      	movs	r3, #4
 800441e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004422:	e2b6      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004424:	2308      	movs	r3, #8
 8004426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800442a:	e2b2      	b.n	8004992 <UART_SetConfig+0x7ae>
 800442c:	2310      	movs	r3, #16
 800442e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004432:	e2ae      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004434:	2320      	movs	r3, #32
 8004436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800443a:	e2aa      	b.n	8004992 <UART_SetConfig+0x7ae>
 800443c:	2340      	movs	r3, #64	; 0x40
 800443e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004442:	e2a6      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800444a:	e2a2      	b.n	8004992 <UART_SetConfig+0x7ae>
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a35      	ldr	r2, [pc, #212]	; (8004528 <UART_SetConfig+0x344>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d130      	bne.n	80044b8 <UART_SetConfig+0x2d4>
 8004456:	4b31      	ldr	r3, [pc, #196]	; (800451c <UART_SetConfig+0x338>)
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	2b05      	cmp	r3, #5
 8004460:	d826      	bhi.n	80044b0 <UART_SetConfig+0x2cc>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <UART_SetConfig+0x284>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	08004481 	.word	0x08004481
 800446c:	08004489 	.word	0x08004489
 8004470:	08004491 	.word	0x08004491
 8004474:	08004499 	.word	0x08004499
 8004478:	080044a1 	.word	0x080044a1
 800447c:	080044a9 	.word	0x080044a9
 8004480:	2300      	movs	r3, #0
 8004482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004486:	e284      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004488:	2304      	movs	r3, #4
 800448a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800448e:	e280      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004490:	2308      	movs	r3, #8
 8004492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004496:	e27c      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004498:	2310      	movs	r3, #16
 800449a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800449e:	e278      	b.n	8004992 <UART_SetConfig+0x7ae>
 80044a0:	2320      	movs	r3, #32
 80044a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044a6:	e274      	b.n	8004992 <UART_SetConfig+0x7ae>
 80044a8:	2340      	movs	r3, #64	; 0x40
 80044aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ae:	e270      	b.n	8004992 <UART_SetConfig+0x7ae>
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044b6:	e26c      	b.n	8004992 <UART_SetConfig+0x7ae>
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1b      	ldr	r2, [pc, #108]	; (800452c <UART_SetConfig+0x348>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d142      	bne.n	8004548 <UART_SetConfig+0x364>
 80044c2:	4b16      	ldr	r3, [pc, #88]	; (800451c <UART_SetConfig+0x338>)
 80044c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	2b05      	cmp	r3, #5
 80044cc:	d838      	bhi.n	8004540 <UART_SetConfig+0x35c>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <UART_SetConfig+0x2f0>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	080044ed 	.word	0x080044ed
 80044d8:	080044f5 	.word	0x080044f5
 80044dc:	080044fd 	.word	0x080044fd
 80044e0:	08004505 	.word	0x08004505
 80044e4:	08004531 	.word	0x08004531
 80044e8:	08004539 	.word	0x08004539
 80044ec:	2300      	movs	r3, #0
 80044ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044f2:	e24e      	b.n	8004992 <UART_SetConfig+0x7ae>
 80044f4:	2304      	movs	r3, #4
 80044f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044fa:	e24a      	b.n	8004992 <UART_SetConfig+0x7ae>
 80044fc:	2308      	movs	r3, #8
 80044fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004502:	e246      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004504:	2310      	movs	r3, #16
 8004506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800450a:	e242      	b.n	8004992 <UART_SetConfig+0x7ae>
 800450c:	cfff69f3 	.word	0xcfff69f3
 8004510:	58000c00 	.word	0x58000c00
 8004514:	11fff4ff 	.word	0x11fff4ff
 8004518:	40011000 	.word	0x40011000
 800451c:	58024400 	.word	0x58024400
 8004520:	40004400 	.word	0x40004400
 8004524:	40004800 	.word	0x40004800
 8004528:	40004c00 	.word	0x40004c00
 800452c:	40005000 	.word	0x40005000
 8004530:	2320      	movs	r3, #32
 8004532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004536:	e22c      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004538:	2340      	movs	r3, #64	; 0x40
 800453a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800453e:	e228      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004540:	2380      	movs	r3, #128	; 0x80
 8004542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004546:	e224      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4ab1      	ldr	r2, [pc, #708]	; (8004814 <UART_SetConfig+0x630>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d176      	bne.n	8004640 <UART_SetConfig+0x45c>
 8004552:	4bb1      	ldr	r3, [pc, #708]	; (8004818 <UART_SetConfig+0x634>)
 8004554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800455a:	2b28      	cmp	r3, #40	; 0x28
 800455c:	d86c      	bhi.n	8004638 <UART_SetConfig+0x454>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0x380>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	08004609 	.word	0x08004609
 8004568:	08004639 	.word	0x08004639
 800456c:	08004639 	.word	0x08004639
 8004570:	08004639 	.word	0x08004639
 8004574:	08004639 	.word	0x08004639
 8004578:	08004639 	.word	0x08004639
 800457c:	08004639 	.word	0x08004639
 8004580:	08004639 	.word	0x08004639
 8004584:	08004611 	.word	0x08004611
 8004588:	08004639 	.word	0x08004639
 800458c:	08004639 	.word	0x08004639
 8004590:	08004639 	.word	0x08004639
 8004594:	08004639 	.word	0x08004639
 8004598:	08004639 	.word	0x08004639
 800459c:	08004639 	.word	0x08004639
 80045a0:	08004639 	.word	0x08004639
 80045a4:	08004619 	.word	0x08004619
 80045a8:	08004639 	.word	0x08004639
 80045ac:	08004639 	.word	0x08004639
 80045b0:	08004639 	.word	0x08004639
 80045b4:	08004639 	.word	0x08004639
 80045b8:	08004639 	.word	0x08004639
 80045bc:	08004639 	.word	0x08004639
 80045c0:	08004639 	.word	0x08004639
 80045c4:	08004621 	.word	0x08004621
 80045c8:	08004639 	.word	0x08004639
 80045cc:	08004639 	.word	0x08004639
 80045d0:	08004639 	.word	0x08004639
 80045d4:	08004639 	.word	0x08004639
 80045d8:	08004639 	.word	0x08004639
 80045dc:	08004639 	.word	0x08004639
 80045e0:	08004639 	.word	0x08004639
 80045e4:	08004629 	.word	0x08004629
 80045e8:	08004639 	.word	0x08004639
 80045ec:	08004639 	.word	0x08004639
 80045f0:	08004639 	.word	0x08004639
 80045f4:	08004639 	.word	0x08004639
 80045f8:	08004639 	.word	0x08004639
 80045fc:	08004639 	.word	0x08004639
 8004600:	08004639 	.word	0x08004639
 8004604:	08004631 	.word	0x08004631
 8004608:	2301      	movs	r3, #1
 800460a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800460e:	e1c0      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004610:	2304      	movs	r3, #4
 8004612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004616:	e1bc      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004618:	2308      	movs	r3, #8
 800461a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800461e:	e1b8      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004620:	2310      	movs	r3, #16
 8004622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004626:	e1b4      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004628:	2320      	movs	r3, #32
 800462a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800462e:	e1b0      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004630:	2340      	movs	r3, #64	; 0x40
 8004632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004636:	e1ac      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004638:	2380      	movs	r3, #128	; 0x80
 800463a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800463e:	e1a8      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a75      	ldr	r2, [pc, #468]	; (800481c <UART_SetConfig+0x638>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d130      	bne.n	80046ac <UART_SetConfig+0x4c8>
 800464a:	4b73      	ldr	r3, [pc, #460]	; (8004818 <UART_SetConfig+0x634>)
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	2b05      	cmp	r3, #5
 8004654:	d826      	bhi.n	80046a4 <UART_SetConfig+0x4c0>
 8004656:	a201      	add	r2, pc, #4	; (adr r2, 800465c <UART_SetConfig+0x478>)
 8004658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465c:	08004675 	.word	0x08004675
 8004660:	0800467d 	.word	0x0800467d
 8004664:	08004685 	.word	0x08004685
 8004668:	0800468d 	.word	0x0800468d
 800466c:	08004695 	.word	0x08004695
 8004670:	0800469d 	.word	0x0800469d
 8004674:	2300      	movs	r3, #0
 8004676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800467a:	e18a      	b.n	8004992 <UART_SetConfig+0x7ae>
 800467c:	2304      	movs	r3, #4
 800467e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004682:	e186      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004684:	2308      	movs	r3, #8
 8004686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800468a:	e182      	b.n	8004992 <UART_SetConfig+0x7ae>
 800468c:	2310      	movs	r3, #16
 800468e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004692:	e17e      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004694:	2320      	movs	r3, #32
 8004696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800469a:	e17a      	b.n	8004992 <UART_SetConfig+0x7ae>
 800469c:	2340      	movs	r3, #64	; 0x40
 800469e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046a2:	e176      	b.n	8004992 <UART_SetConfig+0x7ae>
 80046a4:	2380      	movs	r3, #128	; 0x80
 80046a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046aa:	e172      	b.n	8004992 <UART_SetConfig+0x7ae>
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a5b      	ldr	r2, [pc, #364]	; (8004820 <UART_SetConfig+0x63c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d130      	bne.n	8004718 <UART_SetConfig+0x534>
 80046b6:	4b58      	ldr	r3, [pc, #352]	; (8004818 <UART_SetConfig+0x634>)
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	2b05      	cmp	r3, #5
 80046c0:	d826      	bhi.n	8004710 <UART_SetConfig+0x52c>
 80046c2:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <UART_SetConfig+0x4e4>)
 80046c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c8:	080046e1 	.word	0x080046e1
 80046cc:	080046e9 	.word	0x080046e9
 80046d0:	080046f1 	.word	0x080046f1
 80046d4:	080046f9 	.word	0x080046f9
 80046d8:	08004701 	.word	0x08004701
 80046dc:	08004709 	.word	0x08004709
 80046e0:	2300      	movs	r3, #0
 80046e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046e6:	e154      	b.n	8004992 <UART_SetConfig+0x7ae>
 80046e8:	2304      	movs	r3, #4
 80046ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ee:	e150      	b.n	8004992 <UART_SetConfig+0x7ae>
 80046f0:	2308      	movs	r3, #8
 80046f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046f6:	e14c      	b.n	8004992 <UART_SetConfig+0x7ae>
 80046f8:	2310      	movs	r3, #16
 80046fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046fe:	e148      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004700:	2320      	movs	r3, #32
 8004702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004706:	e144      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004708:	2340      	movs	r3, #64	; 0x40
 800470a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800470e:	e140      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004710:	2380      	movs	r3, #128	; 0x80
 8004712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004716:	e13c      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a41      	ldr	r2, [pc, #260]	; (8004824 <UART_SetConfig+0x640>)
 800471e:	4293      	cmp	r3, r2
 8004720:	f040 8082 	bne.w	8004828 <UART_SetConfig+0x644>
 8004724:	4b3c      	ldr	r3, [pc, #240]	; (8004818 <UART_SetConfig+0x634>)
 8004726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004728:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800472c:	2b28      	cmp	r3, #40	; 0x28
 800472e:	d86d      	bhi.n	800480c <UART_SetConfig+0x628>
 8004730:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <UART_SetConfig+0x554>)
 8004732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004736:	bf00      	nop
 8004738:	080047dd 	.word	0x080047dd
 800473c:	0800480d 	.word	0x0800480d
 8004740:	0800480d 	.word	0x0800480d
 8004744:	0800480d 	.word	0x0800480d
 8004748:	0800480d 	.word	0x0800480d
 800474c:	0800480d 	.word	0x0800480d
 8004750:	0800480d 	.word	0x0800480d
 8004754:	0800480d 	.word	0x0800480d
 8004758:	080047e5 	.word	0x080047e5
 800475c:	0800480d 	.word	0x0800480d
 8004760:	0800480d 	.word	0x0800480d
 8004764:	0800480d 	.word	0x0800480d
 8004768:	0800480d 	.word	0x0800480d
 800476c:	0800480d 	.word	0x0800480d
 8004770:	0800480d 	.word	0x0800480d
 8004774:	0800480d 	.word	0x0800480d
 8004778:	080047ed 	.word	0x080047ed
 800477c:	0800480d 	.word	0x0800480d
 8004780:	0800480d 	.word	0x0800480d
 8004784:	0800480d 	.word	0x0800480d
 8004788:	0800480d 	.word	0x0800480d
 800478c:	0800480d 	.word	0x0800480d
 8004790:	0800480d 	.word	0x0800480d
 8004794:	0800480d 	.word	0x0800480d
 8004798:	080047f5 	.word	0x080047f5
 800479c:	0800480d 	.word	0x0800480d
 80047a0:	0800480d 	.word	0x0800480d
 80047a4:	0800480d 	.word	0x0800480d
 80047a8:	0800480d 	.word	0x0800480d
 80047ac:	0800480d 	.word	0x0800480d
 80047b0:	0800480d 	.word	0x0800480d
 80047b4:	0800480d 	.word	0x0800480d
 80047b8:	080047fd 	.word	0x080047fd
 80047bc:	0800480d 	.word	0x0800480d
 80047c0:	0800480d 	.word	0x0800480d
 80047c4:	0800480d 	.word	0x0800480d
 80047c8:	0800480d 	.word	0x0800480d
 80047cc:	0800480d 	.word	0x0800480d
 80047d0:	0800480d 	.word	0x0800480d
 80047d4:	0800480d 	.word	0x0800480d
 80047d8:	08004805 	.word	0x08004805
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047e2:	e0d6      	b.n	8004992 <UART_SetConfig+0x7ae>
 80047e4:	2304      	movs	r3, #4
 80047e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ea:	e0d2      	b.n	8004992 <UART_SetConfig+0x7ae>
 80047ec:	2308      	movs	r3, #8
 80047ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047f2:	e0ce      	b.n	8004992 <UART_SetConfig+0x7ae>
 80047f4:	2310      	movs	r3, #16
 80047f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047fa:	e0ca      	b.n	8004992 <UART_SetConfig+0x7ae>
 80047fc:	2320      	movs	r3, #32
 80047fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004802:	e0c6      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004804:	2340      	movs	r3, #64	; 0x40
 8004806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800480a:	e0c2      	b.n	8004992 <UART_SetConfig+0x7ae>
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004812:	e0be      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004814:	40011400 	.word	0x40011400
 8004818:	58024400 	.word	0x58024400
 800481c:	40007800 	.word	0x40007800
 8004820:	40007c00 	.word	0x40007c00
 8004824:	40011800 	.word	0x40011800
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4aad      	ldr	r2, [pc, #692]	; (8004ae4 <UART_SetConfig+0x900>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d176      	bne.n	8004920 <UART_SetConfig+0x73c>
 8004832:	4bad      	ldr	r3, [pc, #692]	; (8004ae8 <UART_SetConfig+0x904>)
 8004834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800483a:	2b28      	cmp	r3, #40	; 0x28
 800483c:	d86c      	bhi.n	8004918 <UART_SetConfig+0x734>
 800483e:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <UART_SetConfig+0x660>)
 8004840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004844:	080048e9 	.word	0x080048e9
 8004848:	08004919 	.word	0x08004919
 800484c:	08004919 	.word	0x08004919
 8004850:	08004919 	.word	0x08004919
 8004854:	08004919 	.word	0x08004919
 8004858:	08004919 	.word	0x08004919
 800485c:	08004919 	.word	0x08004919
 8004860:	08004919 	.word	0x08004919
 8004864:	080048f1 	.word	0x080048f1
 8004868:	08004919 	.word	0x08004919
 800486c:	08004919 	.word	0x08004919
 8004870:	08004919 	.word	0x08004919
 8004874:	08004919 	.word	0x08004919
 8004878:	08004919 	.word	0x08004919
 800487c:	08004919 	.word	0x08004919
 8004880:	08004919 	.word	0x08004919
 8004884:	080048f9 	.word	0x080048f9
 8004888:	08004919 	.word	0x08004919
 800488c:	08004919 	.word	0x08004919
 8004890:	08004919 	.word	0x08004919
 8004894:	08004919 	.word	0x08004919
 8004898:	08004919 	.word	0x08004919
 800489c:	08004919 	.word	0x08004919
 80048a0:	08004919 	.word	0x08004919
 80048a4:	08004901 	.word	0x08004901
 80048a8:	08004919 	.word	0x08004919
 80048ac:	08004919 	.word	0x08004919
 80048b0:	08004919 	.word	0x08004919
 80048b4:	08004919 	.word	0x08004919
 80048b8:	08004919 	.word	0x08004919
 80048bc:	08004919 	.word	0x08004919
 80048c0:	08004919 	.word	0x08004919
 80048c4:	08004909 	.word	0x08004909
 80048c8:	08004919 	.word	0x08004919
 80048cc:	08004919 	.word	0x08004919
 80048d0:	08004919 	.word	0x08004919
 80048d4:	08004919 	.word	0x08004919
 80048d8:	08004919 	.word	0x08004919
 80048dc:	08004919 	.word	0x08004919
 80048e0:	08004919 	.word	0x08004919
 80048e4:	08004911 	.word	0x08004911
 80048e8:	2301      	movs	r3, #1
 80048ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ee:	e050      	b.n	8004992 <UART_SetConfig+0x7ae>
 80048f0:	2304      	movs	r3, #4
 80048f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048f6:	e04c      	b.n	8004992 <UART_SetConfig+0x7ae>
 80048f8:	2308      	movs	r3, #8
 80048fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048fe:	e048      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004900:	2310      	movs	r3, #16
 8004902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004906:	e044      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004908:	2320      	movs	r3, #32
 800490a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800490e:	e040      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004910:	2340      	movs	r3, #64	; 0x40
 8004912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004916:	e03c      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004918:	2380      	movs	r3, #128	; 0x80
 800491a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800491e:	e038      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a71      	ldr	r2, [pc, #452]	; (8004aec <UART_SetConfig+0x908>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d130      	bne.n	800498c <UART_SetConfig+0x7a8>
 800492a:	4b6f      	ldr	r3, [pc, #444]	; (8004ae8 <UART_SetConfig+0x904>)
 800492c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	2b05      	cmp	r3, #5
 8004934:	d826      	bhi.n	8004984 <UART_SetConfig+0x7a0>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <UART_SetConfig+0x758>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	08004955 	.word	0x08004955
 8004940:	0800495d 	.word	0x0800495d
 8004944:	08004965 	.word	0x08004965
 8004948:	0800496d 	.word	0x0800496d
 800494c:	08004975 	.word	0x08004975
 8004950:	0800497d 	.word	0x0800497d
 8004954:	2302      	movs	r3, #2
 8004956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800495a:	e01a      	b.n	8004992 <UART_SetConfig+0x7ae>
 800495c:	2304      	movs	r3, #4
 800495e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004962:	e016      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004964:	2308      	movs	r3, #8
 8004966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800496a:	e012      	b.n	8004992 <UART_SetConfig+0x7ae>
 800496c:	2310      	movs	r3, #16
 800496e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004972:	e00e      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004974:	2320      	movs	r3, #32
 8004976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800497a:	e00a      	b.n	8004992 <UART_SetConfig+0x7ae>
 800497c:	2340      	movs	r3, #64	; 0x40
 800497e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004982:	e006      	b.n	8004992 <UART_SetConfig+0x7ae>
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800498a:	e002      	b.n	8004992 <UART_SetConfig+0x7ae>
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a55      	ldr	r2, [pc, #340]	; (8004aec <UART_SetConfig+0x908>)
 8004998:	4293      	cmp	r3, r2
 800499a:	f040 80f8 	bne.w	8004b8e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800499e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	dc46      	bgt.n	8004a34 <UART_SetConfig+0x850>
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	db75      	blt.n	8004a96 <UART_SetConfig+0x8b2>
 80049aa:	3b02      	subs	r3, #2
 80049ac:	2b1e      	cmp	r3, #30
 80049ae:	d872      	bhi.n	8004a96 <UART_SetConfig+0x8b2>
 80049b0:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <UART_SetConfig+0x7d4>)
 80049b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b6:	bf00      	nop
 80049b8:	08004a3b 	.word	0x08004a3b
 80049bc:	08004a97 	.word	0x08004a97
 80049c0:	08004a43 	.word	0x08004a43
 80049c4:	08004a97 	.word	0x08004a97
 80049c8:	08004a97 	.word	0x08004a97
 80049cc:	08004a97 	.word	0x08004a97
 80049d0:	08004a53 	.word	0x08004a53
 80049d4:	08004a97 	.word	0x08004a97
 80049d8:	08004a97 	.word	0x08004a97
 80049dc:	08004a97 	.word	0x08004a97
 80049e0:	08004a97 	.word	0x08004a97
 80049e4:	08004a97 	.word	0x08004a97
 80049e8:	08004a97 	.word	0x08004a97
 80049ec:	08004a97 	.word	0x08004a97
 80049f0:	08004a63 	.word	0x08004a63
 80049f4:	08004a97 	.word	0x08004a97
 80049f8:	08004a97 	.word	0x08004a97
 80049fc:	08004a97 	.word	0x08004a97
 8004a00:	08004a97 	.word	0x08004a97
 8004a04:	08004a97 	.word	0x08004a97
 8004a08:	08004a97 	.word	0x08004a97
 8004a0c:	08004a97 	.word	0x08004a97
 8004a10:	08004a97 	.word	0x08004a97
 8004a14:	08004a97 	.word	0x08004a97
 8004a18:	08004a97 	.word	0x08004a97
 8004a1c:	08004a97 	.word	0x08004a97
 8004a20:	08004a97 	.word	0x08004a97
 8004a24:	08004a97 	.word	0x08004a97
 8004a28:	08004a97 	.word	0x08004a97
 8004a2c:	08004a97 	.word	0x08004a97
 8004a30:	08004a89 	.word	0x08004a89
 8004a34:	2b40      	cmp	r3, #64	; 0x40
 8004a36:	d02a      	beq.n	8004a8e <UART_SetConfig+0x8aa>
 8004a38:	e02d      	b.n	8004a96 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004a3a:	f7fe fe99 	bl	8003770 <HAL_RCCEx_GetD3PCLK1Freq>
 8004a3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004a40:	e02f      	b.n	8004aa2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe fea8 	bl	800379c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a50:	e027      	b.n	8004aa2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a52:	f107 0318 	add.w	r3, r7, #24
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe fff4 	bl	8003a44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a60:	e01f      	b.n	8004aa2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a62:	4b21      	ldr	r3, [pc, #132]	; (8004ae8 <UART_SetConfig+0x904>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <UART_SetConfig+0x904>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	08db      	lsrs	r3, r3, #3
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	4a1d      	ldr	r2, [pc, #116]	; (8004af0 <UART_SetConfig+0x90c>)
 8004a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a80:	e00f      	b.n	8004aa2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004a82:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <UART_SetConfig+0x90c>)
 8004a84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a86:	e00c      	b.n	8004aa2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a88:	4b1a      	ldr	r3, [pc, #104]	; (8004af4 <UART_SetConfig+0x910>)
 8004a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a8c:	e009      	b.n	8004aa2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a94:	e005      	b.n	8004aa2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004aa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 81ee 	beq.w	8004e86 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	4a12      	ldr	r2, [pc, #72]	; (8004af8 <UART_SetConfig+0x914>)
 8004ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004abc:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	4413      	add	r3, r2
 8004ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d305      	bcc.n	8004ada <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d910      	bls.n	8004afc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004ae0:	e1d1      	b.n	8004e86 <UART_SetConfig+0xca2>
 8004ae2:	bf00      	nop
 8004ae4:	40011c00 	.word	0x40011c00
 8004ae8:	58024400 	.word	0x58024400
 8004aec:	58000c00 	.word	0x58000c00
 8004af0:	03d09000 	.word	0x03d09000
 8004af4:	003d0900 	.word	0x003d0900
 8004af8:	0800783c 	.word	0x0800783c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afe:	2200      	movs	r2, #0
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	60fa      	str	r2, [r7, #12]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	4ac0      	ldr	r2, [pc, #768]	; (8004e0c <UART_SetConfig+0xc28>)
 8004b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2200      	movs	r2, #0
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	607a      	str	r2, [r7, #4]
 8004b16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b1e:	f7fb fbe5 	bl	80002ec <__aeabi_uldivmod>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4610      	mov	r0, r2
 8004b28:	4619      	mov	r1, r3
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	020b      	lsls	r3, r1, #8
 8004b34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b38:	0202      	lsls	r2, r0, #8
 8004b3a:	6979      	ldr	r1, [r7, #20]
 8004b3c:	6849      	ldr	r1, [r1, #4]
 8004b3e:	0849      	lsrs	r1, r1, #1
 8004b40:	2000      	movs	r0, #0
 8004b42:	460c      	mov	r4, r1
 8004b44:	4605      	mov	r5, r0
 8004b46:	eb12 0804 	adds.w	r8, r2, r4
 8004b4a:	eb43 0905 	adc.w	r9, r3, r5
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	469a      	mov	sl, r3
 8004b56:	4693      	mov	fp, r2
 8004b58:	4652      	mov	r2, sl
 8004b5a:	465b      	mov	r3, fp
 8004b5c:	4640      	mov	r0, r8
 8004b5e:	4649      	mov	r1, r9
 8004b60:	f7fb fbc4 	bl	80002ec <__aeabi_uldivmod>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4613      	mov	r3, r2
 8004b6a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b72:	d308      	bcc.n	8004b86 <UART_SetConfig+0x9a2>
 8004b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b7a:	d204      	bcs.n	8004b86 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b82:	60da      	str	r2, [r3, #12]
 8004b84:	e17f      	b.n	8004e86 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004b8c:	e17b      	b.n	8004e86 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b96:	f040 80bd 	bne.w	8004d14 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004b9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	dc48      	bgt.n	8004c34 <UART_SetConfig+0xa50>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	db7b      	blt.n	8004c9e <UART_SetConfig+0xaba>
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d879      	bhi.n	8004c9e <UART_SetConfig+0xaba>
 8004baa:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <UART_SetConfig+0x9cc>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004c3b 	.word	0x08004c3b
 8004bb4:	08004c43 	.word	0x08004c43
 8004bb8:	08004c9f 	.word	0x08004c9f
 8004bbc:	08004c9f 	.word	0x08004c9f
 8004bc0:	08004c4b 	.word	0x08004c4b
 8004bc4:	08004c9f 	.word	0x08004c9f
 8004bc8:	08004c9f 	.word	0x08004c9f
 8004bcc:	08004c9f 	.word	0x08004c9f
 8004bd0:	08004c5b 	.word	0x08004c5b
 8004bd4:	08004c9f 	.word	0x08004c9f
 8004bd8:	08004c9f 	.word	0x08004c9f
 8004bdc:	08004c9f 	.word	0x08004c9f
 8004be0:	08004c9f 	.word	0x08004c9f
 8004be4:	08004c9f 	.word	0x08004c9f
 8004be8:	08004c9f 	.word	0x08004c9f
 8004bec:	08004c9f 	.word	0x08004c9f
 8004bf0:	08004c6b 	.word	0x08004c6b
 8004bf4:	08004c9f 	.word	0x08004c9f
 8004bf8:	08004c9f 	.word	0x08004c9f
 8004bfc:	08004c9f 	.word	0x08004c9f
 8004c00:	08004c9f 	.word	0x08004c9f
 8004c04:	08004c9f 	.word	0x08004c9f
 8004c08:	08004c9f 	.word	0x08004c9f
 8004c0c:	08004c9f 	.word	0x08004c9f
 8004c10:	08004c9f 	.word	0x08004c9f
 8004c14:	08004c9f 	.word	0x08004c9f
 8004c18:	08004c9f 	.word	0x08004c9f
 8004c1c:	08004c9f 	.word	0x08004c9f
 8004c20:	08004c9f 	.word	0x08004c9f
 8004c24:	08004c9f 	.word	0x08004c9f
 8004c28:	08004c9f 	.word	0x08004c9f
 8004c2c:	08004c9f 	.word	0x08004c9f
 8004c30:	08004c91 	.word	0x08004c91
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d02e      	beq.n	8004c96 <UART_SetConfig+0xab2>
 8004c38:	e031      	b.n	8004c9e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c3a:	f7fd fbaf 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 8004c3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004c40:	e033      	b.n	8004caa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c42:	f7fd fbc1 	bl	80023c8 <HAL_RCC_GetPCLK2Freq>
 8004c46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004c48:	e02f      	b.n	8004caa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fe fda4 	bl	800379c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c58:	e027      	b.n	8004caa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c5a:	f107 0318 	add.w	r3, r7, #24
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fe fef0 	bl	8003a44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c68:	e01f      	b.n	8004caa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c6a:	4b69      	ldr	r3, [pc, #420]	; (8004e10 <UART_SetConfig+0xc2c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d009      	beq.n	8004c8a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c76:	4b66      	ldr	r3, [pc, #408]	; (8004e10 <UART_SetConfig+0xc2c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	08db      	lsrs	r3, r3, #3
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	4a64      	ldr	r2, [pc, #400]	; (8004e14 <UART_SetConfig+0xc30>)
 8004c82:	fa22 f303 	lsr.w	r3, r2, r3
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c88:	e00f      	b.n	8004caa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004c8a:	4b62      	ldr	r3, [pc, #392]	; (8004e14 <UART_SetConfig+0xc30>)
 8004c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c8e:	e00c      	b.n	8004caa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c90:	4b61      	ldr	r3, [pc, #388]	; (8004e18 <UART_SetConfig+0xc34>)
 8004c92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c94:	e009      	b.n	8004caa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c9c:	e005      	b.n	8004caa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004ca8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80ea 	beq.w	8004e86 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	4a55      	ldr	r2, [pc, #340]	; (8004e0c <UART_SetConfig+0xc28>)
 8004cb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cc4:	005a      	lsls	r2, r3, #1
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	085b      	lsrs	r3, r3, #1
 8004ccc:	441a      	add	r2, r3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cda:	2b0f      	cmp	r3, #15
 8004cdc:	d916      	bls.n	8004d0c <UART_SetConfig+0xb28>
 8004cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce4:	d212      	bcs.n	8004d0c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f023 030f 	bic.w	r3, r3, #15
 8004cee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004d08:	60da      	str	r2, [r3, #12]
 8004d0a:	e0bc      	b.n	8004e86 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004d12:	e0b8      	b.n	8004e86 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	dc4b      	bgt.n	8004db4 <UART_SetConfig+0xbd0>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f2c0 8087 	blt.w	8004e30 <UART_SetConfig+0xc4c>
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	f200 8084 	bhi.w	8004e30 <UART_SetConfig+0xc4c>
 8004d28:	a201      	add	r2, pc, #4	; (adr r2, 8004d30 <UART_SetConfig+0xb4c>)
 8004d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2e:	bf00      	nop
 8004d30:	08004dbb 	.word	0x08004dbb
 8004d34:	08004dc3 	.word	0x08004dc3
 8004d38:	08004e31 	.word	0x08004e31
 8004d3c:	08004e31 	.word	0x08004e31
 8004d40:	08004dcb 	.word	0x08004dcb
 8004d44:	08004e31 	.word	0x08004e31
 8004d48:	08004e31 	.word	0x08004e31
 8004d4c:	08004e31 	.word	0x08004e31
 8004d50:	08004ddb 	.word	0x08004ddb
 8004d54:	08004e31 	.word	0x08004e31
 8004d58:	08004e31 	.word	0x08004e31
 8004d5c:	08004e31 	.word	0x08004e31
 8004d60:	08004e31 	.word	0x08004e31
 8004d64:	08004e31 	.word	0x08004e31
 8004d68:	08004e31 	.word	0x08004e31
 8004d6c:	08004e31 	.word	0x08004e31
 8004d70:	08004deb 	.word	0x08004deb
 8004d74:	08004e31 	.word	0x08004e31
 8004d78:	08004e31 	.word	0x08004e31
 8004d7c:	08004e31 	.word	0x08004e31
 8004d80:	08004e31 	.word	0x08004e31
 8004d84:	08004e31 	.word	0x08004e31
 8004d88:	08004e31 	.word	0x08004e31
 8004d8c:	08004e31 	.word	0x08004e31
 8004d90:	08004e31 	.word	0x08004e31
 8004d94:	08004e31 	.word	0x08004e31
 8004d98:	08004e31 	.word	0x08004e31
 8004d9c:	08004e31 	.word	0x08004e31
 8004da0:	08004e31 	.word	0x08004e31
 8004da4:	08004e31 	.word	0x08004e31
 8004da8:	08004e31 	.word	0x08004e31
 8004dac:	08004e31 	.word	0x08004e31
 8004db0:	08004e23 	.word	0x08004e23
 8004db4:	2b40      	cmp	r3, #64	; 0x40
 8004db6:	d037      	beq.n	8004e28 <UART_SetConfig+0xc44>
 8004db8:	e03a      	b.n	8004e30 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dba:	f7fd faef 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 8004dbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004dc0:	e03c      	b.n	8004e3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dc2:	f7fd fb01 	bl	80023c8 <HAL_RCC_GetPCLK2Freq>
 8004dc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004dc8:	e038      	b.n	8004e3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fce4 	bl	800379c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dd8:	e030      	b.n	8004e3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dda:	f107 0318 	add.w	r3, r7, #24
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fe30 	bl	8003a44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004de8:	e028      	b.n	8004e3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <UART_SetConfig+0xc2c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d012      	beq.n	8004e1c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004df6:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <UART_SetConfig+0xc2c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	08db      	lsrs	r3, r3, #3
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	4a04      	ldr	r2, [pc, #16]	; (8004e14 <UART_SetConfig+0xc30>)
 8004e02:	fa22 f303 	lsr.w	r3, r2, r3
 8004e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e08:	e018      	b.n	8004e3c <UART_SetConfig+0xc58>
 8004e0a:	bf00      	nop
 8004e0c:	0800783c 	.word	0x0800783c
 8004e10:	58024400 	.word	0x58024400
 8004e14:	03d09000 	.word	0x03d09000
 8004e18:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004e1c:	4b24      	ldr	r3, [pc, #144]	; (8004eb0 <UART_SetConfig+0xccc>)
 8004e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e20:	e00c      	b.n	8004e3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e22:	4b24      	ldr	r3, [pc, #144]	; (8004eb4 <UART_SetConfig+0xcd0>)
 8004e24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e26:	e009      	b.n	8004e3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e2e:	e005      	b.n	8004e3c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004e3a:	bf00      	nop
    }

    if (pclk != 0U)
 8004e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d021      	beq.n	8004e86 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	4a1c      	ldr	r2, [pc, #112]	; (8004eb8 <UART_SetConfig+0xcd4>)
 8004e48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e50:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	085b      	lsrs	r3, r3, #1
 8004e5a:	441a      	add	r2, r3
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e64:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	2b0f      	cmp	r3, #15
 8004e6a:	d909      	bls.n	8004e80 <UART_SetConfig+0xc9c>
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e72:	d205      	bcs.n	8004e80 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60da      	str	r2, [r3, #12]
 8004e7e:	e002      	b.n	8004e86 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004ea2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3748      	adds	r7, #72	; 0x48
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eb0:	03d09000 	.word	0x03d09000
 8004eb4:	003d0900 	.word	0x003d0900
 8004eb8:	0800783c 	.word	0x0800783c

08004ebc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01a      	beq.n	8004fd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fba:	d10a      	bne.n	8004fd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	605a      	str	r2, [r3, #4]
  }
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b098      	sub	sp, #96	; 0x60
 8005004:	af02      	add	r7, sp, #8
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005010:	f7fb ff1e 	bl	8000e50 <HAL_GetTick>
 8005014:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b08      	cmp	r3, #8
 8005022:	d12f      	bne.n	8005084 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005024:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800502c:	2200      	movs	r2, #0
 800502e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f88e 	bl	8005154 <UART_WaitOnFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d022      	beq.n	8005084 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800504c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005052:	653b      	str	r3, [r7, #80]	; 0x50
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800505c:	647b      	str	r3, [r7, #68]	; 0x44
 800505e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800506a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e6      	bne.n	800503e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e063      	b.n	800514c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	2b04      	cmp	r3, #4
 8005090:	d149      	bne.n	8005126 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005092:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800509a:	2200      	movs	r2, #0
 800509c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f857 	bl	8005154 <UART_WaitOnFlagUntilTimeout>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d03c      	beq.n	8005126 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	e853 3f00 	ldrex	r3, [r3]
 80050b8:	623b      	str	r3, [r7, #32]
   return(result);
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ca:	633b      	str	r3, [r7, #48]	; 0x30
 80050cc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d2:	e841 2300 	strex	r3, r2, [r1]
 80050d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1e6      	bne.n	80050ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3308      	adds	r3, #8
 80050e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	e853 3f00 	ldrex	r3, [r3]
 80050ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f023 0301 	bic.w	r3, r3, #1
 80050f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3308      	adds	r3, #8
 80050fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050fe:	61fa      	str	r2, [r7, #28]
 8005100:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005102:	69b9      	ldr	r1, [r7, #24]
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	e841 2300 	strex	r3, r2, [r1]
 800510a:	617b      	str	r3, [r7, #20]
   return(result);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1e5      	bne.n	80050de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2220      	movs	r2, #32
 8005116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e012      	b.n	800514c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3758      	adds	r7, #88	; 0x58
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005164:	e049      	b.n	80051fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516c:	d045      	beq.n	80051fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516e:	f7fb fe6f 	bl	8000e50 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	429a      	cmp	r2, r3
 800517c:	d302      	bcc.n	8005184 <UART_WaitOnFlagUntilTimeout+0x30>
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e048      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	d031      	beq.n	80051fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d110      	bne.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2208      	movs	r2, #8
 80051aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 f839 	bl	8005224 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2208      	movs	r2, #8
 80051b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e029      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d4:	d111      	bne.n	80051fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f81f 	bl	8005224 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e00f      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69da      	ldr	r2, [r3, #28]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4013      	ands	r3, r2
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	429a      	cmp	r2, r3
 8005208:	bf0c      	ite	eq
 800520a:	2301      	moveq	r3, #1
 800520c:	2300      	movne	r3, #0
 800520e:	b2db      	uxtb	r3, r3
 8005210:	461a      	mov	r2, r3
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	429a      	cmp	r2, r3
 8005216:	d0a6      	beq.n	8005166 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005224:	b480      	push	{r7}
 8005226:	b095      	sub	sp, #84	; 0x54
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005240:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800524a:	643b      	str	r3, [r7, #64]	; 0x40
 800524c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005252:	e841 2300 	strex	r3, r2, [r1]
 8005256:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e6      	bne.n	800522c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3308      	adds	r3, #8
 8005264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	61fb      	str	r3, [r7, #28]
   return(result);
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	4b1e      	ldr	r3, [pc, #120]	; (80052ec <UART_EndRxTransfer+0xc8>)
 8005272:	4013      	ands	r3, r2
 8005274:	64bb      	str	r3, [r7, #72]	; 0x48
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3308      	adds	r3, #8
 800527c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800527e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005280:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e5      	bne.n	800525e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005296:	2b01      	cmp	r3, #1
 8005298:	d118      	bne.n	80052cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	e853 3f00 	ldrex	r3, [r3]
 80052a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f023 0310 	bic.w	r3, r3, #16
 80052ae:	647b      	str	r3, [r7, #68]	; 0x44
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b8:	61bb      	str	r3, [r7, #24]
 80052ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	6979      	ldr	r1, [r7, #20]
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	613b      	str	r3, [r7, #16]
   return(result);
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e6      	bne.n	800529a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	675a      	str	r2, [r3, #116]	; 0x74
}
 80052e0:	bf00      	nop
 80052e2:	3754      	adds	r7, #84	; 0x54
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	effffffe 	.word	0xeffffffe

080052f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_UARTEx_DisableFifoMode+0x16>
 8005302:	2302      	movs	r3, #2
 8005304:	e027      	b.n	8005356 <HAL_UARTEx_DisableFifoMode+0x66>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2224      	movs	r2, #36	; 0x24
 8005312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0201 	bic.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005334:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2220      	movs	r2, #32
 8005348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005376:	2302      	movs	r3, #2
 8005378:	e02d      	b.n	80053d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2224      	movs	r2, #36	; 0x24
 8005386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0201 	bic.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f850 	bl	800545c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e02d      	b.n	8005452 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2224      	movs	r2, #36	; 0x24
 8005402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0201 	bic.w	r2, r2, #1
 800541c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f812 	bl	800545c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005468:	2b00      	cmp	r3, #0
 800546a:	d108      	bne.n	800547e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800547c:	e031      	b.n	80054e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800547e:	2310      	movs	r3, #16
 8005480:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005482:	2310      	movs	r3, #16
 8005484:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	0e5b      	lsrs	r3, r3, #25
 800548e:	b2db      	uxtb	r3, r3
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	0f5b      	lsrs	r3, r3, #29
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054a6:	7bbb      	ldrb	r3, [r7, #14]
 80054a8:	7b3a      	ldrb	r2, [r7, #12]
 80054aa:	4911      	ldr	r1, [pc, #68]	; (80054f0 <UARTEx_SetNbDataToProcess+0x94>)
 80054ac:	5c8a      	ldrb	r2, [r1, r2]
 80054ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054b2:	7b3a      	ldrb	r2, [r7, #12]
 80054b4:	490f      	ldr	r1, [pc, #60]	; (80054f4 <UARTEx_SetNbDataToProcess+0x98>)
 80054b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80054bc:	b29a      	uxth	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	7b7a      	ldrb	r2, [r7, #13]
 80054c8:	4909      	ldr	r1, [pc, #36]	; (80054f0 <UARTEx_SetNbDataToProcess+0x94>)
 80054ca:	5c8a      	ldrb	r2, [r1, r2]
 80054cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80054d0:	7b7a      	ldrb	r2, [r7, #13]
 80054d2:	4908      	ldr	r1, [pc, #32]	; (80054f4 <UARTEx_SetNbDataToProcess+0x98>)
 80054d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80054da:	b29a      	uxth	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80054e2:	bf00      	nop
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	08007854 	.word	0x08007854
 80054f4:	0800785c 	.word	0x0800785c

080054f8 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b08f      	sub	sp, #60	; 0x3c
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	891a      	ldrh	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	8a1b      	ldrh	r3, [r3, #16]
 800550a:	429a      	cmp	r2, r3
 800550c:	d301      	bcc.n	8005512 <load_descriptor_values+0x1a>
        return false;
 800550e:	2300      	movs	r3, #0
 8005510:	e156      	b.n	80057c0 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	895b      	ldrh	r3, [r3, #10]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	62fb      	str	r3, [r7, #44]	; 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8005524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005526:	0a1b      	lsrs	r3, r3, #8
 8005528:	b2da      	uxtb	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d05a      	beq.n	80055ee <load_descriptor_values+0xf6>
 8005538:	2b02      	cmp	r3, #2
 800553a:	f200 8094 	bhi.w	8005666 <load_descriptor_values+0x16e>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <load_descriptor_values+0x50>
 8005542:	2b01      	cmp	r3, #1
 8005544:	d01f      	beq.n	8005586 <load_descriptor_values+0x8e>
 8005546:	e08e      	b.n	8005666 <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 800554e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005550:	089b      	lsrs	r3, r3, #2
 8005552:	b29b      	uxth	r3, r3
 8005554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005558:	b29a      	uxth	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 800555e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005560:	0e1b      	lsrs	r3, r3, #24
 8005562:	b25b      	sxtb	r3, r3
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = (word0 >> 16) & 0xFF;
 800556c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556e:	0c1b      	lsrs	r3, r3, #16
 8005570:	b2db      	uxtb	r3, r3
 8005572:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 8005574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005576:	0f1b      	lsrs	r3, r3, #28
 8005578:	b29b      	uxth	r3, r3
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	b29a      	uxth	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	825a      	strh	r2, [r3, #18]
            break;
 8005584:	e0b4      	b.n	80056f0 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	895b      	ldrh	r3, [r3, #10]
 8005590:	3301      	adds	r3, #1
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 800559a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559c:	0c1b      	lsrs	r3, r3, #16
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 80055aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ac:	089b      	lsrs	r3, r3, #2
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	0f1b      	lsrs	r3, r3, #28
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	019b      	lsls	r3, r3, #6
 80055be:	b29b      	uxth	r3, r3
 80055c0:	4313      	orrs	r3, r2
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	0f1b      	lsrs	r3, r3, #28
 80055cc:	b25b      	sxtb	r3, r3
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word1 & 0xFFFF;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	0c1b      	lsrs	r3, r3, #16
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	825a      	strh	r2, [r3, #18]
            break;
 80055ec:	e080      	b.n	80056f0 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	895b      	ldrh	r3, [r3, #10]
 80055f8:	3301      	adds	r3, #1
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	62bb      	str	r3, [r7, #40]	; 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	895b      	ldrh	r3, [r3, #10]
 800560c:	3302      	adds	r3, #2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	895b      	ldrh	r3, [r3, #10]
 8005620:	3303      	adds	r3, #3
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 800562a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562c:	0c1b      	lsrs	r3, r3, #16
 800562e:	b29a      	uxth	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8005634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005636:	089b      	lsrs	r3, r3, #2
 8005638:	b29b      	uxth	r3, r3
 800563a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800563e:	b29a      	uxth	r2, r3
 8005640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005642:	0a1b      	lsrs	r3, r3, #8
 8005644:	b29b      	uxth	r3, r3
 8005646:	019b      	lsls	r3, r3, #6
 8005648:	b29b      	uxth	r3, r3
 800564a:	4313      	orrs	r3, r2
 800564c:	b29a      	uxth	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	b29a      	uxth	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	825a      	strh	r2, [r3, #18]
            break;
 8005664:	e044      	b.n	80056f0 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	895b      	ldrh	r3, [r3, #10]
 8005670:	3301      	adds	r3, #1
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	895b      	ldrh	r3, [r3, #10]
 8005684:	3302      	adds	r3, #2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	895b      	ldrh	r3, [r3, #10]
 8005698:	3303      	adds	r3, #3
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	895b      	ldrh	r3, [r3, #10]
 80056ac:	3304      	adds	r3, #4
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	089b      	lsrs	r3, r3, #2
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	0a1b      	lsrs	r3, r3, #8
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	019b      	lsls	r3, r3, #6
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	4313      	orrs	r3, r2
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	825a      	strh	r2, [r3, #18]
            break;
 80056ee:	bf00      	nop
        }
    }

    if (!iter->message)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d106      	bne.n	8005706 <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	621a      	str	r2, [r3, #32]
 8005704:	e041      	b.n	800578a <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570c:	441a      	add	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8005712:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005716:	2b00      	cmp	r3, #0
 8005718:	d008      	beq.n	800572c <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005722:	425b      	negs	r3, r3
 8005724:	441a      	add	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	621a      	str	r2, [r3, #32]
 800572a:	e01a      	b.n	8005762 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	7d9b      	ldrb	r3, [r3, #22]
 8005730:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005734:	2b20      	cmp	r3, #32
 8005736:	d111      	bne.n	800575c <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	7d9b      	ldrb	r3, [r3, #22]
 800573c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	7d9b      	ldrb	r3, [r3, #22]
 8005748:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 800574c:	2b80      	cmp	r3, #128	; 0x80
 800574e:	d105      	bne.n	800575c <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f103 0214 	add.w	r2, r3, #20
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	621a      	str	r2, [r3, #32]
 800575a:	e002      	b.n	8005762 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	7d9b      	ldrb	r3, [r3, #22]
 8005766:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800576a:	2b80      	cmp	r3, #128	; 0x80
 800576c:	d109      	bne.n	8005782 <load_descriptor_values+0x28a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	61da      	str	r2, [r3, #28]
 8005780:	e003      	b.n	800578a <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	7d9b      	ldrb	r3, [r3, #22]
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	2b08      	cmp	r3, #8
 8005794:	d005      	beq.n	80057a2 <load_descriptor_values+0x2aa>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	7d9b      	ldrb	r3, [r3, #22]
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	2b09      	cmp	r3, #9
 80057a0:	d10a      	bne.n	80057b8 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	89db      	ldrh	r3, [r3, #14]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	625a      	str	r2, [r3, #36]	; 0x24
 80057b6:	e002      	b.n	80057be <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 80057be:	2301      	movs	r3, #1
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	373c      	adds	r7, #60	; 0x3c
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
    iter->index++;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	891b      	ldrh	r3, [r3, #8]
 80057d8:	3301      	adds	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	891a      	ldrh	r2, [r3, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	8a1b      	ldrh	r3, [r3, #16]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d30c      	bcc.n	8005808 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8005806:	e03c      	b.n	8005882 <advance_iterator+0xb6>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	895b      	ldrh	r3, [r3, #10]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	0a1b      	lsrs	r3, r3, #8
 800581e:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	2201      	movs	r2, #1
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	895a      	ldrh	r2, [r3, #10]
 8005832:	893b      	ldrh	r3, [r7, #8]
 8005834:	4413      	add	r3, r2
 8005836:	b29a      	uxth	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	899a      	ldrh	r2, [r3, #12]
 8005840:	7afb      	ldrb	r3, [r7, #11]
 8005842:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005846:	2b00      	cmp	r3, #0
 8005848:	bf0c      	ite	eq
 800584a:	2301      	moveq	r3, #1
 800584c:	2300      	movne	r3, #0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	b29b      	uxth	r3, r3
 8005852:	4413      	add	r3, r2
 8005854:	b29a      	uxth	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	89da      	ldrh	r2, [r3, #14]
 800585e:	7afb      	ldrb	r3, [r7, #11]
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	2b08      	cmp	r3, #8
 8005866:	d004      	beq.n	8005872 <advance_iterator+0xa6>
 8005868:	7afb      	ldrb	r3, [r7, #11]
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	2b09      	cmp	r3, #9
 8005870:	d101      	bne.n	8005876 <advance_iterator+0xaa>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <advance_iterator+0xac>
 8005876:	2300      	movs	r3, #0
 8005878:	b29b      	uxth	r3, r3
 800587a:	4413      	add	r3, r2
 800587c:	b29a      	uxth	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	81da      	strh	r2, [r3, #14]
}
 8005882:	bf00      	nop
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 800589a:	2228      	movs	r2, #40	; 0x28
 800589c:	2100      	movs	r1, #0
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f001 fe9e 	bl	80075e0 <memset>

    iter->descriptor = desc;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	601a      	str	r2, [r3, #0]
    iter->message = message;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f7ff fe21 	bl	80054f8 <load_descriptor_values>
 80058b6:	4603      	mov	r3, r0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	0a1b      	lsrs	r3, r3, #8
 80058de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058e2:	2b80      	cmp	r3, #128	; 0x80
 80058e4:	d109      	bne.n	80058fa <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	3304      	adds	r3, #4
 80058ea:	461a      	mov	r2, r3
 80058ec:	6939      	ldr	r1, [r7, #16]
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7ff ffcd 	bl	800588e <pb_field_iter_begin>
 80058f4:	4603      	mov	r3, r0
 80058f6:	75fb      	strb	r3, [r7, #23]
 80058f8:	e008      	b.n	800590c <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	461a      	mov	r2, r3
 8005900:	6939      	ldr	r1, [r7, #16]
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7ff ffc3 	bl	800588e <pb_field_iter_begin>
 8005908:	4603      	mov	r3, r0
 800590a:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	f103 020c 	add.w	r2, r3, #12
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	621a      	str	r2, [r3, #32]
    return status;
 8005916:	7dfb      	ldrb	r3, [r7, #23]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff ff4f 	bl	80057cc <advance_iterator>
    (void)load_descriptor_values(iter);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff fde2 	bl	80054f8 <load_descriptor_values>
    return iter->index != 0;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	891b      	ldrh	r3, [r3, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	bf14      	ite	ne
 800593c:	2301      	movne	r3, #1
 800593e:	2300      	moveq	r3, #0
 8005940:	b2db      	uxtb	r3, r3
}
 8005942:	4618      	mov	r0, r3
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	8a1b      	ldrh	r3, [r3, #16]
 8005958:	461a      	mov	r2, r3
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	4293      	cmp	r3, r2
 800595e:	d101      	bne.n	8005964 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 8005960:	2301      	movs	r3, #1
 8005962:	e044      	b.n	80059ee <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	8a9b      	ldrh	r3, [r3, #20]
 800596a:	461a      	mov	r2, r3
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	4293      	cmp	r3, r2
 8005970:	d901      	bls.n	8005976 <pb_field_iter_find+0x2c>
    {
        return false;
 8005972:	2300      	movs	r3, #0
 8005974:	e03b      	b.n	80059ee <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	891b      	ldrh	r3, [r3, #8]
 800597a:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	8a1b      	ldrh	r3, [r3, #16]
 8005980:	461a      	mov	r2, r3
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	4293      	cmp	r3, r2
 8005986:	d204      	bcs.n	8005992 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	8a1a      	ldrh	r2, [r3, #16]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff ff1a 	bl	80057cc <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	895b      	ldrh	r3, [r3, #10]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	089a      	lsrs	r2, r3, #2
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	4053      	eors	r3, r2
 80059b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d110      	bne.n	80059dc <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff fd9c 	bl	80054f8 <load_descriptor_values>

                if (iter->tag == tag &&
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	8a1b      	ldrh	r3, [r3, #16]
 80059c4:	461a      	mov	r2, r3
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d107      	bne.n	80059dc <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	7d9b      	ldrb	r3, [r3, #22]
 80059d0:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 80059d4:	2b0a      	cmp	r3, #10
 80059d6:	d001      	beq.n	80059dc <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 80059d8:	2301      	movs	r3, #1
 80059da:	e008      	b.n	80059ee <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	891b      	ldrh	r3, [r3, #8]
 80059e0:	89fa      	ldrh	r2, [r7, #14]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d1d5      	bne.n	8005992 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7ff fd86 	bl	80054f8 <load_descriptor_values>
        return false;
 80059ec:	2300      	movs	r3, #0
    }
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	7d9b      	ldrb	r3, [r3, #22]
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	2b0a      	cmp	r3, #10
 8005a08:	d101      	bne.n	8005a0e <pb_field_iter_find_extension+0x18>
    {
        return true;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e022      	b.n	8005a54 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	891b      	ldrh	r3, [r3, #8]
 8005a12:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff fed9 	bl	80057cc <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	895b      	ldrh	r3, [r3, #10]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	0a1b      	lsrs	r3, r3, #8
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	2b0a      	cmp	r3, #10
 8005a36:	d104      	bne.n	8005a42 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff fd5d 	bl	80054f8 <load_descriptor_values>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	e008      	b.n	8005a54 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	891b      	ldrh	r3, [r3, #8]
 8005a46:	89fa      	ldrh	r2, [r7, #14]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d1e3      	bne.n	8005a14 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff fd53 	bl	80054f8 <load_descriptor_values>
        return false;
 8005a52:	2300      	movs	r3, #0
    }
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	441a      	add	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6979      	ldr	r1, [r7, #20]
 8005a84:	68b8      	ldr	r0, [r7, #8]
 8005a86:	f001 fdd7 	bl	8007638 <memcpy>
    }
    
    return true;
 8005a8a:	2301      	movs	r3, #1
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <pb_read+0x16>
        return true;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e05f      	b.n	8005b6a <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d123      	bne.n	8005af8 <pb_read+0x64>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a2f      	ldr	r2, [pc, #188]	; (8005b74 <pb_read+0xe0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d01e      	beq.n	8005af8 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8005aba:	e011      	b.n	8005ae0 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8005abc:	f107 0310 	add.w	r3, r7, #16
 8005ac0:	2210      	movs	r2, #16
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f7ff ffe5 	bl	8005a94 <pb_read>
 8005aca:	4603      	mov	r3, r0
 8005acc:	f083 0301 	eor.w	r3, r3, #1
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <pb_read+0x46>
				return false;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e047      	b.n	8005b6a <pb_read+0xd6>
			
			count -= 16;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	3b10      	subs	r3, #16
 8005ade:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b10      	cmp	r3, #16
 8005ae4:	d8ea      	bhi.n	8005abc <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 8005ae6:	f107 0310 	add.w	r3, r7, #16
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	4619      	mov	r1, r3
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f7ff ffd0 	bl	8005a94 <pb_read>
 8005af4:	4603      	mov	r3, r0
 8005af6:	e038      	b.n	8005b6a <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d90b      	bls.n	8005b1a <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <pb_read+0x7c>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	e000      	b.n	8005b12 <pb_read+0x7e>
 8005b10:	4b19      	ldr	r3, [pc, #100]	; (8005b78 <pb_read+0xe4>)
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	60d3      	str	r3, [r2, #12]
 8005b16:	2300      	movs	r3, #0
 8005b18:	e027      	b.n	8005b6a <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	68b9      	ldr	r1, [r7, #8]
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	4798      	blx	r3
 8005b26:	4603      	mov	r3, r0
 8005b28:	f083 0301 	eor.w	r3, r3, #1
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00b      	beq.n	8005b4a <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d002      	beq.n	8005b40 <pb_read+0xac>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	e000      	b.n	8005b42 <pb_read+0xae>
 8005b40:	4b0e      	ldr	r3, [pc, #56]	; (8005b7c <pb_read+0xe8>)
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	60d3      	str	r3, [r2, #12]
 8005b46:	2300      	movs	r3, #0
 8005b48:	e00f      	b.n	8005b6a <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d903      	bls.n	8005b5c <pb_read+0xc8>
        stream->bytes_left = 0;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	609a      	str	r2, [r3, #8]
 8005b5a:	e005      	b.n	8005b68 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	1ad2      	subs	r2, r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	609a      	str	r2, [r3, #8]

    return true;
 8005b68:	2301      	movs	r3, #1
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3720      	adds	r7, #32
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	08005a5d 	.word	0x08005a5d
 8005b78:	08007670 	.word	0x08007670
 8005b7c:	08007680 	.word	0x08007680

08005b80 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10b      	bne.n	8005baa <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <pb_readbyte+0x20>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	e000      	b.n	8005ba2 <pb_readbyte+0x22>
 8005ba0:	4b13      	ldr	r3, [pc, #76]	; (8005bf0 <pb_readbyte+0x70>)
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	60d3      	str	r3, [r2, #12]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	e01d      	b.n	8005be6 <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	4798      	blx	r3
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	f083 0301 	eor.w	r3, r3, #1
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00b      	beq.n	8005bda <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <pb_readbyte+0x50>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	e000      	b.n	8005bd2 <pb_readbyte+0x52>
 8005bd0:	4b08      	ldr	r3, [pc, #32]	; (8005bf4 <pb_readbyte+0x74>)
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	60d3      	str	r3, [r2, #12]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	e005      	b.n	8005be6 <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	1e5a      	subs	r2, r3, #1
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	609a      	str	r2, [r3, #8]
    
    return true;    
 8005be4:	2301      	movs	r3, #1
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	08007670 	.word	0x08007670
 8005bf4:	08007680 	.word	0x08007680

08005bf8 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8005bf8:	b490      	push	{r4, r7}
 8005bfa:	b08a      	sub	sp, #40	; 0x28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8005c04:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <pb_istream_from_buffer+0x38>)
 8005c06:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8005c14:	2300      	movs	r3, #0
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	461c      	mov	r4, r3
 8005c1c:	f107 0318 	add.w	r3, r7, #24
 8005c20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	3728      	adds	r7, #40	; 0x28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bc90      	pop	{r4, r7}
 8005c2e:	4770      	bx	lr
 8005c30:	08005a5d 	.word	0x08005a5d

08005c34 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b088      	sub	sp, #32
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8005c40:	f107 0315 	add.w	r3, r7, #21
 8005c44:	4619      	mov	r1, r3
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f7ff ff9a 	bl	8005b80 <pb_readbyte>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	f083 0301 	eor.w	r3, r3, #1
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00b      	beq.n	8005c70 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d105      	bne.n	8005c6c <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d002      	beq.n	8005c6c <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	e084      	b.n	8005d7a <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8005c70:	7d7b      	ldrb	r3, [r7, #21]
 8005c72:	b25b      	sxtb	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	db02      	blt.n	8005c7e <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8005c78:	7d7b      	ldrb	r3, [r7, #21]
 8005c7a:	61fb      	str	r3, [r7, #28]
 8005c7c:	e079      	b.n	8005d72 <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8005c7e:	2307      	movs	r3, #7
 8005c80:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8005c82:	7d7b      	ldrb	r3, [r7, #21]
 8005c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c88:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8005c8a:	f107 0315 	add.w	r3, r7, #21
 8005c8e:	4619      	mov	r1, r3
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f7ff ff75 	bl	8005b80 <pb_readbyte>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f083 0301 	eor.w	r3, r3, #1
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <pb_decode_varint32_eof+0x72>
                return false;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e069      	b.n	8005d7a <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	2b1f      	cmp	r3, #31
 8005caa:	d92f      	bls.n	8005d0c <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	2b3e      	cmp	r3, #62	; 0x3e
 8005cb0:	d801      	bhi.n	8005cb6 <pb_decode_varint32_eof+0x82>
 8005cb2:	23ff      	movs	r3, #255	; 0xff
 8005cb4:	e000      	b.n	8005cb8 <pb_decode_varint32_eof+0x84>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8005cba:	7d7b      	ldrb	r3, [r7, #21]
 8005cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d006      	beq.n	8005cd2 <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8005cc4:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	da05      	bge.n	8005cd6 <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 8005cca:	7d7b      	ldrb	r3, [r7, #21]
 8005ccc:	7dfa      	ldrb	r2, [r7, #23]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d101      	bne.n	8005cd6 <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e000      	b.n	8005cd8 <pb_decode_varint32_eof+0xa4>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	75bb      	strb	r3, [r7, #22]
 8005cda:	7dbb      	ldrb	r3, [r7, #22]
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2b3f      	cmp	r3, #63	; 0x3f
 8005ce6:	d805      	bhi.n	8005cf4 <pb_decode_varint32_eof+0xc0>
 8005ce8:	7dbb      	ldrb	r3, [r7, #22]
 8005cea:	f083 0301 	eor.w	r3, r3, #1
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d037      	beq.n	8005d64 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <pb_decode_varint32_eof+0xce>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	e000      	b.n	8005d04 <pb_decode_varint32_eof+0xd0>
 8005d02:	4b20      	ldr	r3, [pc, #128]	; (8005d84 <pb_decode_varint32_eof+0x150>)
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	60d3      	str	r3, [r2, #12]
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e036      	b.n	8005d7a <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	2b1c      	cmp	r3, #28
 8005d10:	d11f      	bne.n	8005d52 <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 8005d12:	7d7b      	ldrb	r3, [r7, #21]
 8005d14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d010      	beq.n	8005d3e <pb_decode_varint32_eof+0x10a>
 8005d1c:	7d7b      	ldrb	r3, [r7, #21]
 8005d1e:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8005d22:	2b78      	cmp	r3, #120	; 0x78
 8005d24:	d00b      	beq.n	8005d3e <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <pb_decode_varint32_eof+0x100>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	e000      	b.n	8005d36 <pb_decode_varint32_eof+0x102>
 8005d34:	4b13      	ldr	r3, [pc, #76]	; (8005d84 <pb_decode_varint32_eof+0x150>)
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	60d3      	str	r3, [r2, #12]
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	e01d      	b.n	8005d7a <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 8005d3e:	7d7b      	ldrb	r3, [r7, #21]
 8005d40:	f003 020f 	and.w	r2, r3, #15
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	69fa      	ldr	r2, [r7, #28]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	61fb      	str	r3, [r7, #28]
 8005d50:	e008      	b.n	8005d64 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8005d52:	7d7b      	ldrb	r3, [r7, #21]
 8005d54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	3307      	adds	r3, #7
 8005d68:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8005d6a:	7d7b      	ldrb	r3, [r7, #21]
 8005d6c:	b25b      	sxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	db8b      	blt.n	8005c8a <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	601a      	str	r2, [r3, #0]
   return true;
 8005d78:	2301      	movs	r3, #1
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	0800768c 	.word	0x0800768c

08005d88 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8005d92:	2200      	movs	r2, #0
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7ff ff4c 	bl	8005c34 <pb_decode_varint32_eof>
 8005d9c:	4603      	mov	r3, r0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
	...

08005da8 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8005da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dac:	b08a      	sub	sp, #40	; 0x28
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8005db4:	2300      	movs	r3, #0
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
    uint64_t result = 0;
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 8005dc4:	f107 0317 	add.w	r3, r7, #23
 8005dc8:	4619      	mov	r1, r3
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f7ff fed8 	bl	8005b80 <pb_readbyte>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f083 0301 	eor.w	r3, r3, #1
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <pb_decode_varint+0x38>
            return false;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	e041      	b.n	8005e64 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	2b3e      	cmp	r3, #62	; 0x3e
 8005de4:	d910      	bls.n	8005e08 <pb_decode_varint+0x60>
 8005de6:	7dfb      	ldrb	r3, [r7, #23]
 8005de8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00b      	beq.n	8005e08 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <pb_decode_varint+0x56>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	e000      	b.n	8005e00 <pb_decode_varint+0x58>
 8005dfe:	4b1c      	ldr	r3, [pc, #112]	; (8005e70 <pb_decode_varint+0xc8>)
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	60d3      	str	r3, [r2, #12]
 8005e04:	2300      	movs	r3, #0
 8005e06:	e02d      	b.n	8005e64 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	f003 087f 	and.w	r8, r3, #127	; 0x7f
 8005e18:	f04f 0900 	mov.w	r9, #0
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	f1a3 0120 	sub.w	r1, r3, #32
 8005e22:	f1c3 0220 	rsb	r2, r3, #32
 8005e26:	fa09 f503 	lsl.w	r5, r9, r3
 8005e2a:	fa08 f101 	lsl.w	r1, r8, r1
 8005e2e:	430d      	orrs	r5, r1
 8005e30:	fa28 f202 	lsr.w	r2, r8, r2
 8005e34:	4315      	orrs	r5, r2
 8005e36:	fa08 f403 	lsl.w	r4, r8, r3
 8005e3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e3e:	ea42 0a04 	orr.w	sl, r2, r4
 8005e42:	ea43 0b05 	orr.w	fp, r3, r5
 8005e46:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	3307      	adds	r3, #7
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
    } while (byte & 0x80);
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
 8005e52:	b25b      	sxtb	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	dbb5      	blt.n	8005dc4 <pb_decode_varint+0x1c>
    
    *dest = result;
 8005e58:	68b9      	ldr	r1, [r7, #8]
 8005e5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e5e:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 8005e62:	2301      	movs	r3, #1
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3728      	adds	r7, #40	; 0x28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e6e:	bf00      	nop
 8005e70:	0800768c 	.word	0x0800768c

08005e74 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8005e7c:	f107 030f 	add.w	r3, r7, #15
 8005e80:	2201      	movs	r2, #1
 8005e82:	4619      	mov	r1, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff fe05 	bl	8005a94 <pb_read>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f083 0301 	eor.w	r3, r3, #1
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <pb_skip_varint+0x26>
            return false;
 8005e96:	2300      	movs	r3, #0
 8005e98:	e004      	b.n	8005ea4 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	b25b      	sxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	dbec      	blt.n	8005e7c <pb_skip_varint+0x8>
    return true;
 8005ea2:	2301      	movs	r3, #1
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8005eb4:	f107 030c 	add.w	r3, r7, #12
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff ff64 	bl	8005d88 <pb_decode_varint32>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f083 0301 	eor.w	r3, r3, #1
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <pb_skip_string+0x24>
        return false;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	e006      	b.n	8005ede <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff fddc 	bl	8005a94 <pb_read>
 8005edc:	4603      	mov	r3, r0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b086      	sub	sp, #24
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	60f8      	str	r0, [r7, #12]
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	607a      	str	r2, [r7, #4]
 8005ef2:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2200      	movs	r2, #0
 8005efe:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8005f06:	f107 0314 	add.w	r3, r7, #20
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f7ff fe90 	bl	8005c34 <pb_decode_varint32_eof>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f083 0301 	eor.w	r3, r3, #1
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <pb_decode_tag+0x3e>
    {
        return false;
 8005f20:	2300      	movs	r3, #0
 8005f22:	e00b      	b.n	8005f3c <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	08da      	lsrs	r2, r3, #3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	701a      	strb	r2, [r3, #0]
    return true;
 8005f3a:	2301      	movs	r3, #1
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 8005f50:	78fb      	ldrb	r3, [r7, #3]
 8005f52:	2b05      	cmp	r3, #5
 8005f54:	d826      	bhi.n	8005fa4 <pb_skip_field+0x60>
 8005f56:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <pb_skip_field+0x18>)
 8005f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5c:	08005f75 	.word	0x08005f75
 8005f60:	08005f7f 	.word	0x08005f7f
 8005f64:	08005f8d 	.word	0x08005f8d
 8005f68:	08005fa5 	.word	0x08005fa5
 8005f6c:	08005fa5 	.word	0x08005fa5
 8005f70:	08005f97 	.word	0x08005f97
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7ff ff7d 	bl	8005e74 <pb_skip_varint>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	e01d      	b.n	8005fba <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8005f7e:	2208      	movs	r2, #8
 8005f80:	2100      	movs	r1, #0
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff fd86 	bl	8005a94 <pb_read>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	e016      	b.n	8005fba <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7ff ff8d 	bl	8005eac <pb_skip_string>
 8005f92:	4603      	mov	r3, r0
 8005f94:	e011      	b.n	8005fba <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8005f96:	2204      	movs	r2, #4
 8005f98:	2100      	movs	r1, #0
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7ff fd7a 	bl	8005a94 <pb_read>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	e00a      	b.n	8005fba <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <pb_skip_field+0x6e>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	e000      	b.n	8005fb4 <pb_skip_field+0x70>
 8005fb2:	4b04      	ldr	r3, [pc, #16]	; (8005fc4 <pb_skip_field+0x80>)
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	60d3      	str	r3, [r2, #12]
 8005fb8:	2300      	movs	r3, #0
    }
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	0800769c 	.word	0x0800769c

08005fc8 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	607a      	str	r2, [r7, #4]
 8005fd2:	603b      	str	r3, [r7, #0]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 8005fde:	7afb      	ldrb	r3, [r7, #11]
 8005fe0:	2b05      	cmp	r3, #5
 8005fe2:	d03f      	beq.n	8006064 <read_raw_value+0x9c>
 8005fe4:	2b05      	cmp	r3, #5
 8005fe6:	dc47      	bgt.n	8006078 <read_raw_value+0xb0>
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <read_raw_value+0x2a>
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d02f      	beq.n	8006050 <read_raw_value+0x88>
 8005ff0:	e042      	b.n	8006078 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	429a      	cmp	r2, r3
 800600a:	d20b      	bcs.n	8006024 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <read_raw_value+0x52>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	e000      	b.n	800601c <read_raw_value+0x54>
 800601a:	4b1f      	ldr	r3, [pc, #124]	; (8006098 <read_raw_value+0xd0>)
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	60d3      	str	r3, [r2, #12]
 8006020:	2300      	movs	r3, #0
 8006022:	e034      	b.n	800608e <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 8006024:	2201      	movs	r2, #1
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f7ff fd33 	bl	8005a94 <pb_read>
 800602e:	4603      	mov	r3, r0
 8006030:	f083 0301 	eor.w	r3, r3, #1
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <read_raw_value+0x76>
                    return false;
 800603a:	2300      	movs	r3, #0
 800603c:	e027      	b.n	800608e <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	b25b      	sxtb	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	dbd5      	blt.n	8005ff8 <read_raw_value+0x30>
            return true;
 800604c:	2301      	movs	r3, #1
 800604e:	e01e      	b.n	800608e <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2208      	movs	r2, #8
 8006054:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 8006056:	2208      	movs	r2, #8
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f7ff fd1a 	bl	8005a94 <pb_read>
 8006060:	4603      	mov	r3, r0
 8006062:	e014      	b.n	800608e <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2204      	movs	r2, #4
 8006068:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 800606a:	2204      	movs	r2, #4
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f7ff fd10 	bl	8005a94 <pb_read>
 8006074:	4603      	mov	r3, r0
 8006076:	e00a      	b.n	800608e <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <read_raw_value+0xbe>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	e000      	b.n	8006088 <read_raw_value+0xc0>
 8006086:	4b05      	ldr	r3, [pc, #20]	; (800609c <read_raw_value+0xd4>)
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	60d3      	str	r3, [r2, #12]
 800608c:	2300      	movs	r3, #0
    }
}
 800608e:	4618      	mov	r0, r3
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	0800768c 	.word	0x0800768c
 800609c:	0800769c 	.word	0x0800769c

080060a0 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80060a0:	b590      	push	{r4, r7, lr}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 80060aa:	f107 030c 	add.w	r3, r7, #12
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff fe69 	bl	8005d88 <pb_decode_varint32>
 80060b6:	4603      	mov	r3, r0
 80060b8:	f083 0301 	eor.w	r3, r3, #1
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <pb_make_string_substream+0x26>
        return false;
 80060c2:	2300      	movs	r3, #0
 80060c4:	e020      	b.n	8006108 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4614      	mov	r4, r2
 80060cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d20b      	bcs.n	80060f4 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <pb_make_string_substream+0x4a>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	e000      	b.n	80060ec <pb_make_string_substream+0x4c>
 80060ea:	4b09      	ldr	r3, [pc, #36]	; (8006110 <pb_make_string_substream+0x70>)
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	60d3      	str	r3, [r2, #12]
 80060f0:	2300      	movs	r3, #0
 80060f2:	e009      	b.n	8006108 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	1ad2      	subs	r2, r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	609a      	str	r2, [r3, #8]
    return true;
 8006106:	2301      	movs	r3, #1
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	bd90      	pop	{r4, r7, pc}
 8006110:	080076b0 	.word	0x080076b0

08006114 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00e      	beq.n	8006144 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	461a      	mov	r2, r3
 800612c:	2100      	movs	r1, #0
 800612e:	6838      	ldr	r0, [r7, #0]
 8006130:	f7ff fcb0 	bl	8005a94 <pb_read>
 8006134:	4603      	mov	r3, r0
 8006136:	f083 0301 	eor.w	r3, r3, #1
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <pb_close_string_substream+0x30>
            return false;
 8006140:	2300      	movs	r3, #0
 8006142:	e008      	b.n	8006156 <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	68da      	ldr	r2, [r3, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	60da      	str	r2, [r3, #12]
#endif
    return true;
 8006154:	2301      	movs	r3, #1
}
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	460b      	mov	r3, r1
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	7d9b      	ldrb	r3, [r3, #22]
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	2b0b      	cmp	r3, #11
 8006178:	f200 80d4 	bhi.w	8006324 <decode_basic_field+0x1c4>
 800617c:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <decode_basic_field+0x24>)
 800617e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006182:	bf00      	nop
 8006184:	080061b5 	.word	0x080061b5
 8006188:	080061e5 	.word	0x080061e5
 800618c:	080061e5 	.word	0x080061e5
 8006190:	080061e5 	.word	0x080061e5
 8006194:	08006215 	.word	0x08006215
 8006198:	08006249 	.word	0x08006249
 800619c:	0800627d 	.word	0x0800627d
 80061a0:	080062a7 	.word	0x080062a7
 80061a4:	080062d1 	.word	0x080062d1
 80061a8:	080062d1 	.word	0x080062d1
 80061ac:	08006325 	.word	0x08006325
 80061b0:	080062fb 	.word	0x080062fb
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 80061b4:	7afb      	ldrb	r3, [r7, #11]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00e      	beq.n	80061d8 <decode_basic_field+0x78>
 80061ba:	7afb      	ldrb	r3, [r7, #11]
 80061bc:	2bff      	cmp	r3, #255	; 0xff
 80061be:	d00b      	beq.n	80061d8 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <decode_basic_field+0x6e>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	e000      	b.n	80061d0 <decode_basic_field+0x70>
 80061ce:	4b5d      	ldr	r3, [pc, #372]	; (8006344 <decode_basic_field+0x1e4>)
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	60d3      	str	r3, [r2, #12]
 80061d4:	2300      	movs	r3, #0
 80061d6:	e0b0      	b.n	800633a <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 80061d8:	6879      	ldr	r1, [r7, #4]
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 fef6 	bl	8006fcc <pb_dec_bool>
 80061e0:	4603      	mov	r3, r0
 80061e2:	e0aa      	b.n	800633a <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 80061e4:	7afb      	ldrb	r3, [r7, #11]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00e      	beq.n	8006208 <decode_basic_field+0xa8>
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	2bff      	cmp	r3, #255	; 0xff
 80061ee:	d00b      	beq.n	8006208 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <decode_basic_field+0x9e>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	e000      	b.n	8006200 <decode_basic_field+0xa0>
 80061fe:	4b51      	ldr	r3, [pc, #324]	; (8006344 <decode_basic_field+0x1e4>)
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	60d3      	str	r3, [r2, #12]
 8006204:	2300      	movs	r3, #0
 8006206:	e098      	b.n	800633a <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 8006208:	6879      	ldr	r1, [r7, #4]
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 feee 	bl	8006fec <pb_dec_varint>
 8006210:	4603      	mov	r3, r0
 8006212:	e092      	b.n	800633a <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 8006214:	7afb      	ldrb	r3, [r7, #11]
 8006216:	2b05      	cmp	r3, #5
 8006218:	d00e      	beq.n	8006238 <decode_basic_field+0xd8>
 800621a:	7afb      	ldrb	r3, [r7, #11]
 800621c:	2bff      	cmp	r3, #255	; 0xff
 800621e:	d00b      	beq.n	8006238 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <decode_basic_field+0xce>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	e000      	b.n	8006230 <decode_basic_field+0xd0>
 800622e:	4b45      	ldr	r3, [pc, #276]	; (8006344 <decode_basic_field+0x1e4>)
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	60d3      	str	r3, [r2, #12]
 8006234:	2300      	movs	r3, #0
 8006236:	e080      	b.n	800633a <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	4619      	mov	r1, r3
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 fe8a 	bl	8006f58 <pb_decode_fixed32>
 8006244:	4603      	mov	r3, r0
 8006246:	e078      	b.n	800633a <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 8006248:	7afb      	ldrb	r3, [r7, #11]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d00e      	beq.n	800626c <decode_basic_field+0x10c>
 800624e:	7afb      	ldrb	r3, [r7, #11]
 8006250:	2bff      	cmp	r3, #255	; 0xff
 8006252:	d00b      	beq.n	800626c <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <decode_basic_field+0x102>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	e000      	b.n	8006264 <decode_basic_field+0x104>
 8006262:	4b38      	ldr	r3, [pc, #224]	; (8006344 <decode_basic_field+0x1e4>)
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	60d3      	str	r3, [r2, #12]
 8006268:	2300      	movs	r3, #0
 800626a:	e066      	b.n	800633a <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	4619      	mov	r1, r3
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 fe8c 	bl	8006f90 <pb_decode_fixed64>
 8006278:	4603      	mov	r3, r0
 800627a:	e05e      	b.n	800633a <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 800627c:	7afb      	ldrb	r3, [r7, #11]
 800627e:	2b02      	cmp	r3, #2
 8006280:	d00b      	beq.n	800629a <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <decode_basic_field+0x130>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	e000      	b.n	8006292 <decode_basic_field+0x132>
 8006290:	4b2c      	ldr	r3, [pc, #176]	; (8006344 <decode_basic_field+0x1e4>)
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	60d3      	str	r3, [r2, #12]
 8006296:	2300      	movs	r3, #0
 8006298:	e04f      	b.n	800633a <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 ffd1 	bl	8007244 <pb_dec_bytes>
 80062a2:	4603      	mov	r3, r0
 80062a4:	e049      	b.n	800633a <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 80062a6:	7afb      	ldrb	r3, [r7, #11]
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d00b      	beq.n	80062c4 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <decode_basic_field+0x15a>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	e000      	b.n	80062bc <decode_basic_field+0x15c>
 80062ba:	4b22      	ldr	r3, [pc, #136]	; (8006344 <decode_basic_field+0x1e4>)
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	60d3      	str	r3, [r2, #12]
 80062c0:	2300      	movs	r3, #0
 80062c2:	e03a      	b.n	800633a <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f001 f830 	bl	800732c <pb_dec_string>
 80062cc:	4603      	mov	r3, r0
 80062ce:	e034      	b.n	800633a <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 80062d0:	7afb      	ldrb	r3, [r7, #11]
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d00b      	beq.n	80062ee <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <decode_basic_field+0x184>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	e000      	b.n	80062e6 <decode_basic_field+0x186>
 80062e4:	4b17      	ldr	r3, [pc, #92]	; (8006344 <decode_basic_field+0x1e4>)
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	60d3      	str	r3, [r2, #12]
 80062ea:	2300      	movs	r3, #0
 80062ec:	e025      	b.n	800633a <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f001 f897 	bl	8007424 <pb_dec_submessage>
 80062f6:	4603      	mov	r3, r0
 80062f8:	e01f      	b.n	800633a <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 80062fa:	7afb      	ldrb	r3, [r7, #11]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d00b      	beq.n	8006318 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <decode_basic_field+0x1ae>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	e000      	b.n	8006310 <decode_basic_field+0x1b0>
 800630e:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <decode_basic_field+0x1e4>)
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	60d3      	str	r3, [r2, #12]
 8006314:	2300      	movs	r3, #0
 8006316:	e010      	b.n	800633a <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f001 f90c 	bl	8007538 <pb_dec_fixed_length_bytes>
 8006320:	4603      	mov	r3, r0
 8006322:	e00a      	b.n	800633a <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <decode_basic_field+0x1d2>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	e000      	b.n	8006334 <decode_basic_field+0x1d4>
 8006332:	4b05      	ldr	r3, [pc, #20]	; (8006348 <decode_basic_field+0x1e8>)
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	60d3      	str	r3, [r2, #12]
 8006338:	2300      	movs	r3, #0
    }
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	080076c8 	.word	0x080076c8
 8006348:	080076d8 	.word	0x080076d8

0800634c <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b096      	sub	sp, #88	; 0x58
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	460b      	mov	r3, r1
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	7d9b      	ldrb	r3, [r3, #22]
 800635e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006362:	2b30      	cmp	r3, #48	; 0x30
 8006364:	f000 80c2 	beq.w	80064ec <decode_static_field+0x1a0>
 8006368:	2b30      	cmp	r3, #48	; 0x30
 800636a:	f200 811a 	bhi.w	80065a2 <decode_static_field+0x256>
 800636e:	2b20      	cmp	r3, #32
 8006370:	d01f      	beq.n	80063b2 <decode_static_field+0x66>
 8006372:	2b20      	cmp	r3, #32
 8006374:	f200 8115 	bhi.w	80065a2 <decode_static_field+0x256>
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <decode_static_field+0x36>
 800637c:	2b10      	cmp	r3, #16
 800637e:	d008      	beq.n	8006392 <decode_static_field+0x46>
 8006380:	e10f      	b.n	80065a2 <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 8006382:	7afb      	ldrb	r3, [r7, #11]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	4619      	mov	r1, r3
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f7ff fee9 	bl	8006160 <decode_basic_field>
 800638e:	4603      	mov	r3, r0
 8006390:	e112      	b.n	80065b8 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	2201      	movs	r2, #1
 80063a0:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 80063a2:	7afb      	ldrb	r3, [r7, #11]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	4619      	mov	r1, r3
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f7ff fed9 	bl	8006160 <decode_basic_field>
 80063ae:	4603      	mov	r3, r0
 80063b0:	e102      	b.n	80065b8 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 80063b2:	7afb      	ldrb	r3, [r7, #11]
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d16c      	bne.n	8006492 <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	7d9b      	ldrb	r3, [r3, #22]
 80063bc:	f003 030f 	and.w	r3, r3, #15
 80063c0:	2b05      	cmp	r3, #5
 80063c2:	d866      	bhi.n	8006492 <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 80063c4:	2301      	movs	r3, #1
 80063c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	653b      	str	r3, [r7, #80]	; 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	8a52      	ldrh	r2, [r2, #18]
 80063d8:	4611      	mov	r1, r2
 80063da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063dc:	8812      	ldrh	r2, [r2, #0]
 80063de:	fb01 f202 	mul.w	r2, r1, r2
 80063e2:	441a      	add	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 80063e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80063ec:	4619      	mov	r1, r3
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f7ff fe56 	bl	80060a0 <pb_make_string_substream>
 80063f4:	4603      	mov	r3, r0
 80063f6:	f083 0301 	eor.w	r3, r3, #1
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01f      	beq.n	8006440 <decode_static_field+0xf4>
                    return false;
 8006400:	2300      	movs	r3, #0
 8006402:	e0d9      	b.n	80065b8 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 8006404:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	21ff      	movs	r1, #255	; 0xff
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff fea7 	bl	8006160 <decode_basic_field>
 8006412:	4603      	mov	r3, r0
 8006414:	f083 0301 	eor.w	r3, r3, #1
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <decode_static_field+0xda>
                    {
                        status = false;
 800641e:	2300      	movs	r3, #0
 8006420:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 8006424:	e015      	b.n	8006452 <decode_static_field+0x106>
                    }
                    (*size)++;
 8006426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	3301      	adds	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006430:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	8a52      	ldrh	r2, [r2, #18]
 800643a:	441a      	add	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8006440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <decode_static_field+0x106>
 8006446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006448:	881a      	ldrh	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	8a9b      	ldrh	r3, [r3, #20]
 800644e:	429a      	cmp	r2, r3
 8006450:	d3d8      	bcc.n	8006404 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 8006452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00b      	beq.n	8006470 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <decode_static_field+0x11a>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	e000      	b.n	8006468 <decode_static_field+0x11c>
 8006466:	4b56      	ldr	r3, [pc, #344]	; (80065c0 <decode_static_field+0x274>)
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	60d3      	str	r3, [r2, #12]
 800646c:	2300      	movs	r3, #0
 800646e:	e0a3      	b.n	80065b8 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 8006470:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006474:	4619      	mov	r1, r3
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f7ff fe4c 	bl	8006114 <pb_close_string_substream>
 800647c:	4603      	mov	r3, r0
 800647e:	f083 0301 	eor.w	r3, r3, #1
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <decode_static_field+0x140>
                    return false;
 8006488:	2300      	movs	r3, #0
 800648a:	e095      	b.n	80065b8 <decode_static_field+0x26c>

                return status;
 800648c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006490:	e092      	b.n	80065b8 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	64fb      	str	r3, [r7, #76]	; 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	8a52      	ldrh	r2, [r2, #18]
 80064a0:	4611      	mov	r1, r2
 80064a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064a4:	8812      	ldrh	r2, [r2, #0]
 80064a6:	fb01 f202 	mul.w	r2, r1, r2
 80064aa:	441a      	add	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 80064b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	b291      	uxth	r1, r2
 80064b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064ba:	8011      	strh	r1, [r2, #0]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	8a92      	ldrh	r2, [r2, #20]
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d30b      	bcc.n	80064dc <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <decode_static_field+0x186>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	e000      	b.n	80064d4 <decode_static_field+0x188>
 80064d2:	4b3b      	ldr	r3, [pc, #236]	; (80065c0 <decode_static_field+0x274>)
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	60d3      	str	r3, [r2, #12]
 80064d8:	2300      	movs	r3, #0
 80064da:	e06d      	b.n	80065b8 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 80064dc:	7afb      	ldrb	r3, [r7, #11]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	4619      	mov	r1, r3
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f7ff fe3c 	bl	8006160 <decode_basic_field>
 80064e8:	4603      	mov	r3, r0
 80064ea:	e065      	b.n	80065b8 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	7d9b      	ldrb	r3, [r3, #22]
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d005      	beq.n	8006504 <decode_static_field+0x1b8>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	7d9b      	ldrb	r3, [r3, #22]
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	2b09      	cmp	r3, #9
 8006502:	d141      	bne.n	8006588 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	881a      	ldrh	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 800650e:	429a      	cmp	r2, r3
 8006510:	d03a      	beq.n	8006588 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69d8      	ldr	r0, [r3, #28]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	8a5b      	ldrh	r3, [r3, #18]
 800651a:	461a      	mov	r2, r3
 800651c:	2100      	movs	r1, #0
 800651e:	f001 f85f 	bl	80075e0 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10a      	bne.n	8006542 <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 8006532:	2b00      	cmp	r3, #0
 8006534:	d105      	bne.n	8006542 <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 800653e:	2b00      	cmp	r3, #0
 8006540:	d022      	beq.n	8006588 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69da      	ldr	r2, [r3, #28]
 800654a:	f107 0314 	add.w	r3, r7, #20
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff f99d 	bl	800588e <pb_field_iter_begin>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d016      	beq.n	8006588 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 800655a:	f107 0314 	add.w	r3, r7, #20
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fa4d 	bl	80069fe <pb_message_set_to_defaults>
 8006564:	4603      	mov	r3, r0
 8006566:	f083 0301 	eor.w	r3, r3, #1
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00b      	beq.n	8006588 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <decode_static_field+0x232>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	e000      	b.n	8006580 <decode_static_field+0x234>
 800657e:	4b11      	ldr	r3, [pc, #68]	; (80065c4 <decode_static_field+0x278>)
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	60d3      	str	r3, [r2, #12]
 8006584:	2300      	movs	r3, #0
 8006586:	e017      	b.n	80065b8 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	8a12      	ldrh	r2, [r2, #16]
 8006590:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 8006592:	7afb      	ldrb	r3, [r7, #11]
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	4619      	mov	r1, r3
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f7ff fde1 	bl	8006160 <decode_basic_field>
 800659e:	4603      	mov	r3, r0
 80065a0:	e00a      	b.n	80065b8 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <decode_static_field+0x264>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	e000      	b.n	80065b2 <decode_static_field+0x266>
 80065b0:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <decode_static_field+0x27c>)
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	60d3      	str	r3, [r2, #12]
 80065b6:	2300      	movs	r3, #0
    }
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3758      	adds	r7, #88	; 0x58
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	080076ec 	.word	0x080076ec
 80065c4:	080076fc 	.word	0x080076fc
 80065c8:	080076d8 	.word	0x080076d8

080065cc <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	460b      	mov	r3, r1
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <decode_pointer_field+0x1c>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	e000      	b.n	80065ea <decode_pointer_field+0x1e>
 80065e8:	4b04      	ldr	r3, [pc, #16]	; (80065fc <decode_pointer_field+0x30>)
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	60d3      	str	r3, [r2, #12]
 80065ee:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	08007714 	.word	0x08007714

08006600 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8006600:	b590      	push	{r4, r7, lr}
 8006602:	b097      	sub	sp, #92	; 0x5c
 8006604:	af00      	add	r7, sp, #0
 8006606:	61f8      	str	r0, [r7, #28]
 8006608:	460b      	mov	r3, r1
 800660a:	617a      	str	r2, [r7, #20]
 800660c:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8006618:	7efb      	ldrb	r3, [r7, #27]
 800661a:	4619      	mov	r1, r3
 800661c:	69f8      	ldr	r0, [r7, #28]
 800661e:	f7ff fc91 	bl	8005f44 <pb_skip_field>
 8006622:	4603      	mov	r3, r0
 8006624:	e070      	b.n	8006708 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 8006626:	7efb      	ldrb	r3, [r7, #27]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d145      	bne.n	80066b8 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 800662c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006630:	4619      	mov	r1, r3
 8006632:	69f8      	ldr	r0, [r7, #28]
 8006634:	f7ff fd34 	bl	80060a0 <pb_make_string_substream>
 8006638:	4603      	mov	r3, r0
 800663a:	f083 0301 	eor.w	r3, r3, #1
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <decode_callback_field+0x48>
            return false;
 8006644:	2300      	movs	r3, #0
 8006646:	e05f      	b.n	8006708 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8006648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800664a:	657b      	str	r3, [r7, #84]	; 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	2100      	movs	r1, #0
 800665a:	4798      	blx	r3
 800665c:	4603      	mov	r3, r0
 800665e:	f083 0301 	eor.w	r3, r3, #1
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d010      	beq.n	800668a <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <decode_callback_field+0x76>
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	e005      	b.n	8006682 <decode_callback_field+0x82>
 8006676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <decode_callback_field+0x80>
 800667c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800667e:	e000      	b.n	8006682 <decode_callback_field+0x82>
 8006680:	4b23      	ldr	r3, [pc, #140]	; (8006710 <decode_callback_field+0x110>)
 8006682:	69fa      	ldr	r2, [r7, #28]
 8006684:	60d3      	str	r3, [r2, #12]
                return false;
 8006686:	2300      	movs	r3, #0
 8006688:	e03e      	b.n	8006708 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 800668a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <decode_callback_field+0x98>
 8006690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006692:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006694:	429a      	cmp	r2, r3
 8006696:	d8d7      	bhi.n	8006648 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8006698:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800669c:	4619      	mov	r1, r3
 800669e:	69f8      	ldr	r0, [r7, #28]
 80066a0:	f7ff fd38 	bl	8006114 <pb_close_string_substream>
 80066a4:	4603      	mov	r3, r0
 80066a6:	f083 0301 	eor.w	r3, r3, #1
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <decode_callback_field+0xb4>
            return false;
 80066b0:	2300      	movs	r3, #0
 80066b2:	e029      	b.n	8006708 <decode_callback_field+0x108>

        return true;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e027      	b.n	8006708 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 80066b8:	230a      	movs	r3, #10
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 80066bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80066c4:	7ef9      	ldrb	r1, [r7, #27]
 80066c6:	69f8      	ldr	r0, [r7, #28]
 80066c8:	f7ff fc7e 	bl	8005fc8 <read_raw_value>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f083 0301 	eor.w	r3, r3, #1
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <decode_callback_field+0xdc>
            return false;
 80066d8:	2300      	movs	r3, #0
 80066da:	e015      	b.n	8006708 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 80066dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066de:	463b      	mov	r3, r7
 80066e0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7ff fa87 	bl	8005bf8 <pb_istream_from_buffer>
 80066ea:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80066ee:	463b      	mov	r3, r7
 80066f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	2100      	movs	r1, #0
 8006704:	4798      	blx	r3
 8006706:	4603      	mov	r3, r0
    }
}
 8006708:	4618      	mov	r0, r3
 800670a:	375c      	adds	r7, #92	; 0x5c
 800670c:	46bd      	mov	sp, r7
 800670e:	bd90      	pop	{r4, r7, pc}
 8006710:	08007728 	.word	0x08007728

08006714 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	460b      	mov	r3, r1
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	7d9b      	ldrb	r3, [r3, #22]
 8006726:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800672a:	2b80      	cmp	r3, #128	; 0x80
 800672c:	d00e      	beq.n	800674c <decode_field+0x38>
 800672e:	2b80      	cmp	r3, #128	; 0x80
 8006730:	d81c      	bhi.n	800676c <decode_field+0x58>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <decode_field+0x28>
 8006736:	2b40      	cmp	r3, #64	; 0x40
 8006738:	d010      	beq.n	800675c <decode_field+0x48>
 800673a:	e017      	b.n	800676c <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 800673c:	7afb      	ldrb	r3, [r7, #11]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	4619      	mov	r1, r3
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f7ff fe02 	bl	800634c <decode_static_field>
 8006748:	4603      	mov	r3, r0
 800674a:	e01a      	b.n	8006782 <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 800674c:	7afb      	ldrb	r3, [r7, #11]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	4619      	mov	r1, r3
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff ff3a 	bl	80065cc <decode_pointer_field>
 8006758:	4603      	mov	r3, r0
 800675a:	e012      	b.n	8006782 <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 800675c:	7afb      	ldrb	r3, [r7, #11]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	4619      	mov	r1, r3
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f7ff ff4c 	bl	8006600 <decode_callback_field>
 8006768:	4603      	mov	r3, r0
 800676a:	e00a      	b.n	8006782 <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <decode_field+0x66>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	e000      	b.n	800677c <decode_field+0x68>
 800677a:	4b04      	ldr	r3, [pc, #16]	; (800678c <decode_field+0x78>)
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	60d3      	str	r3, [r2, #12]
 8006780:	2300      	movs	r3, #0
    }
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	080076d8 	.word	0x080076d8

08006790 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08e      	sub	sp, #56	; 0x38
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
 800679c:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 800679e:	f107 0310 	add.w	r3, r7, #16
 80067a2:	68b9      	ldr	r1, [r7, #8]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff f88b 	bl	80058c0 <pb_field_iter_begin_extension>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f083 0301 	eor.w	r3, r3, #1
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00b      	beq.n	80067ce <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <default_extension_decoder+0x34>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	e000      	b.n	80067c6 <default_extension_decoder+0x36>
 80067c4:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <default_extension_decoder+0x70>)
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	60d3      	str	r3, [r2, #12]
 80067ca:	2300      	movs	r3, #0
 80067cc:	e014      	b.n	80067f8 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 80067ce:	8c3b      	ldrh	r3, [r7, #32]
 80067d0:	461a      	mov	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d102      	bne.n	80067de <default_extension_decoder+0x4e>
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <default_extension_decoder+0x52>
        return true;
 80067de:	2301      	movs	r3, #1
 80067e0:	e00a      	b.n	80067f8 <default_extension_decoder+0x68>

    extension->found = true;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2201      	movs	r2, #1
 80067e6:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 80067e8:	f107 0210 	add.w	r2, r7, #16
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	4619      	mov	r1, r3
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f7ff ff8f 	bl	8006714 <decode_field>
 80067f6:	4603      	mov	r3, r0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3738      	adds	r7, #56	; 0x38
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	08007738 	.word	0x08007738

08006804 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8006804:	b590      	push	{r4, r7, lr}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	603b      	str	r3, [r7, #0]
 8006810:	4613      	mov	r3, r2
 8006812:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 800681a:	e022      	b.n	8006862 <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00a      	beq.n	800683c <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681c      	ldr	r4, [r3, #0]
 800682c:	79fb      	ldrb	r3, [r7, #7]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	47a0      	blx	r4
 8006836:	4603      	mov	r3, r0
 8006838:	75fb      	strb	r3, [r7, #23]
 800683a:	e007      	b.n	800684c <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 800683c:	79fb      	ldrb	r3, [r7, #7]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f7ff ffa4 	bl	8006790 <default_extension_decoder>
 8006848:	4603      	mov	r3, r0
 800684a:	75fb      	strb	r3, [r7, #23]

        if (!status)
 800684c:	7dfb      	ldrb	r3, [r7, #23]
 800684e:	f083 0301 	eor.w	r3, r3, #1
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <decode_extension+0x58>
            return false;
 8006858:	2300      	movs	r3, #0
 800685a:	e00b      	b.n	8006874 <decode_extension+0x70>
        
        extension = extension->next;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <decode_extension+0x6e>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	429a      	cmp	r2, r3
 8006870:	d0d4      	beq.n	800681c <decode_extension+0x18>
    }
    
    return true;
 8006872:	2301      	movs	r3, #1
}
 8006874:	4618      	mov	r0, r3
 8006876:	371c      	adds	r7, #28
 8006878:	46bd      	mov	sp, r7
 800687a:	bd90      	pop	{r4, r7, pc}

0800687c <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b08e      	sub	sp, #56	; 0x38
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	7d9b      	ldrb	r3, [r3, #22]
 8006888:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800688c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	2b0a      	cmp	r3, #10
 8006896:	d124      	bne.n	80068e2 <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 80068a0:	e01b      	b.n	80068da <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 80068a2:	f107 0308 	add.w	r3, r7, #8
 80068a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff f809 	bl	80058c0 <pb_field_iter_begin_extension>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00f      	beq.n	80068d4 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 80068b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b6:	2200      	movs	r2, #0
 80068b8:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 80068ba:	f107 0308 	add.w	r3, r7, #8
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 f89d 	bl	80069fe <pb_message_set_to_defaults>
 80068c4:	4603      	mov	r3, r0
 80068c6:	f083 0301 	eor.w	r3, r3, #1
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <pb_field_set_to_default+0x58>
                    return false;
 80068d0:	2300      	movs	r3, #0
 80068d2:	e090      	b.n	80069f6 <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 80068d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 80068da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e0      	bne.n	80068a2 <pb_field_set_to_default+0x26>
 80068e0:	e088      	b.n	80069f4 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80068e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80068e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d166      	bne.n	80069bc <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 80068ee:	2301      	movs	r3, #1
 80068f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 80068f4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80068f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068fc:	2b10      	cmp	r3, #16
 80068fe:	d108      	bne.n	8006912 <pb_field_set_to_default+0x96>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d004      	beq.n	8006912 <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	2200      	movs	r2, #0
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	e012      	b.n	8006938 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006912:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006916:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800691a:	2b20      	cmp	r3, #32
 800691c:	d005      	beq.n	800692a <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800691e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006922:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006926:	2b30      	cmp	r3, #48	; 0x30
 8006928:	d106      	bne.n	8006938 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	2200      	movs	r2, #0
 8006930:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8006932:	2300      	movs	r3, #0
 8006934:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        if (init_data)
 8006938:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800693c:	2b00      	cmp	r3, #0
 800693e:	d059      	beq.n	80069f4 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	7d9b      	ldrb	r3, [r3, #22]
 8006944:	f003 030f 	and.w	r3, r3, #15
 8006948:	2b08      	cmp	r3, #8
 800694a:	d005      	beq.n	8006958 <pb_field_set_to_default+0xdc>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	7d9b      	ldrb	r3, [r3, #22]
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	2b09      	cmp	r3, #9
 8006956:	d128      	bne.n	80069aa <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10a      	bne.n	8006978 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 8006968:	2b00      	cmp	r3, #0
 800696a:	d105      	bne.n	8006978 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 8006974:	2b00      	cmp	r3, #0
 8006976:	d018      	beq.n	80069aa <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	69da      	ldr	r2, [r3, #28]
 8006980:	f107 0308 	add.w	r3, r7, #8
 8006984:	4618      	mov	r0, r3
 8006986:	f7fe ff82 	bl	800588e <pb_field_iter_begin>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d030      	beq.n	80069f2 <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8006990:	f107 0308 	add.w	r3, r7, #8
 8006994:	4618      	mov	r0, r3
 8006996:	f000 f832 	bl	80069fe <pb_message_set_to_defaults>
 800699a:	4603      	mov	r3, r0
 800699c:	f083 0301 	eor.w	r3, r3, #1
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d025      	beq.n	80069f2 <pb_field_set_to_default+0x176>
                        return false;
 80069a6:	2300      	movs	r3, #0
 80069a8:	e025      	b.n	80069f6 <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	69d8      	ldr	r0, [r3, #28]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	8a5b      	ldrh	r3, [r3, #18]
 80069b2:	461a      	mov	r2, r3
 80069b4:	2100      	movs	r1, #0
 80069b6:	f000 fe13 	bl	80075e0 <memset>
 80069ba:	e01b      	b.n	80069f4 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 80069bc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80069c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069c4:	2b80      	cmp	r3, #128	; 0x80
 80069c6:	d115      	bne.n	80069f4 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	2200      	movs	r2, #0
 80069ce:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80069d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80069d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069d8:	2b20      	cmp	r3, #32
 80069da:	d005      	beq.n	80069e8 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80069dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80069e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80069e4:	2b30      	cmp	r3, #48	; 0x30
 80069e6:	d105      	bne.n	80069f4 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	2200      	movs	r2, #0
 80069ee:	801a      	strh	r2, [r3, #0]
 80069f0:	e000      	b.n	80069f4 <pb_field_set_to_default+0x178>
            {
 80069f2:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 80069f4:	2301      	movs	r3, #1
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3738      	adds	r7, #56	; 0x38
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 80069fe:	b590      	push	{r4, r7, lr}
 8006a00:	b08d      	sub	sp, #52	; 0x34
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 8006a06:	f107 0320 	add.w	r3, r7, #32
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	605a      	str	r2, [r3, #4]
 8006a10:	609a      	str	r2, [r3, #8]
 8006a12:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d020      	beq.n	8006a68 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6899      	ldr	r1, [r3, #8]
 8006a2c:	463b      	mov	r3, r7
 8006a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff f8e0 	bl	8005bf8 <pb_istream_from_buffer>
 8006a38:	f107 0420 	add.w	r4, r7, #32
 8006a3c:	463b      	mov	r3, r7
 8006a3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8006a44:	f107 031a 	add.w	r3, r7, #26
 8006a48:	f107 021c 	add.w	r2, r7, #28
 8006a4c:	f107 011b 	add.w	r1, r7, #27
 8006a50:	f107 0020 	add.w	r0, r7, #32
 8006a54:	f7ff fa47 	bl	8005ee6 <pb_decode_tag>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	f083 0301 	eor.w	r3, r3, #1
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <pb_message_set_to_defaults+0x6a>
            return false;
 8006a64:	2300      	movs	r3, #0
 8006a66:	e043      	b.n	8006af0 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8006a68:	6978      	ldr	r0, [r7, #20]
 8006a6a:	f7ff ff07 	bl	800687c <pb_field_set_to_default>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	f083 0301 	eor.w	r3, r3, #1
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <pb_message_set_to_defaults+0x80>
            return false;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	e038      	b.n	8006af0 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d02e      	beq.n	8006ae2 <pb_message_set_to_defaults+0xe4>
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	8a1b      	ldrh	r3, [r3, #16]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d128      	bne.n	8006ae2 <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8006a90:	7ef9      	ldrb	r1, [r7, #27]
 8006a92:	f107 0320 	add.w	r3, r7, #32
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff fe3b 	bl	8006714 <decode_field>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	f083 0301 	eor.w	r3, r3, #1
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <pb_message_set_to_defaults+0xb0>
                return false;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e020      	b.n	8006af0 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8006aae:	f107 031a 	add.w	r3, r7, #26
 8006ab2:	f107 021c 	add.w	r2, r7, #28
 8006ab6:	f107 011b 	add.w	r1, r7, #27
 8006aba:	f107 0020 	add.w	r0, r7, #32
 8006abe:	f7ff fa12 	bl	8005ee6 <pb_decode_tag>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	f083 0301 	eor.w	r3, r3, #1
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <pb_message_set_to_defaults+0xd4>
                return false;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	e00e      	b.n	8006af0 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 8006ae2:	6978      	ldr	r0, [r7, #20]
 8006ae4:	f7fe ff1c 	bl	8005920 <pb_field_iter_next>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1bc      	bne.n	8006a68 <pb_message_set_to_defaults+0x6a>

    return true;
 8006aee:	2301      	movs	r3, #1
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3734      	adds	r7, #52	; 0x34
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd90      	pop	{r4, r7, pc}

08006af8 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b09a      	sub	sp, #104	; 0x68
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 8006b06:	2300      	movs	r3, #0
 8006b08:	667b      	str	r3, [r7, #100]	; 0x64
    pb_extension_t *extensions = NULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	663b      	str	r3, [r7, #96]	; 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 8006b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b12:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    pb_size_t fixed_count_size = 0;
 8006b16:	2300      	movs	r3, #0
 8006b18:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    pb_size_t fixed_count_total_size = 0;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 8006b22:	2300      	movs	r3, #0
 8006b24:	643b      	str	r3, [r7, #64]	; 0x40
 8006b26:	2300      	movs	r3, #0
 8006b28:	647b      	str	r3, [r7, #68]	; 0x44
    const uint32_t allbits = ~(uint32_t)0;
 8006b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b2e:	657b      	str	r3, [r7, #84]	; 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8006b30:	f107 0318 	add.w	r3, r7, #24
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fe fea8 	bl	800588e <pb_field_iter_begin>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8102 	beq.w	8006d4a <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f040 80fc 	bne.w	8006d4a <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 8006b52:	f107 0318 	add.w	r3, r7, #24
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7ff ff51 	bl	80069fe <pb_message_set_to_defaults>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	f083 0301 	eor.w	r3, r3, #1
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 80f0 	beq.w	8006d4a <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d002      	beq.n	8006b78 <pb_decode_inner+0x80>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	e000      	b.n	8006b7a <pb_decode_inner+0x82>
 8006b78:	4b99      	ldr	r3, [pc, #612]	; (8006de0 <pb_decode_inner+0x2e8>)
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	60d3      	str	r3, [r2, #12]
 8006b7e:	2300      	movs	r3, #0
 8006b80:	e16d      	b.n	8006e5e <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8006b82:	f107 0312 	add.w	r3, r7, #18
 8006b86:	f107 0214 	add.w	r2, r7, #20
 8006b8a:	f107 0113 	add.w	r1, r7, #19
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f7ff f9a9 	bl	8005ee6 <pb_decode_tag>
 8006b94:	4603      	mov	r3, r0
 8006b96:	f083 0301 	eor.w	r3, r3, #1
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d005      	beq.n	8006bac <pb_decode_inner+0xb4>
        {
            if (eof)
 8006ba0:	7cbb      	ldrb	r3, [r7, #18]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f040 80d7 	bne.w	8006d56 <pb_decode_inner+0x25e>
                break;
            else
                return false;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	e158      	b.n	8006e5e <pb_decode_inner+0x366>
        }

        if (tag == 0)
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d111      	bne.n	8006bd6 <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	f003 0304 	and.w	r3, r3, #4
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f040 80ce 	bne.w	8006d5a <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <pb_decode_inner+0xd4>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	e000      	b.n	8006bce <pb_decode_inner+0xd6>
 8006bcc:	4b85      	ldr	r3, [pc, #532]	; (8006de4 <pb_decode_inner+0x2ec>)
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	60d3      	str	r3, [r2, #12]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e143      	b.n	8006e5e <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	f107 0318 	add.w	r3, r7, #24
 8006bdc:	4611      	mov	r1, r2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe feb3 	bl	800594a <pb_field_iter_find>
 8006be4:	4603      	mov	r3, r0
 8006be6:	f083 0301 	eor.w	r3, r3, #1
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d105      	bne.n	8006bfc <pb_decode_inner+0x104>
 8006bf0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006bf4:	f003 030f 	and.w	r3, r3, #15
 8006bf8:	2b0a      	cmp	r3, #10
 8006bfa:	d13c      	bne.n	8006c76 <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8006bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d112      	bne.n	8006c28 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 8006c02:	f107 0318 	add.w	r3, r7, #24
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fe fef5 	bl	80059f6 <pb_field_iter_find_extension>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d004      	beq.n	8006c1c <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 8006c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	663b      	str	r3, [r7, #96]	; 0x60
                    extension_range_start = iter.tag;
 8006c18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c1a:	667b      	str	r3, [r7, #100]	; 0x64
                }

                if (!extensions)
 8006c1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d102      	bne.n	8006c28 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 8006c22:	f04f 33ff 	mov.w	r3, #4294967295
 8006c26:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            if (tag >= extension_range_start)
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d815      	bhi.n	8006c5c <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	64fb      	str	r3, [r7, #76]	; 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 8006c36:	6979      	ldr	r1, [r7, #20]
 8006c38:	7cfa      	ldrb	r2, [r7, #19]
 8006c3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f7ff fde1 	bl	8006804 <decode_extension>
 8006c42:	4603      	mov	r3, r0
 8006c44:	f083 0301 	eor.w	r3, r3, #1
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <pb_decode_inner+0x15a>
                    return false;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e105      	b.n	8006e5e <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d173      	bne.n	8006d44 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8006c5c:	7cfb      	ldrb	r3, [r7, #19]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f7ff f96f 	bl	8005f44 <pb_skip_field>
 8006c66:	4603      	mov	r3, r0
 8006c68:	f083 0301 	eor.w	r3, r3, #1
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d06a      	beq.n	8006d48 <pb_decode_inner+0x250>
                return false;
 8006c72:	2300      	movs	r3, #0
 8006c74:	e0f3      	b.n	8006e5e <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 8006c76:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006c7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c7e:	2b20      	cmp	r3, #32
 8006c80:	d12e      	bne.n	8006ce0 <pb_decode_inner+0x1e8>
 8006c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c84:	f107 0318 	add.w	r3, r7, #24
 8006c88:	3314      	adds	r3, #20
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d128      	bne.n	8006ce0 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 8006c8e:	8c3b      	ldrh	r3, [r7, #32]
 8006c90:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d020      	beq.n	8006cda <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8006c98:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d011      	beq.n	8006cc8 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 8006ca4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8006ca8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d00b      	beq.n	8006cc8 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <pb_decode_inner+0x1c6>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	e000      	b.n	8006cc0 <pb_decode_inner+0x1c8>
 8006cbe:	4b4a      	ldr	r3, [pc, #296]	; (8006de8 <pb_decode_inner+0x2f0>)
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	60d3      	str	r3, [r2, #12]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	e0ca      	b.n	8006e5e <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8006cc8:	8c3b      	ldrh	r3, [r7, #32]
 8006cca:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                fixed_count_size = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                fixed_count_total_size = iter.array_size;
 8006cd4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006cd6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }

            iter.pSize = &fixed_count_size;
 8006cda:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8006cde:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8006ce0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006ce4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d11c      	bne.n	8006d26 <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8006cec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cee:	2b3f      	cmp	r3, #63	; 0x3f
 8006cf0:	d819      	bhi.n	8006d26 <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8006cf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cf4:	f003 031f 	and.w	r3, r3, #31
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfe:	653b      	str	r3, [r7, #80]	; 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 8006d00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	3368      	adds	r3, #104	; 0x68
 8006d0a:	443b      	add	r3, r7
 8006d0c:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8006d10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	4619      	mov	r1, r3
 8006d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	008b      	lsls	r3, r1, #2
 8006d1e:	3368      	adds	r3, #104	; 0x68
 8006d20:	443b      	add	r3, r7
 8006d22:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8006d26:	7cfb      	ldrb	r3, [r7, #19]
 8006d28:	f107 0218 	add.w	r2, r7, #24
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f7ff fcf0 	bl	8006714 <decode_field>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f083 0301 	eor.w	r3, r3, #1
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d004      	beq.n	8006d4a <pb_decode_inner+0x252>
            return false;
 8006d40:	2300      	movs	r3, #0
 8006d42:	e08c      	b.n	8006e5e <pb_decode_inner+0x366>
                    continue;
 8006d44:	bf00      	nop
 8006d46:	e000      	b.n	8006d4a <pb_decode_inner+0x252>
            continue;
 8006d48:	bf00      	nop
    while (stream->bytes_left)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f47f af17 	bne.w	8006b82 <pb_decode_inner+0x8a>
 8006d54:	e002      	b.n	8006d5c <pb_decode_inner+0x264>
                break;
 8006d56:	bf00      	nop
 8006d58:	e000      	b.n	8006d5c <pb_decode_inner+0x264>
            break;
 8006d5a:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 8006d5c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d011      	beq.n	8006d8c <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8006d68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8006d6c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d00b      	beq.n	8006d8c <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <pb_decode_inner+0x28a>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	e000      	b.n	8006d84 <pb_decode_inner+0x28c>
 8006d82:	4b19      	ldr	r3, [pc, #100]	; (8006de8 <pb_decode_inner+0x2f0>)
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	60d3      	str	r3, [r2, #12]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	e068      	b.n	8006e5e <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	8a5b      	ldrh	r3, [r3, #18]
 8006d90:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        if (req_field_count > 0)
 8006d94:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d05f      	beq.n	8006e5c <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8006d9c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006da0:	2b40      	cmp	r3, #64	; 0x40
 8006da2:	d902      	bls.n	8006daa <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 8006da4:	2340      	movs	r3, #64	; 0x40
 8006da6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8006daa:	2300      	movs	r3, #0
 8006dac:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8006db0:	e023      	b.n	8006dfa <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 8006db2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	3368      	adds	r3, #104	; 0x68
 8006dba:	443b      	add	r3, r7
 8006dbc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8006dc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d014      	beq.n	8006df0 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d002      	beq.n	8006dd4 <pb_decode_inner+0x2dc>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	e000      	b.n	8006dd6 <pb_decode_inner+0x2de>
 8006dd4:	4b05      	ldr	r3, [pc, #20]	; (8006dec <pb_decode_inner+0x2f4>)
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	60d3      	str	r3, [r2, #12]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	e03f      	b.n	8006e5e <pb_decode_inner+0x366>
 8006dde:	bf00      	nop
 8006de0:	080076fc 	.word	0x080076fc
 8006de4:	0800774c 	.word	0x0800774c
 8006de8:	08007758 	.word	0x08007758
 8006dec:	0800777c 	.word	0x0800777c
            for (i = 0; i < (req_field_count >> 5); i++)
 8006df0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8006df4:	3301      	adds	r3, #1
 8006df6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8006dfa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d3d3      	bcc.n	8006db2 <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8006e0a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006e0e:	f003 031f 	and.w	r3, r3, #31
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d022      	beq.n	8006e5c <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8006e16:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006e1a:	095b      	lsrs	r3, r3, #5
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	3368      	adds	r3, #104	; 0x68
 8006e22:	443b      	add	r3, r7
 8006e24:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8006e28:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	f003 031f 	and.w	r3, r3, #31
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	f1c3 0320 	rsb	r3, r3, #32
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e3e:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d00b      	beq.n	8006e5c <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <pb_decode_inner+0x35a>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	e000      	b.n	8006e54 <pb_decode_inner+0x35c>
 8006e52:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <pb_decode_inner+0x370>)
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	60d3      	str	r3, [r2, #12]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	e000      	b.n	8006e5e <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 8006e5c:	2301      	movs	r3, #1
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3768      	adds	r7, #104	; 0x68
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	0800777c 	.word	0x0800777c

08006e6c <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 8006e78:	2300      	movs	r3, #0
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	68b9      	ldr	r1, [r7, #8]
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f7ff fe3a 	bl	8006af8 <pb_decode_inner>
 8006e84:	4603      	mov	r3, r0
 8006e86:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 8006e9c:	f107 030c 	add.w	r3, r7, #12
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7fe ff70 	bl	8005d88 <pb_decode_varint32>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	f083 0301 	eor.w	r3, r3, #1
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <pb_decode_bool+0x26>
        return false;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	e008      	b.n	8006eca <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	bf14      	ite	ne
 8006ebe:	2301      	movne	r3, #1
 8006ec0:	2300      	moveq	r3, #0
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	701a      	strb	r2, [r3, #0]
    return true;
 8006ec8:	2301      	movs	r3, #1
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 8006ed2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 8006ede:	f107 0308 	add.w	r3, r7, #8
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f7fe ff5f 	bl	8005da8 <pb_decode_varint>
 8006eea:	4603      	mov	r3, r0
 8006eec:	f083 0301 	eor.w	r3, r3, #1
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <pb_decode_svarint+0x28>
        return false;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	e029      	b.n	8006f4e <pb_decode_svarint+0x7c>
    
    if (value & 1)
 8006efa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006efe:	f002 0401 	and.w	r4, r2, #1
 8006f02:	2500      	movs	r5, #0
 8006f04:	ea54 0305 	orrs.w	r3, r4, r5
 8006f08:	d013      	beq.n	8006f32 <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 8006f0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f0e:	f04f 0200 	mov.w	r2, #0
 8006f12:	f04f 0300 	mov.w	r3, #0
 8006f16:	0842      	lsrs	r2, r0, #1
 8006f18:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8006f1c:	084b      	lsrs	r3, r1, #1
 8006f1e:	ea6f 0802 	mvn.w	r8, r2
 8006f22:	ea6f 0903 	mvn.w	r9, r3
 8006f26:	4642      	mov	r2, r8
 8006f28:	464b      	mov	r3, r9
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	e9c1 2300 	strd	r2, r3, [r1]
 8006f30:	e00c      	b.n	8006f4c <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 8006f32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f36:	f04f 0200 	mov.w	r2, #0
 8006f3a:	f04f 0300 	mov.w	r3, #0
 8006f3e:	0842      	lsrs	r2, r0, #1
 8006f40:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8006f44:	084b      	lsrs	r3, r1, #1
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 8006f4c:	2301      	movs	r3, #1
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006f58 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 8006f62:	f107 030c 	add.w	r3, r7, #12
 8006f66:	2204      	movs	r2, #4
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7fe fd92 	bl	8005a94 <pb_read>
 8006f70:	4603      	mov	r3, r0
 8006f72:	f083 0301 	eor.w	r3, r3, #1
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <pb_decode_fixed32+0x28>
        return false;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e003      	b.n	8006f88 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 8006f86:	2301      	movs	r3, #1
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 8006f9a:	f107 0308 	add.w	r3, r7, #8
 8006f9e:	2208      	movs	r2, #8
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7fe fd76 	bl	8005a94 <pb_read>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	f083 0301 	eor.w	r3, r3, #1
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <pb_decode_fixed64+0x28>
        return false;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	e005      	b.n	8006fc4 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 8006fb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 8006fc2:	2301      	movs	r3, #1
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7ff ff58 	bl	8006e92 <pb_decode_bool>
 8006fe2:	4603      	mov	r3, r0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8006fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ff0:	b094      	sub	sp, #80	; 0x50
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6278      	str	r0, [r7, #36]	; 0x24
 8006ff6:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	7d9b      	ldrb	r3, [r3, #22]
 8006ffc:	f003 030f 	and.w	r3, r3, #15
 8007000:	2b02      	cmp	r3, #2
 8007002:	d179      	bne.n	80070f8 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 8007004:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007008:	4619      	mov	r1, r3
 800700a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800700c:	f7fe fecc 	bl	8005da8 <pb_decode_varint>
 8007010:	4603      	mov	r3, r0
 8007012:	f083 0301 	eor.w	r3, r3, #1
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <pb_dec_varint+0x34>
            return false;
 800701c:	2300      	movs	r3, #0
 800701e:	e107      	b.n	8007230 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	8a5b      	ldrh	r3, [r3, #18]
 8007024:	2b08      	cmp	r3, #8
 8007026:	d10a      	bne.n	800703e <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	69d9      	ldr	r1, [r3, #28]
 800702c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007030:	e9c1 2300 	strd	r2, r3, [r1]
 8007034:	e9d1 2300 	ldrd	r2, r3, [r1]
 8007038:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800703c:	e046      	b.n	80070cc <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	8a5b      	ldrh	r3, [r3, #18]
 8007042:	2b04      	cmp	r3, #4
 8007044:	d10e      	bne.n	8007064 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 8007046:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	4602      	mov	r2, r0
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2200      	movs	r2, #0
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	617a      	str	r2, [r7, #20]
 800705a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800705e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8007062:	e033      	b.n	80070cc <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	8a5b      	ldrh	r3, [r3, #18]
 8007068:	2b02      	cmp	r3, #2
 800706a:	d10f      	bne.n	800708c <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 800706c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	b282      	uxth	r2, r0
 8007076:	801a      	strh	r2, [r3, #0]
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	b29b      	uxth	r3, r3
 800707c:	2200      	movs	r2, #0
 800707e:	60bb      	str	r3, [r7, #8]
 8007080:	60fa      	str	r2, [r7, #12]
 8007082:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007086:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 800708a:	e01f      	b.n	80070cc <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	8a5b      	ldrh	r3, [r3, #18]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d10f      	bne.n	80070b4 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 8007094:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	b2c2      	uxtb	r2, r0
 800709e:	701a      	strb	r2, [r3, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2200      	movs	r2, #0
 80070a6:	603b      	str	r3, [r7, #0]
 80070a8:	607a      	str	r2, [r7, #4]
 80070aa:	e9d7 3400 	ldrd	r3, r4, [r7]
 80070ae:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 80070b2:	e00b      	b.n	80070cc <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <pb_dec_varint+0xd6>
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	e000      	b.n	80070c4 <pb_dec_varint+0xd8>
 80070c2:	4b5e      	ldr	r3, [pc, #376]	; (800723c <pb_dec_varint+0x250>)
 80070c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c6:	60d3      	str	r3, [r2, #12]
 80070c8:	2300      	movs	r3, #0
 80070ca:	e0b1      	b.n	8007230 <pb_dec_varint+0x244>

        if (clamped != value)
 80070cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070d0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80070d4:	4299      	cmp	r1, r3
 80070d6:	bf08      	it	eq
 80070d8:	4290      	cmpeq	r0, r2
 80070da:	d00b      	beq.n	80070f4 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <pb_dec_varint+0xfe>
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	e000      	b.n	80070ec <pb_dec_varint+0x100>
 80070ea:	4b55      	ldr	r3, [pc, #340]	; (8007240 <pb_dec_varint+0x254>)
 80070ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ee:	60d3      	str	r3, [r2, #12]
 80070f0:	2300      	movs	r3, #0
 80070f2:	e09d      	b.n	8007230 <pb_dec_varint+0x244>

        return true;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e09b      	b.n	8007230 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	7d9b      	ldrb	r3, [r3, #22]
 80070fc:	f003 030f 	and.w	r3, r3, #15
 8007100:	2b03      	cmp	r3, #3
 8007102:	d10d      	bne.n	8007120 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 8007104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007108:	4619      	mov	r1, r3
 800710a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800710c:	f7ff fee1 	bl	8006ed2 <pb_decode_svarint>
 8007110:	4603      	mov	r3, r0
 8007112:	f083 0301 	eor.w	r3, r3, #1
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d022      	beq.n	8007162 <pb_dec_varint+0x176>
                return false;
 800711c:	2300      	movs	r3, #0
 800711e:	e087      	b.n	8007230 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 8007120:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007124:	4619      	mov	r1, r3
 8007126:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007128:	f7fe fe3e 	bl	8005da8 <pb_decode_varint>
 800712c:	4603      	mov	r3, r0
 800712e:	f083 0301 	eor.w	r3, r3, #1
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <pb_dec_varint+0x150>
                return false;
 8007138:	2300      	movs	r3, #0
 800713a:	e079      	b.n	8007230 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	8a5b      	ldrh	r3, [r3, #18]
 8007140:	2b08      	cmp	r3, #8
 8007142:	d104      	bne.n	800714e <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 8007144:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007148:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800714c:	e009      	b.n	8007162 <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 800714e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007152:	4613      	mov	r3, r2
 8007154:	17da      	asrs	r2, r3, #31
 8007156:	61bb      	str	r3, [r7, #24]
 8007158:	61fa      	str	r2, [r7, #28]
 800715a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800715e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	8a5b      	ldrh	r3, [r3, #18]
 8007166:	2b08      	cmp	r3, #8
 8007168:	d10a      	bne.n	8007180 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	69d9      	ldr	r1, [r3, #28]
 800716e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007172:	e9c1 2300 	strd	r2, r3, [r1]
 8007176:	e9d1 2300 	ldrd	r2, r3, [r1]
 800717a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800717e:	e042      	b.n	8007206 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	8a5b      	ldrh	r3, [r3, #18]
 8007184:	2b04      	cmp	r3, #4
 8007186:	d10c      	bne.n	80071a2 <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 8007188:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	4602      	mov	r2, r0
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	17da      	asrs	r2, r3, #31
 8007198:	469a      	mov	sl, r3
 800719a:	4693      	mov	fp, r2
 800719c:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
 80071a0:	e031      	b.n	8007206 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	8a5b      	ldrh	r3, [r3, #18]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d10e      	bne.n	80071c8 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 80071aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	b202      	sxth	r2, r0
 80071b4:	801a      	strh	r2, [r3, #0]
 80071b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071ba:	b21b      	sxth	r3, r3
 80071bc:	17da      	asrs	r2, r3, #31
 80071be:	4698      	mov	r8, r3
 80071c0:	4691      	mov	r9, r2
 80071c2:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 80071c6:	e01e      	b.n	8007206 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	8a5b      	ldrh	r3, [r3, #18]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d10e      	bne.n	80071ee <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 80071d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	69db      	ldr	r3, [r3, #28]
 80071d8:	b242      	sxtb	r2, r0
 80071da:	701a      	strb	r2, [r3, #0]
 80071dc:	f993 3000 	ldrsb.w	r3, [r3]
 80071e0:	b25b      	sxtb	r3, r3
 80071e2:	17da      	asrs	r2, r3, #31
 80071e4:	461c      	mov	r4, r3
 80071e6:	4615      	mov	r5, r2
 80071e8:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 80071ec:	e00b      	b.n	8007206 <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <pb_dec_varint+0x210>
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	e000      	b.n	80071fe <pb_dec_varint+0x212>
 80071fc:	4b0f      	ldr	r3, [pc, #60]	; (800723c <pb_dec_varint+0x250>)
 80071fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007200:	60d3      	str	r3, [r2, #12]
 8007202:	2300      	movs	r3, #0
 8007204:	e014      	b.n	8007230 <pb_dec_varint+0x244>

        if (clamped != svalue)
 8007206:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800720a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800720e:	4299      	cmp	r1, r3
 8007210:	bf08      	it	eq
 8007212:	4290      	cmpeq	r0, r2
 8007214:	d00b      	beq.n	800722e <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d002      	beq.n	8007224 <pb_dec_varint+0x238>
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	e000      	b.n	8007226 <pb_dec_varint+0x23a>
 8007224:	4b06      	ldr	r3, [pc, #24]	; (8007240 <pb_dec_varint+0x254>)
 8007226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007228:	60d3      	str	r3, [r2, #12]
 800722a:	2300      	movs	r3, #0
 800722c:	e000      	b.n	8007230 <pb_dec_varint+0x244>

        return true;
 800722e:	2301      	movs	r3, #1
    }
}
 8007230:	4618      	mov	r0, r3
 8007232:	3750      	adds	r7, #80	; 0x50
 8007234:	46bd      	mov	sp, r7
 8007236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800723a:	bf00      	nop
 800723c:	08007794 	.word	0x08007794
 8007240:	080077a8 	.word	0x080077a8

08007244 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 800724e:	f107 030c 	add.w	r3, r7, #12
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7fe fd97 	bl	8005d88 <pb_decode_varint32>
 800725a:	4603      	mov	r3, r0
 800725c:	f083 0301 	eor.w	r3, r3, #1
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <pb_dec_bytes+0x26>
        return false;
 8007266:	2300      	movs	r3, #0
 8007268:	e055      	b.n	8007316 <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007270:	d30b      	bcc.n	800728a <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <pb_dec_bytes+0x3c>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	e000      	b.n	8007282 <pb_dec_bytes+0x3e>
 8007280:	4b27      	ldr	r3, [pc, #156]	; (8007320 <pb_dec_bytes+0xdc>)
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	60d3      	str	r3, [r2, #12]
 8007286:	2300      	movs	r3, #0
 8007288:	e045      	b.n	8007316 <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	3302      	adds	r3, #2
 800728e:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	429a      	cmp	r2, r3
 8007296:	d20b      	bcs.n	80072b0 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <pb_dec_bytes+0x62>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	e000      	b.n	80072a8 <pb_dec_bytes+0x64>
 80072a6:	4b1f      	ldr	r3, [pc, #124]	; (8007324 <pb_dec_bytes+0xe0>)
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	60d3      	str	r3, [r2, #12]
 80072ac:	2300      	movs	r3, #0
 80072ae:	e032      	b.n	8007316 <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	7d9b      	ldrb	r3, [r3, #22]
 80072b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80072b8:	2b80      	cmp	r3, #128	; 0x80
 80072ba:	d10b      	bne.n	80072d4 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <pb_dec_bytes+0x86>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	e000      	b.n	80072cc <pb_dec_bytes+0x88>
 80072ca:	4b17      	ldr	r3, [pc, #92]	; (8007328 <pb_dec_bytes+0xe4>)
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	60d3      	str	r3, [r2, #12]
 80072d0:	2300      	movs	r3, #0
 80072d2:	e020      	b.n	8007316 <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	8a5b      	ldrh	r3, [r3, #18]
 80072d8:	461a      	mov	r2, r3
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	4293      	cmp	r3, r2
 80072de:	d90b      	bls.n	80072f8 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <pb_dec_bytes+0xaa>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	e000      	b.n	80072f0 <pb_dec_bytes+0xac>
 80072ee:	4b0c      	ldr	r3, [pc, #48]	; (8007320 <pb_dec_bytes+0xdc>)
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	60d3      	str	r3, [r2, #12]
 80072f4:	2300      	movs	r3, #0
 80072f6:	e00e      	b.n	8007316 <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	b29a      	uxth	r2, r3
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	3302      	adds	r3, #2
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7fe fbc0 	bl	8005a94 <pb_read>
 8007314:	4603      	mov	r3, r0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	080077bc 	.word	0x080077bc
 8007324:	080077cc 	.word	0x080077cc
 8007328:	08007714 	.word	0x08007714

0800732c <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 800733c:	f107 030c 	add.w	r3, r7, #12
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7fe fd20 	bl	8005d88 <pb_decode_varint32>
 8007348:	4603      	mov	r3, r0
 800734a:	f083 0301 	eor.w	r3, r3, #1
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <pb_dec_string+0x2c>
        return false;
 8007354:	2300      	movs	r3, #0
 8007356:	e05a      	b.n	800740e <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735e:	d10b      	bne.n	8007378 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <pb_dec_string+0x42>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	e000      	b.n	8007370 <pb_dec_string+0x44>
 800736e:	4b2a      	ldr	r3, [pc, #168]	; (8007418 <pb_dec_string+0xec>)
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	60d3      	str	r3, [r2, #12]
 8007374:	2300      	movs	r3, #0
 8007376:	e04a      	b.n	800740e <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	3301      	adds	r3, #1
 800737c:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	429a      	cmp	r2, r3
 8007384:	d20b      	bcs.n	800739e <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d002      	beq.n	8007394 <pb_dec_string+0x68>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	e000      	b.n	8007396 <pb_dec_string+0x6a>
 8007394:	4b20      	ldr	r3, [pc, #128]	; (8007418 <pb_dec_string+0xec>)
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	60d3      	str	r3, [r2, #12]
 800739a:	2300      	movs	r3, #0
 800739c:	e037      	b.n	800740e <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	7d9b      	ldrb	r3, [r3, #22]
 80073a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80073a6:	2b80      	cmp	r3, #128	; 0x80
 80073a8:	d10b      	bne.n	80073c2 <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <pb_dec_string+0x8c>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	e000      	b.n	80073ba <pb_dec_string+0x8e>
 80073b8:	4b18      	ldr	r3, [pc, #96]	; (800741c <pb_dec_string+0xf0>)
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	60d3      	str	r3, [r2, #12]
 80073be:	2300      	movs	r3, #0
 80073c0:	e025      	b.n	800740e <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	8a5b      	ldrh	r3, [r3, #18]
 80073c6:	461a      	mov	r2, r3
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d90b      	bls.n	80073e6 <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <pb_dec_string+0xb0>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	e000      	b.n	80073de <pb_dec_string+0xb2>
 80073dc:	4b10      	ldr	r3, [pc, #64]	; (8007420 <pb_dec_string+0xf4>)
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	60d3      	str	r3, [r2, #12]
 80073e2:	2300      	movs	r3, #0
 80073e4:	e013      	b.n	800740e <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	4413      	add	r3, r2
 80073ec:	2200      	movs	r2, #0
 80073ee:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	461a      	mov	r2, r3
 80073f4:	6979      	ldr	r1, [r7, #20]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7fe fb4c 	bl	8005a94 <pb_read>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f083 0301 	eor.w	r3, r3, #1
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <pb_dec_string+0xe0>
        return false;
 8007408:	2300      	movs	r3, #0
 800740a:	e000      	b.n	800740e <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 800740c:	2301      	movs	r3, #1
}
 800740e:	4618      	mov	r0, r3
 8007410:	3718      	adds	r7, #24
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	080077cc 	.word	0x080077cc
 800741c:	08007714 	.word	0x08007714
 8007420:	080077dc 	.word	0x080077dc

08007424 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08a      	sub	sp, #40	; 0x28
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
    bool status = true;
 800742e:	2301      	movs	r3, #1
 8007430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool submsg_consumed = false;
 8007434:	2300      	movs	r3, #0
 8007436:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 800743a:	f107 030c 	add.w	r3, r7, #12
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7fe fe2d 	bl	80060a0 <pb_make_string_substream>
 8007446:	4603      	mov	r3, r0
 8007448:	f083 0301 	eor.w	r3, r3, #1
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <pb_dec_submessage+0x32>
        return false;
 8007452:	2300      	movs	r3, #0
 8007454:	e069      	b.n	800752a <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10b      	bne.n	8007476 <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <pb_dec_submessage+0x48>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	e000      	b.n	800746e <pb_dec_submessage+0x4a>
 800746c:	4b31      	ldr	r3, [pc, #196]	; (8007534 <pb_dec_submessage+0x110>)
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	60d3      	str	r3, [r2, #12]
 8007472:	2300      	movs	r3, #0
 8007474:	e059      	b.n	800752a <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	7d9b      	ldrb	r3, [r3, #22]
 800747a:	f003 030f 	and.w	r3, r3, #15
 800747e:	2b09      	cmp	r3, #9
 8007480:	d11c      	bne.n	80074bc <pb_dec_submessage+0x98>
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d018      	beq.n	80074bc <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	3b08      	subs	r3, #8
 8007490:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d010      	beq.n	80074bc <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69fa      	ldr	r2, [r7, #28]
 80074a0:	3204      	adds	r2, #4
 80074a2:	f107 000c 	add.w	r0, r7, #12
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	4798      	blx	r3
 80074aa:	4603      	mov	r3, r0
 80074ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (substream.bytes_left == 0)
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d102      	bne.n	80074bc <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 80074b6:	2301      	movs	r3, #1
 80074b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 80074bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d022      	beq.n	800750a <pb_dec_submessage+0xe6>
 80074c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074c8:	f083 0301 	eor.w	r3, r3, #1
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d01b      	beq.n	800750a <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	7d9b      	ldrb	r3, [r3, #22]
 80074da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d107      	bne.n	80074f2 <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	7d9b      	ldrb	r3, [r3, #22]
 80074e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80074ea:	2b20      	cmp	r3, #32
 80074ec:	d001      	beq.n	80074f2 <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 80074ee:	2301      	movs	r3, #1
 80074f0:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	69da      	ldr	r2, [r3, #28]
 80074fa:	f107 000c 	add.w	r0, r7, #12
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	f7ff fafa 	bl	8006af8 <pb_decode_inner>
 8007504:	4603      	mov	r3, r0
 8007506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 800750a:	f107 030c 	add.w	r3, r7, #12
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7fe fdff 	bl	8006114 <pb_close_string_substream>
 8007516:	4603      	mov	r3, r0
 8007518:	f083 0301 	eor.w	r3, r3, #1
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <pb_dec_submessage+0x102>
        return false;
 8007522:	2300      	movs	r3, #0
 8007524:	e001      	b.n	800752a <pb_dec_submessage+0x106>

    return status;
 8007526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800752a:	4618      	mov	r0, r3
 800752c:	3728      	adds	r7, #40	; 0x28
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	080077ec 	.word	0x080077ec

08007538 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8007542:	f107 030c 	add.w	r3, r7, #12
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7fe fc1d 	bl	8005d88 <pb_decode_varint32>
 800754e:	4603      	mov	r3, r0
 8007550:	f083 0301 	eor.w	r3, r3, #1
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <pb_dec_fixed_length_bytes+0x26>
        return false;
 800755a:	2300      	movs	r3, #0
 800755c:	e037      	b.n	80075ce <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007564:	d30b      	bcc.n	800757e <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <pb_dec_fixed_length_bytes+0x3c>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	e000      	b.n	8007576 <pb_dec_fixed_length_bytes+0x3e>
 8007574:	4b18      	ldr	r3, [pc, #96]	; (80075d8 <pb_dec_fixed_length_bytes+0xa0>)
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	60d3      	str	r3, [r2, #12]
 800757a:	2300      	movs	r3, #0
 800757c:	e027      	b.n	80075ce <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d109      	bne.n	8007598 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	69d8      	ldr	r0, [r3, #28]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	8a5b      	ldrh	r3, [r3, #18]
 800758c:	461a      	mov	r2, r3
 800758e:	2100      	movs	r1, #0
 8007590:	f000 f826 	bl	80075e0 <memset>
        return true;
 8007594:	2301      	movs	r3, #1
 8007596:	e01a      	b.n	80075ce <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	8a5b      	ldrh	r3, [r3, #18]
 800759c:	461a      	mov	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d00b      	beq.n	80075bc <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <pb_dec_fixed_length_bytes+0x7a>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	e000      	b.n	80075b4 <pb_dec_fixed_length_bytes+0x7c>
 80075b2:	4b0a      	ldr	r3, [pc, #40]	; (80075dc <pb_dec_fixed_length_bytes+0xa4>)
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	60d3      	str	r3, [r2, #12]
 80075b8:	2300      	movs	r3, #0
 80075ba:	e008      	b.n	80075ce <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	69d9      	ldr	r1, [r3, #28]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	8a5b      	ldrh	r3, [r3, #18]
 80075c4:	461a      	mov	r2, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7fe fa64 	bl	8005a94 <pb_read>
 80075cc:	4603      	mov	r3, r0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	080077bc 	.word	0x080077bc
 80075dc:	08007808 	.word	0x08007808

080075e0 <memset>:
 80075e0:	4402      	add	r2, r0
 80075e2:	4603      	mov	r3, r0
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d100      	bne.n	80075ea <memset+0xa>
 80075e8:	4770      	bx	lr
 80075ea:	f803 1b01 	strb.w	r1, [r3], #1
 80075ee:	e7f9      	b.n	80075e4 <memset+0x4>

080075f0 <__libc_init_array>:
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	4d0d      	ldr	r5, [pc, #52]	; (8007628 <__libc_init_array+0x38>)
 80075f4:	4c0d      	ldr	r4, [pc, #52]	; (800762c <__libc_init_array+0x3c>)
 80075f6:	1b64      	subs	r4, r4, r5
 80075f8:	10a4      	asrs	r4, r4, #2
 80075fa:	2600      	movs	r6, #0
 80075fc:	42a6      	cmp	r6, r4
 80075fe:	d109      	bne.n	8007614 <__libc_init_array+0x24>
 8007600:	4d0b      	ldr	r5, [pc, #44]	; (8007630 <__libc_init_array+0x40>)
 8007602:	4c0c      	ldr	r4, [pc, #48]	; (8007634 <__libc_init_array+0x44>)
 8007604:	f000 f826 	bl	8007654 <_init>
 8007608:	1b64      	subs	r4, r4, r5
 800760a:	10a4      	asrs	r4, r4, #2
 800760c:	2600      	movs	r6, #0
 800760e:	42a6      	cmp	r6, r4
 8007610:	d105      	bne.n	800761e <__libc_init_array+0x2e>
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	f855 3b04 	ldr.w	r3, [r5], #4
 8007618:	4798      	blx	r3
 800761a:	3601      	adds	r6, #1
 800761c:	e7ee      	b.n	80075fc <__libc_init_array+0xc>
 800761e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007622:	4798      	blx	r3
 8007624:	3601      	adds	r6, #1
 8007626:	e7f2      	b.n	800760e <__libc_init_array+0x1e>
 8007628:	08007890 	.word	0x08007890
 800762c:	08007890 	.word	0x08007890
 8007630:	08007890 	.word	0x08007890
 8007634:	08007894 	.word	0x08007894

08007638 <memcpy>:
 8007638:	440a      	add	r2, r1
 800763a:	4291      	cmp	r1, r2
 800763c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007640:	d100      	bne.n	8007644 <memcpy+0xc>
 8007642:	4770      	bx	lr
 8007644:	b510      	push	{r4, lr}
 8007646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800764a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800764e:	4291      	cmp	r1, r2
 8007650:	d1f9      	bne.n	8007646 <memcpy+0xe>
 8007652:	bd10      	pop	{r4, pc}

08007654 <_init>:
 8007654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007656:	bf00      	nop
 8007658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765a:	bc08      	pop	{r3}
 800765c:	469e      	mov	lr, r3
 800765e:	4770      	bx	lr

08007660 <_fini>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	bf00      	nop
 8007664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007666:	bc08      	pop	{r3}
 8007668:	469e      	mov	lr, r3
 800766a:	4770      	bx	lr
