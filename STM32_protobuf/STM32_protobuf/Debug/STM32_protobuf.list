
STM32_protobuf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009360  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  0800960c  0800960c  0001960c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009828  08009828  00019828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009830  08009830  00019830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009834  08009834  00019834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08009838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b8  24000010  08009848  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240000c8  08009848  000200c8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012869  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000027c6  00000000  00000000  000328ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000cd0  00000000  00000000  000350b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000009f9  00000000  00000000  00035d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002ff2c  00000000  00000000  00036779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013eed  00000000  00000000  000666a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001388ce  00000000  00000000  0007a592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003448  00000000  00000000  001b2e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000a3  00000000  00000000  001b62a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080095f4 	.word	0x080095f4

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080095f4 	.word	0x080095f4

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b970 	b.w	80005e4 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
 8000326:	460f      	mov	r7, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4694      	mov	ip, r2
 8000330:	d965      	bls.n	80003fe <__udivmoddi4+0xe2>
 8000332:	fab2 f382 	clz	r3, r2
 8000336:	b143      	cbz	r3, 800034a <__udivmoddi4+0x2e>
 8000338:	fa02 fc03 	lsl.w	ip, r2, r3
 800033c:	f1c3 0220 	rsb	r2, r3, #32
 8000340:	409f      	lsls	r7, r3
 8000342:	fa20 f202 	lsr.w	r2, r0, r2
 8000346:	4317      	orrs	r7, r2
 8000348:	409c      	lsls	r4, r3
 800034a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034e:	fa1f f58c 	uxth.w	r5, ip
 8000352:	fbb7 f1fe 	udiv	r1, r7, lr
 8000356:	0c22      	lsrs	r2, r4, #16
 8000358:	fb0e 7711 	mls	r7, lr, r1, r7
 800035c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000360:	fb01 f005 	mul.w	r0, r1, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90a      	bls.n	800037e <__udivmoddi4+0x62>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000370:	f080 811c 	bcs.w	80005ac <__udivmoddi4+0x290>
 8000374:	4290      	cmp	r0, r2
 8000376:	f240 8119 	bls.w	80005ac <__udivmoddi4+0x290>
 800037a:	3902      	subs	r1, #2
 800037c:	4462      	add	r2, ip
 800037e:	1a12      	subs	r2, r2, r0
 8000380:	b2a4      	uxth	r4, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	fb00 f505 	mul.w	r5, r0, r5
 8000392:	42a5      	cmp	r5, r4
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x90>
 8000396:	eb1c 0404 	adds.w	r4, ip, r4
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x294>
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x294>
 80003a8:	4464      	add	r4, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11e      	cbz	r6, 80003be <__udivmoddi4+0xa2>
 80003b6:	40dc      	lsrs	r4, r3
 80003b8:	2300      	movs	r3, #0
 80003ba:	e9c6 4300 	strd	r4, r3, [r6]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0xbc>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80ed 	beq.w	80005a6 <__udivmoddi4+0x28a>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e9c6 0500 	strd	r0, r5, [r6]
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d149      	bne.n	8000474 <__udivmoddi4+0x158>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d302      	bcc.n	80003ea <__udivmoddi4+0xce>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	f200 80f8 	bhi.w	80005da <__udivmoddi4+0x2be>
 80003ea:	1a84      	subs	r4, r0, r2
 80003ec:	eb65 0203 	sbc.w	r2, r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	4617      	mov	r7, r2
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d0e2      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f8:	e9c6 4700 	strd	r4, r7, [r6]
 80003fc:	e7df      	b.n	80003be <__udivmoddi4+0xa2>
 80003fe:	b902      	cbnz	r2, 8000402 <__udivmoddi4+0xe6>
 8000400:	deff      	udf	#255	; 0xff
 8000402:	fab2 f382 	clz	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x210>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	2101      	movs	r1, #1
 8000418:	fbb2 f5f7 	udiv	r5, r2, r7
 800041c:	fb07 2015 	mls	r0, r7, r5, r2
 8000420:	0c22      	lsrs	r2, r4, #16
 8000422:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000426:	fb0e f005 	mul.w	r0, lr, r5
 800042a:	4290      	cmp	r0, r2
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x124>
 800042e:	eb1c 0202 	adds.w	r2, ip, r2
 8000432:	f105 38ff 	add.w	r8, r5, #4294967295
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4290      	cmp	r0, r2
 800043a:	f200 80cb 	bhi.w	80005d4 <__udivmoddi4+0x2b8>
 800043e:	4645      	mov	r5, r8
 8000440:	1a12      	subs	r2, r2, r0
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb2 f0f7 	udiv	r0, r2, r7
 8000448:	fb07 2210 	mls	r2, r7, r0, r2
 800044c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000450:	fb0e fe00 	mul.w	lr, lr, r0
 8000454:	45a6      	cmp	lr, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x14e>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x14c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f200 80bb 	bhi.w	80005de <__udivmoddi4+0x2c2>
 8000468:	4610      	mov	r0, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x98>
 8000474:	f1c1 0720 	rsb	r7, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 fc07 	lsr.w	ip, r2, r7
 800047e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000482:	fa05 f401 	lsl.w	r4, r5, r1
 8000486:	fa20 f307 	lsr.w	r3, r0, r7
 800048a:	40fd      	lsrs	r5, r7
 800048c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000490:	4323      	orrs	r3, r4
 8000492:	fbb5 f8f9 	udiv	r8, r5, r9
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fb09 5518 	mls	r5, r9, r8, r5
 800049e:	0c1c      	lsrs	r4, r3, #16
 80004a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a4:	fb08 f50e 	mul.w	r5, r8, lr
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	fa00 f001 	lsl.w	r0, r0, r1
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004bc:	f080 8088 	bcs.w	80005d0 <__udivmoddi4+0x2b4>
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	f240 8085 	bls.w	80005d0 <__udivmoddi4+0x2b4>
 80004c6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ca:	4464      	add	r4, ip
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	b29d      	uxth	r5, r3
 80004d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d4:	fb09 4413 	mls	r4, r9, r3, r4
 80004d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80004ec:	d26c      	bcs.n	80005c8 <__udivmoddi4+0x2ac>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	d96a      	bls.n	80005c8 <__udivmoddi4+0x2ac>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fa:	fba3 9502 	umull	r9, r5, r3, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	42ac      	cmp	r4, r5
 8000504:	46c8      	mov	r8, r9
 8000506:	46ae      	mov	lr, r5
 8000508:	d356      	bcc.n	80005b8 <__udivmoddi4+0x29c>
 800050a:	d053      	beq.n	80005b4 <__udivmoddi4+0x298>
 800050c:	b156      	cbz	r6, 8000524 <__udivmoddi4+0x208>
 800050e:	ebb0 0208 	subs.w	r2, r0, r8
 8000512:	eb64 040e 	sbc.w	r4, r4, lr
 8000516:	fa04 f707 	lsl.w	r7, r4, r7
 800051a:	40ca      	lsrs	r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	4317      	orrs	r7, r2
 8000520:	e9c6 7400 	strd	r7, r4, [r6]
 8000524:	4618      	mov	r0, r3
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	f1c3 0120 	rsb	r1, r3, #32
 8000530:	fa02 fc03 	lsl.w	ip, r2, r3
 8000534:	fa20 f201 	lsr.w	r2, r0, r1
 8000538:	fa25 f101 	lsr.w	r1, r5, r1
 800053c:	409d      	lsls	r5, r3
 800053e:	432a      	orrs	r2, r5
 8000540:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fbb1 f0f7 	udiv	r0, r1, r7
 800054c:	fb07 1510 	mls	r5, r7, r0, r1
 8000550:	0c11      	lsrs	r1, r2, #16
 8000552:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000556:	fb00 f50e 	mul.w	r5, r0, lr
 800055a:	428d      	cmp	r5, r1
 800055c:	fa04 f403 	lsl.w	r4, r4, r3
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x258>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f100 38ff 	add.w	r8, r0, #4294967295
 800056a:	d22f      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800056c:	428d      	cmp	r5, r1
 800056e:	d92d      	bls.n	80005cc <__udivmoddi4+0x2b0>
 8000570:	3802      	subs	r0, #2
 8000572:	4461      	add	r1, ip
 8000574:	1b49      	subs	r1, r1, r5
 8000576:	b292      	uxth	r2, r2
 8000578:	fbb1 f5f7 	udiv	r5, r1, r7
 800057c:	fb07 1115 	mls	r1, r7, r5, r1
 8000580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000584:	fb05 f10e 	mul.w	r1, r5, lr
 8000588:	4291      	cmp	r1, r2
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x282>
 800058c:	eb1c 0202 	adds.w	r2, ip, r2
 8000590:	f105 38ff 	add.w	r8, r5, #4294967295
 8000594:	d216      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000596:	4291      	cmp	r1, r2
 8000598:	d914      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	1a52      	subs	r2, r2, r1
 80005a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a4:	e738      	b.n	8000418 <__udivmoddi4+0xfc>
 80005a6:	4631      	mov	r1, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e708      	b.n	80003be <__udivmoddi4+0xa2>
 80005ac:	4639      	mov	r1, r7
 80005ae:	e6e6      	b.n	800037e <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x90>
 80005b4:	4548      	cmp	r0, r9
 80005b6:	d2a9      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b8:	ebb9 0802 	subs.w	r8, r9, r2
 80005bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c0:	3b01      	subs	r3, #1
 80005c2:	e7a3      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c4:	4645      	mov	r5, r8
 80005c6:	e7ea      	b.n	800059e <__udivmoddi4+0x282>
 80005c8:	462b      	mov	r3, r5
 80005ca:	e794      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005cc:	4640      	mov	r0, r8
 80005ce:	e7d1      	b.n	8000574 <__udivmoddi4+0x258>
 80005d0:	46d0      	mov	r8, sl
 80005d2:	e77b      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d4:	3d02      	subs	r5, #2
 80005d6:	4462      	add	r2, ip
 80005d8:	e732      	b.n	8000440 <__udivmoddi4+0x124>
 80005da:	4608      	mov	r0, r1
 80005dc:	e70a      	b.n	80003f4 <__udivmoddi4+0xd8>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	e742      	b.n	800046a <__udivmoddi4+0x14e>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Handle UART interrupt */
void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	// Reset yellow led
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

#else

	if (uartMsgReceived)
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <HAL_UART_RxCpltCallback+0x38>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d006      	beq.n	8000606 <HAL_UART_RxCpltCallback+0x1e>
	{
		/* Flag not cleared, possible data loss
		 * Set red led to signal decoding error to the user */
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005fe:	4809      	ldr	r0, [pc, #36]	; (8000624 <HAL_UART_RxCpltCallback+0x3c>)
 8000600:	f001 fca4 	bl	8001f4c <HAL_GPIO_WritePin>
 8000604:	e002      	b.n	800060c <HAL_UART_RxCpltCallback+0x24>
	}
	else
	{
		// Set flag to process protobuf message
		uartMsgReceived = true;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_UART_RxCpltCallback+0x38>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

#endif

	// Receive next message
	HAL_UART_Receive_IT(&huart3, uartBuffer, LED_STATE_MSG_LENGTH);
 800060c:	2202      	movs	r2, #2
 800060e:	4906      	ldr	r1, [pc, #24]	; (8000628 <HAL_UART_RxCpltCallback+0x40>)
 8000610:	4806      	ldr	r0, [pc, #24]	; (800062c <HAL_UART_RxCpltCallback+0x44>)
 8000612:	f004 fafd 	bl	8004c10 <HAL_UART_Receive_IT>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	240000c2 	.word	0x240000c2
 8000624:	58020400 	.word	0x58020400
 8000628:	240000c0 	.word	0x240000c0
 800062c:	2400002c 	.word	0x2400002c

08000630 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	// Set red led to signal error to the user
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063e:	4803      	ldr	r0, [pc, #12]	; (800064c <HAL_UART_ErrorCallback+0x1c>)
 8000640:	f001 fc84 	bl	8001f4c <HAL_GPIO_WritePin>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	58020400 	.word	0x58020400

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fbc4 	bl	8000de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f836 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 f8fe 	bl	800085c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000660:	f000 f8a8 	bl	80007b4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000664:	f000 f8f2 	bl	800084c <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  // Start UART receive
  HAL_UART_Receive_IT(&huart3, uartBuffer, LED_STATE_MSG_LENGTH);
 8000668:	2202      	movs	r2, #2
 800066a:	4912      	ldr	r1, [pc, #72]	; (80006b4 <main+0x64>)
 800066c:	4812      	ldr	r0, [pc, #72]	; (80006b8 <main+0x68>)
 800066e:	f004 facf 	bl	8004c10 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

#ifndef PROTOBUF_LED_TIME_CRITICAL
	// Check if new message received since last cycle
	if (uartMsgReceived)
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <main+0x6c>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0fb      	beq.n	8000672 <main+0x22>
	{
		// Set yellow led to signal data processing to the user.
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	2102      	movs	r1, #2
 800067e:	4810      	ldr	r0, [pc, #64]	; (80006c0 <main+0x70>)
 8000680:	f001 fc64 	bl	8001f4c <HAL_GPIO_WritePin>

		// Process protobuf message
		if (!processProtobufMsg(uartBuffer))
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <main+0x64>)
 8000686:	f000 fa09 	bl	8000a9c <processProtobufMsg>
 800068a:	4603      	mov	r3, r0
 800068c:	f083 0301 	eor.w	r3, r3, #1
 8000690:	b2db      	uxtb	r3, r3
 8000692:	2b00      	cmp	r3, #0
 8000694:	d005      	beq.n	80006a2 <main+0x52>
		{
			// Set red led to signal decoding error to the user
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069c:	4809      	ldr	r0, [pc, #36]	; (80006c4 <main+0x74>)
 800069e:	f001 fc55 	bl	8001f4c <HAL_GPIO_WritePin>
		}

		// Reset flag
		uartMsgReceived = false;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <main+0x6c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]

		// Reset yellow led
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2102      	movs	r1, #2
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <main+0x70>)
 80006ae:	f001 fc4d 	bl	8001f4c <HAL_GPIO_WritePin>
	if (uartMsgReceived)
 80006b2:	e7de      	b.n	8000672 <main+0x22>
 80006b4:	240000c0 	.word	0x240000c0
 80006b8:	2400002c 	.word	0x2400002c
 80006bc:	240000c2 	.word	0x240000c2
 80006c0:	58021000 	.word	0x58021000
 80006c4:	58020400 	.word	0x58020400

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b09c      	sub	sp, #112	; 0x70
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d2:	224c      	movs	r2, #76	; 0x4c
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f008 ff52 	bl	8009580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2220      	movs	r2, #32
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f008 ff4c 	bl	8009580 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006e8:	4b30      	ldr	r3, [pc, #192]	; (80007ac <SystemClock_Config+0xe4>)
 80006ea:	f04f 32ff 	mov.w	r2, #4294967295
 80006ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006f2:	2004      	movs	r0, #4
 80006f4:	f001 fc44 	bl	8001f80 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	4b2c      	ldr	r3, [pc, #176]	; (80007b0 <SystemClock_Config+0xe8>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a2b      	ldr	r2, [pc, #172]	; (80007b0 <SystemClock_Config+0xe8>)
 8000702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <SystemClock_Config+0xe8>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000714:	bf00      	nop
 8000716:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <SystemClock_Config+0xe8>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800071e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000722:	d1f8      	bne.n	8000716 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000724:	2321      	movs	r3, #33	; 0x21
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000728:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800072e:	2301      	movs	r3, #1
 8000730:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000736:	2302      	movs	r3, #2
 8000738:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800073a:	2301      	movs	r3, #1
 800073c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800073e:	2318      	movs	r3, #24
 8000740:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000742:	2302      	movs	r3, #2
 8000744:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000746:	2304      	movs	r3, #4
 8000748:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074a:	2302      	movs	r3, #2
 800074c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800074e:	230c      	movs	r3, #12
 8000750:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000752:	2300      	movs	r3, #0
 8000754:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075e:	4618      	mov	r0, r3
 8000760:	f001 fc68 	bl	8002034 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800076a:	f000 f991 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	233f      	movs	r3, #63	; 0x3f
 8000770:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2303      	movs	r3, #3
 8000774:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2102      	movs	r1, #2
 8000792:	4618      	mov	r0, r3
 8000794:	f002 f880 	bl	8002898 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800079e:	f000 f977 	bl	8000a90 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3770      	adds	r7, #112	; 0x70
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	58024400 	.word	0x58024400
 80007b0:	58024800 	.word	0x58024800

080007b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007ba:	4a23      	ldr	r2, [pc, #140]	; (8000848 <MX_USART3_UART_Init+0x94>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007be:	4b21      	ldr	r3, [pc, #132]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007fc:	4811      	ldr	r0, [pc, #68]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007fe:	f004 f9b7 	bl	8004b70 <HAL_UART_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000808:	f000 f942 	bl	8000a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080c:	2100      	movs	r1, #0
 800080e:	480d      	ldr	r0, [pc, #52]	; (8000844 <MX_USART3_UART_Init+0x90>)
 8000810:	f006 fd77 	bl	8007302 <HAL_UARTEx_SetTxFifoThreshold>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800081a:	f000 f939 	bl	8000a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081e:	2100      	movs	r1, #0
 8000820:	4808      	ldr	r0, [pc, #32]	; (8000844 <MX_USART3_UART_Init+0x90>)
 8000822:	f006 fdac 	bl	800737e <HAL_UARTEx_SetRxFifoThreshold>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800082c:	f000 f930 	bl	8000a90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_USART3_UART_Init+0x90>)
 8000832:	f006 fd2d 	bl	8007290 <HAL_UARTEx_DisableFifoMode>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800083c:	f000 f928 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2400002c 	.word	0x2400002c
 8000848:	40004800 	.word	0x40004800

0800084c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08e      	sub	sp, #56	; 0x38
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	4b80      	ldr	r3, [pc, #512]	; (8000a74 <MX_GPIO_Init+0x218>)
 8000874:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000878:	4a7e      	ldr	r2, [pc, #504]	; (8000a74 <MX_GPIO_Init+0x218>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000882:	4b7c      	ldr	r3, [pc, #496]	; (8000a74 <MX_GPIO_Init+0x218>)
 8000884:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	623b      	str	r3, [r7, #32]
 800088e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000890:	4b78      	ldr	r3, [pc, #480]	; (8000a74 <MX_GPIO_Init+0x218>)
 8000892:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000896:	4a77      	ldr	r2, [pc, #476]	; (8000a74 <MX_GPIO_Init+0x218>)
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008a0:	4b74      	ldr	r3, [pc, #464]	; (8000a74 <MX_GPIO_Init+0x218>)
 80008a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a6:	f003 0320 	and.w	r3, r3, #32
 80008aa:	61fb      	str	r3, [r7, #28]
 80008ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	4b71      	ldr	r3, [pc, #452]	; (8000a74 <MX_GPIO_Init+0x218>)
 80008b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b4:	4a6f      	ldr	r2, [pc, #444]	; (8000a74 <MX_GPIO_Init+0x218>)
 80008b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008be:	4b6d      	ldr	r3, [pc, #436]	; (8000a74 <MX_GPIO_Init+0x218>)
 80008c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008cc:	4b69      	ldr	r3, [pc, #420]	; (8000a74 <MX_GPIO_Init+0x218>)
 80008ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008d2:	4a68      	ldr	r2, [pc, #416]	; (8000a74 <MX_GPIO_Init+0x218>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008dc:	4b65      	ldr	r3, [pc, #404]	; (8000a74 <MX_GPIO_Init+0x218>)
 80008de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ea:	4b62      	ldr	r3, [pc, #392]	; (8000a74 <MX_GPIO_Init+0x218>)
 80008ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f0:	4a60      	ldr	r2, [pc, #384]	; (8000a74 <MX_GPIO_Init+0x218>)
 80008f2:	f043 0308 	orr.w	r3, r3, #8
 80008f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008fa:	4b5e      	ldr	r3, [pc, #376]	; (8000a74 <MX_GPIO_Init+0x218>)
 80008fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000900:	f003 0308 	and.w	r3, r3, #8
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000908:	4b5a      	ldr	r3, [pc, #360]	; (8000a74 <MX_GPIO_Init+0x218>)
 800090a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800090e:	4a59      	ldr	r2, [pc, #356]	; (8000a74 <MX_GPIO_Init+0x218>)
 8000910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000914:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000918:	4b56      	ldr	r3, [pc, #344]	; (8000a74 <MX_GPIO_Init+0x218>)
 800091a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800091e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b53      	ldr	r3, [pc, #332]	; (8000a74 <MX_GPIO_Init+0x218>)
 8000928:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800092c:	4a51      	ldr	r2, [pc, #324]	; (8000a74 <MX_GPIO_Init+0x218>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000936:	4b4f      	ldr	r3, [pc, #316]	; (8000a74 <MX_GPIO_Init+0x218>)
 8000938:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000944:	4b4b      	ldr	r3, [pc, #300]	; (8000a74 <MX_GPIO_Init+0x218>)
 8000946:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800094a:	4a4a      	ldr	r2, [pc, #296]	; (8000a74 <MX_GPIO_Init+0x218>)
 800094c:	f043 0310 	orr.w	r3, r3, #16
 8000950:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000954:	4b47      	ldr	r3, [pc, #284]	; (8000a74 <MX_GPIO_Init+0x218>)
 8000956:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800095a:	f003 0310 	and.w	r3, r3, #16
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000968:	4843      	ldr	r0, [pc, #268]	; (8000a78 <MX_GPIO_Init+0x21c>)
 800096a:	f001 faef 	bl	8001f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f244 0101 	movw	r1, #16385	; 0x4001
 8000974:	4841      	ldr	r0, [pc, #260]	; (8000a7c <MX_GPIO_Init+0x220>)
 8000976:	f001 fae9 	bl	8001f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2102      	movs	r1, #2
 800097e:	4840      	ldr	r0, [pc, #256]	; (8000a80 <MX_GPIO_Init+0x224>)
 8000980:	f001 fae4 	bl	8001f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	483a      	ldr	r0, [pc, #232]	; (8000a84 <MX_GPIO_Init+0x228>)
 800099a:	f001 f927 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800099e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	4830      	ldr	r0, [pc, #192]	; (8000a78 <MX_GPIO_Init+0x21c>)
 80009b8:	f001 f918 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009bc:	f244 0301 	movw	r3, #16385	; 0x4001
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4829      	ldr	r0, [pc, #164]	; (8000a7c <MX_GPIO_Init+0x220>)
 80009d6:	f001 f909 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	4826      	ldr	r0, [pc, #152]	; (8000a88 <MX_GPIO_Init+0x22c>)
 80009f0:	f001 f8fc 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	4820      	ldr	r0, [pc, #128]	; (8000a8c <MX_GPIO_Init+0x230>)
 8000a0a:	f001 f8ef 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a20:	230a      	movs	r3, #10
 8000a22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4818      	ldr	r0, [pc, #96]	; (8000a8c <MX_GPIO_Init+0x230>)
 8000a2c:	f001 f8de 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000a30:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a46:	4619      	mov	r1, r3
 8000a48:	4810      	ldr	r0, [pc, #64]	; (8000a8c <MX_GPIO_Init+0x230>)
 8000a4a:	f001 f8cf 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	4619      	mov	r1, r3
 8000a64:	4806      	ldr	r0, [pc, #24]	; (8000a80 <MX_GPIO_Init+0x224>)
 8000a66:	f001 f8c1 	bl	8001bec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3738      	adds	r7, #56	; 0x38
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	58024400 	.word	0x58024400
 8000a78:	58021400 	.word	0x58021400
 8000a7c:	58020400 	.word	0x58020400
 8000a80:	58021000 	.word	0x58021000
 8000a84:	58020800 	.word	0x58020800
 8000a88:	58021800 	.word	0x58021800
 8000a8c:	58020000 	.word	0x58020000

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <processProtobufMsg>:
  * 				user led accordingly.
  * @param buffer   Pointer to data buffer, which contains the coded message.
  * @retval 		If decode protobuf was successful.
  */
bool processProtobufMsg( uint8_t *buffer )
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	// Allocate space for the decoded message.
	ChangeLedStateMsg message = ChangeLedStateMsg_init_zero;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	763b      	strb	r3, [r7, #24]
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]

	//Create a stream that reads from the buffer.
	pb_istream_t stream = pb_istream_from_buffer(buffer, LED_STATE_MSG_LENGTH);
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f007 f86f 	bl	8007b98 <pb_istream_from_buffer>

	//Now we are ready to decode the message.
	pbDecodeStatus = pb_decode(&stream, ChangeLedStateMsg_fields, &message);
 8000aba:	f107 0218 	add.w	r2, r7, #24
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	4913      	ldr	r1, [pc, #76]	; (8000b10 <processProtobufMsg+0x74>)
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f008 f9a1 	bl	8008e0c <pb_decode>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <processProtobufMsg+0x78>)
 8000ad0:	701a      	strb	r2, [r3, #0]

	/* Change led state based on protobuf message. */
	if (message.has_led_state & pbDecodeStatus)
 8000ad2:	7e3b      	ldrb	r3, [r7, #24]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <processProtobufMsg+0x78>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4013      	ands	r3, r2
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d010      	beq.n	8000b02 <processProtobufMsg+0x66>
	{
		if (message.led_state == 1)
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d105      	bne.n	8000af2 <processProtobufMsg+0x56>
		{
			// Set green led.
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	2101      	movs	r1, #1
 8000aea:	480b      	ldr	r0, [pc, #44]	; (8000b18 <processProtobufMsg+0x7c>)
 8000aec:	f001 fa2e 	bl	8001f4c <HAL_GPIO_WritePin>
 8000af0:	e007      	b.n	8000b02 <processProtobufMsg+0x66>
		}
		else if (message.led_state == 0)
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d104      	bne.n	8000b02 <processProtobufMsg+0x66>
		{
			// Reset green led.
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2101      	movs	r1, #1
 8000afc:	4806      	ldr	r0, [pc, #24]	; (8000b18 <processProtobufMsg+0x7c>)
 8000afe:	f001 fa25 	bl	8001f4c <HAL_GPIO_WritePin>
		}
	}

	return pbDecodeStatus;
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <processProtobufMsg+0x78>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3720      	adds	r7, #32
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	08009810 	.word	0x08009810
 8000b14:	240000c3 	.word	0x240000c3
 8000b18:	58020400 	.word	0x58020400

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <HAL_MspInit+0x30>)
 8000b24:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b28:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x30>)
 8000b2a:	f043 0302 	orr.w	r3, r3, #2
 8000b2e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x30>)
 8000b34:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b38:	f003 0302 	and.w	r3, r3, #2
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	58024400 	.word	0x58024400

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b0ba      	sub	sp, #232	; 0xe8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	22c0      	movs	r2, #192	; 0xc0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f008 fd05 	bl	8009580 <memset>
  if(huart->Instance==USART3)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a2b      	ldr	r2, [pc, #172]	; (8000c28 <HAL_UART_MspInit+0xd8>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d14e      	bne.n	8000c1e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b80:	f04f 0202 	mov.w	r2, #2
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 fa0a 	bl	8002fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ba2:	f7ff ff75 	bl	8000a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ba6:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <HAL_UART_MspInit+0xdc>)
 8000ba8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000bac:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <HAL_UART_MspInit+0xdc>)
 8000bae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <HAL_UART_MspInit+0xdc>)
 8000bb8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_UART_MspInit+0xdc>)
 8000bc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <HAL_UART_MspInit+0xdc>)
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_UART_MspInit+0xdc>)
 8000bd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000be2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000be6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c02:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c06:	4619      	mov	r1, r3
 8000c08:	4809      	ldr	r0, [pc, #36]	; (8000c30 <HAL_UART_MspInit+0xe0>)
 8000c0a:	f000 ffef 	bl	8001bec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2027      	movs	r0, #39	; 0x27
 8000c14:	f000 fa51 	bl	80010ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c18:	2027      	movs	r0, #39	; 0x27
 8000c1a:	f000 fa68 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	37e8      	adds	r7, #232	; 0xe8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40004800 	.word	0x40004800
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	58020c00 	.word	0x58020c00

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c38:	e7fe      	b.n	8000c38 <NMI_Handler+0x4>

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c80:	f000 f920 	bl	8000ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <USART3_IRQHandler+0x10>)
 8000c8e:	f004 f80b 	bl	8004ca8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2400002c 	.word	0x2400002c

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b32      	ldr	r3, [pc, #200]	; (8000d6c <SystemInit+0xd0>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a31      	ldr	r2, [pc, #196]	; (8000d6c <SystemInit+0xd0>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cb0:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <SystemInit+0xd4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 030f 	and.w	r3, r3, #15
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d807      	bhi.n	8000ccc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cbc:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <SystemInit+0xd4>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f023 030f 	bic.w	r3, r3, #15
 8000cc4:	4a2a      	ldr	r2, [pc, #168]	; (8000d70 <SystemInit+0xd4>)
 8000cc6:	f043 0303 	orr.w	r3, r3, #3
 8000cca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ccc:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <SystemInit+0xd8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a28      	ldr	r2, [pc, #160]	; (8000d74 <SystemInit+0xd8>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cd8:	4b26      	ldr	r3, [pc, #152]	; (8000d74 <SystemInit+0xd8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cde:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <SystemInit+0xd8>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4924      	ldr	r1, [pc, #144]	; (8000d74 <SystemInit+0xd8>)
 8000ce4:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <SystemInit+0xdc>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <SystemInit+0xd4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 030c 	and.w	r3, r3, #12
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d007      	beq.n	8000d06 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <SystemInit+0xd4>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f023 030f 	bic.w	r3, r3, #15
 8000cfe:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <SystemInit+0xd4>)
 8000d00:	f043 0303 	orr.w	r3, r3, #3
 8000d04:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d06:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <SystemInit+0xd8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <SystemInit+0xd8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <SystemInit+0xd8>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <SystemInit+0xd8>)
 8000d1a:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <SystemInit+0xe0>)
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <SystemInit+0xd8>)
 8000d20:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <SystemInit+0xe4>)
 8000d22:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <SystemInit+0xd8>)
 8000d26:	4a17      	ldr	r2, [pc, #92]	; (8000d84 <SystemInit+0xe8>)
 8000d28:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <SystemInit+0xd8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d30:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <SystemInit+0xd8>)
 8000d32:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <SystemInit+0xe8>)
 8000d34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <SystemInit+0xd8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <SystemInit+0xd8>)
 8000d3e:	4a11      	ldr	r2, [pc, #68]	; (8000d84 <SystemInit+0xe8>)
 8000d40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <SystemInit+0xd8>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <SystemInit+0xd8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a09      	ldr	r2, [pc, #36]	; (8000d74 <SystemInit+0xd8>)
 8000d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <SystemInit+0xd8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <SystemInit+0xec>)
 8000d5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d60:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00
 8000d70:	52002000 	.word	0x52002000
 8000d74:	58024400 	.word	0x58024400
 8000d78:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d7c:	02020200 	.word	0x02020200
 8000d80:	01ff0000 	.word	0x01ff0000
 8000d84:	01010280 	.word	0x01010280
 8000d88:	52004000 	.word	0x52004000

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d90:	f7ff ff84 	bl	8000c9c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	; (8000dcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	; (8000dd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f008 fbe9 	bl	8009590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fc47 	bl	8000650 <main>
  bx  lr
 8000dc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000dc8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dcc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000dd0:	08009838 	.word	0x08009838
  ldr r2, =_sbss
 8000dd4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000dd8:	240000c8 	.word	0x240000c8

08000ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de6:	2003      	movs	r0, #3
 8000de8:	f000 f95c 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000dec:	f001 ff0a 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8000df0:	4602      	mov	r2, r0
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_Init+0x68>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	0a1b      	lsrs	r3, r3, #8
 8000df8:	f003 030f 	and.w	r3, r3, #15
 8000dfc:	4913      	ldr	r1, [pc, #76]	; (8000e4c <HAL_Init+0x6c>)
 8000dfe:	5ccb      	ldrb	r3, [r1, r3]
 8000e00:	f003 031f 	and.w	r3, r3, #31
 8000e04:	fa22 f303 	lsr.w	r3, r2, r3
 8000e08:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_Init+0x68>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <HAL_Init+0x6c>)
 8000e14:	5cd3      	ldrb	r3, [r2, r3]
 8000e16:	f003 031f 	and.w	r3, r3, #31
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <HAL_Init+0x70>)
 8000e22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e24:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <HAL_Init+0x74>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f814 	bl	8000e58 <HAL_InitTick>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e002      	b.n	8000e40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3a:	f7ff fe6f 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	58024400 	.word	0x58024400
 8000e4c:	080097cc 	.word	0x080097cc
 8000e50:	24000004 	.word	0x24000004
 8000e54:	24000000 	.word	0x24000000

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_InitTick+0x60>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d101      	bne.n	8000e6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e021      	b.n	8000eb0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <HAL_InitTick+0x64>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_InitTick+0x60>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f941 	bl	800110a <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00e      	b.n	8000eb0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d80a      	bhi.n	8000eae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f000 f90b 	bl	80010ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_InitTick+0x68>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2400000c 	.word	0x2400000c
 8000ebc:	24000000 	.word	0x24000000
 8000ec0:	24000008 	.word	0x24000008

08000ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x20>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	2400000c 	.word	0x2400000c
 8000ee8:	240000c4 	.word	0x240000c4

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	240000c4 	.word	0x240000c4

08000f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <__NVIC_SetPriorityGrouping+0x40>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <__NVIC_SetPriorityGrouping+0x40>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00
 8000f48:	05fa0000 	.word	0x05fa0000

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <__NVIC_EnableIRQ+0x38>)
 8000f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f7ff ff8e 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff29 	bl	8000f04 <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff40 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff90 	bl	8000ff8 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5f 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff33 	bl	8000f68 <__NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffa4 	bl	8001060 <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff fede 	bl	8000eec <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e2dc      	b.n	80016f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d008      	beq.n	800115a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e2cd      	b.n	80016f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a76      	ldr	r2, [pc, #472]	; (8001338 <HAL_DMA_Abort+0x214>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d04a      	beq.n	80011fa <HAL_DMA_Abort+0xd6>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a74      	ldr	r2, [pc, #464]	; (800133c <HAL_DMA_Abort+0x218>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d045      	beq.n	80011fa <HAL_DMA_Abort+0xd6>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a73      	ldr	r2, [pc, #460]	; (8001340 <HAL_DMA_Abort+0x21c>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d040      	beq.n	80011fa <HAL_DMA_Abort+0xd6>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a71      	ldr	r2, [pc, #452]	; (8001344 <HAL_DMA_Abort+0x220>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d03b      	beq.n	80011fa <HAL_DMA_Abort+0xd6>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a70      	ldr	r2, [pc, #448]	; (8001348 <HAL_DMA_Abort+0x224>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d036      	beq.n	80011fa <HAL_DMA_Abort+0xd6>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a6e      	ldr	r2, [pc, #440]	; (800134c <HAL_DMA_Abort+0x228>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d031      	beq.n	80011fa <HAL_DMA_Abort+0xd6>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a6d      	ldr	r2, [pc, #436]	; (8001350 <HAL_DMA_Abort+0x22c>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d02c      	beq.n	80011fa <HAL_DMA_Abort+0xd6>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a6b      	ldr	r2, [pc, #428]	; (8001354 <HAL_DMA_Abort+0x230>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d027      	beq.n	80011fa <HAL_DMA_Abort+0xd6>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a6a      	ldr	r2, [pc, #424]	; (8001358 <HAL_DMA_Abort+0x234>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d022      	beq.n	80011fa <HAL_DMA_Abort+0xd6>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a68      	ldr	r2, [pc, #416]	; (800135c <HAL_DMA_Abort+0x238>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d01d      	beq.n	80011fa <HAL_DMA_Abort+0xd6>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a67      	ldr	r2, [pc, #412]	; (8001360 <HAL_DMA_Abort+0x23c>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d018      	beq.n	80011fa <HAL_DMA_Abort+0xd6>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a65      	ldr	r2, [pc, #404]	; (8001364 <HAL_DMA_Abort+0x240>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d013      	beq.n	80011fa <HAL_DMA_Abort+0xd6>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a64      	ldr	r2, [pc, #400]	; (8001368 <HAL_DMA_Abort+0x244>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d00e      	beq.n	80011fa <HAL_DMA_Abort+0xd6>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a62      	ldr	r2, [pc, #392]	; (800136c <HAL_DMA_Abort+0x248>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d009      	beq.n	80011fa <HAL_DMA_Abort+0xd6>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a61      	ldr	r2, [pc, #388]	; (8001370 <HAL_DMA_Abort+0x24c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d004      	beq.n	80011fa <HAL_DMA_Abort+0xd6>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a5f      	ldr	r2, [pc, #380]	; (8001374 <HAL_DMA_Abort+0x250>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d101      	bne.n	80011fe <HAL_DMA_Abort+0xda>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_DMA_Abort+0xdc>
 80011fe:	2300      	movs	r3, #0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d013      	beq.n	800122c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 021e 	bic.w	r2, r2, #30
 8001212:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	695a      	ldr	r2, [r3, #20]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001222:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	e00a      	b.n	8001242 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 020e 	bic.w	r2, r2, #14
 800123a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a3c      	ldr	r2, [pc, #240]	; (8001338 <HAL_DMA_Abort+0x214>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d072      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a3a      	ldr	r2, [pc, #232]	; (800133c <HAL_DMA_Abort+0x218>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d06d      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a39      	ldr	r2, [pc, #228]	; (8001340 <HAL_DMA_Abort+0x21c>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d068      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a37      	ldr	r2, [pc, #220]	; (8001344 <HAL_DMA_Abort+0x220>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d063      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a36      	ldr	r2, [pc, #216]	; (8001348 <HAL_DMA_Abort+0x224>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d05e      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a34      	ldr	r2, [pc, #208]	; (800134c <HAL_DMA_Abort+0x228>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d059      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a33      	ldr	r2, [pc, #204]	; (8001350 <HAL_DMA_Abort+0x22c>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d054      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a31      	ldr	r2, [pc, #196]	; (8001354 <HAL_DMA_Abort+0x230>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d04f      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a30      	ldr	r2, [pc, #192]	; (8001358 <HAL_DMA_Abort+0x234>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d04a      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a2e      	ldr	r2, [pc, #184]	; (800135c <HAL_DMA_Abort+0x238>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d045      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a2d      	ldr	r2, [pc, #180]	; (8001360 <HAL_DMA_Abort+0x23c>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d040      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a2b      	ldr	r2, [pc, #172]	; (8001364 <HAL_DMA_Abort+0x240>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d03b      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a2a      	ldr	r2, [pc, #168]	; (8001368 <HAL_DMA_Abort+0x244>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d036      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a28      	ldr	r2, [pc, #160]	; (800136c <HAL_DMA_Abort+0x248>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d031      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a27      	ldr	r2, [pc, #156]	; (8001370 <HAL_DMA_Abort+0x24c>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d02c      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a25      	ldr	r2, [pc, #148]	; (8001374 <HAL_DMA_Abort+0x250>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d027      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a24      	ldr	r2, [pc, #144]	; (8001378 <HAL_DMA_Abort+0x254>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d022      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a22      	ldr	r2, [pc, #136]	; (800137c <HAL_DMA_Abort+0x258>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d01d      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a21      	ldr	r2, [pc, #132]	; (8001380 <HAL_DMA_Abort+0x25c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d018      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a1f      	ldr	r2, [pc, #124]	; (8001384 <HAL_DMA_Abort+0x260>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d013      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a1e      	ldr	r2, [pc, #120]	; (8001388 <HAL_DMA_Abort+0x264>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d00e      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a1c      	ldr	r2, [pc, #112]	; (800138c <HAL_DMA_Abort+0x268>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d009      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <HAL_DMA_Abort+0x26c>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d004      	beq.n	8001332 <HAL_DMA_Abort+0x20e>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <HAL_DMA_Abort+0x270>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d132      	bne.n	8001398 <HAL_DMA_Abort+0x274>
 8001332:	2301      	movs	r3, #1
 8001334:	e031      	b.n	800139a <HAL_DMA_Abort+0x276>
 8001336:	bf00      	nop
 8001338:	40020010 	.word	0x40020010
 800133c:	40020028 	.word	0x40020028
 8001340:	40020040 	.word	0x40020040
 8001344:	40020058 	.word	0x40020058
 8001348:	40020070 	.word	0x40020070
 800134c:	40020088 	.word	0x40020088
 8001350:	400200a0 	.word	0x400200a0
 8001354:	400200b8 	.word	0x400200b8
 8001358:	40020410 	.word	0x40020410
 800135c:	40020428 	.word	0x40020428
 8001360:	40020440 	.word	0x40020440
 8001364:	40020458 	.word	0x40020458
 8001368:	40020470 	.word	0x40020470
 800136c:	40020488 	.word	0x40020488
 8001370:	400204a0 	.word	0x400204a0
 8001374:	400204b8 	.word	0x400204b8
 8001378:	58025408 	.word	0x58025408
 800137c:	5802541c 	.word	0x5802541c
 8001380:	58025430 	.word	0x58025430
 8001384:	58025444 	.word	0x58025444
 8001388:	58025458 	.word	0x58025458
 800138c:	5802546c 	.word	0x5802546c
 8001390:	58025480 	.word	0x58025480
 8001394:	58025494 	.word	0x58025494
 8001398:	2300      	movs	r3, #0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d007      	beq.n	80013ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a6d      	ldr	r2, [pc, #436]	; (8001568 <HAL_DMA_Abort+0x444>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d04a      	beq.n	800144e <HAL_DMA_Abort+0x32a>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a6b      	ldr	r2, [pc, #428]	; (800156c <HAL_DMA_Abort+0x448>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d045      	beq.n	800144e <HAL_DMA_Abort+0x32a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a6a      	ldr	r2, [pc, #424]	; (8001570 <HAL_DMA_Abort+0x44c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d040      	beq.n	800144e <HAL_DMA_Abort+0x32a>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a68      	ldr	r2, [pc, #416]	; (8001574 <HAL_DMA_Abort+0x450>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d03b      	beq.n	800144e <HAL_DMA_Abort+0x32a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a67      	ldr	r2, [pc, #412]	; (8001578 <HAL_DMA_Abort+0x454>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d036      	beq.n	800144e <HAL_DMA_Abort+0x32a>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a65      	ldr	r2, [pc, #404]	; (800157c <HAL_DMA_Abort+0x458>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d031      	beq.n	800144e <HAL_DMA_Abort+0x32a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a64      	ldr	r2, [pc, #400]	; (8001580 <HAL_DMA_Abort+0x45c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d02c      	beq.n	800144e <HAL_DMA_Abort+0x32a>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a62      	ldr	r2, [pc, #392]	; (8001584 <HAL_DMA_Abort+0x460>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d027      	beq.n	800144e <HAL_DMA_Abort+0x32a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a61      	ldr	r2, [pc, #388]	; (8001588 <HAL_DMA_Abort+0x464>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d022      	beq.n	800144e <HAL_DMA_Abort+0x32a>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a5f      	ldr	r2, [pc, #380]	; (800158c <HAL_DMA_Abort+0x468>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d01d      	beq.n	800144e <HAL_DMA_Abort+0x32a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a5e      	ldr	r2, [pc, #376]	; (8001590 <HAL_DMA_Abort+0x46c>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d018      	beq.n	800144e <HAL_DMA_Abort+0x32a>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a5c      	ldr	r2, [pc, #368]	; (8001594 <HAL_DMA_Abort+0x470>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d013      	beq.n	800144e <HAL_DMA_Abort+0x32a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a5b      	ldr	r2, [pc, #364]	; (8001598 <HAL_DMA_Abort+0x474>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d00e      	beq.n	800144e <HAL_DMA_Abort+0x32a>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a59      	ldr	r2, [pc, #356]	; (800159c <HAL_DMA_Abort+0x478>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d009      	beq.n	800144e <HAL_DMA_Abort+0x32a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a58      	ldr	r2, [pc, #352]	; (80015a0 <HAL_DMA_Abort+0x47c>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d004      	beq.n	800144e <HAL_DMA_Abort+0x32a>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a56      	ldr	r2, [pc, #344]	; (80015a4 <HAL_DMA_Abort+0x480>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d108      	bne.n	8001460 <HAL_DMA_Abort+0x33c>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0201 	bic.w	r2, r2, #1
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	e007      	b.n	8001470 <HAL_DMA_Abort+0x34c>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0201 	bic.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001470:	e013      	b.n	800149a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001472:	f7ff fd3b 	bl	8000eec <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b05      	cmp	r3, #5
 800147e:	d90c      	bls.n	800149a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2220      	movs	r2, #32
 8001484:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2203      	movs	r2, #3
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e12d      	b.n	80016f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1e5      	bne.n	8001472 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a2f      	ldr	r2, [pc, #188]	; (8001568 <HAL_DMA_Abort+0x444>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d04a      	beq.n	8001546 <HAL_DMA_Abort+0x422>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a2d      	ldr	r2, [pc, #180]	; (800156c <HAL_DMA_Abort+0x448>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d045      	beq.n	8001546 <HAL_DMA_Abort+0x422>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a2c      	ldr	r2, [pc, #176]	; (8001570 <HAL_DMA_Abort+0x44c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d040      	beq.n	8001546 <HAL_DMA_Abort+0x422>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a2a      	ldr	r2, [pc, #168]	; (8001574 <HAL_DMA_Abort+0x450>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d03b      	beq.n	8001546 <HAL_DMA_Abort+0x422>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a29      	ldr	r2, [pc, #164]	; (8001578 <HAL_DMA_Abort+0x454>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d036      	beq.n	8001546 <HAL_DMA_Abort+0x422>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a27      	ldr	r2, [pc, #156]	; (800157c <HAL_DMA_Abort+0x458>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d031      	beq.n	8001546 <HAL_DMA_Abort+0x422>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a26      	ldr	r2, [pc, #152]	; (8001580 <HAL_DMA_Abort+0x45c>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d02c      	beq.n	8001546 <HAL_DMA_Abort+0x422>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a24      	ldr	r2, [pc, #144]	; (8001584 <HAL_DMA_Abort+0x460>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d027      	beq.n	8001546 <HAL_DMA_Abort+0x422>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a23      	ldr	r2, [pc, #140]	; (8001588 <HAL_DMA_Abort+0x464>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d022      	beq.n	8001546 <HAL_DMA_Abort+0x422>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a21      	ldr	r2, [pc, #132]	; (800158c <HAL_DMA_Abort+0x468>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d01d      	beq.n	8001546 <HAL_DMA_Abort+0x422>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a20      	ldr	r2, [pc, #128]	; (8001590 <HAL_DMA_Abort+0x46c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d018      	beq.n	8001546 <HAL_DMA_Abort+0x422>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a1e      	ldr	r2, [pc, #120]	; (8001594 <HAL_DMA_Abort+0x470>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d013      	beq.n	8001546 <HAL_DMA_Abort+0x422>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a1d      	ldr	r2, [pc, #116]	; (8001598 <HAL_DMA_Abort+0x474>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d00e      	beq.n	8001546 <HAL_DMA_Abort+0x422>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a1b      	ldr	r2, [pc, #108]	; (800159c <HAL_DMA_Abort+0x478>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d009      	beq.n	8001546 <HAL_DMA_Abort+0x422>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a1a      	ldr	r2, [pc, #104]	; (80015a0 <HAL_DMA_Abort+0x47c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d004      	beq.n	8001546 <HAL_DMA_Abort+0x422>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <HAL_DMA_Abort+0x480>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d101      	bne.n	800154a <HAL_DMA_Abort+0x426>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_DMA_Abort+0x428>
 800154a:	2300      	movs	r3, #0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d02b      	beq.n	80015a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001554:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	223f      	movs	r2, #63	; 0x3f
 8001560:	409a      	lsls	r2, r3
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	e02a      	b.n	80015be <HAL_DMA_Abort+0x49a>
 8001568:	40020010 	.word	0x40020010
 800156c:	40020028 	.word	0x40020028
 8001570:	40020040 	.word	0x40020040
 8001574:	40020058 	.word	0x40020058
 8001578:	40020070 	.word	0x40020070
 800157c:	40020088 	.word	0x40020088
 8001580:	400200a0 	.word	0x400200a0
 8001584:	400200b8 	.word	0x400200b8
 8001588:	40020410 	.word	0x40020410
 800158c:	40020428 	.word	0x40020428
 8001590:	40020440 	.word	0x40020440
 8001594:	40020458 	.word	0x40020458
 8001598:	40020470 	.word	0x40020470
 800159c:	40020488 	.word	0x40020488
 80015a0:	400204a0 	.word	0x400204a0
 80015a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b2:	f003 031f 	and.w	r3, r3, #31
 80015b6:	2201      	movs	r2, #1
 80015b8:	409a      	lsls	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a4f      	ldr	r2, [pc, #316]	; (8001700 <HAL_DMA_Abort+0x5dc>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d072      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a4d      	ldr	r2, [pc, #308]	; (8001704 <HAL_DMA_Abort+0x5e0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d06d      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a4c      	ldr	r2, [pc, #304]	; (8001708 <HAL_DMA_Abort+0x5e4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d068      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a4a      	ldr	r2, [pc, #296]	; (800170c <HAL_DMA_Abort+0x5e8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d063      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a49      	ldr	r2, [pc, #292]	; (8001710 <HAL_DMA_Abort+0x5ec>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d05e      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a47      	ldr	r2, [pc, #284]	; (8001714 <HAL_DMA_Abort+0x5f0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d059      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a46      	ldr	r2, [pc, #280]	; (8001718 <HAL_DMA_Abort+0x5f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d054      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a44      	ldr	r2, [pc, #272]	; (800171c <HAL_DMA_Abort+0x5f8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d04f      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a43      	ldr	r2, [pc, #268]	; (8001720 <HAL_DMA_Abort+0x5fc>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d04a      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a41      	ldr	r2, [pc, #260]	; (8001724 <HAL_DMA_Abort+0x600>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d045      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a40      	ldr	r2, [pc, #256]	; (8001728 <HAL_DMA_Abort+0x604>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d040      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a3e      	ldr	r2, [pc, #248]	; (800172c <HAL_DMA_Abort+0x608>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d03b      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a3d      	ldr	r2, [pc, #244]	; (8001730 <HAL_DMA_Abort+0x60c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d036      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a3b      	ldr	r2, [pc, #236]	; (8001734 <HAL_DMA_Abort+0x610>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d031      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a3a      	ldr	r2, [pc, #232]	; (8001738 <HAL_DMA_Abort+0x614>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d02c      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a38      	ldr	r2, [pc, #224]	; (800173c <HAL_DMA_Abort+0x618>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d027      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a37      	ldr	r2, [pc, #220]	; (8001740 <HAL_DMA_Abort+0x61c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d022      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a35      	ldr	r2, [pc, #212]	; (8001744 <HAL_DMA_Abort+0x620>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d01d      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a34      	ldr	r2, [pc, #208]	; (8001748 <HAL_DMA_Abort+0x624>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d018      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a32      	ldr	r2, [pc, #200]	; (800174c <HAL_DMA_Abort+0x628>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a31      	ldr	r2, [pc, #196]	; (8001750 <HAL_DMA_Abort+0x62c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d00e      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a2f      	ldr	r2, [pc, #188]	; (8001754 <HAL_DMA_Abort+0x630>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d009      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a2e      	ldr	r2, [pc, #184]	; (8001758 <HAL_DMA_Abort+0x634>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d004      	beq.n	80016ae <HAL_DMA_Abort+0x58a>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a2c      	ldr	r2, [pc, #176]	; (800175c <HAL_DMA_Abort+0x638>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_DMA_Abort+0x58e>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_DMA_Abort+0x590>
 80016b2:	2300      	movs	r3, #0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d015      	beq.n	80016e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80016c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00c      	beq.n	80016e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80016e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40020010 	.word	0x40020010
 8001704:	40020028 	.word	0x40020028
 8001708:	40020040 	.word	0x40020040
 800170c:	40020058 	.word	0x40020058
 8001710:	40020070 	.word	0x40020070
 8001714:	40020088 	.word	0x40020088
 8001718:	400200a0 	.word	0x400200a0
 800171c:	400200b8 	.word	0x400200b8
 8001720:	40020410 	.word	0x40020410
 8001724:	40020428 	.word	0x40020428
 8001728:	40020440 	.word	0x40020440
 800172c:	40020458 	.word	0x40020458
 8001730:	40020470 	.word	0x40020470
 8001734:	40020488 	.word	0x40020488
 8001738:	400204a0 	.word	0x400204a0
 800173c:	400204b8 	.word	0x400204b8
 8001740:	58025408 	.word	0x58025408
 8001744:	5802541c 	.word	0x5802541c
 8001748:	58025430 	.word	0x58025430
 800174c:	58025444 	.word	0x58025444
 8001750:	58025458 	.word	0x58025458
 8001754:	5802546c 	.word	0x5802546c
 8001758:	58025480 	.word	0x58025480
 800175c:	58025494 	.word	0x58025494

08001760 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e237      	b.n	8001be2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d004      	beq.n	8001788 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2280      	movs	r2, #128	; 0x80
 8001782:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e22c      	b.n	8001be2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a5c      	ldr	r2, [pc, #368]	; (8001900 <HAL_DMA_Abort_IT+0x1a0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d04a      	beq.n	8001828 <HAL_DMA_Abort_IT+0xc8>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a5b      	ldr	r2, [pc, #364]	; (8001904 <HAL_DMA_Abort_IT+0x1a4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d045      	beq.n	8001828 <HAL_DMA_Abort_IT+0xc8>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a59      	ldr	r2, [pc, #356]	; (8001908 <HAL_DMA_Abort_IT+0x1a8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d040      	beq.n	8001828 <HAL_DMA_Abort_IT+0xc8>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a58      	ldr	r2, [pc, #352]	; (800190c <HAL_DMA_Abort_IT+0x1ac>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d03b      	beq.n	8001828 <HAL_DMA_Abort_IT+0xc8>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a56      	ldr	r2, [pc, #344]	; (8001910 <HAL_DMA_Abort_IT+0x1b0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d036      	beq.n	8001828 <HAL_DMA_Abort_IT+0xc8>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a55      	ldr	r2, [pc, #340]	; (8001914 <HAL_DMA_Abort_IT+0x1b4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d031      	beq.n	8001828 <HAL_DMA_Abort_IT+0xc8>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a53      	ldr	r2, [pc, #332]	; (8001918 <HAL_DMA_Abort_IT+0x1b8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d02c      	beq.n	8001828 <HAL_DMA_Abort_IT+0xc8>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a52      	ldr	r2, [pc, #328]	; (800191c <HAL_DMA_Abort_IT+0x1bc>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d027      	beq.n	8001828 <HAL_DMA_Abort_IT+0xc8>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a50      	ldr	r2, [pc, #320]	; (8001920 <HAL_DMA_Abort_IT+0x1c0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d022      	beq.n	8001828 <HAL_DMA_Abort_IT+0xc8>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a4f      	ldr	r2, [pc, #316]	; (8001924 <HAL_DMA_Abort_IT+0x1c4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d01d      	beq.n	8001828 <HAL_DMA_Abort_IT+0xc8>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a4d      	ldr	r2, [pc, #308]	; (8001928 <HAL_DMA_Abort_IT+0x1c8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d018      	beq.n	8001828 <HAL_DMA_Abort_IT+0xc8>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a4c      	ldr	r2, [pc, #304]	; (800192c <HAL_DMA_Abort_IT+0x1cc>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d013      	beq.n	8001828 <HAL_DMA_Abort_IT+0xc8>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a4a      	ldr	r2, [pc, #296]	; (8001930 <HAL_DMA_Abort_IT+0x1d0>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d00e      	beq.n	8001828 <HAL_DMA_Abort_IT+0xc8>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a49      	ldr	r2, [pc, #292]	; (8001934 <HAL_DMA_Abort_IT+0x1d4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d009      	beq.n	8001828 <HAL_DMA_Abort_IT+0xc8>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a47      	ldr	r2, [pc, #284]	; (8001938 <HAL_DMA_Abort_IT+0x1d8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d004      	beq.n	8001828 <HAL_DMA_Abort_IT+0xc8>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a46      	ldr	r2, [pc, #280]	; (800193c <HAL_DMA_Abort_IT+0x1dc>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d101      	bne.n	800182c <HAL_DMA_Abort_IT+0xcc>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_DMA_Abort_IT+0xce>
 800182c:	2300      	movs	r3, #0
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8086 	beq.w	8001940 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2204      	movs	r2, #4
 8001838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a2f      	ldr	r2, [pc, #188]	; (8001900 <HAL_DMA_Abort_IT+0x1a0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d04a      	beq.n	80018dc <HAL_DMA_Abort_IT+0x17c>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a2e      	ldr	r2, [pc, #184]	; (8001904 <HAL_DMA_Abort_IT+0x1a4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d045      	beq.n	80018dc <HAL_DMA_Abort_IT+0x17c>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a2c      	ldr	r2, [pc, #176]	; (8001908 <HAL_DMA_Abort_IT+0x1a8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d040      	beq.n	80018dc <HAL_DMA_Abort_IT+0x17c>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a2b      	ldr	r2, [pc, #172]	; (800190c <HAL_DMA_Abort_IT+0x1ac>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d03b      	beq.n	80018dc <HAL_DMA_Abort_IT+0x17c>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a29      	ldr	r2, [pc, #164]	; (8001910 <HAL_DMA_Abort_IT+0x1b0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d036      	beq.n	80018dc <HAL_DMA_Abort_IT+0x17c>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a28      	ldr	r2, [pc, #160]	; (8001914 <HAL_DMA_Abort_IT+0x1b4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d031      	beq.n	80018dc <HAL_DMA_Abort_IT+0x17c>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a26      	ldr	r2, [pc, #152]	; (8001918 <HAL_DMA_Abort_IT+0x1b8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d02c      	beq.n	80018dc <HAL_DMA_Abort_IT+0x17c>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a25      	ldr	r2, [pc, #148]	; (800191c <HAL_DMA_Abort_IT+0x1bc>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d027      	beq.n	80018dc <HAL_DMA_Abort_IT+0x17c>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_DMA_Abort_IT+0x1c0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d022      	beq.n	80018dc <HAL_DMA_Abort_IT+0x17c>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a22      	ldr	r2, [pc, #136]	; (8001924 <HAL_DMA_Abort_IT+0x1c4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d01d      	beq.n	80018dc <HAL_DMA_Abort_IT+0x17c>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a20      	ldr	r2, [pc, #128]	; (8001928 <HAL_DMA_Abort_IT+0x1c8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d018      	beq.n	80018dc <HAL_DMA_Abort_IT+0x17c>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a1f      	ldr	r2, [pc, #124]	; (800192c <HAL_DMA_Abort_IT+0x1cc>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d013      	beq.n	80018dc <HAL_DMA_Abort_IT+0x17c>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1d      	ldr	r2, [pc, #116]	; (8001930 <HAL_DMA_Abort_IT+0x1d0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00e      	beq.n	80018dc <HAL_DMA_Abort_IT+0x17c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a1c      	ldr	r2, [pc, #112]	; (8001934 <HAL_DMA_Abort_IT+0x1d4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d009      	beq.n	80018dc <HAL_DMA_Abort_IT+0x17c>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a1a      	ldr	r2, [pc, #104]	; (8001938 <HAL_DMA_Abort_IT+0x1d8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d004      	beq.n	80018dc <HAL_DMA_Abort_IT+0x17c>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a19      	ldr	r2, [pc, #100]	; (800193c <HAL_DMA_Abort_IT+0x1dc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d108      	bne.n	80018ee <HAL_DMA_Abort_IT+0x18e>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0201 	bic.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e178      	b.n	8001be0 <HAL_DMA_Abort_IT+0x480>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0201 	bic.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	e16f      	b.n	8001be0 <HAL_DMA_Abort_IT+0x480>
 8001900:	40020010 	.word	0x40020010
 8001904:	40020028 	.word	0x40020028
 8001908:	40020040 	.word	0x40020040
 800190c:	40020058 	.word	0x40020058
 8001910:	40020070 	.word	0x40020070
 8001914:	40020088 	.word	0x40020088
 8001918:	400200a0 	.word	0x400200a0
 800191c:	400200b8 	.word	0x400200b8
 8001920:	40020410 	.word	0x40020410
 8001924:	40020428 	.word	0x40020428
 8001928:	40020440 	.word	0x40020440
 800192c:	40020458 	.word	0x40020458
 8001930:	40020470 	.word	0x40020470
 8001934:	40020488 	.word	0x40020488
 8001938:	400204a0 	.word	0x400204a0
 800193c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 020e 	bic.w	r2, r2, #14
 800194e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a6c      	ldr	r2, [pc, #432]	; (8001b08 <HAL_DMA_Abort_IT+0x3a8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d04a      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x290>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a6b      	ldr	r2, [pc, #428]	; (8001b0c <HAL_DMA_Abort_IT+0x3ac>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d045      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x290>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a69      	ldr	r2, [pc, #420]	; (8001b10 <HAL_DMA_Abort_IT+0x3b0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d040      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x290>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a68      	ldr	r2, [pc, #416]	; (8001b14 <HAL_DMA_Abort_IT+0x3b4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d03b      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x290>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a66      	ldr	r2, [pc, #408]	; (8001b18 <HAL_DMA_Abort_IT+0x3b8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d036      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x290>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a65      	ldr	r2, [pc, #404]	; (8001b1c <HAL_DMA_Abort_IT+0x3bc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d031      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x290>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a63      	ldr	r2, [pc, #396]	; (8001b20 <HAL_DMA_Abort_IT+0x3c0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d02c      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x290>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a62      	ldr	r2, [pc, #392]	; (8001b24 <HAL_DMA_Abort_IT+0x3c4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d027      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x290>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a60      	ldr	r2, [pc, #384]	; (8001b28 <HAL_DMA_Abort_IT+0x3c8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d022      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x290>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a5f      	ldr	r2, [pc, #380]	; (8001b2c <HAL_DMA_Abort_IT+0x3cc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d01d      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x290>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a5d      	ldr	r2, [pc, #372]	; (8001b30 <HAL_DMA_Abort_IT+0x3d0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d018      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x290>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a5c      	ldr	r2, [pc, #368]	; (8001b34 <HAL_DMA_Abort_IT+0x3d4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d013      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x290>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a5a      	ldr	r2, [pc, #360]	; (8001b38 <HAL_DMA_Abort_IT+0x3d8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00e      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x290>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a59      	ldr	r2, [pc, #356]	; (8001b3c <HAL_DMA_Abort_IT+0x3dc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d009      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x290>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a57      	ldr	r2, [pc, #348]	; (8001b40 <HAL_DMA_Abort_IT+0x3e0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d004      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x290>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a56      	ldr	r2, [pc, #344]	; (8001b44 <HAL_DMA_Abort_IT+0x3e4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d108      	bne.n	8001a02 <HAL_DMA_Abort_IT+0x2a2>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0201 	bic.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e007      	b.n	8001a12 <HAL_DMA_Abort_IT+0x2b2>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0201 	bic.w	r2, r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a3c      	ldr	r2, [pc, #240]	; (8001b08 <HAL_DMA_Abort_IT+0x3a8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d072      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a3a      	ldr	r2, [pc, #232]	; (8001b0c <HAL_DMA_Abort_IT+0x3ac>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d06d      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a39      	ldr	r2, [pc, #228]	; (8001b10 <HAL_DMA_Abort_IT+0x3b0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d068      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a37      	ldr	r2, [pc, #220]	; (8001b14 <HAL_DMA_Abort_IT+0x3b4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d063      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a36      	ldr	r2, [pc, #216]	; (8001b18 <HAL_DMA_Abort_IT+0x3b8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d05e      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a34      	ldr	r2, [pc, #208]	; (8001b1c <HAL_DMA_Abort_IT+0x3bc>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d059      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a33      	ldr	r2, [pc, #204]	; (8001b20 <HAL_DMA_Abort_IT+0x3c0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d054      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a31      	ldr	r2, [pc, #196]	; (8001b24 <HAL_DMA_Abort_IT+0x3c4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d04f      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a30      	ldr	r2, [pc, #192]	; (8001b28 <HAL_DMA_Abort_IT+0x3c8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d04a      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a2e      	ldr	r2, [pc, #184]	; (8001b2c <HAL_DMA_Abort_IT+0x3cc>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d045      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a2d      	ldr	r2, [pc, #180]	; (8001b30 <HAL_DMA_Abort_IT+0x3d0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d040      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a2b      	ldr	r2, [pc, #172]	; (8001b34 <HAL_DMA_Abort_IT+0x3d4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d03b      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a2a      	ldr	r2, [pc, #168]	; (8001b38 <HAL_DMA_Abort_IT+0x3d8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d036      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a28      	ldr	r2, [pc, #160]	; (8001b3c <HAL_DMA_Abort_IT+0x3dc>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d031      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a27      	ldr	r2, [pc, #156]	; (8001b40 <HAL_DMA_Abort_IT+0x3e0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d02c      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a25      	ldr	r2, [pc, #148]	; (8001b44 <HAL_DMA_Abort_IT+0x3e4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d027      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a24      	ldr	r2, [pc, #144]	; (8001b48 <HAL_DMA_Abort_IT+0x3e8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d022      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <HAL_DMA_Abort_IT+0x3ec>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01d      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a21      	ldr	r2, [pc, #132]	; (8001b50 <HAL_DMA_Abort_IT+0x3f0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d018      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <HAL_DMA_Abort_IT+0x3f4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1e      	ldr	r2, [pc, #120]	; (8001b58 <HAL_DMA_Abort_IT+0x3f8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00e      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <HAL_DMA_Abort_IT+0x3fc>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d009      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <HAL_DMA_Abort_IT+0x400>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d004      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x3a2>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a19      	ldr	r2, [pc, #100]	; (8001b64 <HAL_DMA_Abort_IT+0x404>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d132      	bne.n	8001b68 <HAL_DMA_Abort_IT+0x408>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e031      	b.n	8001b6a <HAL_DMA_Abort_IT+0x40a>
 8001b06:	bf00      	nop
 8001b08:	40020010 	.word	0x40020010
 8001b0c:	40020028 	.word	0x40020028
 8001b10:	40020040 	.word	0x40020040
 8001b14:	40020058 	.word	0x40020058
 8001b18:	40020070 	.word	0x40020070
 8001b1c:	40020088 	.word	0x40020088
 8001b20:	400200a0 	.word	0x400200a0
 8001b24:	400200b8 	.word	0x400200b8
 8001b28:	40020410 	.word	0x40020410
 8001b2c:	40020428 	.word	0x40020428
 8001b30:	40020440 	.word	0x40020440
 8001b34:	40020458 	.word	0x40020458
 8001b38:	40020470 	.word	0x40020470
 8001b3c:	40020488 	.word	0x40020488
 8001b40:	400204a0 	.word	0x400204a0
 8001b44:	400204b8 	.word	0x400204b8
 8001b48:	58025408 	.word	0x58025408
 8001b4c:	5802541c 	.word	0x5802541c
 8001b50:	58025430 	.word	0x58025430
 8001b54:	58025444 	.word	0x58025444
 8001b58:	58025458 	.word	0x58025458
 8001b5c:	5802546c 	.word	0x5802546c
 8001b60:	58025480 	.word	0x58025480
 8001b64:	58025494 	.word	0x58025494
 8001b68:	2300      	movs	r3, #0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d028      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b82:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b9c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00c      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bb4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001bbe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop

08001bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bfa:	4b89      	ldr	r3, [pc, #548]	; (8001e20 <HAL_GPIO_Init+0x234>)
 8001bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bfe:	e194      	b.n	8001f2a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	2101      	movs	r1, #1
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 8186 	beq.w	8001f24 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d005      	beq.n	8001c30 <HAL_GPIO_Init+0x44>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d130      	bne.n	8001c92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c66:	2201      	movs	r2, #1
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	091b      	lsrs	r3, r3, #4
 8001c7c:	f003 0201 	and.w	r2, r3, #1
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d017      	beq.n	8001cce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	2203      	movs	r2, #3
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d123      	bne.n	8001d22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	08da      	lsrs	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3208      	adds	r2, #8
 8001ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	08da      	lsrs	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3208      	adds	r2, #8
 8001d1c:	69b9      	ldr	r1, [r7, #24]
 8001d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0203 	and.w	r2, r3, #3
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 80e0 	beq.w	8001f24 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d64:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <HAL_GPIO_Init+0x238>)
 8001d66:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001d6a:	4a2e      	ldr	r2, [pc, #184]	; (8001e24 <HAL_GPIO_Init+0x238>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001d74:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_GPIO_Init+0x238>)
 8001d76:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d82:	4a29      	ldr	r2, [pc, #164]	; (8001e28 <HAL_GPIO_Init+0x23c>)
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	089b      	lsrs	r3, r3, #2
 8001d88:	3302      	adds	r3, #2
 8001d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	220f      	movs	r2, #15
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <HAL_GPIO_Init+0x240>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d052      	beq.n	8001e54 <HAL_GPIO_Init+0x268>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <HAL_GPIO_Init+0x244>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d031      	beq.n	8001e1a <HAL_GPIO_Init+0x22e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <HAL_GPIO_Init+0x248>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d02b      	beq.n	8001e16 <HAL_GPIO_Init+0x22a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a1d      	ldr	r2, [pc, #116]	; (8001e38 <HAL_GPIO_Init+0x24c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d025      	beq.n	8001e12 <HAL_GPIO_Init+0x226>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <HAL_GPIO_Init+0x250>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d01f      	beq.n	8001e0e <HAL_GPIO_Init+0x222>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <HAL_GPIO_Init+0x254>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d019      	beq.n	8001e0a <HAL_GPIO_Init+0x21e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a1a      	ldr	r2, [pc, #104]	; (8001e44 <HAL_GPIO_Init+0x258>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <HAL_GPIO_Init+0x21a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <HAL_GPIO_Init+0x25c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00d      	beq.n	8001e02 <HAL_GPIO_Init+0x216>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a18      	ldr	r2, [pc, #96]	; (8001e4c <HAL_GPIO_Init+0x260>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d007      	beq.n	8001dfe <HAL_GPIO_Init+0x212>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a17      	ldr	r2, [pc, #92]	; (8001e50 <HAL_GPIO_Init+0x264>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d101      	bne.n	8001dfa <HAL_GPIO_Init+0x20e>
 8001df6:	2309      	movs	r3, #9
 8001df8:	e02d      	b.n	8001e56 <HAL_GPIO_Init+0x26a>
 8001dfa:	230a      	movs	r3, #10
 8001dfc:	e02b      	b.n	8001e56 <HAL_GPIO_Init+0x26a>
 8001dfe:	2308      	movs	r3, #8
 8001e00:	e029      	b.n	8001e56 <HAL_GPIO_Init+0x26a>
 8001e02:	2307      	movs	r3, #7
 8001e04:	e027      	b.n	8001e56 <HAL_GPIO_Init+0x26a>
 8001e06:	2306      	movs	r3, #6
 8001e08:	e025      	b.n	8001e56 <HAL_GPIO_Init+0x26a>
 8001e0a:	2305      	movs	r3, #5
 8001e0c:	e023      	b.n	8001e56 <HAL_GPIO_Init+0x26a>
 8001e0e:	2304      	movs	r3, #4
 8001e10:	e021      	b.n	8001e56 <HAL_GPIO_Init+0x26a>
 8001e12:	2303      	movs	r3, #3
 8001e14:	e01f      	b.n	8001e56 <HAL_GPIO_Init+0x26a>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e01d      	b.n	8001e56 <HAL_GPIO_Init+0x26a>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e01b      	b.n	8001e56 <HAL_GPIO_Init+0x26a>
 8001e1e:	bf00      	nop
 8001e20:	58000080 	.word	0x58000080
 8001e24:	58024400 	.word	0x58024400
 8001e28:	58000400 	.word	0x58000400
 8001e2c:	58020000 	.word	0x58020000
 8001e30:	58020400 	.word	0x58020400
 8001e34:	58020800 	.word	0x58020800
 8001e38:	58020c00 	.word	0x58020c00
 8001e3c:	58021000 	.word	0x58021000
 8001e40:	58021400 	.word	0x58021400
 8001e44:	58021800 	.word	0x58021800
 8001e48:	58021c00 	.word	0x58021c00
 8001e4c:	58022000 	.word	0x58022000
 8001e50:	58022400 	.word	0x58022400
 8001e54:	2300      	movs	r3, #0
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	f002 0203 	and.w	r2, r2, #3
 8001e5c:	0092      	lsls	r2, r2, #2
 8001e5e:	4093      	lsls	r3, r2
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e66:	4938      	ldr	r1, [pc, #224]	; (8001f48 <HAL_GPIO_Init+0x35c>)
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	089b      	lsrs	r3, r3, #2
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ec8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	3301      	adds	r3, #1
 8001f28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f47f ae63 	bne.w	8001c00 <HAL_GPIO_Init+0x14>
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	bf00      	nop
 8001f3e:	3724      	adds	r7, #36	; 0x24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	58000400 	.word	0x58000400

08001f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f5c:	787b      	ldrb	r3, [r7, #1]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f68:	e003      	b.n	8001f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f6a:	887b      	ldrh	r3, [r7, #2]
 8001f6c:	041a      	lsls	r2, r3, #16
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	619a      	str	r2, [r3, #24]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001f88:	4b29      	ldr	r3, [pc, #164]	; (8002030 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	2b06      	cmp	r3, #6
 8001f92:	d00a      	beq.n	8001faa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f94:	4b26      	ldr	r3, [pc, #152]	; (8002030 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d001      	beq.n	8001fa6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e040      	b.n	8002028 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e03e      	b.n	8002028 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001faa:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001fb2:	491f      	ldr	r1, [pc, #124]	; (8002030 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001fba:	f7fe ff97 	bl	8000eec <HAL_GetTick>
 8001fbe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001fc0:	e009      	b.n	8001fd6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001fc2:	f7fe ff93 	bl	8000eec <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fd0:	d901      	bls.n	8001fd6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e028      	b.n	8002028 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001fd6:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fe2:	d1ee      	bne.n	8001fc2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b1e      	cmp	r3, #30
 8001fe8:	d008      	beq.n	8001ffc <HAL_PWREx_ConfigSupply+0x7c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b2e      	cmp	r3, #46	; 0x2e
 8001fee:	d005      	beq.n	8001ffc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b1d      	cmp	r3, #29
 8001ff4:	d002      	beq.n	8001ffc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b2d      	cmp	r3, #45	; 0x2d
 8001ffa:	d114      	bne.n	8002026 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001ffc:	f7fe ff76 	bl	8000eec <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002002:	e009      	b.n	8002018 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002004:	f7fe ff72 	bl	8000eec <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002012:	d901      	bls.n	8002018 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e007      	b.n	8002028 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_PWREx_ConfigSupply+0xb0>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002024:	d1ee      	bne.n	8002004 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	58024800 	.word	0x58024800

08002034 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08c      	sub	sp, #48	; 0x30
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	f000 bc1f 	b.w	8002886 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80b3 	beq.w	80021bc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002056:	4b95      	ldr	r3, [pc, #596]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002060:	4b92      	ldr	r3, [pc, #584]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002068:	2b10      	cmp	r3, #16
 800206a:	d007      	beq.n	800207c <HAL_RCC_OscConfig+0x48>
 800206c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206e:	2b18      	cmp	r3, #24
 8002070:	d112      	bne.n	8002098 <HAL_RCC_OscConfig+0x64>
 8002072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d10d      	bne.n	8002098 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	4b8b      	ldr	r3, [pc, #556]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 8098 	beq.w	80021ba <HAL_RCC_OscConfig+0x186>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f040 8093 	bne.w	80021ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e3f6      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a0:	d106      	bne.n	80020b0 <HAL_RCC_OscConfig+0x7c>
 80020a2:	4b82      	ldr	r3, [pc, #520]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a81      	ldr	r2, [pc, #516]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 80020a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e058      	b.n	8002162 <HAL_RCC_OscConfig+0x12e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d112      	bne.n	80020de <HAL_RCC_OscConfig+0xaa>
 80020b8:	4b7c      	ldr	r3, [pc, #496]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a7b      	ldr	r2, [pc, #492]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 80020be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	4b79      	ldr	r3, [pc, #484]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a78      	ldr	r2, [pc, #480]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 80020ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b76      	ldr	r3, [pc, #472]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a75      	ldr	r2, [pc, #468]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 80020d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	e041      	b.n	8002162 <HAL_RCC_OscConfig+0x12e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e6:	d112      	bne.n	800210e <HAL_RCC_OscConfig+0xda>
 80020e8:	4b70      	ldr	r3, [pc, #448]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a6f      	ldr	r2, [pc, #444]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 80020ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b6d      	ldr	r3, [pc, #436]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a6c      	ldr	r2, [pc, #432]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 80020fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	4b6a      	ldr	r3, [pc, #424]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a69      	ldr	r2, [pc, #420]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	e029      	b.n	8002162 <HAL_RCC_OscConfig+0x12e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002116:	d112      	bne.n	800213e <HAL_RCC_OscConfig+0x10a>
 8002118:	4b64      	ldr	r3, [pc, #400]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a63      	ldr	r2, [pc, #396]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 800211e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b61      	ldr	r3, [pc, #388]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a60      	ldr	r2, [pc, #384]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 800212a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	4b5e      	ldr	r3, [pc, #376]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a5d      	ldr	r2, [pc, #372]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	e011      	b.n	8002162 <HAL_RCC_OscConfig+0x12e>
 800213e:	4b5b      	ldr	r3, [pc, #364]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	4b58      	ldr	r3, [pc, #352]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a57      	ldr	r2, [pc, #348]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b55      	ldr	r3, [pc, #340]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a54      	ldr	r2, [pc, #336]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 800215c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002160:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d013      	beq.n	8002192 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216a:	f7fe febf 	bl	8000eec <HAL_GetTick>
 800216e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002172:	f7fe febb 	bl	8000eec <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b64      	cmp	r3, #100	; 0x64
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e380      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002184:	4b49      	ldr	r3, [pc, #292]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x13e>
 8002190:	e014      	b.n	80021bc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002192:	f7fe feab 	bl	8000eec <HAL_GetTick>
 8002196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219a:	f7fe fea7 	bl	8000eec <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b64      	cmp	r3, #100	; 0x64
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e36c      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021ac:	4b3f      	ldr	r3, [pc, #252]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f0      	bne.n	800219a <HAL_RCC_OscConfig+0x166>
 80021b8:	e000      	b.n	80021bc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 808c 	beq.w	80022e2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ca:	4b38      	ldr	r3, [pc, #224]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021d2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021d4:	4b35      	ldr	r3, [pc, #212]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <HAL_RCC_OscConfig+0x1bc>
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	2b18      	cmp	r3, #24
 80021e4:	d137      	bne.n	8002256 <HAL_RCC_OscConfig+0x222>
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d132      	bne.n	8002256 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f0:	4b2e      	ldr	r3, [pc, #184]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_OscConfig+0x1d4>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e33e      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002208:	4b28      	ldr	r3, [pc, #160]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f023 0219 	bic.w	r2, r3, #25
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4925      	ldr	r1, [pc, #148]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7fe fe67 	bl	8000eec <HAL_GetTick>
 800221e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002222:	f7fe fe63 	bl	8000eec <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e328      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002240:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	061b      	lsls	r3, r3, #24
 800224e:	4917      	ldr	r1, [pc, #92]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002254:	e045      	b.n	80022e2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d028      	beq.n	80022b0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 0219 	bic.w	r2, r3, #25
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	4910      	ldr	r1, [pc, #64]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 800226c:	4313      	orrs	r3, r2
 800226e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe fe3c 	bl	8000eec <HAL_GetTick>
 8002274:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002278:	f7fe fe38 	bl	8000eec <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e2fd      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	061b      	lsls	r3, r3, #24
 80022a4:	4901      	ldr	r1, [pc, #4]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
 80022aa:	e01a      	b.n	80022e2 <HAL_RCC_OscConfig+0x2ae>
 80022ac:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b0:	4b97      	ldr	r3, [pc, #604]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a96      	ldr	r2, [pc, #600]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7fe fe16 	bl	8000eec <HAL_GetTick>
 80022c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c4:	f7fe fe12 	bl	8000eec <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e2d7      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022d6:	4b8e      	ldr	r3, [pc, #568]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d06a      	beq.n	80023c4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ee:	4b88      	ldr	r3, [pc, #544]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022f8:	4b85      	ldr	r3, [pc, #532]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	2b08      	cmp	r3, #8
 8002302:	d007      	beq.n	8002314 <HAL_RCC_OscConfig+0x2e0>
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2b18      	cmp	r3, #24
 8002308:	d11b      	bne.n	8002342 <HAL_RCC_OscConfig+0x30e>
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b01      	cmp	r3, #1
 8002312:	d116      	bne.n	8002342 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002314:	4b7e      	ldr	r3, [pc, #504]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_OscConfig+0x2f8>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	d001      	beq.n	800232c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e2ac      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800232c:	4b78      	ldr	r3, [pc, #480]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	061b      	lsls	r3, r3, #24
 800233a:	4975      	ldr	r1, [pc, #468]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 800233c:	4313      	orrs	r3, r2
 800233e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002340:	e040      	b.n	80023c4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d023      	beq.n	8002392 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800234a:	4b71      	ldr	r3, [pc, #452]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a70      	ldr	r2, [pc, #448]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 8002350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe fdc9 	bl	8000eec <HAL_GetTick>
 800235a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800235e:	f7fe fdc5 	bl	8000eec <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e28a      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002370:	4b67      	ldr	r3, [pc, #412]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800237c:	4b64      	ldr	r3, [pc, #400]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	061b      	lsls	r3, r3, #24
 800238a:	4961      	ldr	r1, [pc, #388]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 800238c:	4313      	orrs	r3, r2
 800238e:	60cb      	str	r3, [r1, #12]
 8002390:	e018      	b.n	80023c4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002392:	4b5f      	ldr	r3, [pc, #380]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a5e      	ldr	r2, [pc, #376]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 8002398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800239c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7fe fda5 	bl	8000eec <HAL_GetTick>
 80023a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80023a6:	f7fe fda1 	bl	8000eec <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e266      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023b8:	4b55      	ldr	r3, [pc, #340]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f0      	bne.n	80023a6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d036      	beq.n	800243e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d019      	beq.n	800240c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d8:	4b4d      	ldr	r3, [pc, #308]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 80023da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023dc:	4a4c      	ldr	r2, [pc, #304]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e4:	f7fe fd82 	bl	8000eec <HAL_GetTick>
 80023e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ec:	f7fe fd7e 	bl	8000eec <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e243      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023fe:	4b44      	ldr	r3, [pc, #272]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 8002400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0x3b8>
 800240a:	e018      	b.n	800243e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240c:	4b40      	ldr	r3, [pc, #256]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 800240e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002410:	4a3f      	ldr	r2, [pc, #252]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7fe fd68 	bl	8000eec <HAL_GetTick>
 800241c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002420:	f7fe fd64 	bl	8000eec <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e229      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002432:	4b37      	ldr	r3, [pc, #220]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 8002434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b00      	cmp	r3, #0
 8002448:	d036      	beq.n	80024b8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d019      	beq.n	8002486 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002452:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a2e      	ldr	r2, [pc, #184]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 8002458:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800245c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800245e:	f7fe fd45 	bl	8000eec <HAL_GetTick>
 8002462:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002466:	f7fe fd41 	bl	8000eec <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e206      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002478:	4b25      	ldr	r3, [pc, #148]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x432>
 8002484:	e018      	b.n	80024b8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002486:	4b22      	ldr	r3, [pc, #136]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a21      	ldr	r2, [pc, #132]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 800248c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002490:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002492:	f7fe fd2b 	bl	8000eec <HAL_GetTick>
 8002496:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800249a:	f7fe fd27 	bl	8000eec <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e1ec      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024ac:	4b18      	ldr	r3, [pc, #96]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f0      	bne.n	800249a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80af 	beq.w	8002624 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_RCC_OscConfig+0x4e0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <HAL_RCC_OscConfig+0x4e0>)
 80024cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024d2:	f7fe fd0b 	bl	8000eec <HAL_GetTick>
 80024d6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024da:	f7fe fd07 	bl	8000eec <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b64      	cmp	r3, #100	; 0x64
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e1cc      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_RCC_OscConfig+0x4e0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d10b      	bne.n	8002518 <HAL_RCC_OscConfig+0x4e4>
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	4a02      	ldr	r2, [pc, #8]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6713      	str	r3, [r2, #112]	; 0x70
 800250c:	e05b      	b.n	80025c6 <HAL_RCC_OscConfig+0x592>
 800250e:	bf00      	nop
 8002510:	58024400 	.word	0x58024400
 8002514:	58024800 	.word	0x58024800
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d112      	bne.n	8002546 <HAL_RCC_OscConfig+0x512>
 8002520:	4b9d      	ldr	r3, [pc, #628]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	4a9c      	ldr	r2, [pc, #624]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	6713      	str	r3, [r2, #112]	; 0x70
 800252c:	4b9a      	ldr	r3, [pc, #616]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	4a99      	ldr	r2, [pc, #612]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002536:	6713      	str	r3, [r2, #112]	; 0x70
 8002538:	4b97      	ldr	r3, [pc, #604]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253c:	4a96      	ldr	r2, [pc, #600]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800253e:	f023 0304 	bic.w	r3, r3, #4
 8002542:	6713      	str	r3, [r2, #112]	; 0x70
 8002544:	e03f      	b.n	80025c6 <HAL_RCC_OscConfig+0x592>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b05      	cmp	r3, #5
 800254c:	d112      	bne.n	8002574 <HAL_RCC_OscConfig+0x540>
 800254e:	4b92      	ldr	r3, [pc, #584]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	4a91      	ldr	r2, [pc, #580]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	6713      	str	r3, [r2, #112]	; 0x70
 800255a:	4b8f      	ldr	r3, [pc, #572]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	4a8e      	ldr	r2, [pc, #568]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002564:	6713      	str	r3, [r2, #112]	; 0x70
 8002566:	4b8c      	ldr	r3, [pc, #560]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	4a8b      	ldr	r2, [pc, #556]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6713      	str	r3, [r2, #112]	; 0x70
 8002572:	e028      	b.n	80025c6 <HAL_RCC_OscConfig+0x592>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b85      	cmp	r3, #133	; 0x85
 800257a:	d112      	bne.n	80025a2 <HAL_RCC_OscConfig+0x56e>
 800257c:	4b86      	ldr	r3, [pc, #536]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002580:	4a85      	ldr	r2, [pc, #532]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002582:	f043 0304 	orr.w	r3, r3, #4
 8002586:	6713      	str	r3, [r2, #112]	; 0x70
 8002588:	4b83      	ldr	r3, [pc, #524]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258c:	4a82      	ldr	r2, [pc, #520]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800258e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002592:	6713      	str	r3, [r2, #112]	; 0x70
 8002594:	4b80      	ldr	r3, [pc, #512]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002598:	4a7f      	ldr	r2, [pc, #508]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6713      	str	r3, [r2, #112]	; 0x70
 80025a0:	e011      	b.n	80025c6 <HAL_RCC_OscConfig+0x592>
 80025a2:	4b7d      	ldr	r3, [pc, #500]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	4a7c      	ldr	r2, [pc, #496]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6713      	str	r3, [r2, #112]	; 0x70
 80025ae:	4b7a      	ldr	r3, [pc, #488]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b2:	4a79      	ldr	r2, [pc, #484]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 80025b4:	f023 0304 	bic.w	r3, r3, #4
 80025b8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ba:	4b77      	ldr	r3, [pc, #476]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	4a76      	ldr	r2, [pc, #472]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 80025c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d015      	beq.n	80025fa <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ce:	f7fe fc8d 	bl	8000eec <HAL_GetTick>
 80025d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7fe fc89 	bl	8000eec <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e14c      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025ec:	4b6a      	ldr	r3, [pc, #424]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ee      	beq.n	80025d6 <HAL_RCC_OscConfig+0x5a2>
 80025f8:	e014      	b.n	8002624 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fa:	f7fe fc77 	bl	8000eec <HAL_GetTick>
 80025fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002600:	e00a      	b.n	8002618 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7fe fc73 	bl	8000eec <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e136      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002618:	4b5f      	ldr	r3, [pc, #380]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ee      	bne.n	8002602 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 812b 	beq.w	8002884 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800262e:	4b5a      	ldr	r3, [pc, #360]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002636:	2b18      	cmp	r3, #24
 8002638:	f000 80bb 	beq.w	80027b2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	2b02      	cmp	r3, #2
 8002642:	f040 8095 	bne.w	8002770 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002646:	4b54      	ldr	r3, [pc, #336]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a53      	ldr	r2, [pc, #332]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800264c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002652:	f7fe fc4b 	bl	8000eec <HAL_GetTick>
 8002656:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265a:	f7fe fc47 	bl	8000eec <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e10c      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800266c:	4b4a      	ldr	r3, [pc, #296]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f0      	bne.n	800265a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002678:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800267a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800267c:	4b47      	ldr	r3, [pc, #284]	; (800279c <HAL_RCC_OscConfig+0x768>)
 800267e:	4013      	ands	r3, r2
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002688:	0112      	lsls	r2, r2, #4
 800268a:	430a      	orrs	r2, r1
 800268c:	4942      	ldr	r1, [pc, #264]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800268e:	4313      	orrs	r3, r2
 8002690:	628b      	str	r3, [r1, #40]	; 0x28
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	3b01      	subs	r3, #1
 8002698:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a0:	3b01      	subs	r3, #1
 80026a2:	025b      	lsls	r3, r3, #9
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	3b01      	subs	r3, #1
 80026ae:	041b      	lsls	r3, r3, #16
 80026b0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ba:	3b01      	subs	r3, #1
 80026bc:	061b      	lsls	r3, r3, #24
 80026be:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80026c2:	4935      	ldr	r1, [pc, #212]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80026c8:	4b33      	ldr	r3, [pc, #204]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	4a32      	ldr	r2, [pc, #200]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80026d4:	4b30      	ldr	r3, [pc, #192]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 80026d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026d8:	4b31      	ldr	r3, [pc, #196]	; (80027a0 <HAL_RCC_OscConfig+0x76c>)
 80026da:	4013      	ands	r3, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026e0:	00d2      	lsls	r2, r2, #3
 80026e2:	492d      	ldr	r1, [pc, #180]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80026e8:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	f023 020c 	bic.w	r2, r3, #12
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	4928      	ldr	r1, [pc, #160]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80026fa:	4b27      	ldr	r3, [pc, #156]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	f023 0202 	bic.w	r2, r3, #2
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	4924      	ldr	r1, [pc, #144]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002708:	4313      	orrs	r3, r2
 800270a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800270c:	4b22      	ldr	r3, [pc, #136]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	4a21      	ldr	r2, [pc, #132]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002716:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002718:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800271e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002722:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002724:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	4a1b      	ldr	r2, [pc, #108]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800272a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800272e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	4a18      	ldr	r2, [pc, #96]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800273c:	4b16      	ldr	r3, [pc, #88]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a15      	ldr	r2, [pc, #84]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe fbd0 	bl	8000eec <HAL_GetTick>
 800274c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002750:	f7fe fbcc 	bl	8000eec <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e091      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x71c>
 800276e:	e089      	b.n	8002884 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a08      	ldr	r2, [pc, #32]	; (8002798 <HAL_RCC_OscConfig+0x764>)
 8002776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800277a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe fbb6 	bl	8000eec <HAL_GetTick>
 8002780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002782:	e00f      	b.n	80027a4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002784:	f7fe fbb2 	bl	8000eec <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d908      	bls.n	80027a4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e077      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
 8002796:	bf00      	nop
 8002798:	58024400 	.word	0x58024400
 800279c:	fffffc0c 	.word	0xfffffc0c
 80027a0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027a4:	4b3a      	ldr	r3, [pc, #232]	; (8002890 <HAL_RCC_OscConfig+0x85c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e9      	bne.n	8002784 <HAL_RCC_OscConfig+0x750>
 80027b0:	e068      	b.n	8002884 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80027b2:	4b37      	ldr	r3, [pc, #220]	; (8002890 <HAL_RCC_OscConfig+0x85c>)
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80027b8:	4b35      	ldr	r3, [pc, #212]	; (8002890 <HAL_RCC_OscConfig+0x85c>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d031      	beq.n	800282a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f003 0203 	and.w	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d12a      	bne.n	800282a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d122      	bne.n	800282a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d11a      	bne.n	800282a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	0a5b      	lsrs	r3, r3, #9
 80027f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002800:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d111      	bne.n	800282a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	0c1b      	lsrs	r3, r3, #16
 800280a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d108      	bne.n	800282a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	0e1b      	lsrs	r3, r3, #24
 800281c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002824:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e02b      	b.n	8002886 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800282e:	4b18      	ldr	r3, [pc, #96]	; (8002890 <HAL_RCC_OscConfig+0x85c>)
 8002830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002832:	08db      	lsrs	r3, r3, #3
 8002834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002838:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	429a      	cmp	r2, r3
 8002842:	d01f      	beq.n	8002884 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_RCC_OscConfig+0x85c>)
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	4a11      	ldr	r2, [pc, #68]	; (8002890 <HAL_RCC_OscConfig+0x85c>)
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002850:	f7fe fb4c 	bl	8000eec <HAL_GetTick>
 8002854:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002856:	bf00      	nop
 8002858:	f7fe fb48 	bl	8000eec <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	4293      	cmp	r3, r2
 8002862:	d0f9      	beq.n	8002858 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <HAL_RCC_OscConfig+0x85c>)
 8002866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <HAL_RCC_OscConfig+0x860>)
 800286a:	4013      	ands	r3, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002870:	00d2      	lsls	r2, r2, #3
 8002872:	4907      	ldr	r1, [pc, #28]	; (8002890 <HAL_RCC_OscConfig+0x85c>)
 8002874:	4313      	orrs	r3, r2
 8002876:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_OscConfig+0x85c>)
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	4a04      	ldr	r2, [pc, #16]	; (8002890 <HAL_RCC_OscConfig+0x85c>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3730      	adds	r7, #48	; 0x30
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	58024400 	.word	0x58024400
 8002894:	ffff0007 	.word	0xffff0007

08002898 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e19c      	b.n	8002be6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028ac:	4b8a      	ldr	r3, [pc, #552]	; (8002ad8 <HAL_RCC_ClockConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d910      	bls.n	80028dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b87      	ldr	r3, [pc, #540]	; (8002ad8 <HAL_RCC_ClockConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 020f 	bic.w	r2, r3, #15
 80028c2:	4985      	ldr	r1, [pc, #532]	; (8002ad8 <HAL_RCC_ClockConfig+0x240>)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b83      	ldr	r3, [pc, #524]	; (8002ad8 <HAL_RCC_ClockConfig+0x240>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e184      	b.n	8002be6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d010      	beq.n	800290a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	4b7b      	ldr	r3, [pc, #492]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d908      	bls.n	800290a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028f8:	4b78      	ldr	r3, [pc, #480]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	4975      	ldr	r1, [pc, #468]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 8002906:	4313      	orrs	r3, r2
 8002908:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d010      	beq.n	8002938 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	4b70      	ldr	r3, [pc, #448]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002922:	429a      	cmp	r2, r3
 8002924:	d908      	bls.n	8002938 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002926:	4b6d      	ldr	r3, [pc, #436]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	496a      	ldr	r1, [pc, #424]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 8002934:	4313      	orrs	r3, r2
 8002936:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	2b00      	cmp	r3, #0
 8002942:	d010      	beq.n	8002966 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699a      	ldr	r2, [r3, #24]
 8002948:	4b64      	ldr	r3, [pc, #400]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002950:	429a      	cmp	r2, r3
 8002952:	d908      	bls.n	8002966 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002954:	4b61      	ldr	r3, [pc, #388]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	495e      	ldr	r1, [pc, #376]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 8002962:	4313      	orrs	r3, r2
 8002964:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d010      	beq.n	8002994 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69da      	ldr	r2, [r3, #28]
 8002976:	4b59      	ldr	r3, [pc, #356]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800297e:	429a      	cmp	r2, r3
 8002980:	d908      	bls.n	8002994 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002982:	4b56      	ldr	r3, [pc, #344]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	4953      	ldr	r1, [pc, #332]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 8002990:	4313      	orrs	r3, r2
 8002992:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d010      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	4b4d      	ldr	r3, [pc, #308]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d908      	bls.n	80029c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b0:	4b4a      	ldr	r3, [pc, #296]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f023 020f 	bic.w	r2, r3, #15
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4947      	ldr	r1, [pc, #284]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d055      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80029ce:	4b43      	ldr	r3, [pc, #268]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	4940      	ldr	r1, [pc, #256]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d107      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029e8:	4b3c      	ldr	r3, [pc, #240]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d121      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0f6      	b.n	8002be6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d107      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a00:	4b36      	ldr	r3, [pc, #216]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d115      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0ea      	b.n	8002be6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a18:	4b30      	ldr	r3, [pc, #192]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d109      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0de      	b.n	8002be6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a28:	4b2c      	ldr	r3, [pc, #176]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0d6      	b.n	8002be6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a38:	4b28      	ldr	r3, [pc, #160]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	f023 0207 	bic.w	r2, r3, #7
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4925      	ldr	r1, [pc, #148]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a4a:	f7fe fa4f 	bl	8000eec <HAL_GetTick>
 8002a4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a52:	f7fe fa4b 	bl	8000eec <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e0be      	b.n	8002be6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a68:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d1eb      	bne.n	8002a52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d010      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d208      	bcs.n	8002aa8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a96:	4b11      	ldr	r3, [pc, #68]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	f023 020f 	bic.w	r2, r3, #15
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	490e      	ldr	r1, [pc, #56]	; (8002adc <HAL_RCC_ClockConfig+0x244>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_ClockConfig+0x240>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d214      	bcs.n	8002ae0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <HAL_RCC_ClockConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 020f 	bic.w	r2, r3, #15
 8002abe:	4906      	ldr	r1, [pc, #24]	; (8002ad8 <HAL_RCC_ClockConfig+0x240>)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <HAL_RCC_ClockConfig+0x240>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e086      	b.n	8002be6 <HAL_RCC_ClockConfig+0x34e>
 8002ad8:	52002000 	.word	0x52002000
 8002adc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d010      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	4b3f      	ldr	r3, [pc, #252]	; (8002bf0 <HAL_RCC_ClockConfig+0x358>)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d208      	bcs.n	8002b0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002afc:	4b3c      	ldr	r3, [pc, #240]	; (8002bf0 <HAL_RCC_ClockConfig+0x358>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	4939      	ldr	r1, [pc, #228]	; (8002bf0 <HAL_RCC_ClockConfig+0x358>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d010      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	4b34      	ldr	r3, [pc, #208]	; (8002bf0 <HAL_RCC_ClockConfig+0x358>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d208      	bcs.n	8002b3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b2a:	4b31      	ldr	r3, [pc, #196]	; (8002bf0 <HAL_RCC_ClockConfig+0x358>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	492e      	ldr	r1, [pc, #184]	; (8002bf0 <HAL_RCC_ClockConfig+0x358>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d010      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699a      	ldr	r2, [r3, #24]
 8002b4c:	4b28      	ldr	r3, [pc, #160]	; (8002bf0 <HAL_RCC_ClockConfig+0x358>)
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d208      	bcs.n	8002b6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b58:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <HAL_RCC_ClockConfig+0x358>)
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	4922      	ldr	r1, [pc, #136]	; (8002bf0 <HAL_RCC_ClockConfig+0x358>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d010      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <HAL_RCC_ClockConfig+0x358>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d208      	bcs.n	8002b98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b86:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <HAL_RCC_ClockConfig+0x358>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	4917      	ldr	r1, [pc, #92]	; (8002bf0 <HAL_RCC_ClockConfig+0x358>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002b98:	f000 f834 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <HAL_RCC_ClockConfig+0x358>)
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	0a1b      	lsrs	r3, r3, #8
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	4912      	ldr	r1, [pc, #72]	; (8002bf4 <HAL_RCC_ClockConfig+0x35c>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <HAL_RCC_ClockConfig+0x358>)
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	4a0d      	ldr	r2, [pc, #52]	; (8002bf4 <HAL_RCC_ClockConfig+0x35c>)
 8002bc0:	5cd3      	ldrb	r3, [r2, r3]
 8002bc2:	f003 031f 	and.w	r3, r3, #31
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bcc:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <HAL_RCC_ClockConfig+0x360>)
 8002bce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bd0:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <HAL_RCC_ClockConfig+0x364>)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_RCC_ClockConfig+0x368>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe f93c 	bl	8000e58 <HAL_InitTick>
 8002be0:	4603      	mov	r3, r0
 8002be2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	58024400 	.word	0x58024400
 8002bf4:	080097cc 	.word	0x080097cc
 8002bf8:	24000004 	.word	0x24000004
 8002bfc:	24000000 	.word	0x24000000
 8002c00:	24000008 	.word	0x24000008

08002c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	; 0x24
 8002c08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c0a:	4bb3      	ldr	r3, [pc, #716]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c12:	2b18      	cmp	r3, #24
 8002c14:	f200 8155 	bhi.w	8002ec2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002c18:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1e:	bf00      	nop
 8002c20:	08002c85 	.word	0x08002c85
 8002c24:	08002ec3 	.word	0x08002ec3
 8002c28:	08002ec3 	.word	0x08002ec3
 8002c2c:	08002ec3 	.word	0x08002ec3
 8002c30:	08002ec3 	.word	0x08002ec3
 8002c34:	08002ec3 	.word	0x08002ec3
 8002c38:	08002ec3 	.word	0x08002ec3
 8002c3c:	08002ec3 	.word	0x08002ec3
 8002c40:	08002cab 	.word	0x08002cab
 8002c44:	08002ec3 	.word	0x08002ec3
 8002c48:	08002ec3 	.word	0x08002ec3
 8002c4c:	08002ec3 	.word	0x08002ec3
 8002c50:	08002ec3 	.word	0x08002ec3
 8002c54:	08002ec3 	.word	0x08002ec3
 8002c58:	08002ec3 	.word	0x08002ec3
 8002c5c:	08002ec3 	.word	0x08002ec3
 8002c60:	08002cb1 	.word	0x08002cb1
 8002c64:	08002ec3 	.word	0x08002ec3
 8002c68:	08002ec3 	.word	0x08002ec3
 8002c6c:	08002ec3 	.word	0x08002ec3
 8002c70:	08002ec3 	.word	0x08002ec3
 8002c74:	08002ec3 	.word	0x08002ec3
 8002c78:	08002ec3 	.word	0x08002ec3
 8002c7c:	08002ec3 	.word	0x08002ec3
 8002c80:	08002cb7 	.word	0x08002cb7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c84:	4b94      	ldr	r3, [pc, #592]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d009      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c90:	4b91      	ldr	r3, [pc, #580]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	08db      	lsrs	r3, r3, #3
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	4a90      	ldr	r2, [pc, #576]	; (8002edc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002ca2:	e111      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ca4:	4b8d      	ldr	r3, [pc, #564]	; (8002edc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ca6:	61bb      	str	r3, [r7, #24]
      break;
 8002ca8:	e10e      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002caa:	4b8d      	ldr	r3, [pc, #564]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002cac:	61bb      	str	r3, [r7, #24]
      break;
 8002cae:	e10b      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002cb0:	4b8c      	ldr	r3, [pc, #560]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002cb2:	61bb      	str	r3, [r7, #24]
      break;
 8002cb4:	e108      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002cb6:	4b88      	ldr	r3, [pc, #544]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002cc0:	4b85      	ldr	r3, [pc, #532]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ccc:	4b82      	ldr	r3, [pc, #520]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002cd6:	4b80      	ldr	r3, [pc, #512]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cda:	08db      	lsrs	r3, r3, #3
 8002cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80e1 	beq.w	8002ebc <HAL_RCC_GetSysClockFreq+0x2b8>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	f000 8083 	beq.w	8002e08 <HAL_RCC_GetSysClockFreq+0x204>
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	f200 80a1 	bhi.w	8002e4c <HAL_RCC_GetSysClockFreq+0x248>
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x114>
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d056      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d16:	e099      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d18:	4b6f      	ldr	r3, [pc, #444]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d02d      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d24:	4b6c      	ldr	r3, [pc, #432]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	08db      	lsrs	r3, r3, #3
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	4a6b      	ldr	r2, [pc, #428]	; (8002edc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
 8002d34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	ee07 3a90 	vmov	s15, r3
 8002d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	ee07 3a90 	vmov	s15, r3
 8002d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d4e:	4b62      	ldr	r3, [pc, #392]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d56:	ee07 3a90 	vmov	s15, r3
 8002d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d62:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002d7e:	e087      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	ee07 3a90 	vmov	s15, r3
 8002d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002eec <HAL_RCC_GetSysClockFreq+0x2e8>
 8002d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d92:	4b51      	ldr	r3, [pc, #324]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d9a:	ee07 3a90 	vmov	s15, r3
 8002d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002da6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002dc2:	e065      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	ee07 3a90 	vmov	s15, r3
 8002dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dce:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002ef0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dd6:	4b40      	ldr	r3, [pc, #256]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dde:	ee07 3a90 	vmov	s15, r3
 8002de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e06:	e043      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	ee07 3a90 	vmov	s15, r3
 8002e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e12:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002ef4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e1a:	4b2f      	ldr	r3, [pc, #188]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e22:	ee07 3a90 	vmov	s15, r3
 8002e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e2e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e4a:	e021      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	ee07 3a90 	vmov	s15, r3
 8002e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e56:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002ef0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e66:	ee07 3a90 	vmov	s15, r3
 8002e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e72:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	0a5b      	lsrs	r3, r3, #9
 8002e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	ee07 3a90 	vmov	s15, r3
 8002ea4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ea8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eb4:	ee17 3a90 	vmov	r3, s15
 8002eb8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002eba:	e005      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61bb      	str	r3, [r7, #24]
      break;
 8002ec0:	e002      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002ec2:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ec4:	61bb      	str	r3, [r7, #24]
      break;
 8002ec6:	bf00      	nop
  }

  return sysclockfreq;
 8002ec8:	69bb      	ldr	r3, [r7, #24]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3724      	adds	r7, #36	; 0x24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	58024400 	.word	0x58024400
 8002edc:	03d09000 	.word	0x03d09000
 8002ee0:	003d0900 	.word	0x003d0900
 8002ee4:	007a1200 	.word	0x007a1200
 8002ee8:	46000000 	.word	0x46000000
 8002eec:	4c742400 	.word	0x4c742400
 8002ef0:	4a742400 	.word	0x4a742400
 8002ef4:	4af42400 	.word	0x4af42400

08002ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002efe:	f7ff fe81 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002f02:	4602      	mov	r2, r0
 8002f04:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	0a1b      	lsrs	r3, r3, #8
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	490f      	ldr	r1, [pc, #60]	; (8002f4c <HAL_RCC_GetHCLKFreq+0x54>)
 8002f10:	5ccb      	ldrb	r3, [r1, r3]
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <HAL_RCC_GetHCLKFreq+0x54>)
 8002f26:	5cd3      	ldrb	r3, [r2, r3]
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f32:	4a07      	ldr	r2, [pc, #28]	; (8002f50 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f36:	4a07      	ldr	r2, [pc, #28]	; (8002f54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	58024400 	.word	0x58024400
 8002f4c:	080097cc 	.word	0x080097cc
 8002f50:	24000004 	.word	0x24000004
 8002f54:	24000000 	.word	0x24000000

08002f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002f5c:	f7ff ffcc 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	4904      	ldr	r1, [pc, #16]	; (8002f80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f6e:	5ccb      	ldrb	r3, [r1, r3]
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	58024400 	.word	0x58024400
 8002f80:	080097cc 	.word	0x080097cc

08002f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002f88:	f7ff ffb6 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	4904      	ldr	r1, [pc, #16]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f9a:	5ccb      	ldrb	r3, [r1, r3]
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	58024400 	.word	0x58024400
 8002fac:	080097cc 	.word	0x080097cc

08002fb0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb4:	b0c8      	sub	sp, #288	; 0x120
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002fd4:	2500      	movs	r5, #0
 8002fd6:	ea54 0305 	orrs.w	r3, r4, r5
 8002fda:	d049      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fe2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fe6:	d02f      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002fe8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fec:	d828      	bhi.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002fee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ff2:	d01a      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ff8:	d822      	bhi.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003002:	d007      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003004:	e01c      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003006:	4ba7      	ldr	r3, [pc, #668]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	4aa6      	ldr	r2, [pc, #664]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800300c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003012:	e01a      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003014:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003018:	3308      	adds	r3, #8
 800301a:	2102      	movs	r1, #2
 800301c:	4618      	mov	r0, r3
 800301e:	f001 fc43 	bl	80048a8 <RCCEx_PLL2_Config>
 8003022:	4603      	mov	r3, r0
 8003024:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003028:	e00f      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800302a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800302e:	3328      	adds	r3, #40	; 0x28
 8003030:	2102      	movs	r1, #2
 8003032:	4618      	mov	r0, r3
 8003034:	f001 fcea 	bl	8004a0c <RCCEx_PLL3_Config>
 8003038:	4603      	mov	r3, r0
 800303a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800303e:	e004      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003046:	e000      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800304a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10a      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003052:	4b94      	ldr	r3, [pc, #592]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003056:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800305a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800305e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003060:	4a90      	ldr	r2, [pc, #576]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003062:	430b      	orrs	r3, r1
 8003064:	6513      	str	r3, [r2, #80]	; 0x50
 8003066:	e003      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003068:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800306c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003070:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800307c:	f04f 0900 	mov.w	r9, #0
 8003080:	ea58 0309 	orrs.w	r3, r8, r9
 8003084:	d047      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	2b04      	cmp	r3, #4
 800308e:	d82a      	bhi.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003090:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003096:	bf00      	nop
 8003098:	080030ad 	.word	0x080030ad
 800309c:	080030bb 	.word	0x080030bb
 80030a0:	080030d1 	.word	0x080030d1
 80030a4:	080030ef 	.word	0x080030ef
 80030a8:	080030ef 	.word	0x080030ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ac:	4b7d      	ldr	r3, [pc, #500]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	4a7c      	ldr	r2, [pc, #496]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030b8:	e01a      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030be:	3308      	adds	r3, #8
 80030c0:	2100      	movs	r1, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f001 fbf0 	bl	80048a8 <RCCEx_PLL2_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030ce:	e00f      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d4:	3328      	adds	r3, #40	; 0x28
 80030d6:	2100      	movs	r1, #0
 80030d8:	4618      	mov	r0, r3
 80030da:	f001 fc97 	bl	8004a0c <RCCEx_PLL3_Config>
 80030de:	4603      	mov	r3, r0
 80030e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030e4:	e004      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030ec:	e000      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80030ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10a      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030f8:	4b6a      	ldr	r3, [pc, #424]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030fc:	f023 0107 	bic.w	r1, r3, #7
 8003100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	4a67      	ldr	r2, [pc, #412]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003108:	430b      	orrs	r3, r1
 800310a:	6513      	str	r3, [r2, #80]	; 0x50
 800310c:	e003      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800310e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003112:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800311a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003122:	f04f 0b00 	mov.w	fp, #0
 8003126:	ea5a 030b 	orrs.w	r3, sl, fp
 800312a:	d054      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800312c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003132:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003136:	d036      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003138:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800313c:	d82f      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800313e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003142:	d032      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003148:	d829      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800314a:	2bc0      	cmp	r3, #192	; 0xc0
 800314c:	d02f      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800314e:	2bc0      	cmp	r3, #192	; 0xc0
 8003150:	d825      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003152:	2b80      	cmp	r3, #128	; 0x80
 8003154:	d018      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003156:	2b80      	cmp	r3, #128	; 0x80
 8003158:	d821      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800315e:	2b40      	cmp	r3, #64	; 0x40
 8003160:	d007      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003162:	e01c      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003164:	4b4f      	ldr	r3, [pc, #316]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	4a4e      	ldr	r2, [pc, #312]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800316a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800316e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003170:	e01e      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003176:	3308      	adds	r3, #8
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f001 fb94 	bl	80048a8 <RCCEx_PLL2_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003186:	e013      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800318c:	3328      	adds	r3, #40	; 0x28
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f001 fc3b 	bl	8004a0c <RCCEx_PLL3_Config>
 8003196:	4603      	mov	r3, r0
 8003198:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800319c:	e008      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031a4:	e004      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80031a6:	bf00      	nop
 80031a8:	e002      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80031aa:	bf00      	nop
 80031ac:	e000      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80031ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80031b8:	4b3a      	ldr	r3, [pc, #232]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031bc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80031c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c6:	4a37      	ldr	r2, [pc, #220]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031c8:	430b      	orrs	r3, r1
 80031ca:	6513      	str	r3, [r2, #80]	; 0x50
 80031cc:	e003      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80031d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80031e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80031e6:	2300      	movs	r3, #0
 80031e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80031ec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80031f0:	460b      	mov	r3, r1
 80031f2:	4313      	orrs	r3, r2
 80031f4:	d05c      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80031f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003200:	d03b      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003202:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003206:	d834      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800320c:	d037      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800320e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003212:	d82e      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003214:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003218:	d033      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800321a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800321e:	d828      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003224:	d01a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322a:	d822      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003234:	d007      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003236:	e01c      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003238:	4b1a      	ldr	r3, [pc, #104]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	4a19      	ldr	r2, [pc, #100]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800323e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003242:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003244:	e01e      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003246:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800324a:	3308      	adds	r3, #8
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f001 fb2a 	bl	80048a8 <RCCEx_PLL2_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800325a:	e013      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800325c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003260:	3328      	adds	r3, #40	; 0x28
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f001 fbd1 	bl	8004a0c <RCCEx_PLL3_Config>
 800326a:	4603      	mov	r3, r0
 800326c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003270:	e008      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003278:	e004      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800327a:	bf00      	nop
 800327c:	e002      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003284:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10d      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800328e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003290:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329a:	4a02      	ldr	r2, [pc, #8]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800329c:	430b      	orrs	r3, r1
 800329e:	6513      	str	r3, [r2, #80]	; 0x50
 80032a0:	e006      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80032a2:	bf00      	nop
 80032a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80032b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80032bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80032c0:	2300      	movs	r3, #0
 80032c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80032c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80032ca:	460b      	mov	r3, r1
 80032cc:	4313      	orrs	r3, r2
 80032ce:	d03a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80032d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d6:	2b30      	cmp	r3, #48	; 0x30
 80032d8:	d01f      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80032da:	2b30      	cmp	r3, #48	; 0x30
 80032dc:	d819      	bhi.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d00c      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	d815      	bhi.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d019      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80032ea:	2b10      	cmp	r3, #16
 80032ec:	d111      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ee:	4bae      	ldr	r3, [pc, #696]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	4aad      	ldr	r2, [pc, #692]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80032fa:	e011      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003300:	3308      	adds	r3, #8
 8003302:	2102      	movs	r1, #2
 8003304:	4618      	mov	r0, r3
 8003306:	f001 facf 	bl	80048a8 <RCCEx_PLL2_Config>
 800330a:	4603      	mov	r3, r0
 800330c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003310:	e006      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003318:	e002      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800331a:	bf00      	nop
 800331c:	e000      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800331e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003320:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003328:	4b9f      	ldr	r3, [pc, #636]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800332a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	4a9c      	ldr	r2, [pc, #624]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003338:	430b      	orrs	r3, r1
 800333a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800333c:	e003      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003342:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003352:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003356:	2300      	movs	r3, #0
 8003358:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800335c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003360:	460b      	mov	r3, r1
 8003362:	4313      	orrs	r3, r2
 8003364:	d051      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800336a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800336c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003370:	d035      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003376:	d82e      	bhi.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003378:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800337c:	d031      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800337e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003382:	d828      	bhi.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003388:	d01a      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800338a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338e:	d822      	bhi.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003398:	d007      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800339a:	e01c      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800339c:	4b82      	ldr	r3, [pc, #520]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	4a81      	ldr	r2, [pc, #516]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033a8:	e01c      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ae:	3308      	adds	r3, #8
 80033b0:	2100      	movs	r1, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f001 fa78 	bl	80048a8 <RCCEx_PLL2_Config>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033be:	e011      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033c4:	3328      	adds	r3, #40	; 0x28
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 fb1f 	bl	8004a0c <RCCEx_PLL3_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033d4:	e006      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033dc:	e002      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80033de:	bf00      	nop
 80033e0:	e000      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80033e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80033ec:	4b6e      	ldr	r3, [pc, #440]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80033f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033fa:	4a6b      	ldr	r2, [pc, #428]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033fc:	430b      	orrs	r3, r1
 80033fe:	6513      	str	r3, [r2, #80]	; 0x50
 8003400:	e003      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003402:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003406:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800340a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003412:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003416:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800341a:	2300      	movs	r3, #0
 800341c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003420:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003424:	460b      	mov	r3, r1
 8003426:	4313      	orrs	r3, r2
 8003428:	d053      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800342a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800342e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003434:	d033      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003436:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800343a:	d82c      	bhi.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800343c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003440:	d02f      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003442:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003446:	d826      	bhi.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003448:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800344c:	d02b      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800344e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003452:	d820      	bhi.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003458:	d012      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800345a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800345e:	d81a      	bhi.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d022      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003468:	d115      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800346a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800346e:	3308      	adds	r3, #8
 8003470:	2101      	movs	r1, #1
 8003472:	4618      	mov	r0, r3
 8003474:	f001 fa18 	bl	80048a8 <RCCEx_PLL2_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800347e:	e015      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003480:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003484:	3328      	adds	r3, #40	; 0x28
 8003486:	2101      	movs	r1, #1
 8003488:	4618      	mov	r0, r3
 800348a:	f001 fabf 	bl	8004a0c <RCCEx_PLL3_Config>
 800348e:	4603      	mov	r3, r0
 8003490:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003494:	e00a      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800349c:	e006      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800349e:	bf00      	nop
 80034a0:	e004      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80034a2:	bf00      	nop
 80034a4:	e002      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80034a6:	bf00      	nop
 80034a8:	e000      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80034aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10a      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80034b4:	4b3c      	ldr	r3, [pc, #240]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80034bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c2:	4a39      	ldr	r2, [pc, #228]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6513      	str	r3, [r2, #80]	; 0x50
 80034c8:	e003      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80034d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034da:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80034de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034e2:	2300      	movs	r3, #0
 80034e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034e8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4313      	orrs	r3, r2
 80034f0:	d060      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80034f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034fa:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80034fe:	d039      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003500:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003504:	d832      	bhi.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003506:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800350a:	d035      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800350c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003510:	d82c      	bhi.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003516:	d031      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351c:	d826      	bhi.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800351e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003522:	d02d      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003524:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003528:	d820      	bhi.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800352a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800352e:	d012      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003534:	d81a      	bhi.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d024      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800353a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800353e:	d115      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003544:	3308      	adds	r3, #8
 8003546:	2101      	movs	r1, #1
 8003548:	4618      	mov	r0, r3
 800354a:	f001 f9ad 	bl	80048a8 <RCCEx_PLL2_Config>
 800354e:	4603      	mov	r3, r0
 8003550:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003554:	e017      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800355a:	3328      	adds	r3, #40	; 0x28
 800355c:	2101      	movs	r1, #1
 800355e:	4618      	mov	r0, r3
 8003560:	f001 fa54 	bl	8004a0c <RCCEx_PLL3_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800356a:	e00c      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003572:	e008      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003574:	bf00      	nop
 8003576:	e006      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003578:	bf00      	nop
 800357a:	e004      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800357c:	bf00      	nop
 800357e:	e002      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003580:	bf00      	nop
 8003582:	e000      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003586:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10e      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003592:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800359a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800359e:	4a02      	ldr	r2, [pc, #8]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035a0:	430b      	orrs	r3, r1
 80035a2:	6593      	str	r3, [r2, #88]	; 0x58
 80035a4:	e006      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80035a6:	bf00      	nop
 80035a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035bc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80035c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035c4:	2300      	movs	r3, #0
 80035c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80035ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035ce:	460b      	mov	r3, r1
 80035d0:	4313      	orrs	r3, r2
 80035d2:	d037      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80035d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035de:	d00e      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80035e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035e4:	d816      	bhi.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d018      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80035ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ee:	d111      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f0:	4bc4      	ldr	r3, [pc, #784]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	4ac3      	ldr	r2, [pc, #780]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80035fc:	e00f      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003602:	3308      	adds	r3, #8
 8003604:	2101      	movs	r1, #1
 8003606:	4618      	mov	r0, r3
 8003608:	f001 f94e 	bl	80048a8 <RCCEx_PLL2_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003612:	e004      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800361a:	e000      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800361c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800361e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10a      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003626:	4bb7      	ldr	r3, [pc, #732]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800362e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003634:	4ab3      	ldr	r2, [pc, #716]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003636:	430b      	orrs	r3, r1
 8003638:	6513      	str	r3, [r2, #80]	; 0x50
 800363a:	e003      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003640:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003650:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003654:	2300      	movs	r3, #0
 8003656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800365a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800365e:	460b      	mov	r3, r1
 8003660:	4313      	orrs	r3, r2
 8003662:	d039      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366a:	2b03      	cmp	r3, #3
 800366c:	d81c      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800366e:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003674:	080036b1 	.word	0x080036b1
 8003678:	08003685 	.word	0x08003685
 800367c:	08003693 	.word	0x08003693
 8003680:	080036b1 	.word	0x080036b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003684:	4b9f      	ldr	r3, [pc, #636]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	4a9e      	ldr	r2, [pc, #632]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800368a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800368e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003690:	e00f      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003692:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003696:	3308      	adds	r3, #8
 8003698:	2102      	movs	r1, #2
 800369a:	4618      	mov	r0, r3
 800369c:	f001 f904 	bl	80048a8 <RCCEx_PLL2_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80036a6:	e004      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036ae:	e000      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80036b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10a      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80036ba:	4b92      	ldr	r3, [pc, #584]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036be:	f023 0103 	bic.w	r1, r3, #3
 80036c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c8:	4a8e      	ldr	r2, [pc, #568]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036ca:	430b      	orrs	r3, r1
 80036cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036ce:	e003      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80036e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80036f2:	460b      	mov	r3, r1
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f000 8099 	beq.w	800382c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036fa:	4b83      	ldr	r3, [pc, #524]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a82      	ldr	r2, [pc, #520]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003704:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003706:	f7fd fbf1 	bl	8000eec <HAL_GetTick>
 800370a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800370e:	e00b      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003710:	f7fd fbec 	bl	8000eec <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b64      	cmp	r3, #100	; 0x64
 800371e:	d903      	bls.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003726:	e005      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003728:	4b77      	ldr	r3, [pc, #476]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0ed      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003734:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003738:	2b00      	cmp	r3, #0
 800373a:	d173      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800373c:	4b71      	ldr	r3, [pc, #452]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800373e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003744:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003748:	4053      	eors	r3, r2
 800374a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374e:	2b00      	cmp	r3, #0
 8003750:	d015      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003752:	4b6c      	ldr	r3, [pc, #432]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800375e:	4b69      	ldr	r3, [pc, #420]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003762:	4a68      	ldr	r2, [pc, #416]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003768:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800376a:	4b66      	ldr	r3, [pc, #408]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376e:	4a65      	ldr	r2, [pc, #404]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003774:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003776:	4a63      	ldr	r2, [pc, #396]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800377c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800377e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003782:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800378a:	d118      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7fd fbae 	bl	8000eec <HAL_GetTick>
 8003790:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003794:	e00d      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003796:	f7fd fba9 	bl	8000eec <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80037a0:	1ad2      	subs	r2, r2, r3
 80037a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d903      	bls.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80037b0:	e005      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037b2:	4b54      	ldr	r3, [pc, #336]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0eb      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80037be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d129      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037d6:	d10e      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80037d8:	4b4a      	ldr	r3, [pc, #296]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80037e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037e8:	091a      	lsrs	r2, r3, #4
 80037ea:	4b48      	ldr	r3, [pc, #288]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	4a45      	ldr	r2, [pc, #276]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037f0:	430b      	orrs	r3, r1
 80037f2:	6113      	str	r3, [r2, #16]
 80037f4:	e005      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80037f6:	4b43      	ldr	r3, [pc, #268]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	4a42      	ldr	r2, [pc, #264]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003800:	6113      	str	r3, [r2, #16]
 8003802:	4b40      	ldr	r3, [pc, #256]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003804:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800380a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800380e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003812:	4a3c      	ldr	r2, [pc, #240]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003814:	430b      	orrs	r3, r1
 8003816:	6713      	str	r3, [r2, #112]	; 0x70
 8003818:	e008      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800381a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800381e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003822:	e003      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003824:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003828:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800382c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	f002 0301 	and.w	r3, r2, #1
 8003838:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800383c:	2300      	movs	r3, #0
 800383e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003842:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003846:	460b      	mov	r3, r1
 8003848:	4313      	orrs	r3, r2
 800384a:	f000 8090 	beq.w	800396e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800384e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003856:	2b28      	cmp	r3, #40	; 0x28
 8003858:	d870      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800385a:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800385c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003860:	08003945 	.word	0x08003945
 8003864:	0800393d 	.word	0x0800393d
 8003868:	0800393d 	.word	0x0800393d
 800386c:	0800393d 	.word	0x0800393d
 8003870:	0800393d 	.word	0x0800393d
 8003874:	0800393d 	.word	0x0800393d
 8003878:	0800393d 	.word	0x0800393d
 800387c:	0800393d 	.word	0x0800393d
 8003880:	08003911 	.word	0x08003911
 8003884:	0800393d 	.word	0x0800393d
 8003888:	0800393d 	.word	0x0800393d
 800388c:	0800393d 	.word	0x0800393d
 8003890:	0800393d 	.word	0x0800393d
 8003894:	0800393d 	.word	0x0800393d
 8003898:	0800393d 	.word	0x0800393d
 800389c:	0800393d 	.word	0x0800393d
 80038a0:	08003927 	.word	0x08003927
 80038a4:	0800393d 	.word	0x0800393d
 80038a8:	0800393d 	.word	0x0800393d
 80038ac:	0800393d 	.word	0x0800393d
 80038b0:	0800393d 	.word	0x0800393d
 80038b4:	0800393d 	.word	0x0800393d
 80038b8:	0800393d 	.word	0x0800393d
 80038bc:	0800393d 	.word	0x0800393d
 80038c0:	08003945 	.word	0x08003945
 80038c4:	0800393d 	.word	0x0800393d
 80038c8:	0800393d 	.word	0x0800393d
 80038cc:	0800393d 	.word	0x0800393d
 80038d0:	0800393d 	.word	0x0800393d
 80038d4:	0800393d 	.word	0x0800393d
 80038d8:	0800393d 	.word	0x0800393d
 80038dc:	0800393d 	.word	0x0800393d
 80038e0:	08003945 	.word	0x08003945
 80038e4:	0800393d 	.word	0x0800393d
 80038e8:	0800393d 	.word	0x0800393d
 80038ec:	0800393d 	.word	0x0800393d
 80038f0:	0800393d 	.word	0x0800393d
 80038f4:	0800393d 	.word	0x0800393d
 80038f8:	0800393d 	.word	0x0800393d
 80038fc:	0800393d 	.word	0x0800393d
 8003900:	08003945 	.word	0x08003945
 8003904:	58024400 	.word	0x58024400
 8003908:	58024800 	.word	0x58024800
 800390c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003914:	3308      	adds	r3, #8
 8003916:	2101      	movs	r1, #1
 8003918:	4618      	mov	r0, r3
 800391a:	f000 ffc5 	bl	80048a8 <RCCEx_PLL2_Config>
 800391e:	4603      	mov	r3, r0
 8003920:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003924:	e00f      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800392a:	3328      	adds	r3, #40	; 0x28
 800392c:	2101      	movs	r1, #1
 800392e:	4618      	mov	r0, r3
 8003930:	f001 f86c 	bl	8004a0c <RCCEx_PLL3_Config>
 8003934:	4603      	mov	r3, r0
 8003936:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800393a:	e004      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003942:	e000      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003946:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800394e:	4bc0      	ldr	r3, [pc, #768]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003952:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003956:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800395a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800395e:	4abc      	ldr	r2, [pc, #752]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003960:	430b      	orrs	r3, r1
 8003962:	6553      	str	r3, [r2, #84]	; 0x54
 8003964:	e003      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003966:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800396a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800396e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003976:	f002 0302 	and.w	r3, r2, #2
 800397a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800397e:	2300      	movs	r3, #0
 8003980:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003984:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003988:	460b      	mov	r3, r1
 800398a:	4313      	orrs	r3, r2
 800398c:	d043      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800398e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003996:	2b05      	cmp	r3, #5
 8003998:	d824      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800399a:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800399c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a0:	080039ed 	.word	0x080039ed
 80039a4:	080039b9 	.word	0x080039b9
 80039a8:	080039cf 	.word	0x080039cf
 80039ac:	080039ed 	.word	0x080039ed
 80039b0:	080039ed 	.word	0x080039ed
 80039b4:	080039ed 	.word	0x080039ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039bc:	3308      	adds	r3, #8
 80039be:	2101      	movs	r1, #1
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 ff71 	bl	80048a8 <RCCEx_PLL2_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80039cc:	e00f      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039d2:	3328      	adds	r3, #40	; 0x28
 80039d4:	2101      	movs	r1, #1
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 f818 	bl	8004a0c <RCCEx_PLL3_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80039e2:	e004      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80039ea:	e000      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80039ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10b      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80039f6:	4b96      	ldr	r3, [pc, #600]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	f023 0107 	bic.w	r1, r3, #7
 80039fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a06:	4a92      	ldr	r2, [pc, #584]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	6553      	str	r3, [r2, #84]	; 0x54
 8003a0c:	e003      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a12:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f002 0304 	and.w	r3, r2, #4
 8003a22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a26:	2300      	movs	r3, #0
 8003a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a2c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4313      	orrs	r3, r2
 8003a34:	d043      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a3e:	2b05      	cmp	r3, #5
 8003a40:	d824      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003a42:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a48:	08003a95 	.word	0x08003a95
 8003a4c:	08003a61 	.word	0x08003a61
 8003a50:	08003a77 	.word	0x08003a77
 8003a54:	08003a95 	.word	0x08003a95
 8003a58:	08003a95 	.word	0x08003a95
 8003a5c:	08003a95 	.word	0x08003a95
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a64:	3308      	adds	r3, #8
 8003a66:	2101      	movs	r1, #1
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 ff1d 	bl	80048a8 <RCCEx_PLL2_Config>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a74:	e00f      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a7a:	3328      	adds	r3, #40	; 0x28
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 ffc4 	bl	8004a0c <RCCEx_PLL3_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a8a:	e004      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10b      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a9e:	4b6c      	ldr	r3, [pc, #432]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	f023 0107 	bic.w	r1, r3, #7
 8003aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aae:	4a68      	ldr	r2, [pc, #416]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ab4:	e003      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003aba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac6:	f002 0320 	and.w	r3, r2, #32
 8003aca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ad4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4313      	orrs	r3, r2
 8003adc:	d055      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aea:	d033      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003af0:	d82c      	bhi.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af6:	d02f      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afc:	d826      	bhi.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003afe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b02:	d02b      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003b04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b08:	d820      	bhi.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b0e:	d012      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b14:	d81a      	bhi.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d022      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003b1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b1e:	d115      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b24:	3308      	adds	r3, #8
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 febd 	bl	80048a8 <RCCEx_PLL2_Config>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b34:	e015      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b3a:	3328      	adds	r3, #40	; 0x28
 8003b3c:	2102      	movs	r1, #2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 ff64 	bl	8004a0c <RCCEx_PLL3_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b4a:	e00a      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b52:	e006      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003b54:	bf00      	nop
 8003b56:	e004      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003b58:	bf00      	nop
 8003b5a:	e002      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003b5c:	bf00      	nop
 8003b5e:	e000      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10b      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b6a:	4b39      	ldr	r3, [pc, #228]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b7a:	4a35      	ldr	r2, [pc, #212]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6553      	str	r3, [r2, #84]	; 0x54
 8003b80:	e003      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b86:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ba0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	d058      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bb2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003bb6:	d033      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003bb8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003bbc:	d82c      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc2:	d02f      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc8:	d826      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003bca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bce:	d02b      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003bd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bd4:	d820      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bda:	d012      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be0:	d81a      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d022      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bea:	d115      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fe57 	bl	80048a8 <RCCEx_PLL2_Config>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c00:	e015      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c06:	3328      	adds	r3, #40	; 0x28
 8003c08:	2102      	movs	r1, #2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fefe 	bl	8004a0c <RCCEx_PLL3_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c16:	e00a      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c1e:	e006      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003c20:	bf00      	nop
 8003c22:	e004      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003c24:	bf00      	nop
 8003c26:	e002      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003c28:	bf00      	nop
 8003c2a:	e000      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10e      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c46:	4a02      	ldr	r2, [pc, #8]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c4c:	e006      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003c4e:	bf00      	nop
 8003c50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003c68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c72:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003c76:	460b      	mov	r3, r1
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	d055      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c84:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c88:	d033      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003c8a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c8e:	d82c      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c94:	d02f      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c9a:	d826      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003c9c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ca0:	d02b      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003ca2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ca6:	d820      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cac:	d012      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003cae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cb2:	d81a      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d022      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cbc:	d115      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fdee 	bl	80048a8 <RCCEx_PLL2_Config>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003cd2:	e015      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cd8:	3328      	adds	r3, #40	; 0x28
 8003cda:	2102      	movs	r1, #2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fe95 	bl	8004a0c <RCCEx_PLL3_Config>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cf0:	e006      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003cf2:	bf00      	nop
 8003cf4:	e004      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003cf6:	bf00      	nop
 8003cf8:	e002      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003cfa:	bf00      	nop
 8003cfc:	e000      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10b      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d08:	4ba1      	ldr	r3, [pc, #644]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d18:	4a9d      	ldr	r2, [pc, #628]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d1a:	430b      	orrs	r3, r1
 8003d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d1e:	e003      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d24:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	f002 0308 	and.w	r3, r2, #8
 8003d34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d3e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003d42:	460b      	mov	r3, r1
 8003d44:	4313      	orrs	r3, r2
 8003d46:	d01e      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d54:	d10c      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d5a:	3328      	adds	r3, #40	; 0x28
 8003d5c:	2102      	movs	r1, #2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fe54 	bl	8004a0c <RCCEx_PLL3_Config>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003d70:	4b87      	ldr	r3, [pc, #540]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d80:	4a83      	ldr	r2, [pc, #524]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d82:	430b      	orrs	r3, r1
 8003d84:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8e:	f002 0310 	and.w	r3, r2, #16
 8003d92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d96:	2300      	movs	r3, #0
 8003d98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003d9c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003da0:	460b      	mov	r3, r1
 8003da2:	4313      	orrs	r3, r2
 8003da4:	d01e      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003daa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db2:	d10c      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003db8:	3328      	adds	r3, #40	; 0x28
 8003dba:	2102      	movs	r1, #2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fe25 	bl	8004a0c <RCCEx_PLL3_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dce:	4b70      	ldr	r3, [pc, #448]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dde:	4a6c      	ldr	r2, [pc, #432]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003de0:	430b      	orrs	r3, r1
 8003de2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003df0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003df4:	2300      	movs	r3, #0
 8003df6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003dfa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4313      	orrs	r3, r2
 8003e02:	d03e      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e10:	d022      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003e12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e16:	d81b      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e20:	d00b      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003e22:	e015      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e28:	3308      	adds	r3, #8
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fd3b 	bl	80048a8 <RCCEx_PLL2_Config>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e38:	e00f      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e3e:	3328      	adds	r3, #40	; 0x28
 8003e40:	2102      	movs	r1, #2
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fde2 	bl	8004a0c <RCCEx_PLL3_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e4e:	e004      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e56:	e000      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10b      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e62:	4b4b      	ldr	r3, [pc, #300]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e66:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e72:	4a47      	ldr	r2, [pc, #284]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e74:	430b      	orrs	r3, r1
 8003e76:	6593      	str	r3, [r2, #88]	; 0x58
 8003e78:	e003      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003e8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e90:	2300      	movs	r3, #0
 8003e92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e94:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	d03b      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003eaa:	d01f      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003eac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003eb0:	d818      	bhi.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb6:	d003      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003eb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ebc:	d007      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003ebe:	e011      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec0:	4b33      	ldr	r3, [pc, #204]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	4a32      	ldr	r2, [pc, #200]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ecc:	e00f      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed2:	3328      	adds	r3, #40	; 0x28
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fd98 	bl	8004a0c <RCCEx_PLL3_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ee2:	e004      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003eea:	e000      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10b      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ef6:	4b26      	ldr	r3, [pc, #152]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f06:	4a22      	ldr	r2, [pc, #136]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	6553      	str	r3, [r2, #84]	; 0x54
 8003f0c:	e003      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f12:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003f22:	673b      	str	r3, [r7, #112]	; 0x70
 8003f24:	2300      	movs	r3, #0
 8003f26:	677b      	str	r3, [r7, #116]	; 0x74
 8003f28:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	d034      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f40:	d007      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003f42:	e011      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f44:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	4a11      	ldr	r2, [pc, #68]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f50:	e00e      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f56:	3308      	adds	r3, #8
 8003f58:	2102      	movs	r1, #2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fca4 	bl	80048a8 <RCCEx_PLL2_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f66:	e003      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10d      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f86:	4a02      	ldr	r2, [pc, #8]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f8c:	e006      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003f8e:	bf00      	nop
 8003f90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003fa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003faa:	2300      	movs	r3, #0
 8003fac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	d00c      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fbc:	3328      	adds	r3, #40	; 0x28
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fd23 	bl	8004a0c <RCCEx_PLL3_Config>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fda:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003fde:	663b      	str	r3, [r7, #96]	; 0x60
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	667b      	str	r3, [r7, #100]	; 0x64
 8003fe4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4313      	orrs	r3, r2
 8003fec:	d038      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ffa:	d018      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003ffc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004000:	d811      	bhi.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004006:	d014      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800400c:	d80b      	bhi.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800400e:	2b00      	cmp	r3, #0
 8004010:	d011      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004016:	d106      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004018:	4bc3      	ldr	r3, [pc, #780]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	4ac2      	ldr	r2, [pc, #776]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800401e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004022:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004024:	e008      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800402c:	e004      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800402e:	bf00      	nop
 8004030:	e002      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004032:	bf00      	nop
 8004034:	e000      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004038:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004040:	4bb9      	ldr	r3, [pc, #740]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004044:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	4ab5      	ldr	r2, [pc, #724]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004052:	430b      	orrs	r3, r1
 8004054:	6553      	str	r3, [r2, #84]	; 0x54
 8004056:	e003      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004058:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800405c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004068:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800406c:	65bb      	str	r3, [r7, #88]	; 0x58
 800406e:	2300      	movs	r3, #0
 8004070:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004072:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004076:	460b      	mov	r3, r1
 8004078:	4313      	orrs	r3, r2
 800407a:	d009      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800407c:	4baa      	ldr	r3, [pc, #680]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800407e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004080:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004084:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800408a:	4aa7      	ldr	r2, [pc, #668]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800408c:	430b      	orrs	r3, r1
 800408e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004090:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800409c:	653b      	str	r3, [r7, #80]	; 0x50
 800409e:	2300      	movs	r3, #0
 80040a0:	657b      	str	r3, [r7, #84]	; 0x54
 80040a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80040a6:	460b      	mov	r3, r1
 80040a8:	4313      	orrs	r3, r2
 80040aa:	d009      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040ac:	4b9e      	ldr	r3, [pc, #632]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80040b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4a9b      	ldr	r2, [pc, #620]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040bc:	430b      	orrs	r3, r1
 80040be:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80040c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80040cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ce:	2300      	movs	r3, #0
 80040d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80040d6:	460b      	mov	r3, r1
 80040d8:	4313      	orrs	r3, r2
 80040da:	d009      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80040dc:	4b92      	ldr	r3, [pc, #584]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e0:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80040e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ea:	4a8f      	ldr	r2, [pc, #572]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040ec:	430b      	orrs	r3, r1
 80040ee:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80040f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80040fc:	643b      	str	r3, [r7, #64]	; 0x40
 80040fe:	2300      	movs	r3, #0
 8004100:	647b      	str	r3, [r7, #68]	; 0x44
 8004102:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004106:	460b      	mov	r3, r1
 8004108:	4313      	orrs	r3, r2
 800410a:	d00e      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800410c:	4b86      	ldr	r3, [pc, #536]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	4a85      	ldr	r2, [pc, #532]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004112:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004116:	6113      	str	r3, [r2, #16]
 8004118:	4b83      	ldr	r3, [pc, #524]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800411a:	6919      	ldr	r1, [r3, #16]
 800411c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004120:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004124:	4a80      	ldr	r2, [pc, #512]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004126:	430b      	orrs	r3, r1
 8004128:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800412a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004136:	63bb      	str	r3, [r7, #56]	; 0x38
 8004138:	2300      	movs	r3, #0
 800413a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800413c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004140:	460b      	mov	r3, r1
 8004142:	4313      	orrs	r3, r2
 8004144:	d009      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004146:	4b78      	ldr	r3, [pc, #480]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800414e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004154:	4a74      	ldr	r2, [pc, #464]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004156:	430b      	orrs	r3, r1
 8004158:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800415a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004166:	633b      	str	r3, [r7, #48]	; 0x30
 8004168:	2300      	movs	r3, #0
 800416a:	637b      	str	r3, [r7, #52]	; 0x34
 800416c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004170:	460b      	mov	r3, r1
 8004172:	4313      	orrs	r3, r2
 8004174:	d00a      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004176:	4b6c      	ldr	r3, [pc, #432]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800417e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004186:	4a68      	ldr	r2, [pc, #416]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004188:	430b      	orrs	r3, r1
 800418a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800418c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	2100      	movs	r1, #0
 8004196:	62b9      	str	r1, [r7, #40]	; 0x28
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800419e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80041a2:	460b      	mov	r3, r1
 80041a4:	4313      	orrs	r3, r2
 80041a6:	d011      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ac:	3308      	adds	r3, #8
 80041ae:	2100      	movs	r1, #0
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fb79 	bl	80048a8 <RCCEx_PLL2_Config>
 80041b6:	4603      	mov	r3, r0
 80041b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80041bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80041cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d4:	2100      	movs	r1, #0
 80041d6:	6239      	str	r1, [r7, #32]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
 80041de:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80041e2:	460b      	mov	r3, r1
 80041e4:	4313      	orrs	r3, r2
 80041e6:	d011      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ec:	3308      	adds	r3, #8
 80041ee:	2101      	movs	r1, #1
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fb59 	bl	80048a8 <RCCEx_PLL2_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80041fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004204:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004208:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800420c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004214:	2100      	movs	r1, #0
 8004216:	61b9      	str	r1, [r7, #24]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004222:	460b      	mov	r3, r1
 8004224:	4313      	orrs	r3, r2
 8004226:	d011      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800422c:	3308      	adds	r3, #8
 800422e:	2102      	movs	r1, #2
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fb39 	bl	80048a8 <RCCEx_PLL2_Config>
 8004236:	4603      	mov	r3, r0
 8004238:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800423c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004244:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004248:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800424c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004254:	2100      	movs	r1, #0
 8004256:	6139      	str	r1, [r7, #16]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004262:	460b      	mov	r3, r1
 8004264:	4313      	orrs	r3, r2
 8004266:	d011      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800426c:	3328      	adds	r3, #40	; 0x28
 800426e:	2100      	movs	r1, #0
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fbcb 	bl	8004a0c <RCCEx_PLL3_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800427c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004284:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004288:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800428c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004294:	2100      	movs	r1, #0
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	f003 0310 	and.w	r3, r3, #16
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80042a2:	460b      	mov	r3, r1
 80042a4:	4313      	orrs	r3, r2
 80042a6:	d011      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ac:	3328      	adds	r3, #40	; 0x28
 80042ae:	2101      	movs	r1, #1
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fbab 	bl	8004a0c <RCCEx_PLL3_Config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80042bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80042cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d4:	2100      	movs	r1, #0
 80042d6:	6039      	str	r1, [r7, #0]
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	607b      	str	r3, [r7, #4]
 80042de:	e9d7 1200 	ldrd	r1, r2, [r7]
 80042e2:	460b      	mov	r3, r1
 80042e4:	4313      	orrs	r3, r2
 80042e6:	d011      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ec:	3328      	adds	r3, #40	; 0x28
 80042ee:	2102      	movs	r1, #2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fb8b 	bl	8004a0c <RCCEx_PLL3_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80042fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004304:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004308:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800430c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	e000      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
}
 800431a:	4618      	mov	r0, r3
 800431c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004320:	46bd      	mov	sp, r7
 8004322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004326:	bf00      	nop
 8004328:	58024400 	.word	0x58024400

0800432c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004330:	f7fe fde2 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b06      	ldr	r3, [pc, #24]	; (8004350 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	4904      	ldr	r1, [pc, #16]	; (8004354 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800434c:	4618      	mov	r0, r3
 800434e:	bd80      	pop	{r7, pc}
 8004350:	58024400 	.word	0x58024400
 8004354:	080097cc 	.word	0x080097cc

08004358 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004358:	b480      	push	{r7}
 800435a:	b089      	sub	sp, #36	; 0x24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004360:	4ba1      	ldr	r3, [pc, #644]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	f003 0303 	and.w	r3, r3, #3
 8004368:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800436a:	4b9f      	ldr	r3, [pc, #636]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	0b1b      	lsrs	r3, r3, #12
 8004370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004374:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004376:	4b9c      	ldr	r3, [pc, #624]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004382:	4b99      	ldr	r3, [pc, #612]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004386:	08db      	lsrs	r3, r3, #3
 8004388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 8111 	beq.w	80045c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	f000 8083 	beq.w	80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	f200 80a1 	bhi.w	80044f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d056      	beq.n	8004470 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80043c2:	e099      	b.n	80044f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043c4:	4b88      	ldr	r3, [pc, #544]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d02d      	beq.n	800442c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043d0:	4b85      	ldr	r3, [pc, #532]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	08db      	lsrs	r3, r3, #3
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	4a84      	ldr	r2, [pc, #528]	; (80045ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
 80043e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	ee07 3a90 	vmov	s15, r3
 80043e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fa:	4b7b      	ldr	r3, [pc, #492]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800440a:	ed97 6a03 	vldr	s12, [r7, #12]
 800440e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800441a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800441e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004426:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800442a:	e087      	b.n	800453c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004436:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800443a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800443e:	4b6a      	ldr	r3, [pc, #424]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800444e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004452:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800445a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800445e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800446e:	e065      	b.n	800453c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	ee07 3a90 	vmov	s15, r3
 8004476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800447e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004482:	4b59      	ldr	r3, [pc, #356]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800448a:	ee07 3a90 	vmov	s15, r3
 800448e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004492:	ed97 6a03 	vldr	s12, [r7, #12]
 8004496:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800449a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800449e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044b2:	e043      	b.n	800453c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80044c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044c6:	4b48      	ldr	r3, [pc, #288]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ce:	ee07 3a90 	vmov	s15, r3
 80044d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044f6:	e021      	b.n	800453c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	ee07 3a90 	vmov	s15, r3
 80044fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004502:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800450a:	4b37      	ldr	r3, [pc, #220]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800451a:	ed97 6a03 	vldr	s12, [r7, #12]
 800451e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800452a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800452e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800453a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800453c:	4b2a      	ldr	r3, [pc, #168]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	0a5b      	lsrs	r3, r3, #9
 8004542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004552:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004556:	edd7 6a07 	vldr	s13, [r7, #28]
 800455a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800455e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004562:	ee17 2a90 	vmov	r2, s15
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800456a:	4b1f      	ldr	r3, [pc, #124]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	0c1b      	lsrs	r3, r3, #16
 8004570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004574:	ee07 3a90 	vmov	s15, r3
 8004578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004580:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004584:	edd7 6a07 	vldr	s13, [r7, #28]
 8004588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800458c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004590:	ee17 2a90 	vmov	r2, s15
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004598:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	0e1b      	lsrs	r3, r3, #24
 800459e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80045b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045be:	ee17 2a90 	vmov	r2, s15
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80045c6:	e008      	b.n	80045da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	609a      	str	r2, [r3, #8]
}
 80045da:	bf00      	nop
 80045dc:	3724      	adds	r7, #36	; 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	58024400 	.word	0x58024400
 80045ec:	03d09000 	.word	0x03d09000
 80045f0:	46000000 	.word	0x46000000
 80045f4:	4c742400 	.word	0x4c742400
 80045f8:	4a742400 	.word	0x4a742400
 80045fc:	4af42400 	.word	0x4af42400

08004600 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004600:	b480      	push	{r7}
 8004602:	b089      	sub	sp, #36	; 0x24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004608:	4ba1      	ldr	r3, [pc, #644]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004612:	4b9f      	ldr	r3, [pc, #636]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	0d1b      	lsrs	r3, r3, #20
 8004618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800461c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800461e:	4b9c      	ldr	r3, [pc, #624]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	0a1b      	lsrs	r3, r3, #8
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800462a:	4b99      	ldr	r3, [pc, #612]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	08db      	lsrs	r3, r3, #3
 8004630:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004642:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8111 	beq.w	8004870 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	2b02      	cmp	r3, #2
 8004652:	f000 8083 	beq.w	800475c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	2b02      	cmp	r3, #2
 800465a:	f200 80a1 	bhi.w	80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d056      	beq.n	8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800466a:	e099      	b.n	80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800466c:	4b88      	ldr	r3, [pc, #544]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b00      	cmp	r3, #0
 8004676:	d02d      	beq.n	80046d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004678:	4b85      	ldr	r3, [pc, #532]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	08db      	lsrs	r3, r3, #3
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	4a84      	ldr	r2, [pc, #528]	; (8004894 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
 8004688:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	ee07 3a90 	vmov	s15, r3
 8004690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a2:	4b7b      	ldr	r3, [pc, #492]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80046d2:	e087      	b.n	80047e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800489c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80046e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046e6:	4b6a      	ldr	r3, [pc, #424]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800470a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800470e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004716:	e065      	b.n	80047e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004722:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800472a:	4b59      	ldr	r3, [pc, #356]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473a:	ed97 6a03 	vldr	s12, [r7, #12]
 800473e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800474a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800474e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004756:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800475a:	e043      	b.n	80047e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004766:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800476a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800476e:	4b48      	ldr	r3, [pc, #288]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800477e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004782:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800478a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800478e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800479e:	e021      	b.n	80047e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047b2:	4b37      	ldr	r3, [pc, #220]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ba:	ee07 3a90 	vmov	s15, r3
 80047be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80047e4:	4b2a      	ldr	r3, [pc, #168]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	0a5b      	lsrs	r3, r3, #9
 80047ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800480a:	ee17 2a90 	vmov	r2, s15
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004812:	4b1f      	ldr	r3, [pc, #124]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	0c1b      	lsrs	r3, r3, #16
 8004818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800481c:	ee07 3a90 	vmov	s15, r3
 8004820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004824:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004828:	ee37 7a87 	vadd.f32	s14, s15, s14
 800482c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004838:	ee17 2a90 	vmov	r2, s15
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004840:	4b13      	ldr	r3, [pc, #76]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	0e1b      	lsrs	r3, r3, #24
 8004846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004852:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004856:	ee37 7a87 	vadd.f32	s14, s15, s14
 800485a:	edd7 6a07 	vldr	s13, [r7, #28]
 800485e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004866:	ee17 2a90 	vmov	r2, s15
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800486e:	e008      	b.n	8004882 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	609a      	str	r2, [r3, #8]
}
 8004882:	bf00      	nop
 8004884:	3724      	adds	r7, #36	; 0x24
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	58024400 	.word	0x58024400
 8004894:	03d09000 	.word	0x03d09000
 8004898:	46000000 	.word	0x46000000
 800489c:	4c742400 	.word	0x4c742400
 80048a0:	4a742400 	.word	0x4a742400
 80048a4:	4af42400 	.word	0x4af42400

080048a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048b6:	4b53      	ldr	r3, [pc, #332]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d101      	bne.n	80048c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e099      	b.n	80049fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80048c6:	4b4f      	ldr	r3, [pc, #316]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a4e      	ldr	r2, [pc, #312]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 80048cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d2:	f7fc fb0b 	bl	8000eec <HAL_GetTick>
 80048d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048d8:	e008      	b.n	80048ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80048da:	f7fc fb07 	bl	8000eec <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e086      	b.n	80049fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048ec:	4b45      	ldr	r3, [pc, #276]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1f0      	bne.n	80048da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80048f8:	4b42      	ldr	r3, [pc, #264]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 80048fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	031b      	lsls	r3, r3, #12
 8004906:	493f      	ldr	r1, [pc, #252]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 8004908:	4313      	orrs	r3, r2
 800490a:	628b      	str	r3, [r1, #40]	; 0x28
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	3b01      	subs	r3, #1
 8004912:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	3b01      	subs	r3, #1
 800491c:	025b      	lsls	r3, r3, #9
 800491e:	b29b      	uxth	r3, r3
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	3b01      	subs	r3, #1
 8004928:	041b      	lsls	r3, r3, #16
 800492a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	3b01      	subs	r3, #1
 8004936:	061b      	lsls	r3, r3, #24
 8004938:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800493c:	4931      	ldr	r1, [pc, #196]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 800493e:	4313      	orrs	r3, r2
 8004940:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004942:	4b30      	ldr	r3, [pc, #192]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 8004944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004946:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	492d      	ldr	r1, [pc, #180]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 8004950:	4313      	orrs	r3, r2
 8004952:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004954:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	f023 0220 	bic.w	r2, r3, #32
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	4928      	ldr	r1, [pc, #160]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 8004962:	4313      	orrs	r3, r2
 8004964:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004966:	4b27      	ldr	r3, [pc, #156]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 8004968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496a:	4a26      	ldr	r2, [pc, #152]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 800496c:	f023 0310 	bic.w	r3, r3, #16
 8004970:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004972:	4b24      	ldr	r3, [pc, #144]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 8004974:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004976:	4b24      	ldr	r3, [pc, #144]	; (8004a08 <RCCEx_PLL2_Config+0x160>)
 8004978:	4013      	ands	r3, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	69d2      	ldr	r2, [r2, #28]
 800497e:	00d2      	lsls	r2, r2, #3
 8004980:	4920      	ldr	r1, [pc, #128]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 8004982:	4313      	orrs	r3, r2
 8004984:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004986:	4b1f      	ldr	r3, [pc, #124]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	4a1e      	ldr	r2, [pc, #120]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 800498c:	f043 0310 	orr.w	r3, r3, #16
 8004990:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d106      	bne.n	80049a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004998:	4b1a      	ldr	r3, [pc, #104]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	4a19      	ldr	r2, [pc, #100]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 800499e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049a4:	e00f      	b.n	80049c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d106      	bne.n	80049ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80049ac:	4b15      	ldr	r3, [pc, #84]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 80049b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049b8:	e005      	b.n	80049c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80049ba:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	4a11      	ldr	r2, [pc, #68]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 80049c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80049c6:	4b0f      	ldr	r3, [pc, #60]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a0e      	ldr	r2, [pc, #56]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 80049cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d2:	f7fc fa8b 	bl	8000eec <HAL_GetTick>
 80049d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049d8:	e008      	b.n	80049ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80049da:	f7fc fa87 	bl	8000eec <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e006      	b.n	80049fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049ec:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <RCCEx_PLL2_Config+0x15c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0f0      	beq.n	80049da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	58024400 	.word	0x58024400
 8004a08:	ffff0007 	.word	0xffff0007

08004a0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a1a:	4b53      	ldr	r3, [pc, #332]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	d101      	bne.n	8004a2a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e099      	b.n	8004b5e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a2a:	4b4f      	ldr	r3, [pc, #316]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a4e      	ldr	r2, [pc, #312]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a36:	f7fc fa59 	bl	8000eec <HAL_GetTick>
 8004a3a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a3c:	e008      	b.n	8004a50 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a3e:	f7fc fa55 	bl	8000eec <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e086      	b.n	8004b5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a50:	4b45      	ldr	r3, [pc, #276]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f0      	bne.n	8004a3e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a5c:	4b42      	ldr	r3, [pc, #264]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a60:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	051b      	lsls	r3, r3, #20
 8004a6a:	493f      	ldr	r1, [pc, #252]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	628b      	str	r3, [r1, #40]	; 0x28
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	3b01      	subs	r3, #1
 8004a76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	025b      	lsls	r3, r3, #9
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	041b      	lsls	r3, r3, #16
 8004a8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	061b      	lsls	r3, r3, #24
 8004a9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004aa0:	4931      	ldr	r1, [pc, #196]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004aa6:	4b30      	ldr	r3, [pc, #192]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	492d      	ldr	r1, [pc, #180]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ab8:	4b2b      	ldr	r3, [pc, #172]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	4928      	ldr	r1, [pc, #160]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004aca:	4b27      	ldr	r3, [pc, #156]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	4a26      	ldr	r2, [pc, #152]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ad6:	4b24      	ldr	r3, [pc, #144]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ada:	4b24      	ldr	r3, [pc, #144]	; (8004b6c <RCCEx_PLL3_Config+0x160>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	69d2      	ldr	r2, [r2, #28]
 8004ae2:	00d2      	lsls	r2, r2, #3
 8004ae4:	4920      	ldr	r1, [pc, #128]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004aea:	4b1f      	ldr	r3, [pc, #124]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	4a1e      	ldr	r2, [pc, #120]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d106      	bne.n	8004b0a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004afc:	4b1a      	ldr	r3, [pc, #104]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	4a19      	ldr	r2, [pc, #100]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004b02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b08:	e00f      	b.n	8004b2a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d106      	bne.n	8004b1e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b10:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	4a14      	ldr	r2, [pc, #80]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004b16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b1c:	e005      	b.n	8004b2a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b1e:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	4a11      	ldr	r2, [pc, #68]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004b24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b2a:	4b0f      	ldr	r3, [pc, #60]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a0e      	ldr	r2, [pc, #56]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b36:	f7fc f9d9 	bl	8000eec <HAL_GetTick>
 8004b3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b3c:	e008      	b.n	8004b50 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b3e:	f7fc f9d5 	bl	8000eec <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e006      	b.n	8004b5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b50:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <RCCEx_PLL3_Config+0x15c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	58024400 	.word	0x58024400
 8004b6c:	ffff0007 	.word	0xffff0007

08004b70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e042      	b.n	8004c08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d106      	bne.n	8004b9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7fb ffdb 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2224      	movs	r2, #36	; 0x24
 8004b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0201 	bic.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fc48 	bl	8005448 <UART_SetConfig>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e022      	b.n	8004c08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f001 faa8 	bl	8006120 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f001 fb2f 	bl	8006264 <UART_CheckIdleState>
 8004c06:	4603      	mov	r3, r0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08a      	sub	sp, #40	; 0x28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d137      	bne.n	8004c98 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_UART_Receive_IT+0x24>
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e030      	b.n	8004c9a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <HAL_UART_Receive_IT+0x94>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d01f      	beq.n	8004c88 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d018      	beq.n	8004c88 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	e853 3f00 	ldrex	r3, [r3]
 8004c62:	613b      	str	r3, [r7, #16]
   return(result);
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	623b      	str	r3, [r7, #32]
 8004c76:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	69f9      	ldr	r1, [r7, #28]
 8004c7a:	6a3a      	ldr	r2, [r7, #32]
 8004c7c:	e841 2300 	strex	r3, r2, [r1]
 8004c80:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e6      	bne.n	8004c56 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c88:	88fb      	ldrh	r3, [r7, #6]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f001 fbfa 	bl	8006488 <UART_Start_Receive_IT>
 8004c94:	4603      	mov	r3, r0
 8004c96:	e000      	b.n	8004c9a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c98:	2302      	movs	r3, #2
  }
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3728      	adds	r7, #40	; 0x28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	58000c00 	.word	0x58000c00

08004ca8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b0ba      	sub	sp, #232	; 0xe8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004cce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004cd2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004cdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d11b      	bne.n	8004d1c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d015      	beq.n	8004d1c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d105      	bne.n	8004d08 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d009      	beq.n	8004d1c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 8377 	beq.w	8005400 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	4798      	blx	r3
      }
      return;
 8004d1a:	e371      	b.n	8005400 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8123 	beq.w	8004f6c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004d26:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004d2a:	4b8d      	ldr	r3, [pc, #564]	; (8004f60 <HAL_UART_IRQHandler+0x2b8>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004d32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004d36:	4b8b      	ldr	r3, [pc, #556]	; (8004f64 <HAL_UART_IRQHandler+0x2bc>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 8116 	beq.w	8004f6c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d011      	beq.n	8004d70 <HAL_UART_IRQHandler+0xc8>
 8004d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00b      	beq.n	8004d70 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d66:	f043 0201 	orr.w	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d011      	beq.n	8004da0 <HAL_UART_IRQHandler+0xf8>
 8004d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00b      	beq.n	8004da0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d96:	f043 0204 	orr.w	r2, r3, #4
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d011      	beq.n	8004dd0 <HAL_UART_IRQHandler+0x128>
 8004dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00b      	beq.n	8004dd0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc6:	f043 0202 	orr.w	r2, r3, #2
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d017      	beq.n	8004e0c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d105      	bne.n	8004df4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004de8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004dec:	4b5c      	ldr	r3, [pc, #368]	; (8004f60 <HAL_UART_IRQHandler+0x2b8>)
 8004dee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00b      	beq.n	8004e0c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2208      	movs	r2, #8
 8004dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e02:	f043 0208 	orr.w	r2, r3, #8
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d012      	beq.n	8004e3e <HAL_UART_IRQHandler+0x196>
 8004e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00c      	beq.n	8004e3e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 82dd 	beq.w	8005404 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d013      	beq.n	8004e7e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d105      	bne.n	8004e6e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d007      	beq.n	8004e7e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e92:	2b40      	cmp	r3, #64	; 0x40
 8004e94:	d005      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d054      	beq.n	8004f4c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f001 fc12 	bl	80066cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb2:	2b40      	cmp	r3, #64	; 0x40
 8004eb4:	d146      	bne.n	8004f44 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3308      	adds	r3, #8
 8004ebc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3308      	adds	r3, #8
 8004ede:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ee2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004eee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1d9      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d017      	beq.n	8004f3c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f12:	4a15      	ldr	r2, [pc, #84]	; (8004f68 <HAL_UART_IRQHandler+0x2c0>)
 8004f14:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fc fc1f 	bl	8001760 <HAL_DMA_Abort_IT>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d019      	beq.n	8004f5c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004f36:	4610      	mov	r0, r2
 8004f38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f3a:	e00f      	b.n	8004f5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7fb fb77 	bl	8000630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f42:	e00b      	b.n	8004f5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7fb fb73 	bl	8000630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f4a:	e007      	b.n	8004f5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7fb fb6f 	bl	8000630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004f5a:	e253      	b.n	8005404 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f5c:	bf00      	nop
    return;
 8004f5e:	e251      	b.n	8005404 <HAL_UART_IRQHandler+0x75c>
 8004f60:	10000001 	.word	0x10000001
 8004f64:	04000120 	.word	0x04000120
 8004f68:	08006799 	.word	0x08006799

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	f040 81e7 	bne.w	8005344 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f7a:	f003 0310 	and.w	r3, r3, #16
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 81e0 	beq.w	8005344 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 81d9 	beq.w	8005344 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2210      	movs	r2, #16
 8004f98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa4:	2b40      	cmp	r3, #64	; 0x40
 8004fa6:	f040 8151 	bne.w	800524c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a96      	ldr	r2, [pc, #600]	; (800520c <HAL_UART_IRQHandler+0x564>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d068      	beq.n	800508a <HAL_UART_IRQHandler+0x3e2>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a93      	ldr	r2, [pc, #588]	; (8005210 <HAL_UART_IRQHandler+0x568>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d061      	beq.n	800508a <HAL_UART_IRQHandler+0x3e2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a91      	ldr	r2, [pc, #580]	; (8005214 <HAL_UART_IRQHandler+0x56c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d05a      	beq.n	800508a <HAL_UART_IRQHandler+0x3e2>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a8e      	ldr	r2, [pc, #568]	; (8005218 <HAL_UART_IRQHandler+0x570>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d053      	beq.n	800508a <HAL_UART_IRQHandler+0x3e2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a8c      	ldr	r2, [pc, #560]	; (800521c <HAL_UART_IRQHandler+0x574>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d04c      	beq.n	800508a <HAL_UART_IRQHandler+0x3e2>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a89      	ldr	r2, [pc, #548]	; (8005220 <HAL_UART_IRQHandler+0x578>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d045      	beq.n	800508a <HAL_UART_IRQHandler+0x3e2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a87      	ldr	r2, [pc, #540]	; (8005224 <HAL_UART_IRQHandler+0x57c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d03e      	beq.n	800508a <HAL_UART_IRQHandler+0x3e2>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a84      	ldr	r2, [pc, #528]	; (8005228 <HAL_UART_IRQHandler+0x580>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d037      	beq.n	800508a <HAL_UART_IRQHandler+0x3e2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a82      	ldr	r2, [pc, #520]	; (800522c <HAL_UART_IRQHandler+0x584>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d030      	beq.n	800508a <HAL_UART_IRQHandler+0x3e2>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a7f      	ldr	r2, [pc, #508]	; (8005230 <HAL_UART_IRQHandler+0x588>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d029      	beq.n	800508a <HAL_UART_IRQHandler+0x3e2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a7d      	ldr	r2, [pc, #500]	; (8005234 <HAL_UART_IRQHandler+0x58c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d022      	beq.n	800508a <HAL_UART_IRQHandler+0x3e2>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a7a      	ldr	r2, [pc, #488]	; (8005238 <HAL_UART_IRQHandler+0x590>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d01b      	beq.n	800508a <HAL_UART_IRQHandler+0x3e2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a78      	ldr	r2, [pc, #480]	; (800523c <HAL_UART_IRQHandler+0x594>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d014      	beq.n	800508a <HAL_UART_IRQHandler+0x3e2>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a75      	ldr	r2, [pc, #468]	; (8005240 <HAL_UART_IRQHandler+0x598>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00d      	beq.n	800508a <HAL_UART_IRQHandler+0x3e2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a73      	ldr	r2, [pc, #460]	; (8005244 <HAL_UART_IRQHandler+0x59c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d006      	beq.n	800508a <HAL_UART_IRQHandler+0x3e2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a70      	ldr	r2, [pc, #448]	; (8005248 <HAL_UART_IRQHandler+0x5a0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d106      	bne.n	8005098 <HAL_UART_IRQHandler+0x3f0>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	b29b      	uxth	r3, r3
 8005096:	e005      	b.n	80050a4 <HAL_UART_IRQHandler+0x3fc>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 81ab 	beq.w	8005408 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80050b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050bc:	429a      	cmp	r2, r3
 80050be:	f080 81a3 	bcs.w	8005408 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d8:	f000 8087 	beq.w	80051ea <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050e8:	e853 3f00 	ldrex	r3, [r3]
 80050ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	461a      	mov	r2, r3
 8005102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800510a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005112:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800511e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1da      	bne.n	80050dc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3308      	adds	r3, #8
 800512c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005138:	f023 0301 	bic.w	r3, r3, #1
 800513c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3308      	adds	r3, #8
 8005146:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800514a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800514e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005152:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800515c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e1      	bne.n	8005126 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3308      	adds	r3, #8
 8005168:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3308      	adds	r3, #8
 8005182:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005186:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005188:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800518c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e3      	bne.n	8005162 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2220      	movs	r2, #32
 800519e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051b8:	f023 0310 	bic.w	r3, r3, #16
 80051bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80051cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e4      	bne.n	80051a8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fb ff9d 	bl	8001124 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2202      	movs	r2, #2
 80051ee:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	b29b      	uxth	r3, r3
 8005202:	4619      	mov	r1, r3
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f913 	bl	8005430 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800520a:	e0fd      	b.n	8005408 <HAL_UART_IRQHandler+0x760>
 800520c:	40020010 	.word	0x40020010
 8005210:	40020028 	.word	0x40020028
 8005214:	40020040 	.word	0x40020040
 8005218:	40020058 	.word	0x40020058
 800521c:	40020070 	.word	0x40020070
 8005220:	40020088 	.word	0x40020088
 8005224:	400200a0 	.word	0x400200a0
 8005228:	400200b8 	.word	0x400200b8
 800522c:	40020410 	.word	0x40020410
 8005230:	40020428 	.word	0x40020428
 8005234:	40020440 	.word	0x40020440
 8005238:	40020458 	.word	0x40020458
 800523c:	40020470 	.word	0x40020470
 8005240:	40020488 	.word	0x40020488
 8005244:	400204a0 	.word	0x400204a0
 8005248:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005258:	b29b      	uxth	r3, r3
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005266:	b29b      	uxth	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 80cf 	beq.w	800540c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800526e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 80ca 	beq.w	800540c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005288:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800528c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800529a:	647b      	str	r3, [r7, #68]	; 0x44
 800529c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e4      	bne.n	8005278 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3308      	adds	r3, #8
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	623b      	str	r3, [r7, #32]
   return(result);
 80052be:	6a3a      	ldr	r2, [r7, #32]
 80052c0:	4b55      	ldr	r3, [pc, #340]	; (8005418 <HAL_UART_IRQHandler+0x770>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3308      	adds	r3, #8
 80052ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052d2:	633a      	str	r2, [r7, #48]	; 0x30
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e3      	bne.n	80052ae <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	e853 3f00 	ldrex	r3, [r3]
 8005306:	60fb      	str	r3, [r7, #12]
   return(result);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0310 	bic.w	r3, r3, #16
 800530e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800531c:	61fb      	str	r3, [r7, #28]
 800531e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005320:	69b9      	ldr	r1, [r7, #24]
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	e841 2300 	strex	r3, r2, [r1]
 8005328:	617b      	str	r3, [r7, #20]
   return(result);
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1e4      	bne.n	80052fa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005336:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800533a:	4619      	mov	r1, r3
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f877 	bl	8005430 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005342:	e063      	b.n	800540c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005348:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00e      	beq.n	800536e <HAL_UART_IRQHandler+0x6c6>
 8005350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d008      	beq.n	800536e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005364:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f001 ff74 	bl	8007254 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800536c:	e051      	b.n	8005412 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800536e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005376:	2b00      	cmp	r3, #0
 8005378:	d014      	beq.n	80053a4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800537a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800537e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005382:	2b00      	cmp	r3, #0
 8005384:	d105      	bne.n	8005392 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800538a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d008      	beq.n	80053a4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005396:	2b00      	cmp	r3, #0
 8005398:	d03a      	beq.n	8005410 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	4798      	blx	r3
    }
    return;
 80053a2:	e035      	b.n	8005410 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d009      	beq.n	80053c4 <HAL_UART_IRQHandler+0x71c>
 80053b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f001 fa01 	bl	80067c4 <UART_EndTransmit_IT>
    return;
 80053c2:	e026      	b.n	8005412 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80053c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d009      	beq.n	80053e4 <HAL_UART_IRQHandler+0x73c>
 80053d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f001 ff4d 	bl	800727c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053e2:	e016      	b.n	8005412 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80053e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d010      	beq.n	8005412 <HAL_UART_IRQHandler+0x76a>
 80053f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	da0c      	bge.n	8005412 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f001 ff35 	bl	8007268 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053fe:	e008      	b.n	8005412 <HAL_UART_IRQHandler+0x76a>
      return;
 8005400:	bf00      	nop
 8005402:	e006      	b.n	8005412 <HAL_UART_IRQHandler+0x76a>
    return;
 8005404:	bf00      	nop
 8005406:	e004      	b.n	8005412 <HAL_UART_IRQHandler+0x76a>
      return;
 8005408:	bf00      	nop
 800540a:	e002      	b.n	8005412 <HAL_UART_IRQHandler+0x76a>
      return;
 800540c:	bf00      	nop
 800540e:	e000      	b.n	8005412 <HAL_UART_IRQHandler+0x76a>
    return;
 8005410:	bf00      	nop
  }
}
 8005412:	37e8      	adds	r7, #232	; 0xe8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	effffffe 	.word	0xeffffffe

0800541c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800544c:	b092      	sub	sp, #72	; 0x48
 800544e:	af00      	add	r7, sp, #0
 8005450:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	431a      	orrs	r2, r3
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	431a      	orrs	r2, r3
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	4313      	orrs	r3, r2
 800546e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	4bbe      	ldr	r3, [pc, #760]	; (8005770 <UART_SetConfig+0x328>)
 8005478:	4013      	ands	r3, r2
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005480:	430b      	orrs	r3, r1
 8005482:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4ab3      	ldr	r2, [pc, #716]	; (8005774 <UART_SetConfig+0x32c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d004      	beq.n	80054b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054b0:	4313      	orrs	r3, r2
 80054b2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	4baf      	ldr	r3, [pc, #700]	; (8005778 <UART_SetConfig+0x330>)
 80054bc:	4013      	ands	r3, r2
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	6812      	ldr	r2, [r2, #0]
 80054c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ce:	f023 010f 	bic.w	r1, r3, #15
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4aa6      	ldr	r2, [pc, #664]	; (800577c <UART_SetConfig+0x334>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d177      	bne.n	80055d8 <UART_SetConfig+0x190>
 80054e8:	4ba5      	ldr	r3, [pc, #660]	; (8005780 <UART_SetConfig+0x338>)
 80054ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054f0:	2b28      	cmp	r3, #40	; 0x28
 80054f2:	d86d      	bhi.n	80055d0 <UART_SetConfig+0x188>
 80054f4:	a201      	add	r2, pc, #4	; (adr r2, 80054fc <UART_SetConfig+0xb4>)
 80054f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fa:	bf00      	nop
 80054fc:	080055a1 	.word	0x080055a1
 8005500:	080055d1 	.word	0x080055d1
 8005504:	080055d1 	.word	0x080055d1
 8005508:	080055d1 	.word	0x080055d1
 800550c:	080055d1 	.word	0x080055d1
 8005510:	080055d1 	.word	0x080055d1
 8005514:	080055d1 	.word	0x080055d1
 8005518:	080055d1 	.word	0x080055d1
 800551c:	080055a9 	.word	0x080055a9
 8005520:	080055d1 	.word	0x080055d1
 8005524:	080055d1 	.word	0x080055d1
 8005528:	080055d1 	.word	0x080055d1
 800552c:	080055d1 	.word	0x080055d1
 8005530:	080055d1 	.word	0x080055d1
 8005534:	080055d1 	.word	0x080055d1
 8005538:	080055d1 	.word	0x080055d1
 800553c:	080055b1 	.word	0x080055b1
 8005540:	080055d1 	.word	0x080055d1
 8005544:	080055d1 	.word	0x080055d1
 8005548:	080055d1 	.word	0x080055d1
 800554c:	080055d1 	.word	0x080055d1
 8005550:	080055d1 	.word	0x080055d1
 8005554:	080055d1 	.word	0x080055d1
 8005558:	080055d1 	.word	0x080055d1
 800555c:	080055b9 	.word	0x080055b9
 8005560:	080055d1 	.word	0x080055d1
 8005564:	080055d1 	.word	0x080055d1
 8005568:	080055d1 	.word	0x080055d1
 800556c:	080055d1 	.word	0x080055d1
 8005570:	080055d1 	.word	0x080055d1
 8005574:	080055d1 	.word	0x080055d1
 8005578:	080055d1 	.word	0x080055d1
 800557c:	080055c1 	.word	0x080055c1
 8005580:	080055d1 	.word	0x080055d1
 8005584:	080055d1 	.word	0x080055d1
 8005588:	080055d1 	.word	0x080055d1
 800558c:	080055d1 	.word	0x080055d1
 8005590:	080055d1 	.word	0x080055d1
 8005594:	080055d1 	.word	0x080055d1
 8005598:	080055d1 	.word	0x080055d1
 800559c:	080055c9 	.word	0x080055c9
 80055a0:	2301      	movs	r3, #1
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a6:	e326      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80055a8:	2304      	movs	r3, #4
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ae:	e322      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80055b0:	2308      	movs	r3, #8
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b6:	e31e      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80055b8:	2310      	movs	r3, #16
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055be:	e31a      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80055c0:	2320      	movs	r3, #32
 80055c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055c6:	e316      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80055c8:	2340      	movs	r3, #64	; 0x40
 80055ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ce:	e312      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80055d0:	2380      	movs	r3, #128	; 0x80
 80055d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055d6:	e30e      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a69      	ldr	r2, [pc, #420]	; (8005784 <UART_SetConfig+0x33c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d130      	bne.n	8005644 <UART_SetConfig+0x1fc>
 80055e2:	4b67      	ldr	r3, [pc, #412]	; (8005780 <UART_SetConfig+0x338>)
 80055e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	2b05      	cmp	r3, #5
 80055ec:	d826      	bhi.n	800563c <UART_SetConfig+0x1f4>
 80055ee:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <UART_SetConfig+0x1ac>)
 80055f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f4:	0800560d 	.word	0x0800560d
 80055f8:	08005615 	.word	0x08005615
 80055fc:	0800561d 	.word	0x0800561d
 8005600:	08005625 	.word	0x08005625
 8005604:	0800562d 	.word	0x0800562d
 8005608:	08005635 	.word	0x08005635
 800560c:	2300      	movs	r3, #0
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005612:	e2f0      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005614:	2304      	movs	r3, #4
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800561a:	e2ec      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 800561c:	2308      	movs	r3, #8
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005622:	e2e8      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005624:	2310      	movs	r3, #16
 8005626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800562a:	e2e4      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 800562c:	2320      	movs	r3, #32
 800562e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005632:	e2e0      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005634:	2340      	movs	r3, #64	; 0x40
 8005636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800563a:	e2dc      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 800563c:	2380      	movs	r3, #128	; 0x80
 800563e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005642:	e2d8      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a4f      	ldr	r2, [pc, #316]	; (8005788 <UART_SetConfig+0x340>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d130      	bne.n	80056b0 <UART_SetConfig+0x268>
 800564e:	4b4c      	ldr	r3, [pc, #304]	; (8005780 <UART_SetConfig+0x338>)
 8005650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	2b05      	cmp	r3, #5
 8005658:	d826      	bhi.n	80056a8 <UART_SetConfig+0x260>
 800565a:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <UART_SetConfig+0x218>)
 800565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005660:	08005679 	.word	0x08005679
 8005664:	08005681 	.word	0x08005681
 8005668:	08005689 	.word	0x08005689
 800566c:	08005691 	.word	0x08005691
 8005670:	08005699 	.word	0x08005699
 8005674:	080056a1 	.word	0x080056a1
 8005678:	2300      	movs	r3, #0
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567e:	e2ba      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005680:	2304      	movs	r3, #4
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005686:	e2b6      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005688:	2308      	movs	r3, #8
 800568a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800568e:	e2b2      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005690:	2310      	movs	r3, #16
 8005692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005696:	e2ae      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005698:	2320      	movs	r3, #32
 800569a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800569e:	e2aa      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80056a0:	2340      	movs	r3, #64	; 0x40
 80056a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056a6:	e2a6      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ae:	e2a2      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a35      	ldr	r2, [pc, #212]	; (800578c <UART_SetConfig+0x344>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d130      	bne.n	800571c <UART_SetConfig+0x2d4>
 80056ba:	4b31      	ldr	r3, [pc, #196]	; (8005780 <UART_SetConfig+0x338>)
 80056bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	2b05      	cmp	r3, #5
 80056c4:	d826      	bhi.n	8005714 <UART_SetConfig+0x2cc>
 80056c6:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <UART_SetConfig+0x284>)
 80056c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056cc:	080056e5 	.word	0x080056e5
 80056d0:	080056ed 	.word	0x080056ed
 80056d4:	080056f5 	.word	0x080056f5
 80056d8:	080056fd 	.word	0x080056fd
 80056dc:	08005705 	.word	0x08005705
 80056e0:	0800570d 	.word	0x0800570d
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ea:	e284      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80056ec:	2304      	movs	r3, #4
 80056ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056f2:	e280      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80056f4:	2308      	movs	r3, #8
 80056f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056fa:	e27c      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80056fc:	2310      	movs	r3, #16
 80056fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005702:	e278      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005704:	2320      	movs	r3, #32
 8005706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800570a:	e274      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 800570c:	2340      	movs	r3, #64	; 0x40
 800570e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005712:	e270      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005714:	2380      	movs	r3, #128	; 0x80
 8005716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800571a:	e26c      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a1b      	ldr	r2, [pc, #108]	; (8005790 <UART_SetConfig+0x348>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d142      	bne.n	80057ac <UART_SetConfig+0x364>
 8005726:	4b16      	ldr	r3, [pc, #88]	; (8005780 <UART_SetConfig+0x338>)
 8005728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	2b05      	cmp	r3, #5
 8005730:	d838      	bhi.n	80057a4 <UART_SetConfig+0x35c>
 8005732:	a201      	add	r2, pc, #4	; (adr r2, 8005738 <UART_SetConfig+0x2f0>)
 8005734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005738:	08005751 	.word	0x08005751
 800573c:	08005759 	.word	0x08005759
 8005740:	08005761 	.word	0x08005761
 8005744:	08005769 	.word	0x08005769
 8005748:	08005795 	.word	0x08005795
 800574c:	0800579d 	.word	0x0800579d
 8005750:	2300      	movs	r3, #0
 8005752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005756:	e24e      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005758:	2304      	movs	r3, #4
 800575a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800575e:	e24a      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005760:	2308      	movs	r3, #8
 8005762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005766:	e246      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005768:	2310      	movs	r3, #16
 800576a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800576e:	e242      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005770:	cfff69f3 	.word	0xcfff69f3
 8005774:	58000c00 	.word	0x58000c00
 8005778:	11fff4ff 	.word	0x11fff4ff
 800577c:	40011000 	.word	0x40011000
 8005780:	58024400 	.word	0x58024400
 8005784:	40004400 	.word	0x40004400
 8005788:	40004800 	.word	0x40004800
 800578c:	40004c00 	.word	0x40004c00
 8005790:	40005000 	.word	0x40005000
 8005794:	2320      	movs	r3, #32
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579a:	e22c      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 800579c:	2340      	movs	r3, #64	; 0x40
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a2:	e228      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80057a4:	2380      	movs	r3, #128	; 0x80
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057aa:	e224      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4ab1      	ldr	r2, [pc, #708]	; (8005a78 <UART_SetConfig+0x630>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d176      	bne.n	80058a4 <UART_SetConfig+0x45c>
 80057b6:	4bb1      	ldr	r3, [pc, #708]	; (8005a7c <UART_SetConfig+0x634>)
 80057b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057be:	2b28      	cmp	r3, #40	; 0x28
 80057c0:	d86c      	bhi.n	800589c <UART_SetConfig+0x454>
 80057c2:	a201      	add	r2, pc, #4	; (adr r2, 80057c8 <UART_SetConfig+0x380>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	0800586d 	.word	0x0800586d
 80057cc:	0800589d 	.word	0x0800589d
 80057d0:	0800589d 	.word	0x0800589d
 80057d4:	0800589d 	.word	0x0800589d
 80057d8:	0800589d 	.word	0x0800589d
 80057dc:	0800589d 	.word	0x0800589d
 80057e0:	0800589d 	.word	0x0800589d
 80057e4:	0800589d 	.word	0x0800589d
 80057e8:	08005875 	.word	0x08005875
 80057ec:	0800589d 	.word	0x0800589d
 80057f0:	0800589d 	.word	0x0800589d
 80057f4:	0800589d 	.word	0x0800589d
 80057f8:	0800589d 	.word	0x0800589d
 80057fc:	0800589d 	.word	0x0800589d
 8005800:	0800589d 	.word	0x0800589d
 8005804:	0800589d 	.word	0x0800589d
 8005808:	0800587d 	.word	0x0800587d
 800580c:	0800589d 	.word	0x0800589d
 8005810:	0800589d 	.word	0x0800589d
 8005814:	0800589d 	.word	0x0800589d
 8005818:	0800589d 	.word	0x0800589d
 800581c:	0800589d 	.word	0x0800589d
 8005820:	0800589d 	.word	0x0800589d
 8005824:	0800589d 	.word	0x0800589d
 8005828:	08005885 	.word	0x08005885
 800582c:	0800589d 	.word	0x0800589d
 8005830:	0800589d 	.word	0x0800589d
 8005834:	0800589d 	.word	0x0800589d
 8005838:	0800589d 	.word	0x0800589d
 800583c:	0800589d 	.word	0x0800589d
 8005840:	0800589d 	.word	0x0800589d
 8005844:	0800589d 	.word	0x0800589d
 8005848:	0800588d 	.word	0x0800588d
 800584c:	0800589d 	.word	0x0800589d
 8005850:	0800589d 	.word	0x0800589d
 8005854:	0800589d 	.word	0x0800589d
 8005858:	0800589d 	.word	0x0800589d
 800585c:	0800589d 	.word	0x0800589d
 8005860:	0800589d 	.word	0x0800589d
 8005864:	0800589d 	.word	0x0800589d
 8005868:	08005895 	.word	0x08005895
 800586c:	2301      	movs	r3, #1
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005872:	e1c0      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005874:	2304      	movs	r3, #4
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587a:	e1bc      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 800587c:	2308      	movs	r3, #8
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005882:	e1b8      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005884:	2310      	movs	r3, #16
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800588a:	e1b4      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 800588c:	2320      	movs	r3, #32
 800588e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005892:	e1b0      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005894:	2340      	movs	r3, #64	; 0x40
 8005896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800589a:	e1ac      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 800589c:	2380      	movs	r3, #128	; 0x80
 800589e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058a2:	e1a8      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a75      	ldr	r2, [pc, #468]	; (8005a80 <UART_SetConfig+0x638>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d130      	bne.n	8005910 <UART_SetConfig+0x4c8>
 80058ae:	4b73      	ldr	r3, [pc, #460]	; (8005a7c <UART_SetConfig+0x634>)
 80058b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	2b05      	cmp	r3, #5
 80058b8:	d826      	bhi.n	8005908 <UART_SetConfig+0x4c0>
 80058ba:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <UART_SetConfig+0x478>)
 80058bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c0:	080058d9 	.word	0x080058d9
 80058c4:	080058e1 	.word	0x080058e1
 80058c8:	080058e9 	.word	0x080058e9
 80058cc:	080058f1 	.word	0x080058f1
 80058d0:	080058f9 	.word	0x080058f9
 80058d4:	08005901 	.word	0x08005901
 80058d8:	2300      	movs	r3, #0
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058de:	e18a      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80058e0:	2304      	movs	r3, #4
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e6:	e186      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80058e8:	2308      	movs	r3, #8
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ee:	e182      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80058f0:	2310      	movs	r3, #16
 80058f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058f6:	e17e      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 80058f8:	2320      	movs	r3, #32
 80058fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058fe:	e17a      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005900:	2340      	movs	r3, #64	; 0x40
 8005902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005906:	e176      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005908:	2380      	movs	r3, #128	; 0x80
 800590a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800590e:	e172      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a5b      	ldr	r2, [pc, #364]	; (8005a84 <UART_SetConfig+0x63c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d130      	bne.n	800597c <UART_SetConfig+0x534>
 800591a:	4b58      	ldr	r3, [pc, #352]	; (8005a7c <UART_SetConfig+0x634>)
 800591c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	2b05      	cmp	r3, #5
 8005924:	d826      	bhi.n	8005974 <UART_SetConfig+0x52c>
 8005926:	a201      	add	r2, pc, #4	; (adr r2, 800592c <UART_SetConfig+0x4e4>)
 8005928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592c:	08005945 	.word	0x08005945
 8005930:	0800594d 	.word	0x0800594d
 8005934:	08005955 	.word	0x08005955
 8005938:	0800595d 	.word	0x0800595d
 800593c:	08005965 	.word	0x08005965
 8005940:	0800596d 	.word	0x0800596d
 8005944:	2300      	movs	r3, #0
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800594a:	e154      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 800594c:	2304      	movs	r3, #4
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005952:	e150      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005954:	2308      	movs	r3, #8
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800595a:	e14c      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 800595c:	2310      	movs	r3, #16
 800595e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005962:	e148      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005964:	2320      	movs	r3, #32
 8005966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800596a:	e144      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 800596c:	2340      	movs	r3, #64	; 0x40
 800596e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005972:	e140      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005974:	2380      	movs	r3, #128	; 0x80
 8005976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800597a:	e13c      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a41      	ldr	r2, [pc, #260]	; (8005a88 <UART_SetConfig+0x640>)
 8005982:	4293      	cmp	r3, r2
 8005984:	f040 8082 	bne.w	8005a8c <UART_SetConfig+0x644>
 8005988:	4b3c      	ldr	r3, [pc, #240]	; (8005a7c <UART_SetConfig+0x634>)
 800598a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005990:	2b28      	cmp	r3, #40	; 0x28
 8005992:	d86d      	bhi.n	8005a70 <UART_SetConfig+0x628>
 8005994:	a201      	add	r2, pc, #4	; (adr r2, 800599c <UART_SetConfig+0x554>)
 8005996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599a:	bf00      	nop
 800599c:	08005a41 	.word	0x08005a41
 80059a0:	08005a71 	.word	0x08005a71
 80059a4:	08005a71 	.word	0x08005a71
 80059a8:	08005a71 	.word	0x08005a71
 80059ac:	08005a71 	.word	0x08005a71
 80059b0:	08005a71 	.word	0x08005a71
 80059b4:	08005a71 	.word	0x08005a71
 80059b8:	08005a71 	.word	0x08005a71
 80059bc:	08005a49 	.word	0x08005a49
 80059c0:	08005a71 	.word	0x08005a71
 80059c4:	08005a71 	.word	0x08005a71
 80059c8:	08005a71 	.word	0x08005a71
 80059cc:	08005a71 	.word	0x08005a71
 80059d0:	08005a71 	.word	0x08005a71
 80059d4:	08005a71 	.word	0x08005a71
 80059d8:	08005a71 	.word	0x08005a71
 80059dc:	08005a51 	.word	0x08005a51
 80059e0:	08005a71 	.word	0x08005a71
 80059e4:	08005a71 	.word	0x08005a71
 80059e8:	08005a71 	.word	0x08005a71
 80059ec:	08005a71 	.word	0x08005a71
 80059f0:	08005a71 	.word	0x08005a71
 80059f4:	08005a71 	.word	0x08005a71
 80059f8:	08005a71 	.word	0x08005a71
 80059fc:	08005a59 	.word	0x08005a59
 8005a00:	08005a71 	.word	0x08005a71
 8005a04:	08005a71 	.word	0x08005a71
 8005a08:	08005a71 	.word	0x08005a71
 8005a0c:	08005a71 	.word	0x08005a71
 8005a10:	08005a71 	.word	0x08005a71
 8005a14:	08005a71 	.word	0x08005a71
 8005a18:	08005a71 	.word	0x08005a71
 8005a1c:	08005a61 	.word	0x08005a61
 8005a20:	08005a71 	.word	0x08005a71
 8005a24:	08005a71 	.word	0x08005a71
 8005a28:	08005a71 	.word	0x08005a71
 8005a2c:	08005a71 	.word	0x08005a71
 8005a30:	08005a71 	.word	0x08005a71
 8005a34:	08005a71 	.word	0x08005a71
 8005a38:	08005a71 	.word	0x08005a71
 8005a3c:	08005a69 	.word	0x08005a69
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a46:	e0d6      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a4e:	e0d2      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005a50:	2308      	movs	r3, #8
 8005a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a56:	e0ce      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005a58:	2310      	movs	r3, #16
 8005a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a5e:	e0ca      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005a60:	2320      	movs	r3, #32
 8005a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a66:	e0c6      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005a68:	2340      	movs	r3, #64	; 0x40
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a6e:	e0c2      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a76:	e0be      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005a78:	40011400 	.word	0x40011400
 8005a7c:	58024400 	.word	0x58024400
 8005a80:	40007800 	.word	0x40007800
 8005a84:	40007c00 	.word	0x40007c00
 8005a88:	40011800 	.word	0x40011800
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4aad      	ldr	r2, [pc, #692]	; (8005d48 <UART_SetConfig+0x900>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d176      	bne.n	8005b84 <UART_SetConfig+0x73c>
 8005a96:	4bad      	ldr	r3, [pc, #692]	; (8005d4c <UART_SetConfig+0x904>)
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a9e:	2b28      	cmp	r3, #40	; 0x28
 8005aa0:	d86c      	bhi.n	8005b7c <UART_SetConfig+0x734>
 8005aa2:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <UART_SetConfig+0x660>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005b4d 	.word	0x08005b4d
 8005aac:	08005b7d 	.word	0x08005b7d
 8005ab0:	08005b7d 	.word	0x08005b7d
 8005ab4:	08005b7d 	.word	0x08005b7d
 8005ab8:	08005b7d 	.word	0x08005b7d
 8005abc:	08005b7d 	.word	0x08005b7d
 8005ac0:	08005b7d 	.word	0x08005b7d
 8005ac4:	08005b7d 	.word	0x08005b7d
 8005ac8:	08005b55 	.word	0x08005b55
 8005acc:	08005b7d 	.word	0x08005b7d
 8005ad0:	08005b7d 	.word	0x08005b7d
 8005ad4:	08005b7d 	.word	0x08005b7d
 8005ad8:	08005b7d 	.word	0x08005b7d
 8005adc:	08005b7d 	.word	0x08005b7d
 8005ae0:	08005b7d 	.word	0x08005b7d
 8005ae4:	08005b7d 	.word	0x08005b7d
 8005ae8:	08005b5d 	.word	0x08005b5d
 8005aec:	08005b7d 	.word	0x08005b7d
 8005af0:	08005b7d 	.word	0x08005b7d
 8005af4:	08005b7d 	.word	0x08005b7d
 8005af8:	08005b7d 	.word	0x08005b7d
 8005afc:	08005b7d 	.word	0x08005b7d
 8005b00:	08005b7d 	.word	0x08005b7d
 8005b04:	08005b7d 	.word	0x08005b7d
 8005b08:	08005b65 	.word	0x08005b65
 8005b0c:	08005b7d 	.word	0x08005b7d
 8005b10:	08005b7d 	.word	0x08005b7d
 8005b14:	08005b7d 	.word	0x08005b7d
 8005b18:	08005b7d 	.word	0x08005b7d
 8005b1c:	08005b7d 	.word	0x08005b7d
 8005b20:	08005b7d 	.word	0x08005b7d
 8005b24:	08005b7d 	.word	0x08005b7d
 8005b28:	08005b6d 	.word	0x08005b6d
 8005b2c:	08005b7d 	.word	0x08005b7d
 8005b30:	08005b7d 	.word	0x08005b7d
 8005b34:	08005b7d 	.word	0x08005b7d
 8005b38:	08005b7d 	.word	0x08005b7d
 8005b3c:	08005b7d 	.word	0x08005b7d
 8005b40:	08005b7d 	.word	0x08005b7d
 8005b44:	08005b7d 	.word	0x08005b7d
 8005b48:	08005b75 	.word	0x08005b75
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b52:	e050      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005b54:	2304      	movs	r3, #4
 8005b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b5a:	e04c      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005b5c:	2308      	movs	r3, #8
 8005b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b62:	e048      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005b64:	2310      	movs	r3, #16
 8005b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b6a:	e044      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005b6c:	2320      	movs	r3, #32
 8005b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b72:	e040      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005b74:	2340      	movs	r3, #64	; 0x40
 8005b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b7a:	e03c      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b82:	e038      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a71      	ldr	r2, [pc, #452]	; (8005d50 <UART_SetConfig+0x908>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d130      	bne.n	8005bf0 <UART_SetConfig+0x7a8>
 8005b8e:	4b6f      	ldr	r3, [pc, #444]	; (8005d4c <UART_SetConfig+0x904>)
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	2b05      	cmp	r3, #5
 8005b98:	d826      	bhi.n	8005be8 <UART_SetConfig+0x7a0>
 8005b9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <UART_SetConfig+0x758>)
 8005b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba0:	08005bb9 	.word	0x08005bb9
 8005ba4:	08005bc1 	.word	0x08005bc1
 8005ba8:	08005bc9 	.word	0x08005bc9
 8005bac:	08005bd1 	.word	0x08005bd1
 8005bb0:	08005bd9 	.word	0x08005bd9
 8005bb4:	08005be1 	.word	0x08005be1
 8005bb8:	2302      	movs	r3, #2
 8005bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bbe:	e01a      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005bc0:	2304      	movs	r3, #4
 8005bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bc6:	e016      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005bc8:	2308      	movs	r3, #8
 8005bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bce:	e012      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005bd0:	2310      	movs	r3, #16
 8005bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bd6:	e00e      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005bd8:	2320      	movs	r3, #32
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bde:	e00a      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005be0:	2340      	movs	r3, #64	; 0x40
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005be6:	e006      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bee:	e002      	b.n	8005bf6 <UART_SetConfig+0x7ae>
 8005bf0:	2380      	movs	r3, #128	; 0x80
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a55      	ldr	r2, [pc, #340]	; (8005d50 <UART_SetConfig+0x908>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	f040 80f8 	bne.w	8005df2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c06:	2b20      	cmp	r3, #32
 8005c08:	dc46      	bgt.n	8005c98 <UART_SetConfig+0x850>
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	db75      	blt.n	8005cfa <UART_SetConfig+0x8b2>
 8005c0e:	3b02      	subs	r3, #2
 8005c10:	2b1e      	cmp	r3, #30
 8005c12:	d872      	bhi.n	8005cfa <UART_SetConfig+0x8b2>
 8005c14:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <UART_SetConfig+0x7d4>)
 8005c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1a:	bf00      	nop
 8005c1c:	08005c9f 	.word	0x08005c9f
 8005c20:	08005cfb 	.word	0x08005cfb
 8005c24:	08005ca7 	.word	0x08005ca7
 8005c28:	08005cfb 	.word	0x08005cfb
 8005c2c:	08005cfb 	.word	0x08005cfb
 8005c30:	08005cfb 	.word	0x08005cfb
 8005c34:	08005cb7 	.word	0x08005cb7
 8005c38:	08005cfb 	.word	0x08005cfb
 8005c3c:	08005cfb 	.word	0x08005cfb
 8005c40:	08005cfb 	.word	0x08005cfb
 8005c44:	08005cfb 	.word	0x08005cfb
 8005c48:	08005cfb 	.word	0x08005cfb
 8005c4c:	08005cfb 	.word	0x08005cfb
 8005c50:	08005cfb 	.word	0x08005cfb
 8005c54:	08005cc7 	.word	0x08005cc7
 8005c58:	08005cfb 	.word	0x08005cfb
 8005c5c:	08005cfb 	.word	0x08005cfb
 8005c60:	08005cfb 	.word	0x08005cfb
 8005c64:	08005cfb 	.word	0x08005cfb
 8005c68:	08005cfb 	.word	0x08005cfb
 8005c6c:	08005cfb 	.word	0x08005cfb
 8005c70:	08005cfb 	.word	0x08005cfb
 8005c74:	08005cfb 	.word	0x08005cfb
 8005c78:	08005cfb 	.word	0x08005cfb
 8005c7c:	08005cfb 	.word	0x08005cfb
 8005c80:	08005cfb 	.word	0x08005cfb
 8005c84:	08005cfb 	.word	0x08005cfb
 8005c88:	08005cfb 	.word	0x08005cfb
 8005c8c:	08005cfb 	.word	0x08005cfb
 8005c90:	08005cfb 	.word	0x08005cfb
 8005c94:	08005ced 	.word	0x08005ced
 8005c98:	2b40      	cmp	r3, #64	; 0x40
 8005c9a:	d02a      	beq.n	8005cf2 <UART_SetConfig+0x8aa>
 8005c9c:	e02d      	b.n	8005cfa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005c9e:	f7fe fb45 	bl	800432c <HAL_RCCEx_GetD3PCLK1Freq>
 8005ca2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ca4:	e02f      	b.n	8005d06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe fb54 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cb4:	e027      	b.n	8005d06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cb6:	f107 0318 	add.w	r3, r7, #24
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fe fca0 	bl	8004600 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cc4:	e01f      	b.n	8005d06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cc6:	4b21      	ldr	r3, [pc, #132]	; (8005d4c <UART_SetConfig+0x904>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d009      	beq.n	8005ce6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cd2:	4b1e      	ldr	r3, [pc, #120]	; (8005d4c <UART_SetConfig+0x904>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	08db      	lsrs	r3, r3, #3
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	4a1d      	ldr	r2, [pc, #116]	; (8005d54 <UART_SetConfig+0x90c>)
 8005cde:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ce4:	e00f      	b.n	8005d06 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005ce6:	4b1b      	ldr	r3, [pc, #108]	; (8005d54 <UART_SetConfig+0x90c>)
 8005ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cea:	e00c      	b.n	8005d06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cec:	4b1a      	ldr	r3, [pc, #104]	; (8005d58 <UART_SetConfig+0x910>)
 8005cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cf0:	e009      	b.n	8005d06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cf8:	e005      	b.n	8005d06 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005d04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 81ee 	beq.w	80060ea <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	4a12      	ldr	r2, [pc, #72]	; (8005d5c <UART_SetConfig+0x914>)
 8005d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d20:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	4613      	mov	r3, r2
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	4413      	add	r3, r2
 8005d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d305      	bcc.n	8005d3e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d910      	bls.n	8005d60 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d44:	e1d1      	b.n	80060ea <UART_SetConfig+0xca2>
 8005d46:	bf00      	nop
 8005d48:	40011c00 	.word	0x40011c00
 8005d4c:	58024400 	.word	0x58024400
 8005d50:	58000c00 	.word	0x58000c00
 8005d54:	03d09000 	.word	0x03d09000
 8005d58:	003d0900 	.word	0x003d0900
 8005d5c:	080097dc 	.word	0x080097dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d62:	2200      	movs	r2, #0
 8005d64:	60bb      	str	r3, [r7, #8]
 8005d66:	60fa      	str	r2, [r7, #12]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	4ac0      	ldr	r2, [pc, #768]	; (8006070 <UART_SetConfig+0xc28>)
 8005d6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2200      	movs	r2, #0
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	607a      	str	r2, [r7, #4]
 8005d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d82:	f7fa fab3 	bl	80002ec <__aeabi_uldivmod>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	020b      	lsls	r3, r1, #8
 8005d98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d9c:	0202      	lsls	r2, r0, #8
 8005d9e:	6979      	ldr	r1, [r7, #20]
 8005da0:	6849      	ldr	r1, [r1, #4]
 8005da2:	0849      	lsrs	r1, r1, #1
 8005da4:	2000      	movs	r0, #0
 8005da6:	460c      	mov	r4, r1
 8005da8:	4605      	mov	r5, r0
 8005daa:	eb12 0804 	adds.w	r8, r2, r4
 8005dae:	eb43 0905 	adc.w	r9, r3, r5
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	469a      	mov	sl, r3
 8005dba:	4693      	mov	fp, r2
 8005dbc:	4652      	mov	r2, sl
 8005dbe:	465b      	mov	r3, fp
 8005dc0:	4640      	mov	r0, r8
 8005dc2:	4649      	mov	r1, r9
 8005dc4:	f7fa fa92 	bl	80002ec <__aeabi_uldivmod>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4613      	mov	r3, r2
 8005dce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dd6:	d308      	bcc.n	8005dea <UART_SetConfig+0x9a2>
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dde:	d204      	bcs.n	8005dea <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005de6:	60da      	str	r2, [r3, #12]
 8005de8:	e17f      	b.n	80060ea <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005df0:	e17b      	b.n	80060ea <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dfa:	f040 80bd 	bne.w	8005f78 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005dfe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	dc48      	bgt.n	8005e98 <UART_SetConfig+0xa50>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	db7b      	blt.n	8005f02 <UART_SetConfig+0xaba>
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	d879      	bhi.n	8005f02 <UART_SetConfig+0xaba>
 8005e0e:	a201      	add	r2, pc, #4	; (adr r2, 8005e14 <UART_SetConfig+0x9cc>)
 8005e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e14:	08005e9f 	.word	0x08005e9f
 8005e18:	08005ea7 	.word	0x08005ea7
 8005e1c:	08005f03 	.word	0x08005f03
 8005e20:	08005f03 	.word	0x08005f03
 8005e24:	08005eaf 	.word	0x08005eaf
 8005e28:	08005f03 	.word	0x08005f03
 8005e2c:	08005f03 	.word	0x08005f03
 8005e30:	08005f03 	.word	0x08005f03
 8005e34:	08005ebf 	.word	0x08005ebf
 8005e38:	08005f03 	.word	0x08005f03
 8005e3c:	08005f03 	.word	0x08005f03
 8005e40:	08005f03 	.word	0x08005f03
 8005e44:	08005f03 	.word	0x08005f03
 8005e48:	08005f03 	.word	0x08005f03
 8005e4c:	08005f03 	.word	0x08005f03
 8005e50:	08005f03 	.word	0x08005f03
 8005e54:	08005ecf 	.word	0x08005ecf
 8005e58:	08005f03 	.word	0x08005f03
 8005e5c:	08005f03 	.word	0x08005f03
 8005e60:	08005f03 	.word	0x08005f03
 8005e64:	08005f03 	.word	0x08005f03
 8005e68:	08005f03 	.word	0x08005f03
 8005e6c:	08005f03 	.word	0x08005f03
 8005e70:	08005f03 	.word	0x08005f03
 8005e74:	08005f03 	.word	0x08005f03
 8005e78:	08005f03 	.word	0x08005f03
 8005e7c:	08005f03 	.word	0x08005f03
 8005e80:	08005f03 	.word	0x08005f03
 8005e84:	08005f03 	.word	0x08005f03
 8005e88:	08005f03 	.word	0x08005f03
 8005e8c:	08005f03 	.word	0x08005f03
 8005e90:	08005f03 	.word	0x08005f03
 8005e94:	08005ef5 	.word	0x08005ef5
 8005e98:	2b40      	cmp	r3, #64	; 0x40
 8005e9a:	d02e      	beq.n	8005efa <UART_SetConfig+0xab2>
 8005e9c:	e031      	b.n	8005f02 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e9e:	f7fd f85b 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 8005ea2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ea4:	e033      	b.n	8005f0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ea6:	f7fd f86d 	bl	8002f84 <HAL_RCC_GetPCLK2Freq>
 8005eaa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005eac:	e02f      	b.n	8005f0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fe fa50 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ebc:	e027      	b.n	8005f0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ebe:	f107 0318 	add.w	r3, r7, #24
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fe fb9c 	bl	8004600 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ecc:	e01f      	b.n	8005f0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ece:	4b69      	ldr	r3, [pc, #420]	; (8006074 <UART_SetConfig+0xc2c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d009      	beq.n	8005eee <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005eda:	4b66      	ldr	r3, [pc, #408]	; (8006074 <UART_SetConfig+0xc2c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	08db      	lsrs	r3, r3, #3
 8005ee0:	f003 0303 	and.w	r3, r3, #3
 8005ee4:	4a64      	ldr	r2, [pc, #400]	; (8006078 <UART_SetConfig+0xc30>)
 8005ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005eec:	e00f      	b.n	8005f0e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005eee:	4b62      	ldr	r3, [pc, #392]	; (8006078 <UART_SetConfig+0xc30>)
 8005ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ef2:	e00c      	b.n	8005f0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ef4:	4b61      	ldr	r3, [pc, #388]	; (800607c <UART_SetConfig+0xc34>)
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ef8:	e009      	b.n	8005f0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f00:	e005      	b.n	8005f0e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005f0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 80ea 	beq.w	80060ea <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	4a55      	ldr	r2, [pc, #340]	; (8006070 <UART_SetConfig+0xc28>)
 8005f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f20:	461a      	mov	r2, r3
 8005f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f24:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f28:	005a      	lsls	r2, r3, #1
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	085b      	lsrs	r3, r3, #1
 8005f30:	441a      	add	r2, r3
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3e:	2b0f      	cmp	r3, #15
 8005f40:	d916      	bls.n	8005f70 <UART_SetConfig+0xb28>
 8005f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f48:	d212      	bcs.n	8005f70 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f023 030f 	bic.w	r3, r3, #15
 8005f52:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f56:	085b      	lsrs	r3, r3, #1
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	f003 0307 	and.w	r3, r3, #7
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f62:	4313      	orrs	r3, r2
 8005f64:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005f6c:	60da      	str	r2, [r3, #12]
 8005f6e:	e0bc      	b.n	80060ea <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005f76:	e0b8      	b.n	80060ea <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f78:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	dc4b      	bgt.n	8006018 <UART_SetConfig+0xbd0>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f2c0 8087 	blt.w	8006094 <UART_SetConfig+0xc4c>
 8005f86:	2b20      	cmp	r3, #32
 8005f88:	f200 8084 	bhi.w	8006094 <UART_SetConfig+0xc4c>
 8005f8c:	a201      	add	r2, pc, #4	; (adr r2, 8005f94 <UART_SetConfig+0xb4c>)
 8005f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f92:	bf00      	nop
 8005f94:	0800601f 	.word	0x0800601f
 8005f98:	08006027 	.word	0x08006027
 8005f9c:	08006095 	.word	0x08006095
 8005fa0:	08006095 	.word	0x08006095
 8005fa4:	0800602f 	.word	0x0800602f
 8005fa8:	08006095 	.word	0x08006095
 8005fac:	08006095 	.word	0x08006095
 8005fb0:	08006095 	.word	0x08006095
 8005fb4:	0800603f 	.word	0x0800603f
 8005fb8:	08006095 	.word	0x08006095
 8005fbc:	08006095 	.word	0x08006095
 8005fc0:	08006095 	.word	0x08006095
 8005fc4:	08006095 	.word	0x08006095
 8005fc8:	08006095 	.word	0x08006095
 8005fcc:	08006095 	.word	0x08006095
 8005fd0:	08006095 	.word	0x08006095
 8005fd4:	0800604f 	.word	0x0800604f
 8005fd8:	08006095 	.word	0x08006095
 8005fdc:	08006095 	.word	0x08006095
 8005fe0:	08006095 	.word	0x08006095
 8005fe4:	08006095 	.word	0x08006095
 8005fe8:	08006095 	.word	0x08006095
 8005fec:	08006095 	.word	0x08006095
 8005ff0:	08006095 	.word	0x08006095
 8005ff4:	08006095 	.word	0x08006095
 8005ff8:	08006095 	.word	0x08006095
 8005ffc:	08006095 	.word	0x08006095
 8006000:	08006095 	.word	0x08006095
 8006004:	08006095 	.word	0x08006095
 8006008:	08006095 	.word	0x08006095
 800600c:	08006095 	.word	0x08006095
 8006010:	08006095 	.word	0x08006095
 8006014:	08006087 	.word	0x08006087
 8006018:	2b40      	cmp	r3, #64	; 0x40
 800601a:	d037      	beq.n	800608c <UART_SetConfig+0xc44>
 800601c:	e03a      	b.n	8006094 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800601e:	f7fc ff9b 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 8006022:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006024:	e03c      	b.n	80060a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006026:	f7fc ffad 	bl	8002f84 <HAL_RCC_GetPCLK2Freq>
 800602a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800602c:	e038      	b.n	80060a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800602e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006032:	4618      	mov	r0, r3
 8006034:	f7fe f990 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800603c:	e030      	b.n	80060a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800603e:	f107 0318 	add.w	r3, r7, #24
 8006042:	4618      	mov	r0, r3
 8006044:	f7fe fadc 	bl	8004600 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800604c:	e028      	b.n	80060a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800604e:	4b09      	ldr	r3, [pc, #36]	; (8006074 <UART_SetConfig+0xc2c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	2b00      	cmp	r3, #0
 8006058:	d012      	beq.n	8006080 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800605a:	4b06      	ldr	r3, [pc, #24]	; (8006074 <UART_SetConfig+0xc2c>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	08db      	lsrs	r3, r3, #3
 8006060:	f003 0303 	and.w	r3, r3, #3
 8006064:	4a04      	ldr	r2, [pc, #16]	; (8006078 <UART_SetConfig+0xc30>)
 8006066:	fa22 f303 	lsr.w	r3, r2, r3
 800606a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800606c:	e018      	b.n	80060a0 <UART_SetConfig+0xc58>
 800606e:	bf00      	nop
 8006070:	080097dc 	.word	0x080097dc
 8006074:	58024400 	.word	0x58024400
 8006078:	03d09000 	.word	0x03d09000
 800607c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006080:	4b24      	ldr	r3, [pc, #144]	; (8006114 <UART_SetConfig+0xccc>)
 8006082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006084:	e00c      	b.n	80060a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006086:	4b24      	ldr	r3, [pc, #144]	; (8006118 <UART_SetConfig+0xcd0>)
 8006088:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800608a:	e009      	b.n	80060a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800608c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006090:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006092:	e005      	b.n	80060a0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800609e:	bf00      	nop
    }

    if (pclk != 0U)
 80060a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d021      	beq.n	80060ea <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	4a1c      	ldr	r2, [pc, #112]	; (800611c <UART_SetConfig+0xcd4>)
 80060ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060b0:	461a      	mov	r2, r3
 80060b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	085b      	lsrs	r3, r3, #1
 80060be:	441a      	add	r2, r3
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060cc:	2b0f      	cmp	r3, #15
 80060ce:	d909      	bls.n	80060e4 <UART_SetConfig+0xc9c>
 80060d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d6:	d205      	bcs.n	80060e4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060da:	b29a      	uxth	r2, r3
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60da      	str	r2, [r3, #12]
 80060e2:	e002      	b.n	80060ea <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2200      	movs	r2, #0
 80060fe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2200      	movs	r2, #0
 8006104:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006106:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800610a:	4618      	mov	r0, r3
 800610c:	3748      	adds	r7, #72	; 0x48
 800610e:	46bd      	mov	sp, r7
 8006110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006114:	03d09000 	.word	0x03d09000
 8006118:	003d0900 	.word	0x003d0900
 800611c:	080097dc 	.word	0x080097dc

08006120 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00a      	beq.n	800614a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006192:	f003 0308 	and.w	r3, r3, #8
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01a      	beq.n	8006236 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800621e:	d10a      	bne.n	8006236 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	605a      	str	r2, [r3, #4]
  }
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b098      	sub	sp, #96	; 0x60
 8006268:	af02      	add	r7, sp, #8
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006274:	f7fa fe3a 	bl	8000eec <HAL_GetTick>
 8006278:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0308 	and.w	r3, r3, #8
 8006284:	2b08      	cmp	r3, #8
 8006286:	d12f      	bne.n	80062e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006288:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006290:	2200      	movs	r2, #0
 8006292:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f88e 	bl	80063b8 <UART_WaitOnFlagUntilTimeout>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d022      	beq.n	80062e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062aa:	e853 3f00 	ldrex	r3, [r3]
 80062ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062b6:	653b      	str	r3, [r7, #80]	; 0x50
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	461a      	mov	r2, r3
 80062be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062c0:	647b      	str	r3, [r7, #68]	; 0x44
 80062c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062c8:	e841 2300 	strex	r3, r2, [r1]
 80062cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e6      	bne.n	80062a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e063      	b.n	80063b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b04      	cmp	r3, #4
 80062f4:	d149      	bne.n	800638a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062fe:	2200      	movs	r2, #0
 8006300:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f857 	bl	80063b8 <UART_WaitOnFlagUntilTimeout>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d03c      	beq.n	800638a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	e853 3f00 	ldrex	r3, [r3]
 800631c:	623b      	str	r3, [r7, #32]
   return(result);
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006324:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800632e:	633b      	str	r3, [r7, #48]	; 0x30
 8006330:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006336:	e841 2300 	strex	r3, r2, [r1]
 800633a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1e6      	bne.n	8006310 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3308      	adds	r3, #8
 8006348:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	60fb      	str	r3, [r7, #12]
   return(result);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f023 0301 	bic.w	r3, r3, #1
 8006358:	64bb      	str	r3, [r7, #72]	; 0x48
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3308      	adds	r3, #8
 8006360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006362:	61fa      	str	r2, [r7, #28]
 8006364:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006366:	69b9      	ldr	r1, [r7, #24]
 8006368:	69fa      	ldr	r2, [r7, #28]
 800636a:	e841 2300 	strex	r3, r2, [r1]
 800636e:	617b      	str	r3, [r7, #20]
   return(result);
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1e5      	bne.n	8006342 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2220      	movs	r2, #32
 800637a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e012      	b.n	80063b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2220      	movs	r2, #32
 800638e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3758      	adds	r7, #88	; 0x58
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	603b      	str	r3, [r7, #0]
 80063c4:	4613      	mov	r3, r2
 80063c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c8:	e049      	b.n	800645e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d045      	beq.n	800645e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063d2:	f7fa fd8b 	bl	8000eec <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d302      	bcc.n	80063e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e048      	b.n	800647e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0304 	and.w	r3, r3, #4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d031      	beq.n	800645e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b08      	cmp	r3, #8
 8006406:	d110      	bne.n	800642a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2208      	movs	r2, #8
 800640e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 f95b 	bl	80066cc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2208      	movs	r2, #8
 800641a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e029      	b.n	800647e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006438:	d111      	bne.n	800645e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006442:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 f941 	bl	80066cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2220      	movs	r2, #32
 800644e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e00f      	b.n	800647e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4013      	ands	r3, r2
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	429a      	cmp	r2, r3
 800646c:	bf0c      	ite	eq
 800646e:	2301      	moveq	r3, #1
 8006470:	2300      	movne	r3, #0
 8006472:	b2db      	uxtb	r3, r3
 8006474:	461a      	mov	r2, r3
 8006476:	79fb      	ldrb	r3, [r7, #7]
 8006478:	429a      	cmp	r2, r3
 800647a:	d0a6      	beq.n	80063ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006488:	b480      	push	{r7}
 800648a:	b0a3      	sub	sp, #140	; 0x8c
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	4613      	mov	r3, r2
 8006494:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	88fa      	ldrh	r2, [r7, #6]
 80064a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	88fa      	ldrh	r2, [r7, #6]
 80064a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ba:	d10e      	bne.n	80064da <UART_Start_Receive_IT+0x52>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d105      	bne.n	80064d0 <UART_Start_Receive_IT+0x48>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80064ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064ce:	e02d      	b.n	800652c <UART_Start_Receive_IT+0xa4>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	22ff      	movs	r2, #255	; 0xff
 80064d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064d8:	e028      	b.n	800652c <UART_Start_Receive_IT+0xa4>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10d      	bne.n	80064fe <UART_Start_Receive_IT+0x76>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d104      	bne.n	80064f4 <UART_Start_Receive_IT+0x6c>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	22ff      	movs	r2, #255	; 0xff
 80064ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064f2:	e01b      	b.n	800652c <UART_Start_Receive_IT+0xa4>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	227f      	movs	r2, #127	; 0x7f
 80064f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064fc:	e016      	b.n	800652c <UART_Start_Receive_IT+0xa4>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006506:	d10d      	bne.n	8006524 <UART_Start_Receive_IT+0x9c>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d104      	bne.n	800651a <UART_Start_Receive_IT+0x92>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	227f      	movs	r2, #127	; 0x7f
 8006514:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006518:	e008      	b.n	800652c <UART_Start_Receive_IT+0xa4>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	223f      	movs	r2, #63	; 0x3f
 800651e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006522:	e003      	b.n	800652c <UART_Start_Receive_IT+0xa4>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2222      	movs	r2, #34	; 0x22
 8006538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3308      	adds	r3, #8
 8006542:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006546:	e853 3f00 	ldrex	r3, [r3]
 800654a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800654c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800654e:	f043 0301 	orr.w	r3, r3, #1
 8006552:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3308      	adds	r3, #8
 800655c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006560:	673a      	str	r2, [r7, #112]	; 0x70
 8006562:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006566:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800656e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e3      	bne.n	800653c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800657c:	d14f      	bne.n	800661e <UART_Start_Receive_IT+0x196>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006584:	88fa      	ldrh	r2, [r7, #6]
 8006586:	429a      	cmp	r2, r3
 8006588:	d349      	bcc.n	800661e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006592:	d107      	bne.n	80065a4 <UART_Start_Receive_IT+0x11c>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d103      	bne.n	80065a4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4a47      	ldr	r2, [pc, #284]	; (80066bc <UART_Start_Receive_IT+0x234>)
 80065a0:	675a      	str	r2, [r3, #116]	; 0x74
 80065a2:	e002      	b.n	80065aa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4a46      	ldr	r2, [pc, #280]	; (80066c0 <UART_Start_Receive_IT+0x238>)
 80065a8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d01a      	beq.n	80065e8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065d6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065dc:	e841 2300 	strex	r3, r2, [r1]
 80065e0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e4      	bne.n	80065b2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3308      	adds	r3, #8
 80065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f2:	e853 3f00 	ldrex	r3, [r3]
 80065f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3308      	adds	r3, #8
 8006606:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006608:	64ba      	str	r2, [r7, #72]	; 0x48
 800660a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800660e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006610:	e841 2300 	strex	r3, r2, [r1]
 8006614:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e5      	bne.n	80065e8 <UART_Start_Receive_IT+0x160>
 800661c:	e046      	b.n	80066ac <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006626:	d107      	bne.n	8006638 <UART_Start_Receive_IT+0x1b0>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d103      	bne.n	8006638 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4a24      	ldr	r2, [pc, #144]	; (80066c4 <UART_Start_Receive_IT+0x23c>)
 8006634:	675a      	str	r2, [r3, #116]	; 0x74
 8006636:	e002      	b.n	800663e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4a23      	ldr	r2, [pc, #140]	; (80066c8 <UART_Start_Receive_IT+0x240>)
 800663c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d019      	beq.n	800667a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	e853 3f00 	ldrex	r3, [r3]
 8006652:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800665a:	677b      	str	r3, [r7, #116]	; 0x74
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	461a      	mov	r2, r3
 8006662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006664:	637b      	str	r3, [r7, #52]	; 0x34
 8006666:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006668:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800666a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800666c:	e841 2300 	strex	r3, r2, [r1]
 8006670:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e6      	bne.n	8006646 <UART_Start_Receive_IT+0x1be>
 8006678:	e018      	b.n	80066ac <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	613b      	str	r3, [r7, #16]
   return(result);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f043 0320 	orr.w	r3, r3, #32
 800668e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006698:	623b      	str	r3, [r7, #32]
 800669a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669c:	69f9      	ldr	r1, [r7, #28]
 800669e:	6a3a      	ldr	r2, [r7, #32]
 80066a0:	e841 2300 	strex	r3, r2, [r1]
 80066a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e6      	bne.n	800667a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	378c      	adds	r7, #140	; 0x8c
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	08006eed 	.word	0x08006eed
 80066c0:	08006b8d 	.word	0x08006b8d
 80066c4:	080069d5 	.word	0x080069d5
 80066c8:	0800681d 	.word	0x0800681d

080066cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b095      	sub	sp, #84	; 0x54
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	461a      	mov	r2, r3
 80066f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f2:	643b      	str	r3, [r7, #64]	; 0x40
 80066f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066fa:	e841 2300 	strex	r3, r2, [r1]
 80066fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1e6      	bne.n	80066d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3308      	adds	r3, #8
 800670c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	61fb      	str	r3, [r7, #28]
   return(result);
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	4b1e      	ldr	r3, [pc, #120]	; (8006794 <UART_EndRxTransfer+0xc8>)
 800671a:	4013      	ands	r3, r2
 800671c:	64bb      	str	r3, [r7, #72]	; 0x48
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3308      	adds	r3, #8
 8006724:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006728:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800672c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e5      	bne.n	8006706 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800673e:	2b01      	cmp	r3, #1
 8006740:	d118      	bne.n	8006774 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f023 0310 	bic.w	r3, r3, #16
 8006756:	647b      	str	r3, [r7, #68]	; 0x44
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006764:	6979      	ldr	r1, [r7, #20]
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	613b      	str	r3, [r7, #16]
   return(result);
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e6      	bne.n	8006742 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2220      	movs	r2, #32
 8006778:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006788:	bf00      	nop
 800678a:	3754      	adds	r7, #84	; 0x54
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	effffffe 	.word	0xeffffffe

08006798 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f7f9 ff3a 	bl	8000630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067bc:	bf00      	nop
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	e853 3f00 	ldrex	r3, [r3]
 80067d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067e0:	61fb      	str	r3, [r7, #28]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	61bb      	str	r3, [r7, #24]
 80067ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ee:	6979      	ldr	r1, [r7, #20]
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	613b      	str	r3, [r7, #16]
   return(result);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1e6      	bne.n	80067cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7fe fe05 	bl	800541c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006812:	bf00      	nop
 8006814:	3720      	adds	r7, #32
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b09c      	sub	sp, #112	; 0x70
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800682a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006834:	2b22      	cmp	r3, #34	; 0x22
 8006836:	f040 80be 	bne.w	80069b6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006844:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006848:	b2d9      	uxtb	r1, r3
 800684a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800684e:	b2da      	uxtb	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006854:	400a      	ands	r2, r1
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	b29a      	uxth	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800687c:	b29b      	uxth	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	f040 80a1 	bne.w	80069c6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006894:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006898:	66bb      	str	r3, [r7, #104]	; 0x68
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	461a      	mov	r2, r3
 80068a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80068a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e6      	bne.n	8006884 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3308      	adds	r3, #8
 80068bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c8:	f023 0301 	bic.w	r3, r3, #1
 80068cc:	667b      	str	r3, [r7, #100]	; 0x64
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3308      	adds	r3, #8
 80068d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80068d6:	647a      	str	r2, [r7, #68]	; 0x44
 80068d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e5      	bne.n	80068b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a33      	ldr	r2, [pc, #204]	; (80069d0 <UART_RxISR_8BIT+0x1b4>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d01f      	beq.n	8006948 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d018      	beq.n	8006948 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	623b      	str	r3, [r7, #32]
   return(result);
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800692a:	663b      	str	r3, [r7, #96]	; 0x60
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006934:	633b      	str	r3, [r7, #48]	; 0x30
 8006936:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800693a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e6      	bne.n	8006916 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800694c:	2b01      	cmp	r3, #1
 800694e:	d12e      	bne.n	80069ae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	e853 3f00 	ldrex	r3, [r3]
 8006962:	60fb      	str	r3, [r7, #12]
   return(result);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0310 	bic.w	r3, r3, #16
 800696a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	461a      	mov	r2, r3
 8006972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006974:	61fb      	str	r3, [r7, #28]
 8006976:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	69b9      	ldr	r1, [r7, #24]
 800697a:	69fa      	ldr	r2, [r7, #28]
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	617b      	str	r3, [r7, #20]
   return(result);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e6      	bne.n	8006956 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	f003 0310 	and.w	r3, r3, #16
 8006992:	2b10      	cmp	r3, #16
 8006994:	d103      	bne.n	800699e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2210      	movs	r2, #16
 800699c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7fe fd42 	bl	8005430 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069ac:	e00b      	b.n	80069c6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7f9 fe1a 	bl	80005e8 <HAL_UART_RxCpltCallback>
}
 80069b4:	e007      	b.n	80069c6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	699a      	ldr	r2, [r3, #24]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f042 0208 	orr.w	r2, r2, #8
 80069c4:	619a      	str	r2, [r3, #24]
}
 80069c6:	bf00      	nop
 80069c8:	3770      	adds	r7, #112	; 0x70
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	58000c00 	.word	0x58000c00

080069d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b09c      	sub	sp, #112	; 0x70
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80069e2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ec:	2b22      	cmp	r3, #34	; 0x22
 80069ee:	f040 80be 	bne.w	8006b6e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a00:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006a02:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006a06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a16:	1c9a      	adds	r2, r3, #2
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f040 80a1 	bne.w	8006b7e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a50:	667b      	str	r3, [r7, #100]	; 0x64
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a5a:	657b      	str	r3, [r7, #84]	; 0x54
 8006a5c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e6      	bne.n	8006a3c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3308      	adds	r3, #8
 8006a74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	663b      	str	r3, [r7, #96]	; 0x60
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a8e:	643a      	str	r2, [r7, #64]	; 0x40
 8006a90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e5      	bne.n	8006a6e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a33      	ldr	r2, [pc, #204]	; (8006b88 <UART_RxISR_16BIT+0x1b4>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d01f      	beq.n	8006b00 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d018      	beq.n	8006b00 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	e853 3f00 	ldrex	r3, [r3]
 8006ada:	61fb      	str	r3, [r7, #28]
   return(result);
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aee:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006af4:	e841 2300 	strex	r3, r2, [r1]
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1e6      	bne.n	8006ace <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d12e      	bne.n	8006b66 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	e853 3f00 	ldrex	r3, [r3]
 8006b1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f023 0310 	bic.w	r3, r3, #16
 8006b22:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b2c:	61bb      	str	r3, [r7, #24]
 8006b2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	6979      	ldr	r1, [r7, #20]
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e6      	bne.n	8006b0e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	f003 0310 	and.w	r3, r3, #16
 8006b4a:	2b10      	cmp	r3, #16
 8006b4c:	d103      	bne.n	8006b56 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2210      	movs	r2, #16
 8006b54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fe fc66 	bl	8005430 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b64:	e00b      	b.n	8006b7e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7f9 fd3e 	bl	80005e8 <HAL_UART_RxCpltCallback>
}
 8006b6c:	e007      	b.n	8006b7e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	699a      	ldr	r2, [r3, #24]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f042 0208 	orr.w	r2, r2, #8
 8006b7c:	619a      	str	r2, [r3, #24]
}
 8006b7e:	bf00      	nop
 8006b80:	3770      	adds	r7, #112	; 0x70
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	58000c00 	.word	0x58000c00

08006b8c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b0ac      	sub	sp, #176	; 0xb0
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b9a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bc2:	2b22      	cmp	r3, #34	; 0x22
 8006bc4:	f040 8180 	bne.w	8006ec8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006bce:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006bd2:	e123      	b.n	8006e1c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bde:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006be2:	b2d9      	uxtb	r1, r3
 8006be4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bee:	400a      	ands	r2, r1
 8006bf0:	b2d2      	uxtb	r2, r2
 8006bf2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c1e:	f003 0307 	and.w	r3, r3, #7
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d053      	beq.n	8006cce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d011      	beq.n	8006c56 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00b      	beq.n	8006c56 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2201      	movs	r2, #1
 8006c44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4c:	f043 0201 	orr.w	r2, r3, #1
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d011      	beq.n	8006c86 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00b      	beq.n	8006c86 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2202      	movs	r2, #2
 8006c74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7c:	f043 0204 	orr.w	r2, r3, #4
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c8a:	f003 0304 	and.w	r3, r3, #4
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d011      	beq.n	8006cb6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00b      	beq.n	8006cb6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2204      	movs	r2, #4
 8006ca4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cac:	f043 0202 	orr.w	r2, r3, #2
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d006      	beq.n	8006cce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7f9 fcb5 	bl	8000630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f040 80a0 	bne.w	8006e1c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ce4:	e853 3f00 	ldrex	r3, [r3]
 8006ce8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cfe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d00:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d02:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006d04:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006d06:	e841 2300 	strex	r3, r2, [r1]
 8006d0a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1e4      	bne.n	8006cdc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3308      	adds	r3, #8
 8006d18:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d1c:	e853 3f00 	ldrex	r3, [r3]
 8006d20:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006d22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d24:	4b6e      	ldr	r3, [pc, #440]	; (8006ee0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8006d26:	4013      	ands	r3, r2
 8006d28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3308      	adds	r3, #8
 8006d32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d36:	66ba      	str	r2, [r7, #104]	; 0x68
 8006d38:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006d3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006d44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e3      	bne.n	8006d12 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a60      	ldr	r2, [pc, #384]	; (8006ee4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d021      	beq.n	8006dac <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d01a      	beq.n	8006dac <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d7e:	e853 3f00 	ldrex	r3, [r3]
 8006d82:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	461a      	mov	r2, r3
 8006d94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d98:	657b      	str	r3, [r7, #84]	; 0x54
 8006d9a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006da0:	e841 2300 	strex	r3, r2, [r1]
 8006da4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e4      	bne.n	8006d76 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d130      	bne.n	8006e16 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc2:	e853 3f00 	ldrex	r3, [r3]
 8006dc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	f023 0310 	bic.w	r3, r3, #16
 8006dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8006dde:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006de2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e4      	bne.n	8006dba <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	f003 0310 	and.w	r3, r3, #16
 8006dfa:	2b10      	cmp	r3, #16
 8006dfc:	d103      	bne.n	8006e06 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2210      	movs	r2, #16
 8006e04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7fe fb0e 	bl	8005430 <HAL_UARTEx_RxEventCallback>
 8006e14:	e002      	b.n	8006e1c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7f9 fbe6 	bl	80005e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e1c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d006      	beq.n	8006e32 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8006e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e28:	f003 0320 	and.w	r3, r3, #32
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f47f aed1 	bne.w	8006bd4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e38:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006e3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d049      	beq.n	8006ed8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e4a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d242      	bcs.n	8006ed8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3308      	adds	r3, #8
 8006e58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3308      	adds	r3, #8
 8006e72:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006e76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e3      	bne.n	8006e52 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a16      	ldr	r2, [pc, #88]	; (8006ee8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006e8e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	f043 0320 	orr.w	r3, r3, #32
 8006ea4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006eb2:	61bb      	str	r3, [r7, #24]
 8006eb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	6979      	ldr	r1, [r7, #20]
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e4      	bne.n	8006e90 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ec6:	e007      	b.n	8006ed8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0208 	orr.w	r2, r2, #8
 8006ed6:	619a      	str	r2, [r3, #24]
}
 8006ed8:	bf00      	nop
 8006eda:	37b0      	adds	r7, #176	; 0xb0
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	effffffe 	.word	0xeffffffe
 8006ee4:	58000c00 	.word	0x58000c00
 8006ee8:	0800681d 	.word	0x0800681d

08006eec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b0ae      	sub	sp, #184	; 0xb8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006efa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f22:	2b22      	cmp	r3, #34	; 0x22
 8006f24:	f040 8184 	bne.w	8007230 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f2e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f32:	e127      	b.n	8007184 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006f46:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006f4a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006f4e:	4013      	ands	r3, r2
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f5c:	1c9a      	adds	r2, r3, #2
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f82:	f003 0307 	and.w	r3, r3, #7
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d053      	beq.n	8007032 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d011      	beq.n	8006fba <UART_RxISR_16BIT_FIFOEN+0xce>
 8006f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00b      	beq.n	8006fba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb0:	f043 0201 	orr.w	r2, r3, #1
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d011      	beq.n	8006fea <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006fc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00b      	beq.n	8006fea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe0:	f043 0204 	orr.w	r2, r3, #4
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fee:	f003 0304 	and.w	r3, r3, #4
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d011      	beq.n	800701a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006ff6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00b      	beq.n	800701a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2204      	movs	r2, #4
 8007008:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007010:	f043 0202 	orr.w	r2, r3, #2
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007020:	2b00      	cmp	r3, #0
 8007022:	d006      	beq.n	8007032 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7f9 fb03 	bl	8000630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	f040 80a2 	bne.w	8007184 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007048:	e853 3f00 	ldrex	r3, [r3]
 800704c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800704e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007054:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	461a      	mov	r2, r3
 800705e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007062:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007066:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800706a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1e2      	bne.n	8007040 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3308      	adds	r3, #8
 8007080:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007082:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800708a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800708c:	4b6e      	ldr	r3, [pc, #440]	; (8007248 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800708e:	4013      	ands	r3, r2
 8007090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3308      	adds	r3, #8
 800709a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800709e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070a6:	e841 2300 	strex	r3, r2, [r1]
 80070aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e3      	bne.n	800707a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2220      	movs	r2, #32
 80070b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a60      	ldr	r2, [pc, #384]	; (800724c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d021      	beq.n	8007114 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d01a      	beq.n	8007114 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e6:	e853 3f00 	ldrex	r3, [r3]
 80070ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007100:	65bb      	str	r3, [r7, #88]	; 0x58
 8007102:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007106:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800710e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e4      	bne.n	80070de <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007118:	2b01      	cmp	r3, #1
 800711a:	d130      	bne.n	800717e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007132:	f023 0310 	bic.w	r3, r3, #16
 8007136:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007144:	647b      	str	r3, [r7, #68]	; 0x44
 8007146:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007148:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800714a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800714c:	e841 2300 	strex	r3, r2, [r1]
 8007150:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1e4      	bne.n	8007122 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	f003 0310 	and.w	r3, r3, #16
 8007162:	2b10      	cmp	r3, #16
 8007164:	d103      	bne.n	800716e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2210      	movs	r2, #16
 800716c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7fe f95a 	bl	8005430 <HAL_UARTEx_RxEventCallback>
 800717c:	e002      	b.n	8007184 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7f9 fa32 	bl	80005e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007184:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007188:	2b00      	cmp	r3, #0
 800718a:	d006      	beq.n	800719a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800718c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007190:	f003 0320 	and.w	r3, r3, #32
 8007194:	2b00      	cmp	r3, #0
 8007196:	f47f aecd 	bne.w	8006f34 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071a0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80071a4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d049      	beq.n	8007240 <UART_RxISR_16BIT_FIFOEN+0x354>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80071b2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d242      	bcs.n	8007240 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3308      	adds	r3, #8
 80071c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	e853 3f00 	ldrex	r3, [r3]
 80071c8:	623b      	str	r3, [r7, #32]
   return(result);
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3308      	adds	r3, #8
 80071da:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80071de:	633a      	str	r2, [r7, #48]	; 0x30
 80071e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071e6:	e841 2300 	strex	r3, r2, [r1]
 80071ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e3      	bne.n	80071ba <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a16      	ldr	r2, [pc, #88]	; (8007250 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80071f6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	e853 3f00 	ldrex	r3, [r3]
 8007204:	60fb      	str	r3, [r7, #12]
   return(result);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f043 0320 	orr.w	r3, r3, #32
 800720c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	461a      	mov	r2, r3
 8007216:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800721a:	61fb      	str	r3, [r7, #28]
 800721c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	69b9      	ldr	r1, [r7, #24]
 8007220:	69fa      	ldr	r2, [r7, #28]
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	617b      	str	r3, [r7, #20]
   return(result);
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e4      	bne.n	80071f8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800722e:	e007      	b.n	8007240 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	699a      	ldr	r2, [r3, #24]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f042 0208 	orr.w	r2, r2, #8
 800723e:	619a      	str	r2, [r3, #24]
}
 8007240:	bf00      	nop
 8007242:	37b8      	adds	r7, #184	; 0xb8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	effffffe 	.word	0xeffffffe
 800724c:	58000c00 	.word	0x58000c00
 8007250:	080069d5 	.word	0x080069d5

08007254 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d101      	bne.n	80072a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80072a2:	2302      	movs	r3, #2
 80072a4:	e027      	b.n	80072f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2224      	movs	r2, #36	; 0x24
 80072b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 0201 	bic.w	r2, r2, #1
 80072cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80072d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2220      	movs	r2, #32
 80072e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007312:	2b01      	cmp	r3, #1
 8007314:	d101      	bne.n	800731a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007316:	2302      	movs	r3, #2
 8007318:	e02d      	b.n	8007376 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2224      	movs	r2, #36	; 0x24
 8007326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0201 	bic.w	r2, r2, #1
 8007340:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f850 	bl	80073fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2220      	movs	r2, #32
 8007368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800738e:	2b01      	cmp	r3, #1
 8007390:	d101      	bne.n	8007396 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007392:	2302      	movs	r3, #2
 8007394:	e02d      	b.n	80073f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2224      	movs	r2, #36	; 0x24
 80073a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0201 	bic.w	r2, r2, #1
 80073bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f812 	bl	80073fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007408:	2b00      	cmp	r3, #0
 800740a:	d108      	bne.n	800741e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800741c:	e031      	b.n	8007482 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800741e:	2310      	movs	r3, #16
 8007420:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007422:	2310      	movs	r3, #16
 8007424:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	0e5b      	lsrs	r3, r3, #25
 800742e:	b2db      	uxtb	r3, r3
 8007430:	f003 0307 	and.w	r3, r3, #7
 8007434:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	0f5b      	lsrs	r3, r3, #29
 800743e:	b2db      	uxtb	r3, r3
 8007440:	f003 0307 	and.w	r3, r3, #7
 8007444:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007446:	7bbb      	ldrb	r3, [r7, #14]
 8007448:	7b3a      	ldrb	r2, [r7, #12]
 800744a:	4911      	ldr	r1, [pc, #68]	; (8007490 <UARTEx_SetNbDataToProcess+0x94>)
 800744c:	5c8a      	ldrb	r2, [r1, r2]
 800744e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007452:	7b3a      	ldrb	r2, [r7, #12]
 8007454:	490f      	ldr	r1, [pc, #60]	; (8007494 <UARTEx_SetNbDataToProcess+0x98>)
 8007456:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007458:	fb93 f3f2 	sdiv	r3, r3, r2
 800745c:	b29a      	uxth	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007464:	7bfb      	ldrb	r3, [r7, #15]
 8007466:	7b7a      	ldrb	r2, [r7, #13]
 8007468:	4909      	ldr	r1, [pc, #36]	; (8007490 <UARTEx_SetNbDataToProcess+0x94>)
 800746a:	5c8a      	ldrb	r2, [r1, r2]
 800746c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007470:	7b7a      	ldrb	r2, [r7, #13]
 8007472:	4908      	ldr	r1, [pc, #32]	; (8007494 <UARTEx_SetNbDataToProcess+0x98>)
 8007474:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007476:	fb93 f3f2 	sdiv	r3, r3, r2
 800747a:	b29a      	uxth	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007482:	bf00      	nop
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	080097f4 	.word	0x080097f4
 8007494:	080097fc 	.word	0x080097fc

08007498 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8007498:	b480      	push	{r7}
 800749a:	b08f      	sub	sp, #60	; 0x3c
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	891a      	ldrh	r2, [r3, #8]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	8a1b      	ldrh	r3, [r3, #16]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d301      	bcc.n	80074b2 <load_descriptor_values+0x1a>
        return false;
 80074ae:	2300      	movs	r3, #0
 80074b0:	e156      	b.n	8007760 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	895b      	ldrh	r3, [r3, #10]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 80074c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c6:	0a1b      	lsrs	r3, r3, #8
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 80074ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d0:	f003 0303 	and.w	r3, r3, #3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d05a      	beq.n	800758e <load_descriptor_values+0xf6>
 80074d8:	2b02      	cmp	r3, #2
 80074da:	f200 8094 	bhi.w	8007606 <load_descriptor_values+0x16e>
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <load_descriptor_values+0x50>
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d01f      	beq.n	8007526 <load_descriptor_values+0x8e>
 80074e6:	e08e      	b.n	8007606 <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 80074ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f0:	089b      	lsrs	r3, r3, #2
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	0e1b      	lsrs	r3, r3, #24
 8007502:	b25b      	sxtb	r3, r3
 8007504:	f003 030f 	and.w	r3, r3, #15
 8007508:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = (word0 >> 16) & 0xFF;
 800750c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750e:	0c1b      	lsrs	r3, r3, #16
 8007510:	b2db      	uxtb	r3, r3
 8007512:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 8007514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007516:	0f1b      	lsrs	r3, r3, #28
 8007518:	b29b      	uxth	r3, r3
 800751a:	f003 030f 	and.w	r3, r3, #15
 800751e:	b29a      	uxth	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	825a      	strh	r2, [r3, #18]
            break;
 8007524:	e0b4      	b.n	8007690 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	895b      	ldrh	r3, [r3, #10]
 8007530:	3301      	adds	r3, #1
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 800753a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753c:	0c1b      	lsrs	r3, r3, #16
 800753e:	b29b      	uxth	r3, r3
 8007540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007544:	b29a      	uxth	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 800754a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754c:	089b      	lsrs	r3, r3, #2
 800754e:	b29b      	uxth	r3, r3
 8007550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007554:	b29a      	uxth	r2, r3
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	0f1b      	lsrs	r3, r3, #28
 800755a:	b29b      	uxth	r3, r3
 800755c:	019b      	lsls	r3, r3, #6
 800755e:	b29b      	uxth	r3, r3
 8007560:	4313      	orrs	r3, r2
 8007562:	b29a      	uxth	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	0f1b      	lsrs	r3, r3, #28
 800756c:	b25b      	sxtb	r3, r3
 800756e:	f003 030f 	and.w	r3, r3, #15
 8007572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word1 & 0xFFFF;
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	b29b      	uxth	r3, r3
 800757a:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	0c1b      	lsrs	r3, r3, #16
 8007580:	b29b      	uxth	r3, r3
 8007582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007586:	b29a      	uxth	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	825a      	strh	r2, [r3, #18]
            break;
 800758c:	e080      	b.n	8007690 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	895b      	ldrh	r3, [r3, #10]
 8007598:	3301      	adds	r3, #1
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	62bb      	str	r3, [r7, #40]	; 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	895b      	ldrh	r3, [r3, #10]
 80075ac:	3302      	adds	r3, #2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	895b      	ldrh	r3, [r3, #10]
 80075c0:	3303      	adds	r3, #3
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 80075ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075cc:	0c1b      	lsrs	r3, r3, #16
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 80075d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d6:	089b      	lsrs	r3, r3, #2
 80075d8:	b29b      	uxth	r3, r3
 80075da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075de:	b29a      	uxth	r2, r3
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	0a1b      	lsrs	r3, r3, #8
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	019b      	lsls	r3, r3, #6
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	4313      	orrs	r3, r2
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	b29a      	uxth	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	825a      	strh	r2, [r3, #18]
            break;
 8007604:	e044      	b.n	8007690 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	895b      	ldrh	r3, [r3, #10]
 8007610:	3301      	adds	r3, #1
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	895b      	ldrh	r3, [r3, #10]
 8007624:	3302      	adds	r3, #2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4413      	add	r3, r2
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	895b      	ldrh	r3, [r3, #10]
 8007638:	3303      	adds	r3, #3
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	895b      	ldrh	r3, [r3, #10]
 800764c:	3304      	adds	r3, #4
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	b29a      	uxth	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 800765e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007660:	089b      	lsrs	r3, r3, #2
 8007662:	b29b      	uxth	r3, r3
 8007664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007668:	b29a      	uxth	r2, r3
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	0a1b      	lsrs	r3, r3, #8
 800766e:	b29b      	uxth	r3, r3
 8007670:	019b      	lsls	r3, r3, #6
 8007672:	b29b      	uxth	r3, r3
 8007674:	4313      	orrs	r3, r2
 8007676:	b29a      	uxth	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	b29a      	uxth	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	825a      	strh	r2, [r3, #18]
            break;
 800768e:	bf00      	nop
        }
    }

    if (!iter->message)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d106      	bne.n	80076a6 <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	621a      	str	r2, [r3, #32]
 80076a4:	e041      	b.n	800772a <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ac:	441a      	add	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	619a      	str	r2, [r3, #24]

        if (size_offset)
 80076b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d008      	beq.n	80076cc <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80076c2:	425b      	negs	r3, r3
 80076c4:	441a      	add	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	621a      	str	r2, [r3, #32]
 80076ca:	e01a      	b.n	8007702 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	7d9b      	ldrb	r3, [r3, #22]
 80076d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80076d4:	2b20      	cmp	r3, #32
 80076d6:	d111      	bne.n	80076fc <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	7d9b      	ldrb	r3, [r3, #22]
 80076dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d005      	beq.n	80076f0 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	7d9b      	ldrb	r3, [r3, #22]
 80076e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 80076ec:	2b80      	cmp	r3, #128	; 0x80
 80076ee:	d105      	bne.n	80076fc <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f103 0214 	add.w	r2, r3, #20
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	621a      	str	r2, [r3, #32]
 80076fa:	e002      	b.n	8007702 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	7d9b      	ldrb	r3, [r3, #22]
 8007706:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800770a:	2b80      	cmp	r3, #128	; 0x80
 800770c:	d109      	bne.n	8007722 <load_descriptor_values+0x28a>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d005      	beq.n	8007722 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	61da      	str	r2, [r3, #28]
 8007720:	e003      	b.n	800772a <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	699a      	ldr	r2, [r3, #24]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	7d9b      	ldrb	r3, [r3, #22]
 800772e:	f003 030f 	and.w	r3, r3, #15
 8007732:	2b08      	cmp	r3, #8
 8007734:	d005      	beq.n	8007742 <load_descriptor_values+0x2aa>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	7d9b      	ldrb	r3, [r3, #22]
 800773a:	f003 030f 	and.w	r3, r3, #15
 800773e:	2b09      	cmp	r3, #9
 8007740:	d10a      	bne.n	8007758 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	89db      	ldrh	r3, [r3, #14]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	625a      	str	r2, [r3, #36]	; 0x24
 8007756:	e002      	b.n	800775e <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 800775e:	2301      	movs	r3, #1
}
 8007760:	4618      	mov	r0, r3
 8007762:	373c      	adds	r7, #60	; 0x3c
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
    iter->index++;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	891b      	ldrh	r3, [r3, #8]
 8007778:	3301      	adds	r3, #1
 800777a:	b29a      	uxth	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	891a      	ldrh	r2, [r3, #8]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	8a1b      	ldrh	r3, [r3, #16]
 800778a:	429a      	cmp	r2, r3
 800778c:	d30c      	bcc.n	80077a8 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 80077a6:	e03c      	b.n	8007822 <advance_iterator+0xb6>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	895b      	ldrh	r3, [r3, #10]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	0a1b      	lsrs	r3, r3, #8
 80077be:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f003 0303 	and.w	r3, r3, #3
 80077c6:	2201      	movs	r2, #1
 80077c8:	fa02 f303 	lsl.w	r3, r2, r3
 80077cc:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	895a      	ldrh	r2, [r3, #10]
 80077d2:	893b      	ldrh	r3, [r7, #8]
 80077d4:	4413      	add	r3, r2
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	899a      	ldrh	r2, [r3, #12]
 80077e0:	7afb      	ldrb	r3, [r7, #11]
 80077e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	bf0c      	ite	eq
 80077ea:	2301      	moveq	r3, #1
 80077ec:	2300      	movne	r3, #0
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	4413      	add	r3, r2
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	89da      	ldrh	r2, [r3, #14]
 80077fe:	7afb      	ldrb	r3, [r7, #11]
 8007800:	f003 030f 	and.w	r3, r3, #15
 8007804:	2b08      	cmp	r3, #8
 8007806:	d004      	beq.n	8007812 <advance_iterator+0xa6>
 8007808:	7afb      	ldrb	r3, [r7, #11]
 800780a:	f003 030f 	and.w	r3, r3, #15
 800780e:	2b09      	cmp	r3, #9
 8007810:	d101      	bne.n	8007816 <advance_iterator+0xaa>
 8007812:	2301      	movs	r3, #1
 8007814:	e000      	b.n	8007818 <advance_iterator+0xac>
 8007816:	2300      	movs	r3, #0
 8007818:	b29b      	uxth	r3, r3
 800781a:	4413      	add	r3, r2
 800781c:	b29a      	uxth	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	81da      	strh	r2, [r3, #14]
}
 8007822:	bf00      	nop
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	60b9      	str	r1, [r7, #8]
 8007838:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 800783a:	2228      	movs	r2, #40	; 0x28
 800783c:	2100      	movs	r1, #0
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f001 fe9e 	bl	8009580 <memset>

    iter->descriptor = desc;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	601a      	str	r2, [r3, #0]
    iter->message = message;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f7ff fe21 	bl	8007498 <load_descriptor_values>
 8007856:	4603      	mov	r3, r0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	0a1b      	lsrs	r3, r3, #8
 800787e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007882:	2b80      	cmp	r3, #128	; 0x80
 8007884:	d109      	bne.n	800789a <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	3304      	adds	r3, #4
 800788a:	461a      	mov	r2, r3
 800788c:	6939      	ldr	r1, [r7, #16]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff ffcd 	bl	800782e <pb_field_iter_begin>
 8007894:	4603      	mov	r3, r0
 8007896:	75fb      	strb	r3, [r7, #23]
 8007898:	e008      	b.n	80078ac <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	461a      	mov	r2, r3
 80078a0:	6939      	ldr	r1, [r7, #16]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7ff ffc3 	bl	800782e <pb_field_iter_begin>
 80078a8:	4603      	mov	r3, r0
 80078aa:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	f103 020c 	add.w	r2, r3, #12
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	621a      	str	r2, [r3, #32]
    return status;
 80078b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3718      	adds	r7, #24
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7ff ff4f 	bl	800776c <advance_iterator>
    (void)load_descriptor_values(iter);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7ff fde2 	bl	8007498 <load_descriptor_values>
    return iter->index != 0;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	891b      	ldrh	r3, [r3, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	bf14      	ite	ne
 80078dc:	2301      	movne	r3, #1
 80078de:	2300      	moveq	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b084      	sub	sp, #16
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	8a1b      	ldrh	r3, [r3, #16]
 80078f8:	461a      	mov	r2, r3
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d101      	bne.n	8007904 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 8007900:	2301      	movs	r3, #1
 8007902:	e044      	b.n	800798e <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	8a9b      	ldrh	r3, [r3, #20]
 800790a:	461a      	mov	r2, r3
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	4293      	cmp	r3, r2
 8007910:	d901      	bls.n	8007916 <pb_field_iter_find+0x2c>
    {
        return false;
 8007912:	2300      	movs	r3, #0
 8007914:	e03b      	b.n	800798e <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	891b      	ldrh	r3, [r3, #8]
 800791a:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	8a1b      	ldrh	r3, [r3, #16]
 8007920:	461a      	mov	r2, r3
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	4293      	cmp	r3, r2
 8007926:	d204      	bcs.n	8007932 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	8a1a      	ldrh	r2, [r3, #16]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7ff ff1a 	bl	800776c <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	895b      	ldrh	r3, [r3, #10]
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	089a      	lsrs	r2, r3, #2
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	4053      	eors	r3, r2
 8007952:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007956:	2b00      	cmp	r3, #0
 8007958:	d110      	bne.n	800797c <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7ff fd9c 	bl	8007498 <load_descriptor_values>

                if (iter->tag == tag &&
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	8a1b      	ldrh	r3, [r3, #16]
 8007964:	461a      	mov	r2, r3
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	4293      	cmp	r3, r2
 800796a:	d107      	bne.n	800797c <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	7d9b      	ldrb	r3, [r3, #22]
 8007970:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8007974:	2b0a      	cmp	r3, #10
 8007976:	d001      	beq.n	800797c <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 8007978:	2301      	movs	r3, #1
 800797a:	e008      	b.n	800798e <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	891b      	ldrh	r3, [r3, #8]
 8007980:	89fa      	ldrh	r2, [r7, #14]
 8007982:	429a      	cmp	r2, r3
 8007984:	d1d5      	bne.n	8007932 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff fd86 	bl	8007498 <load_descriptor_values>
        return false;
 800798c:	2300      	movs	r3, #0
    }
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	7d9b      	ldrb	r3, [r3, #22]
 80079a2:	f003 030f 	and.w	r3, r3, #15
 80079a6:	2b0a      	cmp	r3, #10
 80079a8:	d101      	bne.n	80079ae <pb_field_iter_find_extension+0x18>
    {
        return true;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e022      	b.n	80079f4 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	891b      	ldrh	r3, [r3, #8]
 80079b2:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7ff fed9 	bl	800776c <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	895b      	ldrh	r3, [r3, #10]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	0a1b      	lsrs	r3, r3, #8
 80079d0:	f003 030f 	and.w	r3, r3, #15
 80079d4:	2b0a      	cmp	r3, #10
 80079d6:	d104      	bne.n	80079e2 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7ff fd5d 	bl	8007498 <load_descriptor_values>
 80079de:	4603      	mov	r3, r0
 80079e0:	e008      	b.n	80079f4 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	891b      	ldrh	r3, [r3, #8]
 80079e6:	89fa      	ldrh	r2, [r7, #14]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d1e3      	bne.n	80079b4 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff fd53 	bl	8007498 <load_descriptor_values>
        return false;
 80079f2:	2300      	movs	r3, #0
    }
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	441a      	add	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d004      	beq.n	8007a2a <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	6979      	ldr	r1, [r7, #20]
 8007a24:	68b8      	ldr	r0, [r7, #8]
 8007a26:	f001 fdd7 	bl	80095d8 <memcpy>
    }
    
    return true;
 8007a2a:	2301      	movs	r3, #1
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3718      	adds	r7, #24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b088      	sub	sp, #32
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <pb_read+0x16>
        return true;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e05f      	b.n	8007b0a <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d123      	bne.n	8007a98 <pb_read+0x64>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a2f      	ldr	r2, [pc, #188]	; (8007b14 <pb_read+0xe0>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d01e      	beq.n	8007a98 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8007a5a:	e011      	b.n	8007a80 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8007a5c:	f107 0310 	add.w	r3, r7, #16
 8007a60:	2210      	movs	r2, #16
 8007a62:	4619      	mov	r1, r3
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f7ff ffe5 	bl	8007a34 <pb_read>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	f083 0301 	eor.w	r3, r3, #1
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <pb_read+0x46>
				return false;
 8007a76:	2300      	movs	r3, #0
 8007a78:	e047      	b.n	8007b0a <pb_read+0xd6>
			
			count -= 16;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	3b10      	subs	r3, #16
 8007a7e:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b10      	cmp	r3, #16
 8007a84:	d8ea      	bhi.n	8007a5c <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 8007a86:	f107 0310 	add.w	r3, r7, #16
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f7ff ffd0 	bl	8007a34 <pb_read>
 8007a94:	4603      	mov	r3, r0
 8007a96:	e038      	b.n	8007b0a <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d90b      	bls.n	8007aba <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <pb_read+0x7c>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	e000      	b.n	8007ab2 <pb_read+0x7e>
 8007ab0:	4b19      	ldr	r3, [pc, #100]	; (8007b18 <pb_read+0xe4>)
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	60d3      	str	r3, [r2, #12]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	e027      	b.n	8007b0a <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	68b9      	ldr	r1, [r7, #8]
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	4798      	blx	r3
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	f083 0301 	eor.w	r3, r3, #1
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00b      	beq.n	8007aea <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <pb_read+0xac>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	e000      	b.n	8007ae2 <pb_read+0xae>
 8007ae0:	4b0e      	ldr	r3, [pc, #56]	; (8007b1c <pb_read+0xe8>)
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	60d3      	str	r3, [r2, #12]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e00f      	b.n	8007b0a <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d903      	bls.n	8007afc <pb_read+0xc8>
        stream->bytes_left = 0;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	609a      	str	r2, [r3, #8]
 8007afa:	e005      	b.n	8007b08 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	1ad2      	subs	r2, r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	609a      	str	r2, [r3, #8]

    return true;
 8007b08:	2301      	movs	r3, #1
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3720      	adds	r7, #32
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	080079fd 	.word	0x080079fd
 8007b18:	08009610 	.word	0x08009610
 8007b1c:	08009620 	.word	0x08009620

08007b20 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10b      	bne.n	8007b4a <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <pb_readbyte+0x20>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	e000      	b.n	8007b42 <pb_readbyte+0x22>
 8007b40:	4b13      	ldr	r3, [pc, #76]	; (8007b90 <pb_readbyte+0x70>)
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	60d3      	str	r3, [r2, #12]
 8007b46:	2300      	movs	r3, #0
 8007b48:	e01d      	b.n	8007b86 <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	4798      	blx	r3
 8007b56:	4603      	mov	r3, r0
 8007b58:	f083 0301 	eor.w	r3, r3, #1
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00b      	beq.n	8007b7a <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <pb_readbyte+0x50>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	e000      	b.n	8007b72 <pb_readbyte+0x52>
 8007b70:	4b08      	ldr	r3, [pc, #32]	; (8007b94 <pb_readbyte+0x74>)
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	60d3      	str	r3, [r2, #12]
 8007b76:	2300      	movs	r3, #0
 8007b78:	e005      	b.n	8007b86 <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	1e5a      	subs	r2, r3, #1
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	609a      	str	r2, [r3, #8]
    
    return true;    
 8007b84:	2301      	movs	r3, #1
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	08009610 	.word	0x08009610
 8007b94:	08009620 	.word	0x08009620

08007b98 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8007b98:	b490      	push	{r4, r7}
 8007b9a:	b08a      	sub	sp, #40	; 0x28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8007ba4:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <pb_istream_from_buffer+0x38>)
 8007ba6:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	461c      	mov	r4, r3
 8007bbc:	f107 0318 	add.w	r3, r7, #24
 8007bc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007bc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	3728      	adds	r7, #40	; 0x28
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bc90      	pop	{r4, r7}
 8007bce:	4770      	bx	lr
 8007bd0:	080079fd 	.word	0x080079fd

08007bd4 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b088      	sub	sp, #32
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8007be0:	f107 0315 	add.w	r3, r7, #21
 8007be4:	4619      	mov	r1, r3
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f7ff ff9a 	bl	8007b20 <pb_readbyte>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f083 0301 	eor.w	r3, r3, #1
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00b      	beq.n	8007c10 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d105      	bne.n	8007c0c <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d002      	beq.n	8007c0c <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	e084      	b.n	8007d1a <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8007c10:	7d7b      	ldrb	r3, [r7, #21]
 8007c12:	b25b      	sxtb	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	db02      	blt.n	8007c1e <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8007c18:	7d7b      	ldrb	r3, [r7, #21]
 8007c1a:	61fb      	str	r3, [r7, #28]
 8007c1c:	e079      	b.n	8007d12 <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8007c1e:	2307      	movs	r3, #7
 8007c20:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8007c22:	7d7b      	ldrb	r3, [r7, #21]
 8007c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c28:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8007c2a:	f107 0315 	add.w	r3, r7, #21
 8007c2e:	4619      	mov	r1, r3
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f7ff ff75 	bl	8007b20 <pb_readbyte>
 8007c36:	4603      	mov	r3, r0
 8007c38:	f083 0301 	eor.w	r3, r3, #1
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d001      	beq.n	8007c46 <pb_decode_varint32_eof+0x72>
                return false;
 8007c42:	2300      	movs	r3, #0
 8007c44:	e069      	b.n	8007d1a <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	2b1f      	cmp	r3, #31
 8007c4a:	d92f      	bls.n	8007cac <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c50:	d801      	bhi.n	8007c56 <pb_decode_varint32_eof+0x82>
 8007c52:	23ff      	movs	r3, #255	; 0xff
 8007c54:	e000      	b.n	8007c58 <pb_decode_varint32_eof+0x84>
 8007c56:	2301      	movs	r3, #1
 8007c58:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8007c5a:	7d7b      	ldrb	r3, [r7, #21]
 8007c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d006      	beq.n	8007c72 <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8007c64:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	da05      	bge.n	8007c76 <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 8007c6a:	7d7b      	ldrb	r3, [r7, #21]
 8007c6c:	7dfa      	ldrb	r2, [r7, #23]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d101      	bne.n	8007c76 <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8007c72:	2301      	movs	r3, #1
 8007c74:	e000      	b.n	8007c78 <pb_decode_varint32_eof+0xa4>
 8007c76:	2300      	movs	r3, #0
 8007c78:	75bb      	strb	r3, [r7, #22]
 8007c7a:	7dbb      	ldrb	r3, [r7, #22]
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	2b3f      	cmp	r3, #63	; 0x3f
 8007c86:	d805      	bhi.n	8007c94 <pb_decode_varint32_eof+0xc0>
 8007c88:	7dbb      	ldrb	r3, [r7, #22]
 8007c8a:	f083 0301 	eor.w	r3, r3, #1
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d037      	beq.n	8007d04 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <pb_decode_varint32_eof+0xce>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	e000      	b.n	8007ca4 <pb_decode_varint32_eof+0xd0>
 8007ca2:	4b20      	ldr	r3, [pc, #128]	; (8007d24 <pb_decode_varint32_eof+0x150>)
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	60d3      	str	r3, [r2, #12]
 8007ca8:	2300      	movs	r3, #0
 8007caa:	e036      	b.n	8007d1a <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	2b1c      	cmp	r3, #28
 8007cb0:	d11f      	bne.n	8007cf2 <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 8007cb2:	7d7b      	ldrb	r3, [r7, #21]
 8007cb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d010      	beq.n	8007cde <pb_decode_varint32_eof+0x10a>
 8007cbc:	7d7b      	ldrb	r3, [r7, #21]
 8007cbe:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007cc2:	2b78      	cmp	r3, #120	; 0x78
 8007cc4:	d00b      	beq.n	8007cde <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <pb_decode_varint32_eof+0x100>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	e000      	b.n	8007cd6 <pb_decode_varint32_eof+0x102>
 8007cd4:	4b13      	ldr	r3, [pc, #76]	; (8007d24 <pb_decode_varint32_eof+0x150>)
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	60d3      	str	r3, [r2, #12]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	e01d      	b.n	8007d1a <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 8007cde:	7d7b      	ldrb	r3, [r7, #21]
 8007ce0:	f003 020f 	and.w	r2, r3, #15
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	61fb      	str	r3, [r7, #28]
 8007cf0:	e008      	b.n	8007d04 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8007cf2:	7d7b      	ldrb	r3, [r7, #21]
 8007cf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfe:	69fa      	ldr	r2, [r7, #28]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	3307      	adds	r3, #7
 8007d08:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8007d0a:	7d7b      	ldrb	r3, [r7, #21]
 8007d0c:	b25b      	sxtb	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	db8b      	blt.n	8007c2a <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	69fa      	ldr	r2, [r7, #28]
 8007d16:	601a      	str	r2, [r3, #0]
   return true;
 8007d18:	2301      	movs	r3, #1
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3720      	adds	r7, #32
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	0800962c 	.word	0x0800962c

08007d28 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8007d32:	2200      	movs	r2, #0
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff ff4c 	bl	8007bd4 <pb_decode_varint32_eof>
 8007d3c:	4603      	mov	r3, r0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8007d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d4c:	b08a      	sub	sp, #40	; 0x28
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	627b      	str	r3, [r7, #36]	; 0x24
    uint64_t result = 0;
 8007d58:	f04f 0200 	mov.w	r2, #0
 8007d5c:	f04f 0300 	mov.w	r3, #0
 8007d60:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 8007d64:	f107 0317 	add.w	r3, r7, #23
 8007d68:	4619      	mov	r1, r3
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f7ff fed8 	bl	8007b20 <pb_readbyte>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f083 0301 	eor.w	r3, r3, #1
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <pb_decode_varint+0x38>
            return false;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	e041      	b.n	8007e04 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	2b3e      	cmp	r3, #62	; 0x3e
 8007d84:	d910      	bls.n	8007da8 <pb_decode_varint+0x60>
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00b      	beq.n	8007da8 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <pb_decode_varint+0x56>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	e000      	b.n	8007da0 <pb_decode_varint+0x58>
 8007d9e:	4b1c      	ldr	r3, [pc, #112]	; (8007e10 <pb_decode_varint+0xc8>)
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	60d3      	str	r3, [r2, #12]
 8007da4:	2300      	movs	r3, #0
 8007da6:	e02d      	b.n	8007e04 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2200      	movs	r2, #0
 8007dae:	603b      	str	r3, [r7, #0]
 8007db0:	607a      	str	r2, [r7, #4]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	f003 087f 	and.w	r8, r3, #127	; 0x7f
 8007db8:	f04f 0900 	mov.w	r9, #0
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	f1a3 0120 	sub.w	r1, r3, #32
 8007dc2:	f1c3 0220 	rsb	r2, r3, #32
 8007dc6:	fa09 f503 	lsl.w	r5, r9, r3
 8007dca:	fa08 f101 	lsl.w	r1, r8, r1
 8007dce:	430d      	orrs	r5, r1
 8007dd0:	fa28 f202 	lsr.w	r2, r8, r2
 8007dd4:	4315      	orrs	r5, r2
 8007dd6:	fa08 f403 	lsl.w	r4, r8, r3
 8007dda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dde:	ea42 0a04 	orr.w	sl, r2, r4
 8007de2:	ea43 0b05 	orr.w	fp, r3, r5
 8007de6:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	3307      	adds	r3, #7
 8007dee:	627b      	str	r3, [r7, #36]	; 0x24
    } while (byte & 0x80);
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
 8007df2:	b25b      	sxtb	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	dbb5      	blt.n	8007d64 <pb_decode_varint+0x1c>
    
    *dest = result;
 8007df8:	68b9      	ldr	r1, [r7, #8]
 8007dfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dfe:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 8007e02:	2301      	movs	r3, #1
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3728      	adds	r7, #40	; 0x28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e0e:	bf00      	nop
 8007e10:	0800962c 	.word	0x0800962c

08007e14 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8007e1c:	f107 030f 	add.w	r3, r7, #15
 8007e20:	2201      	movs	r2, #1
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7ff fe05 	bl	8007a34 <pb_read>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f083 0301 	eor.w	r3, r3, #1
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <pb_skip_varint+0x26>
            return false;
 8007e36:	2300      	movs	r3, #0
 8007e38:	e004      	b.n	8007e44 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
 8007e3c:	b25b      	sxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	dbec      	blt.n	8007e1c <pb_skip_varint+0x8>
    return true;
 8007e42:	2301      	movs	r3, #1
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8007e54:	f107 030c 	add.w	r3, r7, #12
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7ff ff64 	bl	8007d28 <pb_decode_varint32>
 8007e60:	4603      	mov	r3, r0
 8007e62:	f083 0301 	eor.w	r3, r3, #1
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <pb_skip_string+0x24>
        return false;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	e006      	b.n	8007e7e <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	461a      	mov	r2, r3
 8007e74:	2100      	movs	r1, #0
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7ff fddc 	bl	8007a34 <pb_read>
 8007e7c:	4603      	mov	r3, r0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b086      	sub	sp, #24
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	607a      	str	r2, [r7, #4]
 8007e92:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2200      	movs	r2, #0
 8007e98:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8007ea6:	f107 0314 	add.w	r3, r7, #20
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	4619      	mov	r1, r3
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f7ff fe90 	bl	8007bd4 <pb_decode_varint32_eof>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	f083 0301 	eor.w	r3, r3, #1
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <pb_decode_tag+0x3e>
    {
        return false;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	e00b      	b.n	8007edc <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	08da      	lsrs	r2, r3, #3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	f003 0307 	and.w	r3, r3, #7
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	701a      	strb	r2, [r3, #0]
    return true;
 8007eda:	2301      	movs	r3, #1
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	2b05      	cmp	r3, #5
 8007ef4:	d826      	bhi.n	8007f44 <pb_skip_field+0x60>
 8007ef6:	a201      	add	r2, pc, #4	; (adr r2, 8007efc <pb_skip_field+0x18>)
 8007ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efc:	08007f15 	.word	0x08007f15
 8007f00:	08007f1f 	.word	0x08007f1f
 8007f04:	08007f2d 	.word	0x08007f2d
 8007f08:	08007f45 	.word	0x08007f45
 8007f0c:	08007f45 	.word	0x08007f45
 8007f10:	08007f37 	.word	0x08007f37
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7ff ff7d 	bl	8007e14 <pb_skip_varint>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	e01d      	b.n	8007f5a <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8007f1e:	2208      	movs	r2, #8
 8007f20:	2100      	movs	r1, #0
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7ff fd86 	bl	8007a34 <pb_read>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	e016      	b.n	8007f5a <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff ff8d 	bl	8007e4c <pb_skip_string>
 8007f32:	4603      	mov	r3, r0
 8007f34:	e011      	b.n	8007f5a <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8007f36:	2204      	movs	r2, #4
 8007f38:	2100      	movs	r1, #0
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff fd7a 	bl	8007a34 <pb_read>
 8007f40:	4603      	mov	r3, r0
 8007f42:	e00a      	b.n	8007f5a <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <pb_skip_field+0x6e>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	e000      	b.n	8007f54 <pb_skip_field+0x70>
 8007f52:	4b04      	ldr	r3, [pc, #16]	; (8007f64 <pb_skip_field+0x80>)
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	60d3      	str	r3, [r2, #12]
 8007f58:	2300      	movs	r3, #0
    }
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	0800963c 	.word	0x0800963c

08007f68 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	607a      	str	r2, [r7, #4]
 8007f72:	603b      	str	r3, [r7, #0]
 8007f74:	460b      	mov	r3, r1
 8007f76:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 8007f7e:	7afb      	ldrb	r3, [r7, #11]
 8007f80:	2b05      	cmp	r3, #5
 8007f82:	d03f      	beq.n	8008004 <read_raw_value+0x9c>
 8007f84:	2b05      	cmp	r3, #5
 8007f86:	dc47      	bgt.n	8008018 <read_raw_value+0xb0>
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <read_raw_value+0x2a>
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d02f      	beq.n	8007ff0 <read_raw_value+0x88>
 8007f90:	e042      	b.n	8008018 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2200      	movs	r2, #0
 8007f96:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d20b      	bcs.n	8007fc4 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <read_raw_value+0x52>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	e000      	b.n	8007fbc <read_raw_value+0x54>
 8007fba:	4b1f      	ldr	r3, [pc, #124]	; (8008038 <read_raw_value+0xd0>)
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	60d3      	str	r3, [r2, #12]
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	e034      	b.n	800802e <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	6879      	ldr	r1, [r7, #4]
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f7ff fd33 	bl	8007a34 <pb_read>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	f083 0301 	eor.w	r3, r3, #1
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <read_raw_value+0x76>
                    return false;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	e027      	b.n	800802e <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	1c5a      	adds	r2, r3, #1
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	b25b      	sxtb	r3, r3
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	dbd5      	blt.n	8007f98 <read_raw_value+0x30>
            return true;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e01e      	b.n	800802e <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	2208      	movs	r2, #8
 8007ff4:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 8007ff6:	2208      	movs	r2, #8
 8007ff8:	6879      	ldr	r1, [r7, #4]
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f7ff fd1a 	bl	8007a34 <pb_read>
 8008000:	4603      	mov	r3, r0
 8008002:	e014      	b.n	800802e <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	2204      	movs	r2, #4
 8008008:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 800800a:	2204      	movs	r2, #4
 800800c:	6879      	ldr	r1, [r7, #4]
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f7ff fd10 	bl	8007a34 <pb_read>
 8008014:	4603      	mov	r3, r0
 8008016:	e00a      	b.n	800802e <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d002      	beq.n	8008026 <read_raw_value+0xbe>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	e000      	b.n	8008028 <read_raw_value+0xc0>
 8008026:	4b05      	ldr	r3, [pc, #20]	; (800803c <read_raw_value+0xd4>)
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	60d3      	str	r3, [r2, #12]
 800802c:	2300      	movs	r3, #0
    }
}
 800802e:	4618      	mov	r0, r3
 8008030:	3718      	adds	r7, #24
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	0800962c 	.word	0x0800962c
 800803c:	0800963c 	.word	0x0800963c

08008040 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8008040:	b590      	push	{r4, r7, lr}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 800804a:	f107 030c 	add.w	r3, r7, #12
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff fe69 	bl	8007d28 <pb_decode_varint32>
 8008056:	4603      	mov	r3, r0
 8008058:	f083 0301 	eor.w	r3, r3, #1
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <pb_make_string_substream+0x26>
        return false;
 8008062:	2300      	movs	r3, #0
 8008064:	e020      	b.n	80080a8 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4614      	mov	r4, r2
 800806c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800806e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	689a      	ldr	r2, [r3, #8]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	429a      	cmp	r2, r3
 800807a:	d20b      	bcs.n	8008094 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <pb_make_string_substream+0x4a>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	e000      	b.n	800808c <pb_make_string_substream+0x4c>
 800808a:	4b09      	ldr	r3, [pc, #36]	; (80080b0 <pb_make_string_substream+0x70>)
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	60d3      	str	r3, [r2, #12]
 8008090:	2300      	movs	r3, #0
 8008092:	e009      	b.n	80080a8 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689a      	ldr	r2, [r3, #8]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	1ad2      	subs	r2, r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	609a      	str	r2, [r3, #8]
    return true;
 80080a6:	2301      	movs	r3, #1
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd90      	pop	{r4, r7, pc}
 80080b0:	08009650 	.word	0x08009650

080080b4 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00e      	beq.n	80080e4 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	461a      	mov	r2, r3
 80080cc:	2100      	movs	r1, #0
 80080ce:	6838      	ldr	r0, [r7, #0]
 80080d0:	f7ff fcb0 	bl	8007a34 <pb_read>
 80080d4:	4603      	mov	r3, r0
 80080d6:	f083 0301 	eor.w	r3, r3, #1
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d001      	beq.n	80080e4 <pb_close_string_substream+0x30>
            return false;
 80080e0:	2300      	movs	r3, #0
 80080e2:	e008      	b.n	80080f6 <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	68da      	ldr	r2, [r3, #12]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	60da      	str	r2, [r3, #12]
#endif
    return true;
 80080f4:	2301      	movs	r3, #1
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	460b      	mov	r3, r1
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	7d9b      	ldrb	r3, [r3, #22]
 8008112:	f003 030f 	and.w	r3, r3, #15
 8008116:	2b0b      	cmp	r3, #11
 8008118:	f200 80d4 	bhi.w	80082c4 <decode_basic_field+0x1c4>
 800811c:	a201      	add	r2, pc, #4	; (adr r2, 8008124 <decode_basic_field+0x24>)
 800811e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008122:	bf00      	nop
 8008124:	08008155 	.word	0x08008155
 8008128:	08008185 	.word	0x08008185
 800812c:	08008185 	.word	0x08008185
 8008130:	08008185 	.word	0x08008185
 8008134:	080081b5 	.word	0x080081b5
 8008138:	080081e9 	.word	0x080081e9
 800813c:	0800821d 	.word	0x0800821d
 8008140:	08008247 	.word	0x08008247
 8008144:	08008271 	.word	0x08008271
 8008148:	08008271 	.word	0x08008271
 800814c:	080082c5 	.word	0x080082c5
 8008150:	0800829b 	.word	0x0800829b
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8008154:	7afb      	ldrb	r3, [r7, #11]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00e      	beq.n	8008178 <decode_basic_field+0x78>
 800815a:	7afb      	ldrb	r3, [r7, #11]
 800815c:	2bff      	cmp	r3, #255	; 0xff
 800815e:	d00b      	beq.n	8008178 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <decode_basic_field+0x6e>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	e000      	b.n	8008170 <decode_basic_field+0x70>
 800816e:	4b5d      	ldr	r3, [pc, #372]	; (80082e4 <decode_basic_field+0x1e4>)
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	60d3      	str	r3, [r2, #12]
 8008174:	2300      	movs	r3, #0
 8008176:	e0b0      	b.n	80082da <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 8008178:	6879      	ldr	r1, [r7, #4]
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 fef6 	bl	8008f6c <pb_dec_bool>
 8008180:	4603      	mov	r3, r0
 8008182:	e0aa      	b.n	80082da <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8008184:	7afb      	ldrb	r3, [r7, #11]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00e      	beq.n	80081a8 <decode_basic_field+0xa8>
 800818a:	7afb      	ldrb	r3, [r7, #11]
 800818c:	2bff      	cmp	r3, #255	; 0xff
 800818e:	d00b      	beq.n	80081a8 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <decode_basic_field+0x9e>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	e000      	b.n	80081a0 <decode_basic_field+0xa0>
 800819e:	4b51      	ldr	r3, [pc, #324]	; (80082e4 <decode_basic_field+0x1e4>)
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	60d3      	str	r3, [r2, #12]
 80081a4:	2300      	movs	r3, #0
 80081a6:	e098      	b.n	80082da <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 80081a8:	6879      	ldr	r1, [r7, #4]
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f000 feee 	bl	8008f8c <pb_dec_varint>
 80081b0:	4603      	mov	r3, r0
 80081b2:	e092      	b.n	80082da <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 80081b4:	7afb      	ldrb	r3, [r7, #11]
 80081b6:	2b05      	cmp	r3, #5
 80081b8:	d00e      	beq.n	80081d8 <decode_basic_field+0xd8>
 80081ba:	7afb      	ldrb	r3, [r7, #11]
 80081bc:	2bff      	cmp	r3, #255	; 0xff
 80081be:	d00b      	beq.n	80081d8 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d002      	beq.n	80081ce <decode_basic_field+0xce>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	e000      	b.n	80081d0 <decode_basic_field+0xd0>
 80081ce:	4b45      	ldr	r3, [pc, #276]	; (80082e4 <decode_basic_field+0x1e4>)
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	60d3      	str	r3, [r2, #12]
 80081d4:	2300      	movs	r3, #0
 80081d6:	e080      	b.n	80082da <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	4619      	mov	r1, r3
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 fe8a 	bl	8008ef8 <pb_decode_fixed32>
 80081e4:	4603      	mov	r3, r0
 80081e6:	e078      	b.n	80082da <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 80081e8:	7afb      	ldrb	r3, [r7, #11]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d00e      	beq.n	800820c <decode_basic_field+0x10c>
 80081ee:	7afb      	ldrb	r3, [r7, #11]
 80081f0:	2bff      	cmp	r3, #255	; 0xff
 80081f2:	d00b      	beq.n	800820c <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <decode_basic_field+0x102>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	e000      	b.n	8008204 <decode_basic_field+0x104>
 8008202:	4b38      	ldr	r3, [pc, #224]	; (80082e4 <decode_basic_field+0x1e4>)
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	60d3      	str	r3, [r2, #12]
 8008208:	2300      	movs	r3, #0
 800820a:	e066      	b.n	80082da <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	4619      	mov	r1, r3
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f000 fe8c 	bl	8008f30 <pb_decode_fixed64>
 8008218:	4603      	mov	r3, r0
 800821a:	e05e      	b.n	80082da <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 800821c:	7afb      	ldrb	r3, [r7, #11]
 800821e:	2b02      	cmp	r3, #2
 8008220:	d00b      	beq.n	800823a <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d002      	beq.n	8008230 <decode_basic_field+0x130>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	e000      	b.n	8008232 <decode_basic_field+0x132>
 8008230:	4b2c      	ldr	r3, [pc, #176]	; (80082e4 <decode_basic_field+0x1e4>)
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	60d3      	str	r3, [r2, #12]
 8008236:	2300      	movs	r3, #0
 8008238:	e04f      	b.n	80082da <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 800823a:	6879      	ldr	r1, [r7, #4]
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f000 ffd1 	bl	80091e4 <pb_dec_bytes>
 8008242:	4603      	mov	r3, r0
 8008244:	e049      	b.n	80082da <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 8008246:	7afb      	ldrb	r3, [r7, #11]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d00b      	beq.n	8008264 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <decode_basic_field+0x15a>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	e000      	b.n	800825c <decode_basic_field+0x15c>
 800825a:	4b22      	ldr	r3, [pc, #136]	; (80082e4 <decode_basic_field+0x1e4>)
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	60d3      	str	r3, [r2, #12]
 8008260:	2300      	movs	r3, #0
 8008262:	e03a      	b.n	80082da <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 8008264:	6879      	ldr	r1, [r7, #4]
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f001 f830 	bl	80092cc <pb_dec_string>
 800826c:	4603      	mov	r3, r0
 800826e:	e034      	b.n	80082da <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 8008270:	7afb      	ldrb	r3, [r7, #11]
 8008272:	2b02      	cmp	r3, #2
 8008274:	d00b      	beq.n	800828e <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d002      	beq.n	8008284 <decode_basic_field+0x184>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	e000      	b.n	8008286 <decode_basic_field+0x186>
 8008284:	4b17      	ldr	r3, [pc, #92]	; (80082e4 <decode_basic_field+0x1e4>)
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	60d3      	str	r3, [r2, #12]
 800828a:	2300      	movs	r3, #0
 800828c:	e025      	b.n	80082da <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 800828e:	6879      	ldr	r1, [r7, #4]
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f001 f897 	bl	80093c4 <pb_dec_submessage>
 8008296:	4603      	mov	r3, r0
 8008298:	e01f      	b.n	80082da <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 800829a:	7afb      	ldrb	r3, [r7, #11]
 800829c:	2b02      	cmp	r3, #2
 800829e:	d00b      	beq.n	80082b8 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <decode_basic_field+0x1ae>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	e000      	b.n	80082b0 <decode_basic_field+0x1b0>
 80082ae:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <decode_basic_field+0x1e4>)
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	60d3      	str	r3, [r2, #12]
 80082b4:	2300      	movs	r3, #0
 80082b6:	e010      	b.n	80082da <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 80082b8:	6879      	ldr	r1, [r7, #4]
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f001 f90c 	bl	80094d8 <pb_dec_fixed_length_bytes>
 80082c0:	4603      	mov	r3, r0
 80082c2:	e00a      	b.n	80082da <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <decode_basic_field+0x1d2>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	e000      	b.n	80082d4 <decode_basic_field+0x1d4>
 80082d2:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <decode_basic_field+0x1e8>)
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	60d3      	str	r3, [r2, #12]
 80082d8:	2300      	movs	r3, #0
    }
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	08009668 	.word	0x08009668
 80082e8:	08009678 	.word	0x08009678

080082ec <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b096      	sub	sp, #88	; 0x58
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	460b      	mov	r3, r1
 80082f6:	607a      	str	r2, [r7, #4]
 80082f8:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	7d9b      	ldrb	r3, [r3, #22]
 80082fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008302:	2b30      	cmp	r3, #48	; 0x30
 8008304:	f000 80c2 	beq.w	800848c <decode_static_field+0x1a0>
 8008308:	2b30      	cmp	r3, #48	; 0x30
 800830a:	f200 811a 	bhi.w	8008542 <decode_static_field+0x256>
 800830e:	2b20      	cmp	r3, #32
 8008310:	d01f      	beq.n	8008352 <decode_static_field+0x66>
 8008312:	2b20      	cmp	r3, #32
 8008314:	f200 8115 	bhi.w	8008542 <decode_static_field+0x256>
 8008318:	2b00      	cmp	r3, #0
 800831a:	d002      	beq.n	8008322 <decode_static_field+0x36>
 800831c:	2b10      	cmp	r3, #16
 800831e:	d008      	beq.n	8008332 <decode_static_field+0x46>
 8008320:	e10f      	b.n	8008542 <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 8008322:	7afb      	ldrb	r3, [r7, #11]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	4619      	mov	r1, r3
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f7ff fee9 	bl	8008100 <decode_basic_field>
 800832e:	4603      	mov	r3, r0
 8008330:	e112      	b.n	8008558 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	2201      	movs	r2, #1
 8008340:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 8008342:	7afb      	ldrb	r3, [r7, #11]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	4619      	mov	r1, r3
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f7ff fed9 	bl	8008100 <decode_basic_field>
 800834e:	4603      	mov	r3, r0
 8008350:	e102      	b.n	8008558 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 8008352:	7afb      	ldrb	r3, [r7, #11]
 8008354:	2b02      	cmp	r3, #2
 8008356:	d16c      	bne.n	8008432 <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	7d9b      	ldrb	r3, [r3, #22]
 800835c:	f003 030f 	and.w	r3, r3, #15
 8008360:	2b05      	cmp	r3, #5
 8008362:	d866      	bhi.n	8008432 <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 8008364:	2301      	movs	r3, #1
 8008366:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	653b      	str	r3, [r7, #80]	; 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	8a52      	ldrh	r2, [r2, #18]
 8008378:	4611      	mov	r1, r2
 800837a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800837c:	8812      	ldrh	r2, [r2, #0]
 800837e:	fb01 f202 	mul.w	r2, r1, r2
 8008382:	441a      	add	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 8008388:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800838c:	4619      	mov	r1, r3
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f7ff fe56 	bl	8008040 <pb_make_string_substream>
 8008394:	4603      	mov	r3, r0
 8008396:	f083 0301 	eor.w	r3, r3, #1
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01f      	beq.n	80083e0 <decode_static_field+0xf4>
                    return false;
 80083a0:	2300      	movs	r3, #0
 80083a2:	e0d9      	b.n	8008558 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 80083a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	21ff      	movs	r1, #255	; 0xff
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7ff fea7 	bl	8008100 <decode_basic_field>
 80083b2:	4603      	mov	r3, r0
 80083b4:	f083 0301 	eor.w	r3, r3, #1
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <decode_static_field+0xda>
                    {
                        status = false;
 80083be:	2300      	movs	r3, #0
 80083c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 80083c4:	e015      	b.n	80083f2 <decode_static_field+0x106>
                    }
                    (*size)++;
 80083c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	3301      	adds	r3, #1
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083d0:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	69db      	ldr	r3, [r3, #28]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	8a52      	ldrh	r2, [r2, #18]
 80083da:	441a      	add	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 80083e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d005      	beq.n	80083f2 <decode_static_field+0x106>
 80083e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083e8:	881a      	ldrh	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	8a9b      	ldrh	r3, [r3, #20]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d3d8      	bcc.n	80083a4 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 80083f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00b      	beq.n	8008410 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d002      	beq.n	8008406 <decode_static_field+0x11a>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	e000      	b.n	8008408 <decode_static_field+0x11c>
 8008406:	4b56      	ldr	r3, [pc, #344]	; (8008560 <decode_static_field+0x274>)
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	60d3      	str	r3, [r2, #12]
 800840c:	2300      	movs	r3, #0
 800840e:	e0a3      	b.n	8008558 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 8008410:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008414:	4619      	mov	r1, r3
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f7ff fe4c 	bl	80080b4 <pb_close_string_substream>
 800841c:	4603      	mov	r3, r0
 800841e:	f083 0301 	eor.w	r3, r3, #1
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <decode_static_field+0x140>
                    return false;
 8008428:	2300      	movs	r3, #0
 800842a:	e095      	b.n	8008558 <decode_static_field+0x26c>

                return status;
 800842c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008430:	e092      	b.n	8008558 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	64fb      	str	r3, [r7, #76]	; 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	8a52      	ldrh	r2, [r2, #18]
 8008440:	4611      	mov	r1, r2
 8008442:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008444:	8812      	ldrh	r2, [r2, #0]
 8008446:	fb01 f202 	mul.w	r2, r1, r2
 800844a:	441a      	add	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 8008450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008452:	881b      	ldrh	r3, [r3, #0]
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	b291      	uxth	r1, r2
 8008458:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800845a:	8011      	strh	r1, [r2, #0]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	8a92      	ldrh	r2, [r2, #20]
 8008460:	4293      	cmp	r3, r2
 8008462:	d30b      	bcc.n	800847c <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <decode_static_field+0x186>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	e000      	b.n	8008474 <decode_static_field+0x188>
 8008472:	4b3b      	ldr	r3, [pc, #236]	; (8008560 <decode_static_field+0x274>)
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	60d3      	str	r3, [r2, #12]
 8008478:	2300      	movs	r3, #0
 800847a:	e06d      	b.n	8008558 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 800847c:	7afb      	ldrb	r3, [r7, #11]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	4619      	mov	r1, r3
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f7ff fe3c 	bl	8008100 <decode_basic_field>
 8008488:	4603      	mov	r3, r0
 800848a:	e065      	b.n	8008558 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	7d9b      	ldrb	r3, [r3, #22]
 8008490:	f003 030f 	and.w	r3, r3, #15
 8008494:	2b08      	cmp	r3, #8
 8008496:	d005      	beq.n	80084a4 <decode_static_field+0x1b8>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	7d9b      	ldrb	r3, [r3, #22]
 800849c:	f003 030f 	and.w	r3, r3, #15
 80084a0:	2b09      	cmp	r3, #9
 80084a2:	d141      	bne.n	8008528 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a1b      	ldr	r3, [r3, #32]
 80084a8:	881a      	ldrh	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d03a      	beq.n	8008528 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	69d8      	ldr	r0, [r3, #28]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	8a5b      	ldrh	r3, [r3, #18]
 80084ba:	461a      	mov	r2, r3
 80084bc:	2100      	movs	r1, #0
 80084be:	f001 f85f 	bl	8009580 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10a      	bne.n	80084e2 <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d105      	bne.n	80084e2 <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d022      	beq.n	8008528 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	69da      	ldr	r2, [r3, #28]
 80084ea:	f107 0314 	add.w	r3, r7, #20
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7ff f99d 	bl	800782e <pb_field_iter_begin>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d016      	beq.n	8008528 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 80084fa:	f107 0314 	add.w	r3, r7, #20
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 fa4d 	bl	800899e <pb_message_set_to_defaults>
 8008504:	4603      	mov	r3, r0
 8008506:	f083 0301 	eor.w	r3, r3, #1
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00b      	beq.n	8008528 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <decode_static_field+0x232>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	e000      	b.n	8008520 <decode_static_field+0x234>
 800851e:	4b11      	ldr	r3, [pc, #68]	; (8008564 <decode_static_field+0x278>)
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	60d3      	str	r3, [r2, #12]
 8008524:	2300      	movs	r3, #0
 8008526:	e017      	b.n	8008558 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	8a12      	ldrh	r2, [r2, #16]
 8008530:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 8008532:	7afb      	ldrb	r3, [r7, #11]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	4619      	mov	r1, r3
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f7ff fde1 	bl	8008100 <decode_basic_field>
 800853e:	4603      	mov	r3, r0
 8008540:	e00a      	b.n	8008558 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <decode_static_field+0x264>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	e000      	b.n	8008552 <decode_static_field+0x266>
 8008550:	4b05      	ldr	r3, [pc, #20]	; (8008568 <decode_static_field+0x27c>)
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	60d3      	str	r3, [r2, #12]
 8008556:	2300      	movs	r3, #0
    }
}
 8008558:	4618      	mov	r0, r3
 800855a:	3758      	adds	r7, #88	; 0x58
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	0800968c 	.word	0x0800968c
 8008564:	0800969c 	.word	0x0800969c
 8008568:	08009678 	.word	0x08009678

0800856c <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	460b      	mov	r3, r1
 8008576:	607a      	str	r2, [r7, #4]
 8008578:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <decode_pointer_field+0x1c>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	e000      	b.n	800858a <decode_pointer_field+0x1e>
 8008588:	4b04      	ldr	r3, [pc, #16]	; (800859c <decode_pointer_field+0x30>)
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	60d3      	str	r3, [r2, #12]
 800858e:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8008590:	4618      	mov	r0, r3
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	080096b4 	.word	0x080096b4

080085a0 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80085a0:	b590      	push	{r4, r7, lr}
 80085a2:	b097      	sub	sp, #92	; 0x5c
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	61f8      	str	r0, [r7, #28]
 80085a8:	460b      	mov	r3, r1
 80085aa:	617a      	str	r2, [r7, #20]
 80085ac:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d106      	bne.n	80085c6 <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 80085b8:	7efb      	ldrb	r3, [r7, #27]
 80085ba:	4619      	mov	r1, r3
 80085bc:	69f8      	ldr	r0, [r7, #28]
 80085be:	f7ff fc91 	bl	8007ee4 <pb_skip_field>
 80085c2:	4603      	mov	r3, r0
 80085c4:	e070      	b.n	80086a8 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 80085c6:	7efb      	ldrb	r3, [r7, #27]
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d145      	bne.n	8008658 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 80085cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80085d0:	4619      	mov	r1, r3
 80085d2:	69f8      	ldr	r0, [r7, #28]
 80085d4:	f7ff fd34 	bl	8008040 <pb_make_string_substream>
 80085d8:	4603      	mov	r3, r0
 80085da:	f083 0301 	eor.w	r3, r3, #1
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <decode_callback_field+0x48>
            return false;
 80085e4:	2300      	movs	r3, #0
 80085e6:	e05f      	b.n	80086a8 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 80085e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ea:	657b      	str	r3, [r7, #84]	; 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	2100      	movs	r1, #0
 80085fa:	4798      	blx	r3
 80085fc:	4603      	mov	r3, r0
 80085fe:	f083 0301 	eor.w	r3, r3, #1
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	d010      	beq.n	800862a <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <decode_callback_field+0x76>
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	e005      	b.n	8008622 <decode_callback_field+0x82>
 8008616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <decode_callback_field+0x80>
 800861c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800861e:	e000      	b.n	8008622 <decode_callback_field+0x82>
 8008620:	4b23      	ldr	r3, [pc, #140]	; (80086b0 <decode_callback_field+0x110>)
 8008622:	69fa      	ldr	r2, [r7, #28]
 8008624:	60d3      	str	r3, [r2, #12]
                return false;
 8008626:	2300      	movs	r3, #0
 8008628:	e03e      	b.n	80086a8 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 800862a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800862c:	2b00      	cmp	r3, #0
 800862e:	d003      	beq.n	8008638 <decode_callback_field+0x98>
 8008630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008632:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008634:	429a      	cmp	r2, r3
 8008636:	d8d7      	bhi.n	80085e8 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8008638:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800863c:	4619      	mov	r1, r3
 800863e:	69f8      	ldr	r0, [r7, #28]
 8008640:	f7ff fd38 	bl	80080b4 <pb_close_string_substream>
 8008644:	4603      	mov	r3, r0
 8008646:	f083 0301 	eor.w	r3, r3, #1
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <decode_callback_field+0xb4>
            return false;
 8008650:	2300      	movs	r3, #0
 8008652:	e029      	b.n	80086a8 <decode_callback_field+0x108>

        return true;
 8008654:	2301      	movs	r3, #1
 8008656:	e027      	b.n	80086a8 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8008658:	230a      	movs	r3, #10
 800865a:	627b      	str	r3, [r7, #36]	; 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 800865c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008660:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008664:	7ef9      	ldrb	r1, [r7, #27]
 8008666:	69f8      	ldr	r0, [r7, #28]
 8008668:	f7ff fc7e 	bl	8007f68 <read_raw_value>
 800866c:	4603      	mov	r3, r0
 800866e:	f083 0301 	eor.w	r3, r3, #1
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <decode_callback_field+0xdc>
            return false;
 8008678:	2300      	movs	r3, #0
 800867a:	e015      	b.n	80086a8 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 800867c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800867e:	463b      	mov	r3, r7
 8008680:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008684:	4618      	mov	r0, r3
 8008686:	f7ff fa87 	bl	8007b98 <pb_istream_from_buffer>
 800868a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800868e:	463b      	mov	r3, r7
 8008690:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008692:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	2100      	movs	r1, #0
 80086a4:	4798      	blx	r3
 80086a6:	4603      	mov	r3, r0
    }
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	375c      	adds	r7, #92	; 0x5c
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd90      	pop	{r4, r7, pc}
 80086b0:	080096c8 	.word	0x080096c8

080086b4 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	460b      	mov	r3, r1
 80086be:	607a      	str	r2, [r7, #4]
 80086c0:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	7d9b      	ldrb	r3, [r3, #22]
 80086c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80086ca:	2b80      	cmp	r3, #128	; 0x80
 80086cc:	d00e      	beq.n	80086ec <decode_field+0x38>
 80086ce:	2b80      	cmp	r3, #128	; 0x80
 80086d0:	d81c      	bhi.n	800870c <decode_field+0x58>
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <decode_field+0x28>
 80086d6:	2b40      	cmp	r3, #64	; 0x40
 80086d8:	d010      	beq.n	80086fc <decode_field+0x48>
 80086da:	e017      	b.n	800870c <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 80086dc:	7afb      	ldrb	r3, [r7, #11]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	4619      	mov	r1, r3
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f7ff fe02 	bl	80082ec <decode_static_field>
 80086e8:	4603      	mov	r3, r0
 80086ea:	e01a      	b.n	8008722 <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 80086ec:	7afb      	ldrb	r3, [r7, #11]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	4619      	mov	r1, r3
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff ff3a 	bl	800856c <decode_pointer_field>
 80086f8:	4603      	mov	r3, r0
 80086fa:	e012      	b.n	8008722 <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 80086fc:	7afb      	ldrb	r3, [r7, #11]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	4619      	mov	r1, r3
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f7ff ff4c 	bl	80085a0 <decode_callback_field>
 8008708:	4603      	mov	r3, r0
 800870a:	e00a      	b.n	8008722 <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <decode_field+0x66>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	e000      	b.n	800871c <decode_field+0x68>
 800871a:	4b04      	ldr	r3, [pc, #16]	; (800872c <decode_field+0x78>)
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	60d3      	str	r3, [r2, #12]
 8008720:	2300      	movs	r3, #0
    }
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	08009678 	.word	0x08009678

08008730 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b08e      	sub	sp, #56	; 0x38
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 800873e:	f107 0310 	add.w	r3, r7, #16
 8008742:	68b9      	ldr	r1, [r7, #8]
 8008744:	4618      	mov	r0, r3
 8008746:	f7ff f88b 	bl	8007860 <pb_field_iter_begin_extension>
 800874a:	4603      	mov	r3, r0
 800874c:	f083 0301 	eor.w	r3, r3, #1
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00b      	beq.n	800876e <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d002      	beq.n	8008764 <default_extension_decoder+0x34>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	e000      	b.n	8008766 <default_extension_decoder+0x36>
 8008764:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <default_extension_decoder+0x70>)
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	60d3      	str	r3, [r2, #12]
 800876a:	2300      	movs	r3, #0
 800876c:	e014      	b.n	8008798 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 800876e:	8c3b      	ldrh	r3, [r7, #32]
 8008770:	461a      	mov	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4293      	cmp	r3, r2
 8008776:	d102      	bne.n	800877e <default_extension_decoder+0x4e>
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <default_extension_decoder+0x52>
        return true;
 800877e:	2301      	movs	r3, #1
 8008780:	e00a      	b.n	8008798 <default_extension_decoder+0x68>

    extension->found = true;
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2201      	movs	r2, #1
 8008786:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8008788:	f107 0210 	add.w	r2, r7, #16
 800878c:	78fb      	ldrb	r3, [r7, #3]
 800878e:	4619      	mov	r1, r3
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f7ff ff8f 	bl	80086b4 <decode_field>
 8008796:	4603      	mov	r3, r0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3738      	adds	r7, #56	; 0x38
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	080096d8 	.word	0x080096d8

080087a4 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 80087a4:	b590      	push	{r4, r7, lr}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	603b      	str	r3, [r7, #0]
 80087b0:	4613      	mov	r3, r2
 80087b2:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 80087ba:	e022      	b.n	8008802 <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00a      	beq.n	80087dc <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681c      	ldr	r4, [r3, #0]
 80087cc:	79fb      	ldrb	r3, [r7, #7]
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	47a0      	blx	r4
 80087d6:	4603      	mov	r3, r0
 80087d8:	75fb      	strb	r3, [r7, #23]
 80087da:	e007      	b.n	80087ec <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 80087dc:	79fb      	ldrb	r3, [r7, #7]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f7ff ffa4 	bl	8008730 <default_extension_decoder>
 80087e8:	4603      	mov	r3, r0
 80087ea:	75fb      	strb	r3, [r7, #23]

        if (!status)
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
 80087ee:	f083 0301 	eor.w	r3, r3, #1
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <decode_extension+0x58>
            return false;
 80087f8:	2300      	movs	r3, #0
 80087fa:	e00b      	b.n	8008814 <decode_extension+0x70>
        
        extension = extension->next;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d004      	beq.n	8008812 <decode_extension+0x6e>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	429a      	cmp	r2, r3
 8008810:	d0d4      	beq.n	80087bc <decode_extension+0x18>
    }
    
    return true;
 8008812:	2301      	movs	r3, #1
}
 8008814:	4618      	mov	r0, r3
 8008816:	371c      	adds	r7, #28
 8008818:	46bd      	mov	sp, r7
 800881a:	bd90      	pop	{r4, r7, pc}

0800881c <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08e      	sub	sp, #56	; 0x38
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	7d9b      	ldrb	r3, [r3, #22]
 8008828:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800882c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008830:	f003 030f 	and.w	r3, r3, #15
 8008834:	2b0a      	cmp	r3, #10
 8008836:	d124      	bne.n	8008882 <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 8008840:	e01b      	b.n	800887a <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 8008842:	f107 0308 	add.w	r3, r7, #8
 8008846:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008848:	4618      	mov	r0, r3
 800884a:	f7ff f809 	bl	8007860 <pb_field_iter_begin_extension>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00f      	beq.n	8008874 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 8008854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008856:	2200      	movs	r2, #0
 8008858:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 800885a:	f107 0308 	add.w	r3, r7, #8
 800885e:	4618      	mov	r0, r3
 8008860:	f000 f89d 	bl	800899e <pb_message_set_to_defaults>
 8008864:	4603      	mov	r3, r0
 8008866:	f083 0301 	eor.w	r3, r3, #1
 800886a:	b2db      	uxtb	r3, r3
 800886c:	2b00      	cmp	r3, #0
 800886e:	d001      	beq.n	8008874 <pb_field_set_to_default+0x58>
                    return false;
 8008870:	2300      	movs	r3, #0
 8008872:	e090      	b.n	8008996 <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 8008874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 800887a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1e0      	bne.n	8008842 <pb_field_set_to_default+0x26>
 8008880:	e088      	b.n	8008994 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8008882:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008886:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d166      	bne.n	800895c <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 800888e:	2301      	movs	r3, #1
 8008890:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8008894:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008898:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800889c:	2b10      	cmp	r3, #16
 800889e:	d108      	bne.n	80088b2 <pb_field_set_to_default+0x96>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a1b      	ldr	r3, [r3, #32]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d004      	beq.n	80088b2 <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a1b      	ldr	r3, [r3, #32]
 80088ac:	2200      	movs	r2, #0
 80088ae:	701a      	strb	r2, [r3, #0]
 80088b0:	e012      	b.n	80088d8 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80088b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80088b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80088ba:	2b20      	cmp	r3, #32
 80088bc:	d005      	beq.n	80088ca <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80088be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80088c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80088c6:	2b30      	cmp	r3, #48	; 0x30
 80088c8:	d106      	bne.n	80088d8 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	2200      	movs	r2, #0
 80088d0:	801a      	strh	r2, [r3, #0]
            init_data = false;
 80088d2:	2300      	movs	r3, #0
 80088d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        if (init_data)
 80088d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d059      	beq.n	8008994 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	7d9b      	ldrb	r3, [r3, #22]
 80088e4:	f003 030f 	and.w	r3, r3, #15
 80088e8:	2b08      	cmp	r3, #8
 80088ea:	d005      	beq.n	80088f8 <pb_field_set_to_default+0xdc>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	7d9b      	ldrb	r3, [r3, #22]
 80088f0:	f003 030f 	and.w	r3, r3, #15
 80088f4:	2b09      	cmp	r3, #9
 80088f6:	d128      	bne.n	800894a <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fc:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10a      	bne.n	8008918 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 8008908:	2b00      	cmp	r3, #0
 800890a:	d105      	bne.n	8008918 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 8008914:	2b00      	cmp	r3, #0
 8008916:	d018      	beq.n	800894a <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	69da      	ldr	r2, [r3, #28]
 8008920:	f107 0308 	add.w	r3, r7, #8
 8008924:	4618      	mov	r0, r3
 8008926:	f7fe ff82 	bl	800782e <pb_field_iter_begin>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d030      	beq.n	8008992 <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8008930:	f107 0308 	add.w	r3, r7, #8
 8008934:	4618      	mov	r0, r3
 8008936:	f000 f832 	bl	800899e <pb_message_set_to_defaults>
 800893a:	4603      	mov	r3, r0
 800893c:	f083 0301 	eor.w	r3, r3, #1
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d025      	beq.n	8008992 <pb_field_set_to_default+0x176>
                        return false;
 8008946:	2300      	movs	r3, #0
 8008948:	e025      	b.n	8008996 <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	69d8      	ldr	r0, [r3, #28]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	8a5b      	ldrh	r3, [r3, #18]
 8008952:	461a      	mov	r2, r3
 8008954:	2100      	movs	r1, #0
 8008956:	f000 fe13 	bl	8009580 <memset>
 800895a:	e01b      	b.n	8008994 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800895c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008960:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008964:	2b80      	cmp	r3, #128	; 0x80
 8008966:	d115      	bne.n	8008994 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	2200      	movs	r2, #0
 800896e:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8008970:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008974:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008978:	2b20      	cmp	r3, #32
 800897a:	d005      	beq.n	8008988 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800897c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008980:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8008984:	2b30      	cmp	r3, #48	; 0x30
 8008986:	d105      	bne.n	8008994 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	2200      	movs	r2, #0
 800898e:	801a      	strh	r2, [r3, #0]
 8008990:	e000      	b.n	8008994 <pb_field_set_to_default+0x178>
            {
 8008992:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 8008994:	2301      	movs	r3, #1
}
 8008996:	4618      	mov	r0, r3
 8008998:	3738      	adds	r7, #56	; 0x38
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 800899e:	b590      	push	{r4, r7, lr}
 80089a0:	b08d      	sub	sp, #52	; 0x34
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 80089a6:	f107 0320 	add.w	r3, r7, #32
 80089aa:	2200      	movs	r2, #0
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	605a      	str	r2, [r3, #4]
 80089b0:	609a      	str	r2, [r3, #8]
 80089b2:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 80089b4:	2300      	movs	r3, #0
 80089b6:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 80089b8:	2300      	movs	r3, #0
 80089ba:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d020      	beq.n	8008a08 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	6899      	ldr	r1, [r3, #8]
 80089cc:	463b      	mov	r3, r7
 80089ce:	f04f 32ff 	mov.w	r2, #4294967295
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7ff f8e0 	bl	8007b98 <pb_istream_from_buffer>
 80089d8:	f107 0420 	add.w	r4, r7, #32
 80089dc:	463b      	mov	r3, r7
 80089de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80089e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 80089e4:	f107 031a 	add.w	r3, r7, #26
 80089e8:	f107 021c 	add.w	r2, r7, #28
 80089ec:	f107 011b 	add.w	r1, r7, #27
 80089f0:	f107 0020 	add.w	r0, r7, #32
 80089f4:	f7ff fa47 	bl	8007e86 <pb_decode_tag>
 80089f8:	4603      	mov	r3, r0
 80089fa:	f083 0301 	eor.w	r3, r3, #1
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <pb_message_set_to_defaults+0x6a>
            return false;
 8008a04:	2300      	movs	r3, #0
 8008a06:	e043      	b.n	8008a90 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8008a08:	6978      	ldr	r0, [r7, #20]
 8008a0a:	f7ff ff07 	bl	800881c <pb_field_set_to_default>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	f083 0301 	eor.w	r3, r3, #1
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <pb_message_set_to_defaults+0x80>
            return false;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	e038      	b.n	8008a90 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d02e      	beq.n	8008a82 <pb_message_set_to_defaults+0xe4>
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	8a1b      	ldrh	r3, [r3, #16]
 8008a28:	461a      	mov	r2, r3
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d128      	bne.n	8008a82 <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8008a30:	7ef9      	ldrb	r1, [r7, #27]
 8008a32:	f107 0320 	add.w	r3, r7, #32
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7ff fe3b 	bl	80086b4 <decode_field>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	f083 0301 	eor.w	r3, r3, #1
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <pb_message_set_to_defaults+0xb0>
                return false;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	e020      	b.n	8008a90 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8008a4e:	f107 031a 	add.w	r3, r7, #26
 8008a52:	f107 021c 	add.w	r2, r7, #28
 8008a56:	f107 011b 	add.w	r1, r7, #27
 8008a5a:	f107 0020 	add.w	r0, r7, #32
 8008a5e:	f7ff fa12 	bl	8007e86 <pb_decode_tag>
 8008a62:	4603      	mov	r3, r0
 8008a64:	f083 0301 	eor.w	r3, r3, #1
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <pb_message_set_to_defaults+0xd4>
                return false;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	e00e      	b.n	8008a90 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 8008a82:	6978      	ldr	r0, [r7, #20]
 8008a84:	f7fe ff1c 	bl	80078c0 <pb_field_iter_next>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1bc      	bne.n	8008a08 <pb_message_set_to_defaults+0x6a>

    return true;
 8008a8e:	2301      	movs	r3, #1
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3734      	adds	r7, #52	; 0x34
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd90      	pop	{r4, r7, pc}

08008a98 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b09a      	sub	sp, #104	; 0x68
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
 8008aa4:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	667b      	str	r3, [r7, #100]	; 0x64
    pb_extension_t *extensions = NULL;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	663b      	str	r3, [r7, #96]	; 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 8008aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ab2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    pb_size_t fixed_count_size = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    pb_size_t fixed_count_total_size = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	643b      	str	r3, [r7, #64]	; 0x40
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	647b      	str	r3, [r7, #68]	; 0x44
    const uint32_t allbits = ~(uint32_t)0;
 8008aca:	f04f 33ff 	mov.w	r3, #4294967295
 8008ace:	657b      	str	r3, [r7, #84]	; 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8008ad0:	f107 0318 	add.w	r3, r7, #24
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	68b9      	ldr	r1, [r7, #8]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fe fea8 	bl	800782e <pb_field_iter_begin>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 8102 	beq.w	8008cea <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f040 80fc 	bne.w	8008cea <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 8008af2:	f107 0318 	add.w	r3, r7, #24
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7ff ff51 	bl	800899e <pb_message_set_to_defaults>
 8008afc:	4603      	mov	r3, r0
 8008afe:	f083 0301 	eor.w	r3, r3, #1
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 80f0 	beq.w	8008cea <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d002      	beq.n	8008b18 <pb_decode_inner+0x80>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	e000      	b.n	8008b1a <pb_decode_inner+0x82>
 8008b18:	4b99      	ldr	r3, [pc, #612]	; (8008d80 <pb_decode_inner+0x2e8>)
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	60d3      	str	r3, [r2, #12]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	e16d      	b.n	8008dfe <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8008b22:	f107 0312 	add.w	r3, r7, #18
 8008b26:	f107 0214 	add.w	r2, r7, #20
 8008b2a:	f107 0113 	add.w	r1, r7, #19
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f7ff f9a9 	bl	8007e86 <pb_decode_tag>
 8008b34:	4603      	mov	r3, r0
 8008b36:	f083 0301 	eor.w	r3, r3, #1
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d005      	beq.n	8008b4c <pb_decode_inner+0xb4>
        {
            if (eof)
 8008b40:	7cbb      	ldrb	r3, [r7, #18]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f040 80d7 	bne.w	8008cf6 <pb_decode_inner+0x25e>
                break;
            else
                return false;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	e158      	b.n	8008dfe <pb_decode_inner+0x366>
        }

        if (tag == 0)
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d111      	bne.n	8008b76 <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	f003 0304 	and.w	r3, r3, #4
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f040 80ce 	bne.w	8008cfa <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d002      	beq.n	8008b6c <pb_decode_inner+0xd4>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	e000      	b.n	8008b6e <pb_decode_inner+0xd6>
 8008b6c:	4b85      	ldr	r3, [pc, #532]	; (8008d84 <pb_decode_inner+0x2ec>)
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	60d3      	str	r3, [r2, #12]
 8008b72:	2300      	movs	r3, #0
 8008b74:	e143      	b.n	8008dfe <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	f107 0318 	add.w	r3, r7, #24
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fe feb3 	bl	80078ea <pb_field_iter_find>
 8008b84:	4603      	mov	r3, r0
 8008b86:	f083 0301 	eor.w	r3, r3, #1
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d105      	bne.n	8008b9c <pb_decode_inner+0x104>
 8008b90:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008b94:	f003 030f 	and.w	r3, r3, #15
 8008b98:	2b0a      	cmp	r3, #10
 8008b9a:	d13c      	bne.n	8008c16 <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8008b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d112      	bne.n	8008bc8 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 8008ba2:	f107 0318 	add.w	r3, r7, #24
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fe fef5 	bl	8007996 <pb_field_iter_find_extension>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d004      	beq.n	8008bbc <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 8008bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	663b      	str	r3, [r7, #96]	; 0x60
                    extension_range_start = iter.tag;
 8008bb8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bba:	667b      	str	r3, [r7, #100]	; 0x64
                }

                if (!extensions)
 8008bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d102      	bne.n	8008bc8 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 8008bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc6:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            if (tag >= extension_range_start)
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d815      	bhi.n	8008bfc <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	64fb      	str	r3, [r7, #76]	; 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 8008bd6:	6979      	ldr	r1, [r7, #20]
 8008bd8:	7cfa      	ldrb	r2, [r7, #19]
 8008bda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f7ff fde1 	bl	80087a4 <decode_extension>
 8008be2:	4603      	mov	r3, r0
 8008be4:	f083 0301 	eor.w	r3, r3, #1
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d001      	beq.n	8008bf2 <pb_decode_inner+0x15a>
                    return false;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	e105      	b.n	8008dfe <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d173      	bne.n	8008ce4 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8008bfc:	7cfb      	ldrb	r3, [r7, #19]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f7ff f96f 	bl	8007ee4 <pb_skip_field>
 8008c06:	4603      	mov	r3, r0
 8008c08:	f083 0301 	eor.w	r3, r3, #1
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d06a      	beq.n	8008ce8 <pb_decode_inner+0x250>
                return false;
 8008c12:	2300      	movs	r3, #0
 8008c14:	e0f3      	b.n	8008dfe <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 8008c16:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008c1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008c1e:	2b20      	cmp	r3, #32
 8008c20:	d12e      	bne.n	8008c80 <pb_decode_inner+0x1e8>
 8008c22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c24:	f107 0318 	add.w	r3, r7, #24
 8008c28:	3314      	adds	r3, #20
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d128      	bne.n	8008c80 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 8008c2e:	8c3b      	ldrh	r3, [r7, #32]
 8008c30:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d020      	beq.n	8008c7a <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8008c38:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008c3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d011      	beq.n	8008c68 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 8008c44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8008c48:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d00b      	beq.n	8008c68 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <pb_decode_inner+0x1c6>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	e000      	b.n	8008c60 <pb_decode_inner+0x1c8>
 8008c5e:	4b4a      	ldr	r3, [pc, #296]	; (8008d88 <pb_decode_inner+0x2f0>)
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	60d3      	str	r3, [r2, #12]
 8008c64:	2300      	movs	r3, #0
 8008c66:	e0ca      	b.n	8008dfe <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8008c68:	8c3b      	ldrh	r3, [r7, #32]
 8008c6a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                fixed_count_size = 0;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                fixed_count_total_size = iter.array_size;
 8008c74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c76:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }

            iter.pSize = &fixed_count_size;
 8008c7a:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8008c7e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8008c80:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008c84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d11c      	bne.n	8008cc6 <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8008c8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c8e:	2b3f      	cmp	r3, #63	; 0x3f
 8008c90:	d819      	bhi.n	8008cc6 <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8008c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c94:	f003 031f 	and.w	r3, r3, #31
 8008c98:	2201      	movs	r2, #1
 8008c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9e:	653b      	str	r3, [r7, #80]	; 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 8008ca0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ca2:	095b      	lsrs	r3, r3, #5
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	3368      	adds	r3, #104	; 0x68
 8008caa:	443b      	add	r3, r7
 8008cac:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8008cb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cb2:	095b      	lsrs	r3, r3, #5
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	008b      	lsls	r3, r1, #2
 8008cbe:	3368      	adds	r3, #104	; 0x68
 8008cc0:	443b      	add	r3, r7
 8008cc2:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8008cc6:	7cfb      	ldrb	r3, [r7, #19]
 8008cc8:	f107 0218 	add.w	r2, r7, #24
 8008ccc:	4619      	mov	r1, r3
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f7ff fcf0 	bl	80086b4 <decode_field>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	f083 0301 	eor.w	r3, r3, #1
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d004      	beq.n	8008cea <pb_decode_inner+0x252>
            return false;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	e08c      	b.n	8008dfe <pb_decode_inner+0x366>
                    continue;
 8008ce4:	bf00      	nop
 8008ce6:	e000      	b.n	8008cea <pb_decode_inner+0x252>
            continue;
 8008ce8:	bf00      	nop
    while (stream->bytes_left)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f47f af17 	bne.w	8008b22 <pb_decode_inner+0x8a>
 8008cf4:	e002      	b.n	8008cfc <pb_decode_inner+0x264>
                break;
 8008cf6:	bf00      	nop
 8008cf8:	e000      	b.n	8008cfc <pb_decode_inner+0x264>
            break;
 8008cfa:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 8008cfc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d011      	beq.n	8008d2c <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8008d08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8008d0c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d00b      	beq.n	8008d2c <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <pb_decode_inner+0x28a>
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	e000      	b.n	8008d24 <pb_decode_inner+0x28c>
 8008d22:	4b19      	ldr	r3, [pc, #100]	; (8008d88 <pb_decode_inner+0x2f0>)
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	60d3      	str	r3, [r2, #12]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	e068      	b.n	8008dfe <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	8a5b      	ldrh	r3, [r3, #18]
 8008d30:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        if (req_field_count > 0)
 8008d34:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d05f      	beq.n	8008dfc <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8008d3c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008d40:	2b40      	cmp	r3, #64	; 0x40
 8008d42:	d902      	bls.n	8008d4a <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 8008d44:	2340      	movs	r3, #64	; 0x40
 8008d46:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8008d50:	e023      	b.n	8008d9a <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 8008d52:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	3368      	adds	r3, #104	; 0x68
 8008d5a:	443b      	add	r3, r7
 8008d5c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8008d60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d014      	beq.n	8008d90 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <pb_decode_inner+0x2dc>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	e000      	b.n	8008d76 <pb_decode_inner+0x2de>
 8008d74:	4b05      	ldr	r3, [pc, #20]	; (8008d8c <pb_decode_inner+0x2f4>)
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	60d3      	str	r3, [r2, #12]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	e03f      	b.n	8008dfe <pb_decode_inner+0x366>
 8008d7e:	bf00      	nop
 8008d80:	0800969c 	.word	0x0800969c
 8008d84:	080096ec 	.word	0x080096ec
 8008d88:	080096f8 	.word	0x080096f8
 8008d8c:	0800971c 	.word	0x0800971c
            for (i = 0; i < (req_field_count >> 5); i++)
 8008d90:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8008d94:	3301      	adds	r3, #1
 8008d96:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8008d9a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008d9e:	095b      	lsrs	r3, r3, #5
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d3d3      	bcc.n	8008d52 <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8008daa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008dae:	f003 031f 	and.w	r3, r3, #31
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d022      	beq.n	8008dfc <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8008db6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008dba:	095b      	lsrs	r3, r3, #5
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	3368      	adds	r3, #104	; 0x68
 8008dc2:	443b      	add	r3, r7
 8008dc4:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8008dc8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	f003 031f 	and.w	r3, r3, #31
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	f1c3 0320 	rsb	r3, r3, #32
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	4619      	mov	r1, r3
 8008ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dde:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d00b      	beq.n	8008dfc <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d002      	beq.n	8008df2 <pb_decode_inner+0x35a>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	e000      	b.n	8008df4 <pb_decode_inner+0x35c>
 8008df2:	4b05      	ldr	r3, [pc, #20]	; (8008e08 <pb_decode_inner+0x370>)
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	60d3      	str	r3, [r2, #12]
 8008df8:	2300      	movs	r3, #0
 8008dfa:	e000      	b.n	8008dfe <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 8008dfc:	2301      	movs	r3, #1
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3768      	adds	r7, #104	; 0x68
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	0800971c 	.word	0x0800971c

08008e0c <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b086      	sub	sp, #24
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 8008e18:	2300      	movs	r3, #0
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	68b9      	ldr	r1, [r7, #8]
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f7ff fe3a 	bl	8008a98 <pb_decode_inner>
 8008e24:	4603      	mov	r3, r0
 8008e26:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 8008e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3718      	adds	r7, #24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 8008e3c:	f107 030c 	add.w	r3, r7, #12
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7fe ff70 	bl	8007d28 <pb_decode_varint32>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	f083 0301 	eor.w	r3, r3, #1
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <pb_decode_bool+0x26>
        return false;
 8008e54:	2300      	movs	r3, #0
 8008e56:	e008      	b.n	8008e6a <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	bf14      	ite	ne
 8008e5e:	2301      	movne	r3, #1
 8008e60:	2300      	moveq	r3, #0
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	701a      	strb	r2, [r3, #0]
    return true;
 8008e68:	2301      	movs	r3, #1
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 8008e72:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 8008e7e:	f107 0308 	add.w	r3, r7, #8
 8008e82:	4619      	mov	r1, r3
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f7fe ff5f 	bl	8007d48 <pb_decode_varint>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	f083 0301 	eor.w	r3, r3, #1
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d001      	beq.n	8008e9a <pb_decode_svarint+0x28>
        return false;
 8008e96:	2300      	movs	r3, #0
 8008e98:	e029      	b.n	8008eee <pb_decode_svarint+0x7c>
    
    if (value & 1)
 8008e9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e9e:	f002 0401 	and.w	r4, r2, #1
 8008ea2:	2500      	movs	r5, #0
 8008ea4:	ea54 0305 	orrs.w	r3, r4, r5
 8008ea8:	d013      	beq.n	8008ed2 <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 8008eaa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008eae:	f04f 0200 	mov.w	r2, #0
 8008eb2:	f04f 0300 	mov.w	r3, #0
 8008eb6:	0842      	lsrs	r2, r0, #1
 8008eb8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8008ebc:	084b      	lsrs	r3, r1, #1
 8008ebe:	ea6f 0802 	mvn.w	r8, r2
 8008ec2:	ea6f 0903 	mvn.w	r9, r3
 8008ec6:	4642      	mov	r2, r8
 8008ec8:	464b      	mov	r3, r9
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	e9c1 2300 	strd	r2, r3, [r1]
 8008ed0:	e00c      	b.n	8008eec <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 8008ed2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ed6:	f04f 0200 	mov.w	r2, #0
 8008eda:	f04f 0300 	mov.w	r3, #0
 8008ede:	0842      	lsrs	r2, r0, #1
 8008ee0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8008ee4:	084b      	lsrs	r3, r1, #1
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 8008eec:	2301      	movs	r3, #1
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08008ef8 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 8008f02:	f107 030c 	add.w	r3, r7, #12
 8008f06:	2204      	movs	r2, #4
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7fe fd92 	bl	8007a34 <pb_read>
 8008f10:	4603      	mov	r3, r0
 8008f12:	f083 0301 	eor.w	r3, r3, #1
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <pb_decode_fixed32+0x28>
        return false;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	e003      	b.n	8008f28 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 8008f26:	2301      	movs	r3, #1
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 8008f3a:	f107 0308 	add.w	r3, r7, #8
 8008f3e:	2208      	movs	r2, #8
 8008f40:	4619      	mov	r1, r3
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f7fe fd76 	bl	8007a34 <pb_read>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	f083 0301 	eor.w	r3, r3, #1
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d001      	beq.n	8008f58 <pb_decode_fixed64+0x28>
        return false;
 8008f54:	2300      	movs	r3, #0
 8008f56:	e005      	b.n	8008f64 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 8008f58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 8008f62:	2301      	movs	r3, #1
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f7ff ff58 	bl	8008e32 <pb_decode_bool>
 8008f82:	4603      	mov	r3, r0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8008f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f90:	b094      	sub	sp, #80	; 0x50
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6278      	str	r0, [r7, #36]	; 0x24
 8008f96:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8008f98:	6a3b      	ldr	r3, [r7, #32]
 8008f9a:	7d9b      	ldrb	r3, [r3, #22]
 8008f9c:	f003 030f 	and.w	r3, r3, #15
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d179      	bne.n	8009098 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 8008fa4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008fa8:	4619      	mov	r1, r3
 8008faa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fac:	f7fe fecc 	bl	8007d48 <pb_decode_varint>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	f083 0301 	eor.w	r3, r3, #1
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <pb_dec_varint+0x34>
            return false;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	e107      	b.n	80091d0 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	8a5b      	ldrh	r3, [r3, #18]
 8008fc4:	2b08      	cmp	r3, #8
 8008fc6:	d10a      	bne.n	8008fde <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	69d9      	ldr	r1, [r3, #28]
 8008fcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008fd0:	e9c1 2300 	strd	r2, r3, [r1]
 8008fd4:	e9d1 2300 	ldrd	r2, r3, [r1]
 8008fd8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8008fdc:	e046      	b.n	800906c <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 8008fde:	6a3b      	ldr	r3, [r7, #32]
 8008fe0:	8a5b      	ldrh	r3, [r3, #18]
 8008fe2:	2b04      	cmp	r3, #4
 8008fe4:	d10e      	bne.n	8009004 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 8008fe6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	69db      	ldr	r3, [r3, #28]
 8008fee:	4602      	mov	r2, r0
 8008ff0:	601a      	str	r2, [r3, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	613b      	str	r3, [r7, #16]
 8008ff8:	617a      	str	r2, [r7, #20]
 8008ffa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008ffe:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8009002:	e033      	b.n	800906c <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	8a5b      	ldrh	r3, [r3, #18]
 8009008:	2b02      	cmp	r3, #2
 800900a:	d10f      	bne.n	800902c <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 800900c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	b282      	uxth	r2, r0
 8009016:	801a      	strh	r2, [r3, #0]
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	b29b      	uxth	r3, r3
 800901c:	2200      	movs	r2, #0
 800901e:	60bb      	str	r3, [r7, #8]
 8009020:	60fa      	str	r2, [r7, #12]
 8009022:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009026:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 800902a:	e01f      	b.n	800906c <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	8a5b      	ldrh	r3, [r3, #18]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d10f      	bne.n	8009054 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 8009034:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	b2c2      	uxtb	r2, r0
 800903e:	701a      	strb	r2, [r3, #0]
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2200      	movs	r2, #0
 8009046:	603b      	str	r3, [r7, #0]
 8009048:	607a      	str	r2, [r7, #4]
 800904a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800904e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8009052:	e00b      	b.n	800906c <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <pb_dec_varint+0xd6>
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	e000      	b.n	8009064 <pb_dec_varint+0xd8>
 8009062:	4b5e      	ldr	r3, [pc, #376]	; (80091dc <pb_dec_varint+0x250>)
 8009064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009066:	60d3      	str	r3, [r2, #12]
 8009068:	2300      	movs	r3, #0
 800906a:	e0b1      	b.n	80091d0 <pb_dec_varint+0x244>

        if (clamped != value)
 800906c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009070:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009074:	4299      	cmp	r1, r3
 8009076:	bf08      	it	eq
 8009078:	4290      	cmpeq	r0, r2
 800907a:	d00b      	beq.n	8009094 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <pb_dec_varint+0xfe>
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	e000      	b.n	800908c <pb_dec_varint+0x100>
 800908a:	4b55      	ldr	r3, [pc, #340]	; (80091e0 <pb_dec_varint+0x254>)
 800908c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800908e:	60d3      	str	r3, [r2, #12]
 8009090:	2300      	movs	r3, #0
 8009092:	e09d      	b.n	80091d0 <pb_dec_varint+0x244>

        return true;
 8009094:	2301      	movs	r3, #1
 8009096:	e09b      	b.n	80091d0 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	7d9b      	ldrb	r3, [r3, #22]
 800909c:	f003 030f 	and.w	r3, r3, #15
 80090a0:	2b03      	cmp	r3, #3
 80090a2:	d10d      	bne.n	80090c0 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 80090a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090a8:	4619      	mov	r1, r3
 80090aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090ac:	f7ff fee1 	bl	8008e72 <pb_decode_svarint>
 80090b0:	4603      	mov	r3, r0
 80090b2:	f083 0301 	eor.w	r3, r3, #1
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d022      	beq.n	8009102 <pb_dec_varint+0x176>
                return false;
 80090bc:	2300      	movs	r3, #0
 80090be:	e087      	b.n	80091d0 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 80090c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090c4:	4619      	mov	r1, r3
 80090c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090c8:	f7fe fe3e 	bl	8007d48 <pb_decode_varint>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f083 0301 	eor.w	r3, r3, #1
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <pb_dec_varint+0x150>
                return false;
 80090d8:	2300      	movs	r3, #0
 80090da:	e079      	b.n	80091d0 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 80090dc:	6a3b      	ldr	r3, [r7, #32]
 80090de:	8a5b      	ldrh	r3, [r3, #18]
 80090e0:	2b08      	cmp	r3, #8
 80090e2:	d104      	bne.n	80090ee <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 80090e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80090e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80090ec:	e009      	b.n	8009102 <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 80090ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80090f2:	4613      	mov	r3, r2
 80090f4:	17da      	asrs	r2, r3, #31
 80090f6:	61bb      	str	r3, [r7, #24]
 80090f8:	61fa      	str	r2, [r7, #28]
 80090fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 8009102:	6a3b      	ldr	r3, [r7, #32]
 8009104:	8a5b      	ldrh	r3, [r3, #18]
 8009106:	2b08      	cmp	r3, #8
 8009108:	d10a      	bne.n	8009120 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	69d9      	ldr	r1, [r3, #28]
 800910e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009112:	e9c1 2300 	strd	r2, r3, [r1]
 8009116:	e9d1 2300 	ldrd	r2, r3, [r1]
 800911a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800911e:	e042      	b.n	80091a6 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 8009120:	6a3b      	ldr	r3, [r7, #32]
 8009122:	8a5b      	ldrh	r3, [r3, #18]
 8009124:	2b04      	cmp	r3, #4
 8009126:	d10c      	bne.n	8009142 <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 8009128:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800912c:	6a3b      	ldr	r3, [r7, #32]
 800912e:	69db      	ldr	r3, [r3, #28]
 8009130:	4602      	mov	r2, r0
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	17da      	asrs	r2, r3, #31
 8009138:	469a      	mov	sl, r3
 800913a:	4693      	mov	fp, r2
 800913c:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
 8009140:	e031      	b.n	80091a6 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 8009142:	6a3b      	ldr	r3, [r7, #32]
 8009144:	8a5b      	ldrh	r3, [r3, #18]
 8009146:	2b02      	cmp	r3, #2
 8009148:	d10e      	bne.n	8009168 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 800914a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	69db      	ldr	r3, [r3, #28]
 8009152:	b202      	sxth	r2, r0
 8009154:	801a      	strh	r2, [r3, #0]
 8009156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800915a:	b21b      	sxth	r3, r3
 800915c:	17da      	asrs	r2, r3, #31
 800915e:	4698      	mov	r8, r3
 8009160:	4691      	mov	r9, r2
 8009162:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 8009166:	e01e      	b.n	80091a6 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 8009168:	6a3b      	ldr	r3, [r7, #32]
 800916a:	8a5b      	ldrh	r3, [r3, #18]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d10e      	bne.n	800918e <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 8009170:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009174:	6a3b      	ldr	r3, [r7, #32]
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	b242      	sxtb	r2, r0
 800917a:	701a      	strb	r2, [r3, #0]
 800917c:	f993 3000 	ldrsb.w	r3, [r3]
 8009180:	b25b      	sxtb	r3, r3
 8009182:	17da      	asrs	r2, r3, #31
 8009184:	461c      	mov	r4, r3
 8009186:	4615      	mov	r5, r2
 8009188:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 800918c:	e00b      	b.n	80091a6 <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d002      	beq.n	800919c <pb_dec_varint+0x210>
 8009196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	e000      	b.n	800919e <pb_dec_varint+0x212>
 800919c:	4b0f      	ldr	r3, [pc, #60]	; (80091dc <pb_dec_varint+0x250>)
 800919e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091a0:	60d3      	str	r3, [r2, #12]
 80091a2:	2300      	movs	r3, #0
 80091a4:	e014      	b.n	80091d0 <pb_dec_varint+0x244>

        if (clamped != svalue)
 80091a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80091aa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80091ae:	4299      	cmp	r1, r3
 80091b0:	bf08      	it	eq
 80091b2:	4290      	cmpeq	r0, r2
 80091b4:	d00b      	beq.n	80091ce <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 80091b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d002      	beq.n	80091c4 <pb_dec_varint+0x238>
 80091be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	e000      	b.n	80091c6 <pb_dec_varint+0x23a>
 80091c4:	4b06      	ldr	r3, [pc, #24]	; (80091e0 <pb_dec_varint+0x254>)
 80091c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091c8:	60d3      	str	r3, [r2, #12]
 80091ca:	2300      	movs	r3, #0
 80091cc:	e000      	b.n	80091d0 <pb_dec_varint+0x244>

        return true;
 80091ce:	2301      	movs	r3, #1
    }
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3750      	adds	r7, #80	; 0x50
 80091d4:	46bd      	mov	sp, r7
 80091d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091da:	bf00      	nop
 80091dc:	08009734 	.word	0x08009734
 80091e0:	08009748 	.word	0x08009748

080091e4 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 80091ee:	f107 030c 	add.w	r3, r7, #12
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7fe fd97 	bl	8007d28 <pb_decode_varint32>
 80091fa:	4603      	mov	r3, r0
 80091fc:	f083 0301 	eor.w	r3, r3, #1
 8009200:	b2db      	uxtb	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <pb_dec_bytes+0x26>
        return false;
 8009206:	2300      	movs	r3, #0
 8009208:	e055      	b.n	80092b6 <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009210:	d30b      	bcc.n	800922a <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <pb_dec_bytes+0x3c>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	e000      	b.n	8009222 <pb_dec_bytes+0x3e>
 8009220:	4b27      	ldr	r3, [pc, #156]	; (80092c0 <pb_dec_bytes+0xdc>)
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	60d3      	str	r3, [r2, #12]
 8009226:	2300      	movs	r3, #0
 8009228:	e045      	b.n	80092b6 <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3302      	adds	r3, #2
 800922e:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	429a      	cmp	r2, r3
 8009236:	d20b      	bcs.n	8009250 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <pb_dec_bytes+0x62>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	e000      	b.n	8009248 <pb_dec_bytes+0x64>
 8009246:	4b1f      	ldr	r3, [pc, #124]	; (80092c4 <pb_dec_bytes+0xe0>)
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	60d3      	str	r3, [r2, #12]
 800924c:	2300      	movs	r3, #0
 800924e:	e032      	b.n	80092b6 <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	7d9b      	ldrb	r3, [r3, #22]
 8009254:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009258:	2b80      	cmp	r3, #128	; 0x80
 800925a:	d10b      	bne.n	8009274 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <pb_dec_bytes+0x86>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	e000      	b.n	800926c <pb_dec_bytes+0x88>
 800926a:	4b17      	ldr	r3, [pc, #92]	; (80092c8 <pb_dec_bytes+0xe4>)
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	60d3      	str	r3, [r2, #12]
 8009270:	2300      	movs	r3, #0
 8009272:	e020      	b.n	80092b6 <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	8a5b      	ldrh	r3, [r3, #18]
 8009278:	461a      	mov	r2, r3
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	4293      	cmp	r3, r2
 800927e:	d90b      	bls.n	8009298 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d002      	beq.n	800928e <pb_dec_bytes+0xaa>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	e000      	b.n	8009290 <pb_dec_bytes+0xac>
 800928e:	4b0c      	ldr	r3, [pc, #48]	; (80092c0 <pb_dec_bytes+0xdc>)
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	60d3      	str	r3, [r2, #12]
 8009294:	2300      	movs	r3, #0
 8009296:	e00e      	b.n	80092b6 <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	69db      	ldr	r3, [r3, #28]
 800929c:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	3302      	adds	r3, #2
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	4619      	mov	r1, r3
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f7fe fbc0 	bl	8007a34 <pb_read>
 80092b4:	4603      	mov	r3, r0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3718      	adds	r7, #24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	0800975c 	.word	0x0800975c
 80092c4:	0800976c 	.word	0x0800976c
 80092c8:	080096b4 	.word	0x080096b4

080092cc <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b086      	sub	sp, #24
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	69db      	ldr	r3, [r3, #28]
 80092da:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 80092dc:	f107 030c 	add.w	r3, r7, #12
 80092e0:	4619      	mov	r1, r3
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7fe fd20 	bl	8007d28 <pb_decode_varint32>
 80092e8:	4603      	mov	r3, r0
 80092ea:	f083 0301 	eor.w	r3, r3, #1
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <pb_dec_string+0x2c>
        return false;
 80092f4:	2300      	movs	r3, #0
 80092f6:	e05a      	b.n	80093ae <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fe:	d10b      	bne.n	8009318 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <pb_dec_string+0x42>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	e000      	b.n	8009310 <pb_dec_string+0x44>
 800930e:	4b2a      	ldr	r3, [pc, #168]	; (80093b8 <pb_dec_string+0xec>)
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	60d3      	str	r3, [r2, #12]
 8009314:	2300      	movs	r3, #0
 8009316:	e04a      	b.n	80093ae <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	3301      	adds	r3, #1
 800931c:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	429a      	cmp	r2, r3
 8009324:	d20b      	bcs.n	800933e <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d002      	beq.n	8009334 <pb_dec_string+0x68>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	e000      	b.n	8009336 <pb_dec_string+0x6a>
 8009334:	4b20      	ldr	r3, [pc, #128]	; (80093b8 <pb_dec_string+0xec>)
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	60d3      	str	r3, [r2, #12]
 800933a:	2300      	movs	r3, #0
 800933c:	e037      	b.n	80093ae <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	7d9b      	ldrb	r3, [r3, #22]
 8009342:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009346:	2b80      	cmp	r3, #128	; 0x80
 8009348:	d10b      	bne.n	8009362 <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <pb_dec_string+0x8c>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	e000      	b.n	800935a <pb_dec_string+0x8e>
 8009358:	4b18      	ldr	r3, [pc, #96]	; (80093bc <pb_dec_string+0xf0>)
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	60d3      	str	r3, [r2, #12]
 800935e:	2300      	movs	r3, #0
 8009360:	e025      	b.n	80093ae <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	8a5b      	ldrh	r3, [r3, #18]
 8009366:	461a      	mov	r2, r3
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	4293      	cmp	r3, r2
 800936c:	d90b      	bls.n	8009386 <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d002      	beq.n	800937c <pb_dec_string+0xb0>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	e000      	b.n	800937e <pb_dec_string+0xb2>
 800937c:	4b10      	ldr	r3, [pc, #64]	; (80093c0 <pb_dec_string+0xf4>)
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	60d3      	str	r3, [r2, #12]
 8009382:	2300      	movs	r3, #0
 8009384:	e013      	b.n	80093ae <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	697a      	ldr	r2, [r7, #20]
 800938a:	4413      	add	r3, r2
 800938c:	2200      	movs	r2, #0
 800938e:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	461a      	mov	r2, r3
 8009394:	6979      	ldr	r1, [r7, #20]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f7fe fb4c 	bl	8007a34 <pb_read>
 800939c:	4603      	mov	r3, r0
 800939e:	f083 0301 	eor.w	r3, r3, #1
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <pb_dec_string+0xe0>
        return false;
 80093a8:	2300      	movs	r3, #0
 80093aa:	e000      	b.n	80093ae <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 80093ac:	2301      	movs	r3, #1
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3718      	adds	r7, #24
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	0800976c 	.word	0x0800976c
 80093bc:	080096b4 	.word	0x080096b4
 80093c0:	0800977c 	.word	0x0800977c

080093c4 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08a      	sub	sp, #40	; 0x28
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
    bool status = true;
 80093ce:	2301      	movs	r3, #1
 80093d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool submsg_consumed = false;
 80093d4:	2300      	movs	r3, #0
 80093d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 80093da:	f107 030c 	add.w	r3, r7, #12
 80093de:	4619      	mov	r1, r3
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f7fe fe2d 	bl	8008040 <pb_make_string_substream>
 80093e6:	4603      	mov	r3, r0
 80093e8:	f083 0301 	eor.w	r3, r3, #1
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <pb_dec_submessage+0x32>
        return false;
 80093f2:	2300      	movs	r3, #0
 80093f4:	e069      	b.n	80094ca <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10b      	bne.n	8009416 <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d002      	beq.n	800940c <pb_dec_submessage+0x48>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	e000      	b.n	800940e <pb_dec_submessage+0x4a>
 800940c:	4b31      	ldr	r3, [pc, #196]	; (80094d4 <pb_dec_submessage+0x110>)
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	60d3      	str	r3, [r2, #12]
 8009412:	2300      	movs	r3, #0
 8009414:	e059      	b.n	80094ca <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	7d9b      	ldrb	r3, [r3, #22]
 800941a:	f003 030f 	and.w	r3, r3, #15
 800941e:	2b09      	cmp	r3, #9
 8009420:	d11c      	bne.n	800945c <pb_dec_submessage+0x98>
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d018      	beq.n	800945c <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	6a1b      	ldr	r3, [r3, #32]
 800942e:	3b08      	subs	r3, #8
 8009430:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d010      	beq.n	800945c <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	69fa      	ldr	r2, [r7, #28]
 8009440:	3204      	adds	r2, #4
 8009442:	f107 000c 	add.w	r0, r7, #12
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	4798      	blx	r3
 800944a:	4603      	mov	r3, r0
 800944c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (substream.bytes_left == 0)
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d102      	bne.n	800945c <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 8009456:	2301      	movs	r3, #1
 8009458:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 800945c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009460:	2b00      	cmp	r3, #0
 8009462:	d022      	beq.n	80094aa <pb_dec_submessage+0xe6>
 8009464:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009468:	f083 0301 	eor.w	r3, r3, #1
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d01b      	beq.n	80094aa <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 8009472:	2300      	movs	r3, #0
 8009474:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	7d9b      	ldrb	r3, [r3, #22]
 800947a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d107      	bne.n	8009492 <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	7d9b      	ldrb	r3, [r3, #22]
 8009486:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800948a:	2b20      	cmp	r3, #32
 800948c:	d001      	beq.n	8009492 <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 800948e:	2301      	movs	r3, #1
 8009490:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	69da      	ldr	r2, [r3, #28]
 800949a:	f107 000c 	add.w	r0, r7, #12
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	f7ff fafa 	bl	8008a98 <pb_decode_inner>
 80094a4:	4603      	mov	r3, r0
 80094a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 80094aa:	f107 030c 	add.w	r3, r7, #12
 80094ae:	4619      	mov	r1, r3
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f7fe fdff 	bl	80080b4 <pb_close_string_substream>
 80094b6:	4603      	mov	r3, r0
 80094b8:	f083 0301 	eor.w	r3, r3, #1
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <pb_dec_submessage+0x102>
        return false;
 80094c2:	2300      	movs	r3, #0
 80094c4:	e001      	b.n	80094ca <pb_dec_submessage+0x106>

    return status;
 80094c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3728      	adds	r7, #40	; 0x28
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	0800978c 	.word	0x0800978c

080094d8 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 80094e2:	f107 030c 	add.w	r3, r7, #12
 80094e6:	4619      	mov	r1, r3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f7fe fc1d 	bl	8007d28 <pb_decode_varint32>
 80094ee:	4603      	mov	r3, r0
 80094f0:	f083 0301 	eor.w	r3, r3, #1
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <pb_dec_fixed_length_bytes+0x26>
        return false;
 80094fa:	2300      	movs	r3, #0
 80094fc:	e037      	b.n	800956e <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009504:	d30b      	bcc.n	800951e <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d002      	beq.n	8009514 <pb_dec_fixed_length_bytes+0x3c>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	e000      	b.n	8009516 <pb_dec_fixed_length_bytes+0x3e>
 8009514:	4b18      	ldr	r3, [pc, #96]	; (8009578 <pb_dec_fixed_length_bytes+0xa0>)
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	60d3      	str	r3, [r2, #12]
 800951a:	2300      	movs	r3, #0
 800951c:	e027      	b.n	800956e <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d109      	bne.n	8009538 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	69d8      	ldr	r0, [r3, #28]
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	8a5b      	ldrh	r3, [r3, #18]
 800952c:	461a      	mov	r2, r3
 800952e:	2100      	movs	r1, #0
 8009530:	f000 f826 	bl	8009580 <memset>
        return true;
 8009534:	2301      	movs	r3, #1
 8009536:	e01a      	b.n	800956e <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	8a5b      	ldrh	r3, [r3, #18]
 800953c:	461a      	mov	r2, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	429a      	cmp	r2, r3
 8009542:	d00b      	beq.n	800955c <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d002      	beq.n	8009552 <pb_dec_fixed_length_bytes+0x7a>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	e000      	b.n	8009554 <pb_dec_fixed_length_bytes+0x7c>
 8009552:	4b0a      	ldr	r3, [pc, #40]	; (800957c <pb_dec_fixed_length_bytes+0xa4>)
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	60d3      	str	r3, [r2, #12]
 8009558:	2300      	movs	r3, #0
 800955a:	e008      	b.n	800956e <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	69d9      	ldr	r1, [r3, #28]
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	8a5b      	ldrh	r3, [r3, #18]
 8009564:	461a      	mov	r2, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7fe fa64 	bl	8007a34 <pb_read>
 800956c:	4603      	mov	r3, r0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	0800975c 	.word	0x0800975c
 800957c:	080097a8 	.word	0x080097a8

08009580 <memset>:
 8009580:	4402      	add	r2, r0
 8009582:	4603      	mov	r3, r0
 8009584:	4293      	cmp	r3, r2
 8009586:	d100      	bne.n	800958a <memset+0xa>
 8009588:	4770      	bx	lr
 800958a:	f803 1b01 	strb.w	r1, [r3], #1
 800958e:	e7f9      	b.n	8009584 <memset+0x4>

08009590 <__libc_init_array>:
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	4d0d      	ldr	r5, [pc, #52]	; (80095c8 <__libc_init_array+0x38>)
 8009594:	4c0d      	ldr	r4, [pc, #52]	; (80095cc <__libc_init_array+0x3c>)
 8009596:	1b64      	subs	r4, r4, r5
 8009598:	10a4      	asrs	r4, r4, #2
 800959a:	2600      	movs	r6, #0
 800959c:	42a6      	cmp	r6, r4
 800959e:	d109      	bne.n	80095b4 <__libc_init_array+0x24>
 80095a0:	4d0b      	ldr	r5, [pc, #44]	; (80095d0 <__libc_init_array+0x40>)
 80095a2:	4c0c      	ldr	r4, [pc, #48]	; (80095d4 <__libc_init_array+0x44>)
 80095a4:	f000 f826 	bl	80095f4 <_init>
 80095a8:	1b64      	subs	r4, r4, r5
 80095aa:	10a4      	asrs	r4, r4, #2
 80095ac:	2600      	movs	r6, #0
 80095ae:	42a6      	cmp	r6, r4
 80095b0:	d105      	bne.n	80095be <__libc_init_array+0x2e>
 80095b2:	bd70      	pop	{r4, r5, r6, pc}
 80095b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80095b8:	4798      	blx	r3
 80095ba:	3601      	adds	r6, #1
 80095bc:	e7ee      	b.n	800959c <__libc_init_array+0xc>
 80095be:	f855 3b04 	ldr.w	r3, [r5], #4
 80095c2:	4798      	blx	r3
 80095c4:	3601      	adds	r6, #1
 80095c6:	e7f2      	b.n	80095ae <__libc_init_array+0x1e>
 80095c8:	08009830 	.word	0x08009830
 80095cc:	08009830 	.word	0x08009830
 80095d0:	08009830 	.word	0x08009830
 80095d4:	08009834 	.word	0x08009834

080095d8 <memcpy>:
 80095d8:	440a      	add	r2, r1
 80095da:	4291      	cmp	r1, r2
 80095dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80095e0:	d100      	bne.n	80095e4 <memcpy+0xc>
 80095e2:	4770      	bx	lr
 80095e4:	b510      	push	{r4, lr}
 80095e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095ee:	4291      	cmp	r1, r2
 80095f0:	d1f9      	bne.n	80095e6 <memcpy+0xe>
 80095f2:	bd10      	pop	{r4, pc}

080095f4 <_init>:
 80095f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f6:	bf00      	nop
 80095f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095fa:	bc08      	pop	{r3}
 80095fc:	469e      	mov	lr, r3
 80095fe:	4770      	bx	lr

08009600 <_fini>:
 8009600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009602:	bf00      	nop
 8009604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009606:	bc08      	pop	{r3}
 8009608:	469e      	mov	lr, r3
 800960a:	4770      	bx	lr
