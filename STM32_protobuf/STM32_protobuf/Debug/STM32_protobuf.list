
STM32_protobuf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009334  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  080095e0  080095e0  000195e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080097fc  080097fc  000197fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009804  08009804  00019804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009808  08009808  00019808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800980c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b8  24000010  0800981c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240000c8  0800981c  000200c8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012859  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000027c5  00000000  00000000  000328da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000cd0  00000000  00000000  000350a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000009f9  00000000  00000000  00035d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002ff32  00000000  00000000  00036769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013ed7  00000000  00000000  0006669b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001388db  00000000  00000000  0007a572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003448  00000000  00000000  001b2e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000a3  00000000  00000000  001b6298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080095c8 	.word	0x080095c8

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080095c8 	.word	0x080095c8

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b970 	b.w	80005e4 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
 8000326:	460f      	mov	r7, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4694      	mov	ip, r2
 8000330:	d965      	bls.n	80003fe <__udivmoddi4+0xe2>
 8000332:	fab2 f382 	clz	r3, r2
 8000336:	b143      	cbz	r3, 800034a <__udivmoddi4+0x2e>
 8000338:	fa02 fc03 	lsl.w	ip, r2, r3
 800033c:	f1c3 0220 	rsb	r2, r3, #32
 8000340:	409f      	lsls	r7, r3
 8000342:	fa20 f202 	lsr.w	r2, r0, r2
 8000346:	4317      	orrs	r7, r2
 8000348:	409c      	lsls	r4, r3
 800034a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034e:	fa1f f58c 	uxth.w	r5, ip
 8000352:	fbb7 f1fe 	udiv	r1, r7, lr
 8000356:	0c22      	lsrs	r2, r4, #16
 8000358:	fb0e 7711 	mls	r7, lr, r1, r7
 800035c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000360:	fb01 f005 	mul.w	r0, r1, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90a      	bls.n	800037e <__udivmoddi4+0x62>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000370:	f080 811c 	bcs.w	80005ac <__udivmoddi4+0x290>
 8000374:	4290      	cmp	r0, r2
 8000376:	f240 8119 	bls.w	80005ac <__udivmoddi4+0x290>
 800037a:	3902      	subs	r1, #2
 800037c:	4462      	add	r2, ip
 800037e:	1a12      	subs	r2, r2, r0
 8000380:	b2a4      	uxth	r4, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	fb00 f505 	mul.w	r5, r0, r5
 8000392:	42a5      	cmp	r5, r4
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x90>
 8000396:	eb1c 0404 	adds.w	r4, ip, r4
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x294>
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x294>
 80003a8:	4464      	add	r4, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11e      	cbz	r6, 80003be <__udivmoddi4+0xa2>
 80003b6:	40dc      	lsrs	r4, r3
 80003b8:	2300      	movs	r3, #0
 80003ba:	e9c6 4300 	strd	r4, r3, [r6]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0xbc>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80ed 	beq.w	80005a6 <__udivmoddi4+0x28a>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e9c6 0500 	strd	r0, r5, [r6]
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d149      	bne.n	8000474 <__udivmoddi4+0x158>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d302      	bcc.n	80003ea <__udivmoddi4+0xce>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	f200 80f8 	bhi.w	80005da <__udivmoddi4+0x2be>
 80003ea:	1a84      	subs	r4, r0, r2
 80003ec:	eb65 0203 	sbc.w	r2, r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	4617      	mov	r7, r2
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d0e2      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f8:	e9c6 4700 	strd	r4, r7, [r6]
 80003fc:	e7df      	b.n	80003be <__udivmoddi4+0xa2>
 80003fe:	b902      	cbnz	r2, 8000402 <__udivmoddi4+0xe6>
 8000400:	deff      	udf	#255	; 0xff
 8000402:	fab2 f382 	clz	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x210>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	2101      	movs	r1, #1
 8000418:	fbb2 f5f7 	udiv	r5, r2, r7
 800041c:	fb07 2015 	mls	r0, r7, r5, r2
 8000420:	0c22      	lsrs	r2, r4, #16
 8000422:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000426:	fb0e f005 	mul.w	r0, lr, r5
 800042a:	4290      	cmp	r0, r2
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x124>
 800042e:	eb1c 0202 	adds.w	r2, ip, r2
 8000432:	f105 38ff 	add.w	r8, r5, #4294967295
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4290      	cmp	r0, r2
 800043a:	f200 80cb 	bhi.w	80005d4 <__udivmoddi4+0x2b8>
 800043e:	4645      	mov	r5, r8
 8000440:	1a12      	subs	r2, r2, r0
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb2 f0f7 	udiv	r0, r2, r7
 8000448:	fb07 2210 	mls	r2, r7, r0, r2
 800044c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000450:	fb0e fe00 	mul.w	lr, lr, r0
 8000454:	45a6      	cmp	lr, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x14e>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x14c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f200 80bb 	bhi.w	80005de <__udivmoddi4+0x2c2>
 8000468:	4610      	mov	r0, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x98>
 8000474:	f1c1 0720 	rsb	r7, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 fc07 	lsr.w	ip, r2, r7
 800047e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000482:	fa05 f401 	lsl.w	r4, r5, r1
 8000486:	fa20 f307 	lsr.w	r3, r0, r7
 800048a:	40fd      	lsrs	r5, r7
 800048c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000490:	4323      	orrs	r3, r4
 8000492:	fbb5 f8f9 	udiv	r8, r5, r9
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fb09 5518 	mls	r5, r9, r8, r5
 800049e:	0c1c      	lsrs	r4, r3, #16
 80004a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a4:	fb08 f50e 	mul.w	r5, r8, lr
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	fa00 f001 	lsl.w	r0, r0, r1
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004bc:	f080 8088 	bcs.w	80005d0 <__udivmoddi4+0x2b4>
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	f240 8085 	bls.w	80005d0 <__udivmoddi4+0x2b4>
 80004c6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ca:	4464      	add	r4, ip
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	b29d      	uxth	r5, r3
 80004d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d4:	fb09 4413 	mls	r4, r9, r3, r4
 80004d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80004ec:	d26c      	bcs.n	80005c8 <__udivmoddi4+0x2ac>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	d96a      	bls.n	80005c8 <__udivmoddi4+0x2ac>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fa:	fba3 9502 	umull	r9, r5, r3, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	42ac      	cmp	r4, r5
 8000504:	46c8      	mov	r8, r9
 8000506:	46ae      	mov	lr, r5
 8000508:	d356      	bcc.n	80005b8 <__udivmoddi4+0x29c>
 800050a:	d053      	beq.n	80005b4 <__udivmoddi4+0x298>
 800050c:	b156      	cbz	r6, 8000524 <__udivmoddi4+0x208>
 800050e:	ebb0 0208 	subs.w	r2, r0, r8
 8000512:	eb64 040e 	sbc.w	r4, r4, lr
 8000516:	fa04 f707 	lsl.w	r7, r4, r7
 800051a:	40ca      	lsrs	r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	4317      	orrs	r7, r2
 8000520:	e9c6 7400 	strd	r7, r4, [r6]
 8000524:	4618      	mov	r0, r3
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	f1c3 0120 	rsb	r1, r3, #32
 8000530:	fa02 fc03 	lsl.w	ip, r2, r3
 8000534:	fa20 f201 	lsr.w	r2, r0, r1
 8000538:	fa25 f101 	lsr.w	r1, r5, r1
 800053c:	409d      	lsls	r5, r3
 800053e:	432a      	orrs	r2, r5
 8000540:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fbb1 f0f7 	udiv	r0, r1, r7
 800054c:	fb07 1510 	mls	r5, r7, r0, r1
 8000550:	0c11      	lsrs	r1, r2, #16
 8000552:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000556:	fb00 f50e 	mul.w	r5, r0, lr
 800055a:	428d      	cmp	r5, r1
 800055c:	fa04 f403 	lsl.w	r4, r4, r3
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x258>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f100 38ff 	add.w	r8, r0, #4294967295
 800056a:	d22f      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800056c:	428d      	cmp	r5, r1
 800056e:	d92d      	bls.n	80005cc <__udivmoddi4+0x2b0>
 8000570:	3802      	subs	r0, #2
 8000572:	4461      	add	r1, ip
 8000574:	1b49      	subs	r1, r1, r5
 8000576:	b292      	uxth	r2, r2
 8000578:	fbb1 f5f7 	udiv	r5, r1, r7
 800057c:	fb07 1115 	mls	r1, r7, r5, r1
 8000580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000584:	fb05 f10e 	mul.w	r1, r5, lr
 8000588:	4291      	cmp	r1, r2
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x282>
 800058c:	eb1c 0202 	adds.w	r2, ip, r2
 8000590:	f105 38ff 	add.w	r8, r5, #4294967295
 8000594:	d216      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000596:	4291      	cmp	r1, r2
 8000598:	d914      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	1a52      	subs	r2, r2, r1
 80005a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a4:	e738      	b.n	8000418 <__udivmoddi4+0xfc>
 80005a6:	4631      	mov	r1, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e708      	b.n	80003be <__udivmoddi4+0xa2>
 80005ac:	4639      	mov	r1, r7
 80005ae:	e6e6      	b.n	800037e <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x90>
 80005b4:	4548      	cmp	r0, r9
 80005b6:	d2a9      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b8:	ebb9 0802 	subs.w	r8, r9, r2
 80005bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c0:	3b01      	subs	r3, #1
 80005c2:	e7a3      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c4:	4645      	mov	r5, r8
 80005c6:	e7ea      	b.n	800059e <__udivmoddi4+0x282>
 80005c8:	462b      	mov	r3, r5
 80005ca:	e794      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005cc:	4640      	mov	r0, r8
 80005ce:	e7d1      	b.n	8000574 <__udivmoddi4+0x258>
 80005d0:	46d0      	mov	r8, sl
 80005d2:	e77b      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d4:	3d02      	subs	r5, #2
 80005d6:	4462      	add	r2, ip
 80005d8:	e732      	b.n	8000440 <__udivmoddi4+0x124>
 80005da:	4608      	mov	r0, r1
 80005dc:	e70a      	b.n	80003f4 <__udivmoddi4+0xd8>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	e742      	b.n	800046a <__udivmoddi4+0x14e>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Handle UART interrupt */
void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]

#ifdef PROTOBUF_LED_TIME_CRITICAL

	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f6:	4812      	ldr	r0, [pc, #72]	; (8000640 <HAL_UART_RxCpltCallback+0x58>)
 80005f8:	f001 fc92 	bl	8001f20 <HAL_GPIO_WritePin>

	// Set yellow led to signal data processing to the user.
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2102      	movs	r1, #2
 8000600:	4810      	ldr	r0, [pc, #64]	; (8000644 <HAL_UART_RxCpltCallback+0x5c>)
 8000602:	f001 fc8d 	bl	8001f20 <HAL_GPIO_WritePin>

	if (!processProtobufMsg(uartBuffer))
 8000606:	4810      	ldr	r0, [pc, #64]	; (8000648 <HAL_UART_RxCpltCallback+0x60>)
 8000608:	f000 fa32 	bl	8000a70 <processProtobufMsg>
 800060c:	4603      	mov	r3, r0
 800060e:	f083 0301 	eor.w	r3, r3, #1
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d005      	beq.n	8000624 <HAL_UART_RxCpltCallback+0x3c>
	{
		// Set red led to signal decoding error to the user
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061e:	4808      	ldr	r0, [pc, #32]	; (8000640 <HAL_UART_RxCpltCallback+0x58>)
 8000620:	f001 fc7e 	bl	8001f20 <HAL_GPIO_WritePin>
	}

	// Reset yellow led
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2102      	movs	r1, #2
 8000628:	4806      	ldr	r0, [pc, #24]	; (8000644 <HAL_UART_RxCpltCallback+0x5c>)
 800062a:	f001 fc79 	bl	8001f20 <HAL_GPIO_WritePin>
	}

#endif

	// Receive next message
	HAL_UART_Receive_IT(&huart3, uartBuffer, LED_STATE_MSG_LENGTH);
 800062e:	2202      	movs	r2, #2
 8000630:	4905      	ldr	r1, [pc, #20]	; (8000648 <HAL_UART_RxCpltCallback+0x60>)
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <HAL_UART_RxCpltCallback+0x64>)
 8000634:	f004 fad6 	bl	8004be4 <HAL_UART_Receive_IT>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	58020400 	.word	0x58020400
 8000644:	58021000 	.word	0x58021000
 8000648:	240000c0 	.word	0x240000c0
 800064c:	2400002c 	.word	0x2400002c

08000650 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	// Set red led to signal error to the user
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065e:	4803      	ldr	r0, [pc, #12]	; (800066c <HAL_UART_ErrorCallback+0x1c>)
 8000660:	f001 fc5e 	bl	8001f20 <HAL_GPIO_WritePin>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	58020400 	.word	0x58020400

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 fb9e 	bl	8000db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f810 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f000 f8d8 	bl	8000830 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000680:	f000 f882 	bl	8000788 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000684:	f000 f8cc 	bl	8000820 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  // Start UART receive
  HAL_UART_Receive_IT(&huart3, uartBuffer, LED_STATE_MSG_LENGTH);
 8000688:	2202      	movs	r2, #2
 800068a:	4902      	ldr	r1, [pc, #8]	; (8000694 <main+0x24>)
 800068c:	4802      	ldr	r0, [pc, #8]	; (8000698 <main+0x28>)
 800068e:	f004 faa9 	bl	8004be4 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0x22>
 8000694:	240000c0 	.word	0x240000c0
 8000698:	2400002c 	.word	0x2400002c

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b09c      	sub	sp, #112	; 0x70
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a6:	224c      	movs	r2, #76	; 0x4c
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f008 ff52 	bl	8009554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2220      	movs	r2, #32
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f008 ff4c 	bl	8009554 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006bc:	4b30      	ldr	r3, [pc, #192]	; (8000780 <SystemClock_Config+0xe4>)
 80006be:	f04f 32ff 	mov.w	r2, #4294967295
 80006c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006c6:	2004      	movs	r0, #4
 80006c8:	f001 fc44 	bl	8001f54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006cc:	2300      	movs	r3, #0
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <SystemClock_Config+0xe8>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a2b      	ldr	r2, [pc, #172]	; (8000784 <SystemClock_Config+0xe8>)
 80006d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemClock_Config+0xe8>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006e8:	bf00      	nop
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemClock_Config+0xe8>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006f6:	d1f8      	bne.n	80006ea <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006f8:	2321      	movs	r3, #33	; 0x21
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000702:	2301      	movs	r3, #1
 8000704:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070a:	2302      	movs	r3, #2
 800070c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000712:	2318      	movs	r3, #24
 8000714:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000716:	2302      	movs	r3, #2
 8000718:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800071a:	2304      	movs	r3, #4
 800071c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071e:	2302      	movs	r3, #2
 8000720:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000722:	230c      	movs	r3, #12
 8000724:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000726:	2300      	movs	r3, #0
 8000728:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fc68 	bl	8002008 <HAL_RCC_OscConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800073e:	f000 f991 	bl	8000a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	233f      	movs	r3, #63	; 0x3f
 8000744:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2303      	movs	r3, #3
 8000748:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2102      	movs	r1, #2
 8000766:	4618      	mov	r0, r3
 8000768:	f002 f880 	bl	800286c <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000772:	f000 f977 	bl	8000a64 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3770      	adds	r7, #112	; 0x70
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	58024400 	.word	0x58024400
 8000784:	58024800 	.word	0x58024800

08000788 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <MX_USART3_UART_Init+0x90>)
 800078e:	4a23      	ldr	r2, [pc, #140]	; (800081c <MX_USART3_UART_Init+0x94>)
 8000790:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <MX_USART3_UART_Init+0x90>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_USART3_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007d0:	4811      	ldr	r0, [pc, #68]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007d2:	f004 f9b7 	bl	8004b44 <HAL_UART_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007dc:	f000 f942 	bl	8000a64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e0:	2100      	movs	r1, #0
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007e4:	f006 fd77 	bl	80072d6 <HAL_UARTEx_SetTxFifoThreshold>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007ee:	f000 f939 	bl	8000a64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4808      	ldr	r0, [pc, #32]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007f6:	f006 fdac 	bl	8007352 <HAL_UARTEx_SetRxFifoThreshold>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000800:	f000 f930 	bl	8000a64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_USART3_UART_Init+0x90>)
 8000806:	f006 fd2d 	bl	8007264 <HAL_UARTEx_DisableFifoMode>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000810:	f000 f928 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2400002c 	.word	0x2400002c
 800081c:	40004800 	.word	0x40004800

08000820 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	; 0x38
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	4b80      	ldr	r3, [pc, #512]	; (8000a48 <MX_GPIO_Init+0x218>)
 8000848:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800084c:	4a7e      	ldr	r2, [pc, #504]	; (8000a48 <MX_GPIO_Init+0x218>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000856:	4b7c      	ldr	r3, [pc, #496]	; (8000a48 <MX_GPIO_Init+0x218>)
 8000858:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800085c:	f003 0304 	and.w	r3, r3, #4
 8000860:	623b      	str	r3, [r7, #32]
 8000862:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000864:	4b78      	ldr	r3, [pc, #480]	; (8000a48 <MX_GPIO_Init+0x218>)
 8000866:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800086a:	4a77      	ldr	r2, [pc, #476]	; (8000a48 <MX_GPIO_Init+0x218>)
 800086c:	f043 0320 	orr.w	r3, r3, #32
 8000870:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000874:	4b74      	ldr	r3, [pc, #464]	; (8000a48 <MX_GPIO_Init+0x218>)
 8000876:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800087a:	f003 0320 	and.w	r3, r3, #32
 800087e:	61fb      	str	r3, [r7, #28]
 8000880:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	4b71      	ldr	r3, [pc, #452]	; (8000a48 <MX_GPIO_Init+0x218>)
 8000884:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000888:	4a6f      	ldr	r2, [pc, #444]	; (8000a48 <MX_GPIO_Init+0x218>)
 800088a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000892:	4b6d      	ldr	r3, [pc, #436]	; (8000a48 <MX_GPIO_Init+0x218>)
 8000894:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089c:	61bb      	str	r3, [r7, #24]
 800089e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a0:	4b69      	ldr	r3, [pc, #420]	; (8000a48 <MX_GPIO_Init+0x218>)
 80008a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a6:	4a68      	ldr	r2, [pc, #416]	; (8000a48 <MX_GPIO_Init+0x218>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008b0:	4b65      	ldr	r3, [pc, #404]	; (8000a48 <MX_GPIO_Init+0x218>)
 80008b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008be:	4b62      	ldr	r3, [pc, #392]	; (8000a48 <MX_GPIO_Init+0x218>)
 80008c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c4:	4a60      	ldr	r2, [pc, #384]	; (8000a48 <MX_GPIO_Init+0x218>)
 80008c6:	f043 0308 	orr.w	r3, r3, #8
 80008ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ce:	4b5e      	ldr	r3, [pc, #376]	; (8000a48 <MX_GPIO_Init+0x218>)
 80008d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008d4:	f003 0308 	and.w	r3, r3, #8
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008dc:	4b5a      	ldr	r3, [pc, #360]	; (8000a48 <MX_GPIO_Init+0x218>)
 80008de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008e2:	4a59      	ldr	r2, [pc, #356]	; (8000a48 <MX_GPIO_Init+0x218>)
 80008e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ec:	4b56      	ldr	r3, [pc, #344]	; (8000a48 <MX_GPIO_Init+0x218>)
 80008ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b53      	ldr	r3, [pc, #332]	; (8000a48 <MX_GPIO_Init+0x218>)
 80008fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000900:	4a51      	ldr	r2, [pc, #324]	; (8000a48 <MX_GPIO_Init+0x218>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800090a:	4b4f      	ldr	r3, [pc, #316]	; (8000a48 <MX_GPIO_Init+0x218>)
 800090c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000918:	4b4b      	ldr	r3, [pc, #300]	; (8000a48 <MX_GPIO_Init+0x218>)
 800091a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800091e:	4a4a      	ldr	r2, [pc, #296]	; (8000a48 <MX_GPIO_Init+0x218>)
 8000920:	f043 0310 	orr.w	r3, r3, #16
 8000924:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000928:	4b47      	ldr	r3, [pc, #284]	; (8000a48 <MX_GPIO_Init+0x218>)
 800092a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800092e:	f003 0310 	and.w	r3, r3, #16
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093c:	4843      	ldr	r0, [pc, #268]	; (8000a4c <MX_GPIO_Init+0x21c>)
 800093e:	f001 faef 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f244 0101 	movw	r1, #16385	; 0x4001
 8000948:	4841      	ldr	r0, [pc, #260]	; (8000a50 <MX_GPIO_Init+0x220>)
 800094a:	f001 fae9 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2102      	movs	r1, #2
 8000952:	4840      	ldr	r0, [pc, #256]	; (8000a54 <MX_GPIO_Init+0x224>)
 8000954:	f001 fae4 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	4619      	mov	r1, r3
 800096c:	483a      	ldr	r0, [pc, #232]	; (8000a58 <MX_GPIO_Init+0x228>)
 800096e:	f001 f927 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000988:	4619      	mov	r1, r3
 800098a:	4830      	ldr	r0, [pc, #192]	; (8000a4c <MX_GPIO_Init+0x21c>)
 800098c:	f001 f918 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000990:	f244 0301 	movw	r3, #16385	; 0x4001
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4619      	mov	r1, r3
 80009a8:	4829      	ldr	r0, [pc, #164]	; (8000a50 <MX_GPIO_Init+0x220>)
 80009aa:	f001 f909 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c0:	4619      	mov	r1, r3
 80009c2:	4826      	ldr	r0, [pc, #152]	; (8000a5c <MX_GPIO_Init+0x22c>)
 80009c4:	f001 f8fc 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009da:	4619      	mov	r1, r3
 80009dc:	4820      	ldr	r0, [pc, #128]	; (8000a60 <MX_GPIO_Init+0x230>)
 80009de:	f001 f8ef 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80009f4:	230a      	movs	r3, #10
 80009f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fc:	4619      	mov	r1, r3
 80009fe:	4818      	ldr	r0, [pc, #96]	; (8000a60 <MX_GPIO_Init+0x230>)
 8000a00:	f001 f8de 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000a04:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4810      	ldr	r0, [pc, #64]	; (8000a60 <MX_GPIO_Init+0x230>)
 8000a1e:	f001 f8cf 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a22:	2302      	movs	r3, #2
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	4806      	ldr	r0, [pc, #24]	; (8000a54 <MX_GPIO_Init+0x224>)
 8000a3a:	f001 f8c1 	bl	8001bc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3e:	bf00      	nop
 8000a40:	3738      	adds	r7, #56	; 0x38
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	58024400 	.word	0x58024400
 8000a4c:	58021400 	.word	0x58021400
 8000a50:	58020400 	.word	0x58020400
 8000a54:	58021000 	.word	0x58021000
 8000a58:	58020800 	.word	0x58020800
 8000a5c:	58021800 	.word	0x58021800
 8000a60:	58020000 	.word	0x58020000

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <Error_Handler+0x8>
	...

08000a70 <processProtobufMsg>:
  * 				user led accordingly.
  * @param buffer   Pointer to data buffer, which contains the coded message.
  * @retval 		If decode protobuf was successful.
  */
bool processProtobufMsg( uint8_t *buffer )
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	// Allocate space for the decoded message.
	ChangeLedStateMsg message = ChangeLedStateMsg_init_zero;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	763b      	strb	r3, [r7, #24]
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]

	//Create a stream that reads from the buffer.
	pb_istream_t stream = pb_istream_from_buffer(buffer, LED_STATE_MSG_LENGTH);
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	2202      	movs	r2, #2
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f007 f86f 	bl	8007b6c <pb_istream_from_buffer>

	//Now we are ready to decode the message.
	pbDecodeStatus = pb_decode(&stream, ChangeLedStateMsg_fields, &message);
 8000a8e:	f107 0218 	add.w	r2, r7, #24
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	4913      	ldr	r1, [pc, #76]	; (8000ae4 <processProtobufMsg+0x74>)
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f008 f9a1 	bl	8008de0 <pb_decode>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <processProtobufMsg+0x78>)
 8000aa4:	701a      	strb	r2, [r3, #0]

	/* Change led state based on protobuf message. */
	if (message.has_led_state & pbDecodeStatus)
 8000aa6:	7e3b      	ldrb	r3, [r7, #24]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <processProtobufMsg+0x78>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d010      	beq.n	8000ad6 <processProtobufMsg+0x66>
	{
		if (message.led_state == 1)
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d105      	bne.n	8000ac6 <processProtobufMsg+0x56>
		{
			// Set green led.
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2101      	movs	r1, #1
 8000abe:	480b      	ldr	r0, [pc, #44]	; (8000aec <processProtobufMsg+0x7c>)
 8000ac0:	f001 fa2e 	bl	8001f20 <HAL_GPIO_WritePin>
 8000ac4:	e007      	b.n	8000ad6 <processProtobufMsg+0x66>
		}
		else if (message.led_state == 0)
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d104      	bne.n	8000ad6 <processProtobufMsg+0x66>
		{
			// Reset green led.
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2101      	movs	r1, #1
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <processProtobufMsg+0x7c>)
 8000ad2:	f001 fa25 	bl	8001f20 <HAL_GPIO_WritePin>
		}
	}

	return pbDecodeStatus;
 8000ad6:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <processProtobufMsg+0x78>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3720      	adds	r7, #32
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	080097e4 	.word	0x080097e4
 8000ae8:	240000c2 	.word	0x240000c2
 8000aec:	58020400 	.word	0x58020400

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_MspInit+0x30>)
 8000af8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000afc:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x30>)
 8000afe:	f043 0302 	orr.w	r3, r3, #2
 8000b02:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x30>)
 8000b08:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b0c:	f003 0302 	and.w	r3, r3, #2
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	58024400 	.word	0x58024400

08000b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b0ba      	sub	sp, #232	; 0xe8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	22c0      	movs	r2, #192	; 0xc0
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f008 fd05 	bl	8009554 <memset>
  if(huart->Instance==USART3)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a2b      	ldr	r2, [pc, #172]	; (8000bfc <HAL_UART_MspInit+0xd8>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d14e      	bne.n	8000bf2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b54:	f04f 0202 	mov.w	r2, #2
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 fa0a 	bl	8002f84 <HAL_RCCEx_PeriphCLKConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b76:	f7ff ff75 	bl	8000a64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <HAL_UART_MspInit+0xdc>)
 8000b7c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b80:	4a1f      	ldr	r2, [pc, #124]	; (8000c00 <HAL_UART_MspInit+0xdc>)
 8000b82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b86:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <HAL_UART_MspInit+0xdc>)
 8000b8c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b98:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <HAL_UART_MspInit+0xdc>)
 8000b9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b9e:	4a18      	ldr	r2, [pc, #96]	; (8000c00 <HAL_UART_MspInit+0xdc>)
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_UART_MspInit+0xdc>)
 8000baa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000bb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bd0:	2307      	movs	r3, #7
 8000bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <HAL_UART_MspInit+0xe0>)
 8000bde:	f000 ffef 	bl	8001bc0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	2027      	movs	r0, #39	; 0x27
 8000be8:	f000 fa51 	bl	800108e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bec:	2027      	movs	r0, #39	; 0x27
 8000bee:	f000 fa68 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	37e8      	adds	r7, #232	; 0xe8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40004800 	.word	0x40004800
 8000c00:	58024400 	.word	0x58024400
 8000c04:	58020c00 	.word	0x58020c00

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c54:	f000 f920 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <USART3_IRQHandler+0x10>)
 8000c62:	f004 f80b 	bl	8004c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2400002c 	.word	0x2400002c

08000c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c74:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <SystemInit+0xd0>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7a:	4a31      	ldr	r2, [pc, #196]	; (8000d40 <SystemInit+0xd0>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c84:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <SystemInit+0xd4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 030f 	and.w	r3, r3, #15
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d807      	bhi.n	8000ca0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <SystemInit+0xd4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f023 030f 	bic.w	r3, r3, #15
 8000c98:	4a2a      	ldr	r2, [pc, #168]	; (8000d44 <SystemInit+0xd4>)
 8000c9a:	f043 0303 	orr.w	r3, r3, #3
 8000c9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ca0:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <SystemInit+0xd8>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a28      	ldr	r2, [pc, #160]	; (8000d48 <SystemInit+0xd8>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cac:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <SystemInit+0xd8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <SystemInit+0xd8>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4924      	ldr	r1, [pc, #144]	; (8000d48 <SystemInit+0xd8>)
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <SystemInit+0xdc>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cbe:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <SystemInit+0xd4>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d007      	beq.n	8000cda <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cca:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <SystemInit+0xd4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f023 030f 	bic.w	r3, r3, #15
 8000cd2:	4a1c      	ldr	r2, [pc, #112]	; (8000d44 <SystemInit+0xd4>)
 8000cd4:	f043 0303 	orr.w	r3, r3, #3
 8000cd8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <SystemInit+0xd8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <SystemInit+0xd8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <SystemInit+0xd8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <SystemInit+0xd8>)
 8000cee:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <SystemInit+0xe0>)
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <SystemInit+0xd8>)
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <SystemInit+0xe4>)
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <SystemInit+0xd8>)
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <SystemInit+0xe8>)
 8000cfc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <SystemInit+0xd8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <SystemInit+0xd8>)
 8000d06:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <SystemInit+0xe8>)
 8000d08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <SystemInit+0xd8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <SystemInit+0xd8>)
 8000d12:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <SystemInit+0xe8>)
 8000d14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <SystemInit+0xd8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <SystemInit+0xd8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <SystemInit+0xd8>)
 8000d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <SystemInit+0xd8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <SystemInit+0xec>)
 8000d30:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d34:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00
 8000d44:	52002000 	.word	0x52002000
 8000d48:	58024400 	.word	0x58024400
 8000d4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d50:	02020200 	.word	0x02020200
 8000d54:	01ff0000 	.word	0x01ff0000
 8000d58:	01010280 	.word	0x01010280
 8000d5c:	52004000 	.word	0x52004000

08000d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d64:	f7ff ff84 	bl	8000c70 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	; (8000da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	; (8000dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f008 fbe9 	bl	8009564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d92:	f7ff fc6d 	bl	8000670 <main>
  bx  lr
 8000d96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d98:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000d9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000da0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000da4:	0800980c 	.word	0x0800980c
  ldr r2, =_sbss
 8000da8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000dac:	240000c8 	.word	0x240000c8

08000db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC_IRQHandler>
	...

08000db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dba:	2003      	movs	r0, #3
 8000dbc:	f000 f95c 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000dc0:	f001 ff0a 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_Init+0x68>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	0a1b      	lsrs	r3, r3, #8
 8000dcc:	f003 030f 	and.w	r3, r3, #15
 8000dd0:	4913      	ldr	r1, [pc, #76]	; (8000e20 <HAL_Init+0x6c>)
 8000dd2:	5ccb      	ldrb	r3, [r1, r3]
 8000dd4:	f003 031f 	and.w	r3, r3, #31
 8000dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ddc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_Init+0x68>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <HAL_Init+0x6c>)
 8000de8:	5cd3      	ldrb	r3, [r2, r3]
 8000dea:	f003 031f 	and.w	r3, r3, #31
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	fa22 f303 	lsr.w	r3, r2, r3
 8000df4:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <HAL_Init+0x70>)
 8000df6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000df8:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <HAL_Init+0x74>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 f814 	bl	8000e2c <HAL_InitTick>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e002      	b.n	8000e14 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0e:	f7ff fe6f 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	080097a0 	.word	0x080097a0
 8000e24:	24000004 	.word	0x24000004
 8000e28:	24000000 	.word	0x24000000

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_InitTick+0x60>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e021      	b.n	8000e84 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_InitTick+0x64>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_InitTick+0x60>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f941 	bl	80010de <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00e      	b.n	8000e84 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d80a      	bhi.n	8000e82 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f000 f90b 	bl	800108e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e78:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <HAL_InitTick+0x68>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	2400000c 	.word	0x2400000c
 8000e90:	24000000 	.word	0x24000000
 8000e94:	24000008 	.word	0x24000008

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	2400000c 	.word	0x2400000c
 8000ebc:	240000c4 	.word	0x240000c4

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	240000c4 	.word	0x240000c4

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <__NVIC_SetPriorityGrouping+0x40>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	4313      	orrs	r3, r2
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <__NVIC_SetPriorityGrouping+0x40>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00
 8000f1c:	05fa0000 	.word	0x05fa0000

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db0b      	blt.n	8000f66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	4907      	ldr	r1, [pc, #28]	; (8000f74 <__NVIC_EnableIRQ+0x38>)
 8000f56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f5a:	095b      	lsrs	r3, r3, #5
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	; (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001044:	d301      	bcc.n	800104a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001046:	2301      	movs	r3, #1
 8001048:	e00f      	b.n	800106a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <SysTick_Config+0x40>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001052:	210f      	movs	r1, #15
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f7ff ff8e 	bl	8000f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SysTick_Config+0x40>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <SysTick_Config+0x40>)
 8001064:	2207      	movs	r2, #7
 8001066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff29 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff40 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff90 	bl	8000fcc <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5f 	bl	8000f78 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff33 	bl	8000f3c <__NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa4 	bl	8001034 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff fede 	bl	8000ec0 <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e2dc      	b.n	80016ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d008      	beq.n	800112e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e2cd      	b.n	80016ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a76      	ldr	r2, [pc, #472]	; (800130c <HAL_DMA_Abort+0x214>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d04a      	beq.n	80011ce <HAL_DMA_Abort+0xd6>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a74      	ldr	r2, [pc, #464]	; (8001310 <HAL_DMA_Abort+0x218>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d045      	beq.n	80011ce <HAL_DMA_Abort+0xd6>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a73      	ldr	r2, [pc, #460]	; (8001314 <HAL_DMA_Abort+0x21c>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d040      	beq.n	80011ce <HAL_DMA_Abort+0xd6>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a71      	ldr	r2, [pc, #452]	; (8001318 <HAL_DMA_Abort+0x220>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d03b      	beq.n	80011ce <HAL_DMA_Abort+0xd6>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a70      	ldr	r2, [pc, #448]	; (800131c <HAL_DMA_Abort+0x224>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d036      	beq.n	80011ce <HAL_DMA_Abort+0xd6>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a6e      	ldr	r2, [pc, #440]	; (8001320 <HAL_DMA_Abort+0x228>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d031      	beq.n	80011ce <HAL_DMA_Abort+0xd6>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a6d      	ldr	r2, [pc, #436]	; (8001324 <HAL_DMA_Abort+0x22c>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d02c      	beq.n	80011ce <HAL_DMA_Abort+0xd6>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a6b      	ldr	r2, [pc, #428]	; (8001328 <HAL_DMA_Abort+0x230>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d027      	beq.n	80011ce <HAL_DMA_Abort+0xd6>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a6a      	ldr	r2, [pc, #424]	; (800132c <HAL_DMA_Abort+0x234>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d022      	beq.n	80011ce <HAL_DMA_Abort+0xd6>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a68      	ldr	r2, [pc, #416]	; (8001330 <HAL_DMA_Abort+0x238>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d01d      	beq.n	80011ce <HAL_DMA_Abort+0xd6>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a67      	ldr	r2, [pc, #412]	; (8001334 <HAL_DMA_Abort+0x23c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d018      	beq.n	80011ce <HAL_DMA_Abort+0xd6>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a65      	ldr	r2, [pc, #404]	; (8001338 <HAL_DMA_Abort+0x240>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d013      	beq.n	80011ce <HAL_DMA_Abort+0xd6>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a64      	ldr	r2, [pc, #400]	; (800133c <HAL_DMA_Abort+0x244>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d00e      	beq.n	80011ce <HAL_DMA_Abort+0xd6>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a62      	ldr	r2, [pc, #392]	; (8001340 <HAL_DMA_Abort+0x248>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d009      	beq.n	80011ce <HAL_DMA_Abort+0xd6>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a61      	ldr	r2, [pc, #388]	; (8001344 <HAL_DMA_Abort+0x24c>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d004      	beq.n	80011ce <HAL_DMA_Abort+0xd6>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a5f      	ldr	r2, [pc, #380]	; (8001348 <HAL_DMA_Abort+0x250>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d101      	bne.n	80011d2 <HAL_DMA_Abort+0xda>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <HAL_DMA_Abort+0xdc>
 80011d2:	2300      	movs	r3, #0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d013      	beq.n	8001200 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 021e 	bic.w	r2, r2, #30
 80011e6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011f6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	e00a      	b.n	8001216 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 020e 	bic.w	r2, r2, #14
 800120e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a3c      	ldr	r2, [pc, #240]	; (800130c <HAL_DMA_Abort+0x214>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d072      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a3a      	ldr	r2, [pc, #232]	; (8001310 <HAL_DMA_Abort+0x218>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d06d      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a39      	ldr	r2, [pc, #228]	; (8001314 <HAL_DMA_Abort+0x21c>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d068      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a37      	ldr	r2, [pc, #220]	; (8001318 <HAL_DMA_Abort+0x220>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d063      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a36      	ldr	r2, [pc, #216]	; (800131c <HAL_DMA_Abort+0x224>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d05e      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a34      	ldr	r2, [pc, #208]	; (8001320 <HAL_DMA_Abort+0x228>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d059      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a33      	ldr	r2, [pc, #204]	; (8001324 <HAL_DMA_Abort+0x22c>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d054      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a31      	ldr	r2, [pc, #196]	; (8001328 <HAL_DMA_Abort+0x230>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d04f      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a30      	ldr	r2, [pc, #192]	; (800132c <HAL_DMA_Abort+0x234>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d04a      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a2e      	ldr	r2, [pc, #184]	; (8001330 <HAL_DMA_Abort+0x238>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d045      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a2d      	ldr	r2, [pc, #180]	; (8001334 <HAL_DMA_Abort+0x23c>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d040      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a2b      	ldr	r2, [pc, #172]	; (8001338 <HAL_DMA_Abort+0x240>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d03b      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a2a      	ldr	r2, [pc, #168]	; (800133c <HAL_DMA_Abort+0x244>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d036      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a28      	ldr	r2, [pc, #160]	; (8001340 <HAL_DMA_Abort+0x248>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d031      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a27      	ldr	r2, [pc, #156]	; (8001344 <HAL_DMA_Abort+0x24c>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d02c      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a25      	ldr	r2, [pc, #148]	; (8001348 <HAL_DMA_Abort+0x250>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d027      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a24      	ldr	r2, [pc, #144]	; (800134c <HAL_DMA_Abort+0x254>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d022      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a22      	ldr	r2, [pc, #136]	; (8001350 <HAL_DMA_Abort+0x258>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d01d      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a21      	ldr	r2, [pc, #132]	; (8001354 <HAL_DMA_Abort+0x25c>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d018      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a1f      	ldr	r2, [pc, #124]	; (8001358 <HAL_DMA_Abort+0x260>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d013      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a1e      	ldr	r2, [pc, #120]	; (800135c <HAL_DMA_Abort+0x264>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d00e      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <HAL_DMA_Abort+0x268>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d009      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a1b      	ldr	r2, [pc, #108]	; (8001364 <HAL_DMA_Abort+0x26c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d004      	beq.n	8001306 <HAL_DMA_Abort+0x20e>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a19      	ldr	r2, [pc, #100]	; (8001368 <HAL_DMA_Abort+0x270>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d132      	bne.n	800136c <HAL_DMA_Abort+0x274>
 8001306:	2301      	movs	r3, #1
 8001308:	e031      	b.n	800136e <HAL_DMA_Abort+0x276>
 800130a:	bf00      	nop
 800130c:	40020010 	.word	0x40020010
 8001310:	40020028 	.word	0x40020028
 8001314:	40020040 	.word	0x40020040
 8001318:	40020058 	.word	0x40020058
 800131c:	40020070 	.word	0x40020070
 8001320:	40020088 	.word	0x40020088
 8001324:	400200a0 	.word	0x400200a0
 8001328:	400200b8 	.word	0x400200b8
 800132c:	40020410 	.word	0x40020410
 8001330:	40020428 	.word	0x40020428
 8001334:	40020440 	.word	0x40020440
 8001338:	40020458 	.word	0x40020458
 800133c:	40020470 	.word	0x40020470
 8001340:	40020488 	.word	0x40020488
 8001344:	400204a0 	.word	0x400204a0
 8001348:	400204b8 	.word	0x400204b8
 800134c:	58025408 	.word	0x58025408
 8001350:	5802541c 	.word	0x5802541c
 8001354:	58025430 	.word	0x58025430
 8001358:	58025444 	.word	0x58025444
 800135c:	58025458 	.word	0x58025458
 8001360:	5802546c 	.word	0x5802546c
 8001364:	58025480 	.word	0x58025480
 8001368:	58025494 	.word	0x58025494
 800136c:	2300      	movs	r3, #0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d007      	beq.n	8001382 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001380:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a6d      	ldr	r2, [pc, #436]	; (800153c <HAL_DMA_Abort+0x444>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d04a      	beq.n	8001422 <HAL_DMA_Abort+0x32a>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a6b      	ldr	r2, [pc, #428]	; (8001540 <HAL_DMA_Abort+0x448>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d045      	beq.n	8001422 <HAL_DMA_Abort+0x32a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a6a      	ldr	r2, [pc, #424]	; (8001544 <HAL_DMA_Abort+0x44c>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d040      	beq.n	8001422 <HAL_DMA_Abort+0x32a>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a68      	ldr	r2, [pc, #416]	; (8001548 <HAL_DMA_Abort+0x450>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d03b      	beq.n	8001422 <HAL_DMA_Abort+0x32a>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a67      	ldr	r2, [pc, #412]	; (800154c <HAL_DMA_Abort+0x454>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d036      	beq.n	8001422 <HAL_DMA_Abort+0x32a>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a65      	ldr	r2, [pc, #404]	; (8001550 <HAL_DMA_Abort+0x458>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d031      	beq.n	8001422 <HAL_DMA_Abort+0x32a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a64      	ldr	r2, [pc, #400]	; (8001554 <HAL_DMA_Abort+0x45c>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d02c      	beq.n	8001422 <HAL_DMA_Abort+0x32a>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a62      	ldr	r2, [pc, #392]	; (8001558 <HAL_DMA_Abort+0x460>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d027      	beq.n	8001422 <HAL_DMA_Abort+0x32a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a61      	ldr	r2, [pc, #388]	; (800155c <HAL_DMA_Abort+0x464>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d022      	beq.n	8001422 <HAL_DMA_Abort+0x32a>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a5f      	ldr	r2, [pc, #380]	; (8001560 <HAL_DMA_Abort+0x468>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d01d      	beq.n	8001422 <HAL_DMA_Abort+0x32a>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a5e      	ldr	r2, [pc, #376]	; (8001564 <HAL_DMA_Abort+0x46c>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d018      	beq.n	8001422 <HAL_DMA_Abort+0x32a>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a5c      	ldr	r2, [pc, #368]	; (8001568 <HAL_DMA_Abort+0x470>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d013      	beq.n	8001422 <HAL_DMA_Abort+0x32a>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a5b      	ldr	r2, [pc, #364]	; (800156c <HAL_DMA_Abort+0x474>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d00e      	beq.n	8001422 <HAL_DMA_Abort+0x32a>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a59      	ldr	r2, [pc, #356]	; (8001570 <HAL_DMA_Abort+0x478>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d009      	beq.n	8001422 <HAL_DMA_Abort+0x32a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a58      	ldr	r2, [pc, #352]	; (8001574 <HAL_DMA_Abort+0x47c>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d004      	beq.n	8001422 <HAL_DMA_Abort+0x32a>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a56      	ldr	r2, [pc, #344]	; (8001578 <HAL_DMA_Abort+0x480>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d108      	bne.n	8001434 <HAL_DMA_Abort+0x33c>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0201 	bic.w	r2, r2, #1
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	e007      	b.n	8001444 <HAL_DMA_Abort+0x34c>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0201 	bic.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001444:	e013      	b.n	800146e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001446:	f7ff fd3b 	bl	8000ec0 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b05      	cmp	r3, #5
 8001452:	d90c      	bls.n	800146e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2220      	movs	r2, #32
 8001458:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2203      	movs	r2, #3
 800145e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e12d      	b.n	80016ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1e5      	bne.n	8001446 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a2f      	ldr	r2, [pc, #188]	; (800153c <HAL_DMA_Abort+0x444>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d04a      	beq.n	800151a <HAL_DMA_Abort+0x422>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a2d      	ldr	r2, [pc, #180]	; (8001540 <HAL_DMA_Abort+0x448>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d045      	beq.n	800151a <HAL_DMA_Abort+0x422>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a2c      	ldr	r2, [pc, #176]	; (8001544 <HAL_DMA_Abort+0x44c>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d040      	beq.n	800151a <HAL_DMA_Abort+0x422>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a2a      	ldr	r2, [pc, #168]	; (8001548 <HAL_DMA_Abort+0x450>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d03b      	beq.n	800151a <HAL_DMA_Abort+0x422>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a29      	ldr	r2, [pc, #164]	; (800154c <HAL_DMA_Abort+0x454>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d036      	beq.n	800151a <HAL_DMA_Abort+0x422>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a27      	ldr	r2, [pc, #156]	; (8001550 <HAL_DMA_Abort+0x458>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d031      	beq.n	800151a <HAL_DMA_Abort+0x422>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a26      	ldr	r2, [pc, #152]	; (8001554 <HAL_DMA_Abort+0x45c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d02c      	beq.n	800151a <HAL_DMA_Abort+0x422>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a24      	ldr	r2, [pc, #144]	; (8001558 <HAL_DMA_Abort+0x460>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d027      	beq.n	800151a <HAL_DMA_Abort+0x422>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a23      	ldr	r2, [pc, #140]	; (800155c <HAL_DMA_Abort+0x464>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d022      	beq.n	800151a <HAL_DMA_Abort+0x422>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a21      	ldr	r2, [pc, #132]	; (8001560 <HAL_DMA_Abort+0x468>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d01d      	beq.n	800151a <HAL_DMA_Abort+0x422>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a20      	ldr	r2, [pc, #128]	; (8001564 <HAL_DMA_Abort+0x46c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d018      	beq.n	800151a <HAL_DMA_Abort+0x422>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a1e      	ldr	r2, [pc, #120]	; (8001568 <HAL_DMA_Abort+0x470>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d013      	beq.n	800151a <HAL_DMA_Abort+0x422>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a1d      	ldr	r2, [pc, #116]	; (800156c <HAL_DMA_Abort+0x474>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d00e      	beq.n	800151a <HAL_DMA_Abort+0x422>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <HAL_DMA_Abort+0x478>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d009      	beq.n	800151a <HAL_DMA_Abort+0x422>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a1a      	ldr	r2, [pc, #104]	; (8001574 <HAL_DMA_Abort+0x47c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d004      	beq.n	800151a <HAL_DMA_Abort+0x422>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a18      	ldr	r2, [pc, #96]	; (8001578 <HAL_DMA_Abort+0x480>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d101      	bne.n	800151e <HAL_DMA_Abort+0x426>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_DMA_Abort+0x428>
 800151e:	2300      	movs	r3, #0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d02b      	beq.n	800157c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001528:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152e:	f003 031f 	and.w	r3, r3, #31
 8001532:	223f      	movs	r2, #63	; 0x3f
 8001534:	409a      	lsls	r2, r3
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	e02a      	b.n	8001592 <HAL_DMA_Abort+0x49a>
 800153c:	40020010 	.word	0x40020010
 8001540:	40020028 	.word	0x40020028
 8001544:	40020040 	.word	0x40020040
 8001548:	40020058 	.word	0x40020058
 800154c:	40020070 	.word	0x40020070
 8001550:	40020088 	.word	0x40020088
 8001554:	400200a0 	.word	0x400200a0
 8001558:	400200b8 	.word	0x400200b8
 800155c:	40020410 	.word	0x40020410
 8001560:	40020428 	.word	0x40020428
 8001564:	40020440 	.word	0x40020440
 8001568:	40020458 	.word	0x40020458
 800156c:	40020470 	.word	0x40020470
 8001570:	40020488 	.word	0x40020488
 8001574:	400204a0 	.word	0x400204a0
 8001578:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	2201      	movs	r2, #1
 800158c:	409a      	lsls	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a4f      	ldr	r2, [pc, #316]	; (80016d4 <HAL_DMA_Abort+0x5dc>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d072      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a4d      	ldr	r2, [pc, #308]	; (80016d8 <HAL_DMA_Abort+0x5e0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d06d      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a4c      	ldr	r2, [pc, #304]	; (80016dc <HAL_DMA_Abort+0x5e4>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d068      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a4a      	ldr	r2, [pc, #296]	; (80016e0 <HAL_DMA_Abort+0x5e8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d063      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a49      	ldr	r2, [pc, #292]	; (80016e4 <HAL_DMA_Abort+0x5ec>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d05e      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a47      	ldr	r2, [pc, #284]	; (80016e8 <HAL_DMA_Abort+0x5f0>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d059      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a46      	ldr	r2, [pc, #280]	; (80016ec <HAL_DMA_Abort+0x5f4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d054      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a44      	ldr	r2, [pc, #272]	; (80016f0 <HAL_DMA_Abort+0x5f8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d04f      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a43      	ldr	r2, [pc, #268]	; (80016f4 <HAL_DMA_Abort+0x5fc>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d04a      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a41      	ldr	r2, [pc, #260]	; (80016f8 <HAL_DMA_Abort+0x600>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d045      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a40      	ldr	r2, [pc, #256]	; (80016fc <HAL_DMA_Abort+0x604>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d040      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a3e      	ldr	r2, [pc, #248]	; (8001700 <HAL_DMA_Abort+0x608>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d03b      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a3d      	ldr	r2, [pc, #244]	; (8001704 <HAL_DMA_Abort+0x60c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d036      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a3b      	ldr	r2, [pc, #236]	; (8001708 <HAL_DMA_Abort+0x610>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d031      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a3a      	ldr	r2, [pc, #232]	; (800170c <HAL_DMA_Abort+0x614>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d02c      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a38      	ldr	r2, [pc, #224]	; (8001710 <HAL_DMA_Abort+0x618>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d027      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a37      	ldr	r2, [pc, #220]	; (8001714 <HAL_DMA_Abort+0x61c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d022      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a35      	ldr	r2, [pc, #212]	; (8001718 <HAL_DMA_Abort+0x620>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d01d      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a34      	ldr	r2, [pc, #208]	; (800171c <HAL_DMA_Abort+0x624>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d018      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a32      	ldr	r2, [pc, #200]	; (8001720 <HAL_DMA_Abort+0x628>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d013      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a31      	ldr	r2, [pc, #196]	; (8001724 <HAL_DMA_Abort+0x62c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d00e      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a2f      	ldr	r2, [pc, #188]	; (8001728 <HAL_DMA_Abort+0x630>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d009      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a2e      	ldr	r2, [pc, #184]	; (800172c <HAL_DMA_Abort+0x634>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d004      	beq.n	8001682 <HAL_DMA_Abort+0x58a>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a2c      	ldr	r2, [pc, #176]	; (8001730 <HAL_DMA_Abort+0x638>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d101      	bne.n	8001686 <HAL_DMA_Abort+0x58e>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <HAL_DMA_Abort+0x590>
 8001686:	2300      	movs	r3, #0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d015      	beq.n	80016b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001694:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00c      	beq.n	80016b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80016b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40020010 	.word	0x40020010
 80016d8:	40020028 	.word	0x40020028
 80016dc:	40020040 	.word	0x40020040
 80016e0:	40020058 	.word	0x40020058
 80016e4:	40020070 	.word	0x40020070
 80016e8:	40020088 	.word	0x40020088
 80016ec:	400200a0 	.word	0x400200a0
 80016f0:	400200b8 	.word	0x400200b8
 80016f4:	40020410 	.word	0x40020410
 80016f8:	40020428 	.word	0x40020428
 80016fc:	40020440 	.word	0x40020440
 8001700:	40020458 	.word	0x40020458
 8001704:	40020470 	.word	0x40020470
 8001708:	40020488 	.word	0x40020488
 800170c:	400204a0 	.word	0x400204a0
 8001710:	400204b8 	.word	0x400204b8
 8001714:	58025408 	.word	0x58025408
 8001718:	5802541c 	.word	0x5802541c
 800171c:	58025430 	.word	0x58025430
 8001720:	58025444 	.word	0x58025444
 8001724:	58025458 	.word	0x58025458
 8001728:	5802546c 	.word	0x5802546c
 800172c:	58025480 	.word	0x58025480
 8001730:	58025494 	.word	0x58025494

08001734 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e237      	b.n	8001bb6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d004      	beq.n	800175c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e22c      	b.n	8001bb6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a5c      	ldr	r2, [pc, #368]	; (80018d4 <HAL_DMA_Abort_IT+0x1a0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d04a      	beq.n	80017fc <HAL_DMA_Abort_IT+0xc8>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a5b      	ldr	r2, [pc, #364]	; (80018d8 <HAL_DMA_Abort_IT+0x1a4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d045      	beq.n	80017fc <HAL_DMA_Abort_IT+0xc8>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a59      	ldr	r2, [pc, #356]	; (80018dc <HAL_DMA_Abort_IT+0x1a8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d040      	beq.n	80017fc <HAL_DMA_Abort_IT+0xc8>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a58      	ldr	r2, [pc, #352]	; (80018e0 <HAL_DMA_Abort_IT+0x1ac>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d03b      	beq.n	80017fc <HAL_DMA_Abort_IT+0xc8>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a56      	ldr	r2, [pc, #344]	; (80018e4 <HAL_DMA_Abort_IT+0x1b0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d036      	beq.n	80017fc <HAL_DMA_Abort_IT+0xc8>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a55      	ldr	r2, [pc, #340]	; (80018e8 <HAL_DMA_Abort_IT+0x1b4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d031      	beq.n	80017fc <HAL_DMA_Abort_IT+0xc8>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a53      	ldr	r2, [pc, #332]	; (80018ec <HAL_DMA_Abort_IT+0x1b8>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d02c      	beq.n	80017fc <HAL_DMA_Abort_IT+0xc8>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a52      	ldr	r2, [pc, #328]	; (80018f0 <HAL_DMA_Abort_IT+0x1bc>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d027      	beq.n	80017fc <HAL_DMA_Abort_IT+0xc8>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a50      	ldr	r2, [pc, #320]	; (80018f4 <HAL_DMA_Abort_IT+0x1c0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d022      	beq.n	80017fc <HAL_DMA_Abort_IT+0xc8>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a4f      	ldr	r2, [pc, #316]	; (80018f8 <HAL_DMA_Abort_IT+0x1c4>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d01d      	beq.n	80017fc <HAL_DMA_Abort_IT+0xc8>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a4d      	ldr	r2, [pc, #308]	; (80018fc <HAL_DMA_Abort_IT+0x1c8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d018      	beq.n	80017fc <HAL_DMA_Abort_IT+0xc8>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a4c      	ldr	r2, [pc, #304]	; (8001900 <HAL_DMA_Abort_IT+0x1cc>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d013      	beq.n	80017fc <HAL_DMA_Abort_IT+0xc8>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a4a      	ldr	r2, [pc, #296]	; (8001904 <HAL_DMA_Abort_IT+0x1d0>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00e      	beq.n	80017fc <HAL_DMA_Abort_IT+0xc8>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a49      	ldr	r2, [pc, #292]	; (8001908 <HAL_DMA_Abort_IT+0x1d4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d009      	beq.n	80017fc <HAL_DMA_Abort_IT+0xc8>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a47      	ldr	r2, [pc, #284]	; (800190c <HAL_DMA_Abort_IT+0x1d8>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d004      	beq.n	80017fc <HAL_DMA_Abort_IT+0xc8>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a46      	ldr	r2, [pc, #280]	; (8001910 <HAL_DMA_Abort_IT+0x1dc>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d101      	bne.n	8001800 <HAL_DMA_Abort_IT+0xcc>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <HAL_DMA_Abort_IT+0xce>
 8001800:	2300      	movs	r3, #0
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 8086 	beq.w	8001914 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2204      	movs	r2, #4
 800180c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a2f      	ldr	r2, [pc, #188]	; (80018d4 <HAL_DMA_Abort_IT+0x1a0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d04a      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x17c>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a2e      	ldr	r2, [pc, #184]	; (80018d8 <HAL_DMA_Abort_IT+0x1a4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d045      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x17c>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a2c      	ldr	r2, [pc, #176]	; (80018dc <HAL_DMA_Abort_IT+0x1a8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d040      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x17c>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a2b      	ldr	r2, [pc, #172]	; (80018e0 <HAL_DMA_Abort_IT+0x1ac>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d03b      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x17c>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a29      	ldr	r2, [pc, #164]	; (80018e4 <HAL_DMA_Abort_IT+0x1b0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d036      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x17c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a28      	ldr	r2, [pc, #160]	; (80018e8 <HAL_DMA_Abort_IT+0x1b4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d031      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x17c>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a26      	ldr	r2, [pc, #152]	; (80018ec <HAL_DMA_Abort_IT+0x1b8>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d02c      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x17c>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a25      	ldr	r2, [pc, #148]	; (80018f0 <HAL_DMA_Abort_IT+0x1bc>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d027      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x17c>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a23      	ldr	r2, [pc, #140]	; (80018f4 <HAL_DMA_Abort_IT+0x1c0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d022      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x17c>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <HAL_DMA_Abort_IT+0x1c4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d01d      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x17c>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a20      	ldr	r2, [pc, #128]	; (80018fc <HAL_DMA_Abort_IT+0x1c8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d018      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x17c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <HAL_DMA_Abort_IT+0x1cc>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d013      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x17c>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1d      	ldr	r2, [pc, #116]	; (8001904 <HAL_DMA_Abort_IT+0x1d0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d00e      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x17c>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <HAL_DMA_Abort_IT+0x1d4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d009      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x17c>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a1a      	ldr	r2, [pc, #104]	; (800190c <HAL_DMA_Abort_IT+0x1d8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d004      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x17c>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a19      	ldr	r2, [pc, #100]	; (8001910 <HAL_DMA_Abort_IT+0x1dc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d108      	bne.n	80018c2 <HAL_DMA_Abort_IT+0x18e>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e178      	b.n	8001bb4 <HAL_DMA_Abort_IT+0x480>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0201 	bic.w	r2, r2, #1
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	e16f      	b.n	8001bb4 <HAL_DMA_Abort_IT+0x480>
 80018d4:	40020010 	.word	0x40020010
 80018d8:	40020028 	.word	0x40020028
 80018dc:	40020040 	.word	0x40020040
 80018e0:	40020058 	.word	0x40020058
 80018e4:	40020070 	.word	0x40020070
 80018e8:	40020088 	.word	0x40020088
 80018ec:	400200a0 	.word	0x400200a0
 80018f0:	400200b8 	.word	0x400200b8
 80018f4:	40020410 	.word	0x40020410
 80018f8:	40020428 	.word	0x40020428
 80018fc:	40020440 	.word	0x40020440
 8001900:	40020458 	.word	0x40020458
 8001904:	40020470 	.word	0x40020470
 8001908:	40020488 	.word	0x40020488
 800190c:	400204a0 	.word	0x400204a0
 8001910:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 020e 	bic.w	r2, r2, #14
 8001922:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a6c      	ldr	r2, [pc, #432]	; (8001adc <HAL_DMA_Abort_IT+0x3a8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d04a      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x290>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a6b      	ldr	r2, [pc, #428]	; (8001ae0 <HAL_DMA_Abort_IT+0x3ac>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d045      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x290>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a69      	ldr	r2, [pc, #420]	; (8001ae4 <HAL_DMA_Abort_IT+0x3b0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d040      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x290>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a68      	ldr	r2, [pc, #416]	; (8001ae8 <HAL_DMA_Abort_IT+0x3b4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d03b      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x290>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a66      	ldr	r2, [pc, #408]	; (8001aec <HAL_DMA_Abort_IT+0x3b8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d036      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x290>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a65      	ldr	r2, [pc, #404]	; (8001af0 <HAL_DMA_Abort_IT+0x3bc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d031      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x290>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a63      	ldr	r2, [pc, #396]	; (8001af4 <HAL_DMA_Abort_IT+0x3c0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d02c      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x290>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a62      	ldr	r2, [pc, #392]	; (8001af8 <HAL_DMA_Abort_IT+0x3c4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d027      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x290>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a60      	ldr	r2, [pc, #384]	; (8001afc <HAL_DMA_Abort_IT+0x3c8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d022      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x290>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a5f      	ldr	r2, [pc, #380]	; (8001b00 <HAL_DMA_Abort_IT+0x3cc>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d01d      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x290>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a5d      	ldr	r2, [pc, #372]	; (8001b04 <HAL_DMA_Abort_IT+0x3d0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d018      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x290>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a5c      	ldr	r2, [pc, #368]	; (8001b08 <HAL_DMA_Abort_IT+0x3d4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d013      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x290>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a5a      	ldr	r2, [pc, #360]	; (8001b0c <HAL_DMA_Abort_IT+0x3d8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d00e      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x290>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a59      	ldr	r2, [pc, #356]	; (8001b10 <HAL_DMA_Abort_IT+0x3dc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d009      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x290>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a57      	ldr	r2, [pc, #348]	; (8001b14 <HAL_DMA_Abort_IT+0x3e0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d004      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x290>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a56      	ldr	r2, [pc, #344]	; (8001b18 <HAL_DMA_Abort_IT+0x3e4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d108      	bne.n	80019d6 <HAL_DMA_Abort_IT+0x2a2>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0201 	bic.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	e007      	b.n	80019e6 <HAL_DMA_Abort_IT+0x2b2>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0201 	bic.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a3c      	ldr	r2, [pc, #240]	; (8001adc <HAL_DMA_Abort_IT+0x3a8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d072      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a3a      	ldr	r2, [pc, #232]	; (8001ae0 <HAL_DMA_Abort_IT+0x3ac>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d06d      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a39      	ldr	r2, [pc, #228]	; (8001ae4 <HAL_DMA_Abort_IT+0x3b0>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d068      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a37      	ldr	r2, [pc, #220]	; (8001ae8 <HAL_DMA_Abort_IT+0x3b4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d063      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a36      	ldr	r2, [pc, #216]	; (8001aec <HAL_DMA_Abort_IT+0x3b8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d05e      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a34      	ldr	r2, [pc, #208]	; (8001af0 <HAL_DMA_Abort_IT+0x3bc>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d059      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a33      	ldr	r2, [pc, #204]	; (8001af4 <HAL_DMA_Abort_IT+0x3c0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d054      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a31      	ldr	r2, [pc, #196]	; (8001af8 <HAL_DMA_Abort_IT+0x3c4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d04f      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a30      	ldr	r2, [pc, #192]	; (8001afc <HAL_DMA_Abort_IT+0x3c8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d04a      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a2e      	ldr	r2, [pc, #184]	; (8001b00 <HAL_DMA_Abort_IT+0x3cc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d045      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a2d      	ldr	r2, [pc, #180]	; (8001b04 <HAL_DMA_Abort_IT+0x3d0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d040      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a2b      	ldr	r2, [pc, #172]	; (8001b08 <HAL_DMA_Abort_IT+0x3d4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d03b      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a2a      	ldr	r2, [pc, #168]	; (8001b0c <HAL_DMA_Abort_IT+0x3d8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d036      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a28      	ldr	r2, [pc, #160]	; (8001b10 <HAL_DMA_Abort_IT+0x3dc>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d031      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <HAL_DMA_Abort_IT+0x3e0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d02c      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a25      	ldr	r2, [pc, #148]	; (8001b18 <HAL_DMA_Abort_IT+0x3e4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d027      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a24      	ldr	r2, [pc, #144]	; (8001b1c <HAL_DMA_Abort_IT+0x3e8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d022      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a22      	ldr	r2, [pc, #136]	; (8001b20 <HAL_DMA_Abort_IT+0x3ec>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d01d      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a21      	ldr	r2, [pc, #132]	; (8001b24 <HAL_DMA_Abort_IT+0x3f0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d018      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a1f      	ldr	r2, [pc, #124]	; (8001b28 <HAL_DMA_Abort_IT+0x3f4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d013      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a1e      	ldr	r2, [pc, #120]	; (8001b2c <HAL_DMA_Abort_IT+0x3f8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d00e      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a1c      	ldr	r2, [pc, #112]	; (8001b30 <HAL_DMA_Abort_IT+0x3fc>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d009      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <HAL_DMA_Abort_IT+0x400>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d004      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x3a2>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a19      	ldr	r2, [pc, #100]	; (8001b38 <HAL_DMA_Abort_IT+0x404>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d132      	bne.n	8001b3c <HAL_DMA_Abort_IT+0x408>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e031      	b.n	8001b3e <HAL_DMA_Abort_IT+0x40a>
 8001ada:	bf00      	nop
 8001adc:	40020010 	.word	0x40020010
 8001ae0:	40020028 	.word	0x40020028
 8001ae4:	40020040 	.word	0x40020040
 8001ae8:	40020058 	.word	0x40020058
 8001aec:	40020070 	.word	0x40020070
 8001af0:	40020088 	.word	0x40020088
 8001af4:	400200a0 	.word	0x400200a0
 8001af8:	400200b8 	.word	0x400200b8
 8001afc:	40020410 	.word	0x40020410
 8001b00:	40020428 	.word	0x40020428
 8001b04:	40020440 	.word	0x40020440
 8001b08:	40020458 	.word	0x40020458
 8001b0c:	40020470 	.word	0x40020470
 8001b10:	40020488 	.word	0x40020488
 8001b14:	400204a0 	.word	0x400204a0
 8001b18:	400204b8 	.word	0x400204b8
 8001b1c:	58025408 	.word	0x58025408
 8001b20:	5802541c 	.word	0x5802541c
 8001b24:	58025430 	.word	0x58025430
 8001b28:	58025444 	.word	0x58025444
 8001b2c:	58025458 	.word	0x58025458
 8001b30:	5802546c 	.word	0x5802546c
 8001b34:	58025480 	.word	0x58025480
 8001b38:	58025494 	.word	0x58025494
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d028      	beq.n	8001b94 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b50:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	2201      	movs	r2, #1
 8001b62:	409a      	lsls	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b70:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00c      	beq.n	8001b94 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b88:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001b92:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop

08001bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	; 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bce:	4b89      	ldr	r3, [pc, #548]	; (8001df4 <HAL_GPIO_Init+0x234>)
 8001bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bd2:	e194      	b.n	8001efe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2101      	movs	r1, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8186 	beq.w	8001ef8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d005      	beq.n	8001c04 <HAL_GPIO_Init+0x44>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d130      	bne.n	8001c66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	091b      	lsrs	r3, r3, #4
 8001c50:	f003 0201 	and.w	r2, r3, #1
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d017      	beq.n	8001ca2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d123      	bne.n	8001cf6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	08da      	lsrs	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3208      	adds	r2, #8
 8001cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	08da      	lsrs	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3208      	adds	r2, #8
 8001cf0:	69b9      	ldr	r1, [r7, #24]
 8001cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	2203      	movs	r2, #3
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0203 	and.w	r2, r3, #3
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 80e0 	beq.w	8001ef8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d38:	4b2f      	ldr	r3, [pc, #188]	; (8001df8 <HAL_GPIO_Init+0x238>)
 8001d3a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001d3e:	4a2e      	ldr	r2, [pc, #184]	; (8001df8 <HAL_GPIO_Init+0x238>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001d48:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <HAL_GPIO_Init+0x238>)
 8001d4a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d56:	4a29      	ldr	r2, [pc, #164]	; (8001dfc <HAL_GPIO_Init+0x23c>)
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a20      	ldr	r2, [pc, #128]	; (8001e00 <HAL_GPIO_Init+0x240>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d052      	beq.n	8001e28 <HAL_GPIO_Init+0x268>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a1f      	ldr	r2, [pc, #124]	; (8001e04 <HAL_GPIO_Init+0x244>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d031      	beq.n	8001dee <HAL_GPIO_Init+0x22e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <HAL_GPIO_Init+0x248>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d02b      	beq.n	8001dea <HAL_GPIO_Init+0x22a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a1d      	ldr	r2, [pc, #116]	; (8001e0c <HAL_GPIO_Init+0x24c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d025      	beq.n	8001de6 <HAL_GPIO_Init+0x226>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <HAL_GPIO_Init+0x250>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d01f      	beq.n	8001de2 <HAL_GPIO_Init+0x222>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <HAL_GPIO_Init+0x254>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d019      	beq.n	8001dde <HAL_GPIO_Init+0x21e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <HAL_GPIO_Init+0x258>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <HAL_GPIO_Init+0x21a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a19      	ldr	r2, [pc, #100]	; (8001e1c <HAL_GPIO_Init+0x25c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00d      	beq.n	8001dd6 <HAL_GPIO_Init+0x216>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a18      	ldr	r2, [pc, #96]	; (8001e20 <HAL_GPIO_Init+0x260>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d007      	beq.n	8001dd2 <HAL_GPIO_Init+0x212>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <HAL_GPIO_Init+0x264>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d101      	bne.n	8001dce <HAL_GPIO_Init+0x20e>
 8001dca:	2309      	movs	r3, #9
 8001dcc:	e02d      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001dce:	230a      	movs	r3, #10
 8001dd0:	e02b      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001dd2:	2308      	movs	r3, #8
 8001dd4:	e029      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001dd6:	2307      	movs	r3, #7
 8001dd8:	e027      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001dda:	2306      	movs	r3, #6
 8001ddc:	e025      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001dde:	2305      	movs	r3, #5
 8001de0:	e023      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001de2:	2304      	movs	r3, #4
 8001de4:	e021      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001de6:	2303      	movs	r3, #3
 8001de8:	e01f      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e01d      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e01b      	b.n	8001e2a <HAL_GPIO_Init+0x26a>
 8001df2:	bf00      	nop
 8001df4:	58000080 	.word	0x58000080
 8001df8:	58024400 	.word	0x58024400
 8001dfc:	58000400 	.word	0x58000400
 8001e00:	58020000 	.word	0x58020000
 8001e04:	58020400 	.word	0x58020400
 8001e08:	58020800 	.word	0x58020800
 8001e0c:	58020c00 	.word	0x58020c00
 8001e10:	58021000 	.word	0x58021000
 8001e14:	58021400 	.word	0x58021400
 8001e18:	58021800 	.word	0x58021800
 8001e1c:	58021c00 	.word	0x58021c00
 8001e20:	58022000 	.word	0x58022000
 8001e24:	58022400 	.word	0x58022400
 8001e28:	2300      	movs	r3, #0
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	f002 0203 	and.w	r2, r2, #3
 8001e30:	0092      	lsls	r2, r2, #2
 8001e32:	4093      	lsls	r3, r2
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e3a:	4938      	ldr	r1, [pc, #224]	; (8001f1c <HAL_GPIO_Init+0x35c>)
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	3302      	adds	r3, #2
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	3301      	adds	r3, #1
 8001efc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f47f ae63 	bne.w	8001bd4 <HAL_GPIO_Init+0x14>
  }
}
 8001f0e:	bf00      	nop
 8001f10:	bf00      	nop
 8001f12:	3724      	adds	r7, #36	; 0x24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	58000400 	.word	0x58000400

08001f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f3c:	e003      	b.n	8001f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	041a      	lsls	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	619a      	str	r2, [r3, #24]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001f5c:	4b29      	ldr	r3, [pc, #164]	; (8002004 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	2b06      	cmp	r3, #6
 8001f66:	d00a      	beq.n	8001f7e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f68:	4b26      	ldr	r3, [pc, #152]	; (8002004 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d001      	beq.n	8001f7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e040      	b.n	8001ffc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e03e      	b.n	8001ffc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f7e:	4b21      	ldr	r3, [pc, #132]	; (8002004 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001f86:	491f      	ldr	r1, [pc, #124]	; (8002004 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001f8e:	f7fe ff97 	bl	8000ec0 <HAL_GetTick>
 8001f92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f94:	e009      	b.n	8001faa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f96:	f7fe ff93 	bl	8000ec0 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fa4:	d901      	bls.n	8001faa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e028      	b.n	8001ffc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001faa:	4b16      	ldr	r3, [pc, #88]	; (8002004 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fb6:	d1ee      	bne.n	8001f96 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b1e      	cmp	r3, #30
 8001fbc:	d008      	beq.n	8001fd0 <HAL_PWREx_ConfigSupply+0x7c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b2e      	cmp	r3, #46	; 0x2e
 8001fc2:	d005      	beq.n	8001fd0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b1d      	cmp	r3, #29
 8001fc8:	d002      	beq.n	8001fd0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b2d      	cmp	r3, #45	; 0x2d
 8001fce:	d114      	bne.n	8001ffa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001fd0:	f7fe ff76 	bl	8000ec0 <HAL_GetTick>
 8001fd4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001fd6:	e009      	b.n	8001fec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001fd8:	f7fe ff72 	bl	8000ec0 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fe6:	d901      	bls.n	8001fec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e007      	b.n	8001ffc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff8:	d1ee      	bne.n	8001fd8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	58024800 	.word	0x58024800

08002008 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08c      	sub	sp, #48	; 0x30
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	f000 bc1f 	b.w	800285a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80b3 	beq.w	8002190 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800202a:	4b95      	ldr	r3, [pc, #596]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002034:	4b92      	ldr	r3, [pc, #584]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800203a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203c:	2b10      	cmp	r3, #16
 800203e:	d007      	beq.n	8002050 <HAL_RCC_OscConfig+0x48>
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002042:	2b18      	cmp	r3, #24
 8002044:	d112      	bne.n	800206c <HAL_RCC_OscConfig+0x64>
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d10d      	bne.n	800206c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002050:	4b8b      	ldr	r3, [pc, #556]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8098 	beq.w	800218e <HAL_RCC_OscConfig+0x186>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f040 8093 	bne.w	800218e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e3f6      	b.n	800285a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002074:	d106      	bne.n	8002084 <HAL_RCC_OscConfig+0x7c>
 8002076:	4b82      	ldr	r3, [pc, #520]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a81      	ldr	r2, [pc, #516]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e058      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d112      	bne.n	80020b2 <HAL_RCC_OscConfig+0xaa>
 800208c:	4b7c      	ldr	r3, [pc, #496]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a7b      	ldr	r2, [pc, #492]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 8002092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	4b79      	ldr	r3, [pc, #484]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a78      	ldr	r2, [pc, #480]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 800209e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b76      	ldr	r3, [pc, #472]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a75      	ldr	r2, [pc, #468]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	e041      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ba:	d112      	bne.n	80020e2 <HAL_RCC_OscConfig+0xda>
 80020bc:	4b70      	ldr	r3, [pc, #448]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a6f      	ldr	r2, [pc, #444]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 80020c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	4b6d      	ldr	r3, [pc, #436]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a6c      	ldr	r2, [pc, #432]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 80020ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a69      	ldr	r2, [pc, #420]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 80020da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	e029      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80020ea:	d112      	bne.n	8002112 <HAL_RCC_OscConfig+0x10a>
 80020ec:	4b64      	ldr	r3, [pc, #400]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a63      	ldr	r2, [pc, #396]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 80020f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b61      	ldr	r3, [pc, #388]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a60      	ldr	r2, [pc, #384]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 80020fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b5e      	ldr	r3, [pc, #376]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a5d      	ldr	r2, [pc, #372]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 800210a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	e011      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
 8002112:	4b5b      	ldr	r3, [pc, #364]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a5a      	ldr	r2, [pc, #360]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 8002118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b58      	ldr	r3, [pc, #352]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a57      	ldr	r2, [pc, #348]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 8002124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b55      	ldr	r3, [pc, #340]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a54      	ldr	r2, [pc, #336]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 8002130:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002134:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d013      	beq.n	8002166 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213e:	f7fe febf 	bl	8000ec0 <HAL_GetTick>
 8002142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002146:	f7fe febb 	bl	8000ec0 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b64      	cmp	r3, #100	; 0x64
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e380      	b.n	800285a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002158:	4b49      	ldr	r3, [pc, #292]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x13e>
 8002164:	e014      	b.n	8002190 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002166:	f7fe feab 	bl	8000ec0 <HAL_GetTick>
 800216a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800216e:	f7fe fea7 	bl	8000ec0 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b64      	cmp	r3, #100	; 0x64
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e36c      	b.n	800285a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002180:	4b3f      	ldr	r3, [pc, #252]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f0      	bne.n	800216e <HAL_RCC_OscConfig+0x166>
 800218c:	e000      	b.n	8002190 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 808c 	beq.w	80022b6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800219e:	4b38      	ldr	r3, [pc, #224]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021a6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021a8:	4b35      	ldr	r3, [pc, #212]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d007      	beq.n	80021c4 <HAL_RCC_OscConfig+0x1bc>
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	2b18      	cmp	r3, #24
 80021b8:	d137      	bne.n	800222a <HAL_RCC_OscConfig+0x222>
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d132      	bne.n	800222a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021c4:	4b2e      	ldr	r3, [pc, #184]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_OscConfig+0x1d4>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e33e      	b.n	800285a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021dc:	4b28      	ldr	r3, [pc, #160]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f023 0219 	bic.w	r2, r3, #25
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4925      	ldr	r1, [pc, #148]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ee:	f7fe fe67 	bl	8000ec0 <HAL_GetTick>
 80021f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f6:	f7fe fe63 	bl	8000ec0 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e328      	b.n	800285a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	061b      	lsls	r3, r3, #24
 8002222:	4917      	ldr	r1, [pc, #92]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002228:	e045      	b.n	80022b6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d028      	beq.n	8002284 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 0219 	bic.w	r2, r3, #25
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	4910      	ldr	r1, [pc, #64]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 8002240:	4313      	orrs	r3, r2
 8002242:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe fe3c 	bl	8000ec0 <HAL_GetTick>
 8002248:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224c:	f7fe fe38 	bl	8000ec0 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e2fd      	b.n	800285a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	061b      	lsls	r3, r3, #24
 8002278:	4901      	ldr	r1, [pc, #4]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 800227a:	4313      	orrs	r3, r2
 800227c:	604b      	str	r3, [r1, #4]
 800227e:	e01a      	b.n	80022b6 <HAL_RCC_OscConfig+0x2ae>
 8002280:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002284:	4b97      	ldr	r3, [pc, #604]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a96      	ldr	r2, [pc, #600]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 800228a:	f023 0301 	bic.w	r3, r3, #1
 800228e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7fe fe16 	bl	8000ec0 <HAL_GetTick>
 8002294:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002298:	f7fe fe12 	bl	8000ec0 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e2d7      	b.n	800285a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022aa:	4b8e      	ldr	r3, [pc, #568]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d06a      	beq.n	8002398 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022c2:	4b88      	ldr	r3, [pc, #544]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022cc:	4b85      	ldr	r3, [pc, #532]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d007      	beq.n	80022e8 <HAL_RCC_OscConfig+0x2e0>
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2b18      	cmp	r3, #24
 80022dc:	d11b      	bne.n	8002316 <HAL_RCC_OscConfig+0x30e>
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d116      	bne.n	8002316 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022e8:	4b7e      	ldr	r3, [pc, #504]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_RCC_OscConfig+0x2f8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	2b80      	cmp	r3, #128	; 0x80
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e2ac      	b.n	800285a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002300:	4b78      	ldr	r3, [pc, #480]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	061b      	lsls	r3, r3, #24
 800230e:	4975      	ldr	r1, [pc, #468]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 8002310:	4313      	orrs	r3, r2
 8002312:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002314:	e040      	b.n	8002398 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d023      	beq.n	8002366 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800231e:	4b71      	ldr	r3, [pc, #452]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a70      	ldr	r2, [pc, #448]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 8002324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7fe fdc9 	bl	8000ec0 <HAL_GetTick>
 800232e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002332:	f7fe fdc5 	bl	8000ec0 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e28a      	b.n	800285a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002344:	4b67      	ldr	r3, [pc, #412]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002350:	4b64      	ldr	r3, [pc, #400]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	061b      	lsls	r3, r3, #24
 800235e:	4961      	ldr	r1, [pc, #388]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 8002360:	4313      	orrs	r3, r2
 8002362:	60cb      	str	r3, [r1, #12]
 8002364:	e018      	b.n	8002398 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002366:	4b5f      	ldr	r3, [pc, #380]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a5e      	ldr	r2, [pc, #376]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 800236c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002372:	f7fe fda5 	bl	8000ec0 <HAL_GetTick>
 8002376:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800237a:	f7fe fda1 	bl	8000ec0 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e266      	b.n	800285a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800238c:	4b55      	ldr	r3, [pc, #340]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f0      	bne.n	800237a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d036      	beq.n	8002412 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d019      	beq.n	80023e0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ac:	4b4d      	ldr	r3, [pc, #308]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 80023ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b0:	4a4c      	ldr	r2, [pc, #304]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b8:	f7fe fd82 	bl	8000ec0 <HAL_GetTick>
 80023bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c0:	f7fe fd7e 	bl	8000ec0 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e243      	b.n	800285a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023d2:	4b44      	ldr	r3, [pc, #272]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 80023d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x3b8>
 80023de:	e018      	b.n	8002412 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e0:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 80023e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e4:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ec:	f7fe fd68 	bl	8000ec0 <HAL_GetTick>
 80023f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f4:	f7fe fd64 	bl	8000ec0 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e229      	b.n	800285a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002406:	4b37      	ldr	r3, [pc, #220]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 8002408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	d036      	beq.n	800248c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d019      	beq.n	800245a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002426:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a2e      	ldr	r2, [pc, #184]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 800242c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002430:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002432:	f7fe fd45 	bl	8000ec0 <HAL_GetTick>
 8002436:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800243a:	f7fe fd41 	bl	8000ec0 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e206      	b.n	800285a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800244c:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x432>
 8002458:	e018      	b.n	800248c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a21      	ldr	r2, [pc, #132]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 8002460:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002464:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002466:	f7fe fd2b 	bl	8000ec0 <HAL_GetTick>
 800246a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800246e:	f7fe fd27 	bl	8000ec0 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e1ec      	b.n	800285a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002480:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80af 	beq.w	80025f8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <HAL_RCC_OscConfig+0x4e0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <HAL_RCC_OscConfig+0x4e0>)
 80024a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024a6:	f7fe fd0b 	bl	8000ec0 <HAL_GetTick>
 80024aa:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ae:	f7fe fd07 	bl	8000ec0 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b64      	cmp	r3, #100	; 0x64
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e1cc      	b.n	800285a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_RCC_OscConfig+0x4e0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d10b      	bne.n	80024ec <HAL_RCC_OscConfig+0x4e4>
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	4a02      	ldr	r2, [pc, #8]	; (80024e4 <HAL_RCC_OscConfig+0x4dc>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6713      	str	r3, [r2, #112]	; 0x70
 80024e0:	e05b      	b.n	800259a <HAL_RCC_OscConfig+0x592>
 80024e2:	bf00      	nop
 80024e4:	58024400 	.word	0x58024400
 80024e8:	58024800 	.word	0x58024800
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d112      	bne.n	800251a <HAL_RCC_OscConfig+0x512>
 80024f4:	4b9d      	ldr	r3, [pc, #628]	; (800276c <HAL_RCC_OscConfig+0x764>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f8:	4a9c      	ldr	r2, [pc, #624]	; (800276c <HAL_RCC_OscConfig+0x764>)
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002500:	4b9a      	ldr	r3, [pc, #616]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	4a99      	ldr	r2, [pc, #612]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800250a:	6713      	str	r3, [r2, #112]	; 0x70
 800250c:	4b97      	ldr	r3, [pc, #604]	; (800276c <HAL_RCC_OscConfig+0x764>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	4a96      	ldr	r2, [pc, #600]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002512:	f023 0304 	bic.w	r3, r3, #4
 8002516:	6713      	str	r3, [r2, #112]	; 0x70
 8002518:	e03f      	b.n	800259a <HAL_RCC_OscConfig+0x592>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b05      	cmp	r3, #5
 8002520:	d112      	bne.n	8002548 <HAL_RCC_OscConfig+0x540>
 8002522:	4b92      	ldr	r3, [pc, #584]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	4a91      	ldr	r2, [pc, #580]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	6713      	str	r3, [r2, #112]	; 0x70
 800252e:	4b8f      	ldr	r3, [pc, #572]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	4a8e      	ldr	r2, [pc, #568]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002538:	6713      	str	r3, [r2, #112]	; 0x70
 800253a:	4b8c      	ldr	r3, [pc, #560]	; (800276c <HAL_RCC_OscConfig+0x764>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	4a8b      	ldr	r2, [pc, #556]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6713      	str	r3, [r2, #112]	; 0x70
 8002546:	e028      	b.n	800259a <HAL_RCC_OscConfig+0x592>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b85      	cmp	r3, #133	; 0x85
 800254e:	d112      	bne.n	8002576 <HAL_RCC_OscConfig+0x56e>
 8002550:	4b86      	ldr	r3, [pc, #536]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	4a85      	ldr	r2, [pc, #532]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002556:	f043 0304 	orr.w	r3, r3, #4
 800255a:	6713      	str	r3, [r2, #112]	; 0x70
 800255c:	4b83      	ldr	r3, [pc, #524]	; (800276c <HAL_RCC_OscConfig+0x764>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	4a82      	ldr	r2, [pc, #520]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002566:	6713      	str	r3, [r2, #112]	; 0x70
 8002568:	4b80      	ldr	r3, [pc, #512]	; (800276c <HAL_RCC_OscConfig+0x764>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	4a7f      	ldr	r2, [pc, #508]	; (800276c <HAL_RCC_OscConfig+0x764>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6713      	str	r3, [r2, #112]	; 0x70
 8002574:	e011      	b.n	800259a <HAL_RCC_OscConfig+0x592>
 8002576:	4b7d      	ldr	r3, [pc, #500]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	4a7c      	ldr	r2, [pc, #496]	; (800276c <HAL_RCC_OscConfig+0x764>)
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	6713      	str	r3, [r2, #112]	; 0x70
 8002582:	4b7a      	ldr	r3, [pc, #488]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	4a79      	ldr	r2, [pc, #484]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002588:	f023 0304 	bic.w	r3, r3, #4
 800258c:	6713      	str	r3, [r2, #112]	; 0x70
 800258e:	4b77      	ldr	r3, [pc, #476]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	4a76      	ldr	r2, [pc, #472]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002598:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d015      	beq.n	80025ce <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a2:	f7fe fc8d 	bl	8000ec0 <HAL_GetTick>
 80025a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7fe fc89 	bl	8000ec0 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e14c      	b.n	800285a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025c0:	4b6a      	ldr	r3, [pc, #424]	; (800276c <HAL_RCC_OscConfig+0x764>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0ee      	beq.n	80025aa <HAL_RCC_OscConfig+0x5a2>
 80025cc:	e014      	b.n	80025f8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ce:	f7fe fc77 	bl	8000ec0 <HAL_GetTick>
 80025d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7fe fc73 	bl	8000ec0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e136      	b.n	800285a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025ec:	4b5f      	ldr	r3, [pc, #380]	; (800276c <HAL_RCC_OscConfig+0x764>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1ee      	bne.n	80025d6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 812b 	beq.w	8002858 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002602:	4b5a      	ldr	r3, [pc, #360]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800260a:	2b18      	cmp	r3, #24
 800260c:	f000 80bb 	beq.w	8002786 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	2b02      	cmp	r3, #2
 8002616:	f040 8095 	bne.w	8002744 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	4b54      	ldr	r3, [pc, #336]	; (800276c <HAL_RCC_OscConfig+0x764>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a53      	ldr	r2, [pc, #332]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002620:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7fe fc4b 	bl	8000ec0 <HAL_GetTick>
 800262a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262e:	f7fe fc47 	bl	8000ec0 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e10c      	b.n	800285a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002640:	4b4a      	ldr	r3, [pc, #296]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800264c:	4b47      	ldr	r3, [pc, #284]	; (800276c <HAL_RCC_OscConfig+0x764>)
 800264e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002650:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCC_OscConfig+0x768>)
 8002652:	4013      	ands	r3, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800265c:	0112      	lsls	r2, r2, #4
 800265e:	430a      	orrs	r2, r1
 8002660:	4942      	ldr	r1, [pc, #264]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002662:	4313      	orrs	r3, r2
 8002664:	628b      	str	r3, [r1, #40]	; 0x28
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	3b01      	subs	r3, #1
 800266c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002674:	3b01      	subs	r3, #1
 8002676:	025b      	lsls	r3, r3, #9
 8002678:	b29b      	uxth	r3, r3
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002680:	3b01      	subs	r3, #1
 8002682:	041b      	lsls	r3, r3, #16
 8002684:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268e:	3b01      	subs	r3, #1
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002696:	4935      	ldr	r1, [pc, #212]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002698:	4313      	orrs	r3, r2
 800269a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800269c:	4b33      	ldr	r3, [pc, #204]	; (800276c <HAL_RCC_OscConfig+0x764>)
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	4a32      	ldr	r2, [pc, #200]	; (800276c <HAL_RCC_OscConfig+0x764>)
 80026a2:	f023 0301 	bic.w	r3, r3, #1
 80026a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80026a8:	4b30      	ldr	r3, [pc, #192]	; (800276c <HAL_RCC_OscConfig+0x764>)
 80026aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ac:	4b31      	ldr	r3, [pc, #196]	; (8002774 <HAL_RCC_OscConfig+0x76c>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026b4:	00d2      	lsls	r2, r2, #3
 80026b6:	492d      	ldr	r1, [pc, #180]	; (800276c <HAL_RCC_OscConfig+0x764>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80026bc:	4b2b      	ldr	r3, [pc, #172]	; (800276c <HAL_RCC_OscConfig+0x764>)
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	f023 020c 	bic.w	r2, r3, #12
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	4928      	ldr	r1, [pc, #160]	; (800276c <HAL_RCC_OscConfig+0x764>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80026ce:	4b27      	ldr	r3, [pc, #156]	; (800276c <HAL_RCC_OscConfig+0x764>)
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	f023 0202 	bic.w	r2, r3, #2
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	4924      	ldr	r1, [pc, #144]	; (800276c <HAL_RCC_OscConfig+0x764>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80026e0:	4b22      	ldr	r3, [pc, #136]	; (800276c <HAL_RCC_OscConfig+0x764>)
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	4a21      	ldr	r2, [pc, #132]	; (800276c <HAL_RCC_OscConfig+0x764>)
 80026e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ec:	4b1f      	ldr	r3, [pc, #124]	; (800276c <HAL_RCC_OscConfig+0x764>)
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	4a1e      	ldr	r2, [pc, #120]	; (800276c <HAL_RCC_OscConfig+0x764>)
 80026f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80026f8:	4b1c      	ldr	r3, [pc, #112]	; (800276c <HAL_RCC_OscConfig+0x764>)
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	4a1b      	ldr	r2, [pc, #108]	; (800276c <HAL_RCC_OscConfig+0x764>)
 80026fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002702:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002704:	4b19      	ldr	r3, [pc, #100]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	4a18      	ldr	r2, [pc, #96]	; (800276c <HAL_RCC_OscConfig+0x764>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002710:	4b16      	ldr	r3, [pc, #88]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a15      	ldr	r2, [pc, #84]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800271a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fbd0 	bl	8000ec0 <HAL_GetTick>
 8002720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002724:	f7fe fbcc 	bl	8000ec0 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e091      	b.n	800285a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x71c>
 8002742:	e089      	b.n	8002858 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002744:	4b09      	ldr	r3, [pc, #36]	; (800276c <HAL_RCC_OscConfig+0x764>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a08      	ldr	r2, [pc, #32]	; (800276c <HAL_RCC_OscConfig+0x764>)
 800274a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800274e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe fbb6 	bl	8000ec0 <HAL_GetTick>
 8002754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002756:	e00f      	b.n	8002778 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002758:	f7fe fbb2 	bl	8000ec0 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d908      	bls.n	8002778 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e077      	b.n	800285a <HAL_RCC_OscConfig+0x852>
 800276a:	bf00      	nop
 800276c:	58024400 	.word	0x58024400
 8002770:	fffffc0c 	.word	0xfffffc0c
 8002774:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002778:	4b3a      	ldr	r3, [pc, #232]	; (8002864 <HAL_RCC_OscConfig+0x85c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1e9      	bne.n	8002758 <HAL_RCC_OscConfig+0x750>
 8002784:	e068      	b.n	8002858 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002786:	4b37      	ldr	r3, [pc, #220]	; (8002864 <HAL_RCC_OscConfig+0x85c>)
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800278c:	4b35      	ldr	r3, [pc, #212]	; (8002864 <HAL_RCC_OscConfig+0x85c>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	2b01      	cmp	r3, #1
 8002798:	d031      	beq.n	80027fe <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	f003 0203 	and.w	r2, r3, #3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d12a      	bne.n	80027fe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d122      	bne.n	80027fe <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d11a      	bne.n	80027fe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	0a5b      	lsrs	r3, r3, #9
 80027cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d111      	bne.n	80027fe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	0c1b      	lsrs	r3, r3, #16
 80027de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d108      	bne.n	80027fe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	0e1b      	lsrs	r3, r3, #24
 80027f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d001      	beq.n	8002802 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e02b      	b.n	800285a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002802:	4b18      	ldr	r3, [pc, #96]	; (8002864 <HAL_RCC_OscConfig+0x85c>)
 8002804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002806:	08db      	lsrs	r3, r3, #3
 8002808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800280c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	429a      	cmp	r2, r3
 8002816:	d01f      	beq.n	8002858 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_RCC_OscConfig+0x85c>)
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	4a11      	ldr	r2, [pc, #68]	; (8002864 <HAL_RCC_OscConfig+0x85c>)
 800281e:	f023 0301 	bic.w	r3, r3, #1
 8002822:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002824:	f7fe fb4c 	bl	8000ec0 <HAL_GetTick>
 8002828:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800282a:	bf00      	nop
 800282c:	f7fe fb48 	bl	8000ec0 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	4293      	cmp	r3, r2
 8002836:	d0f9      	beq.n	800282c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <HAL_RCC_OscConfig+0x85c>)
 800283a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <HAL_RCC_OscConfig+0x860>)
 800283e:	4013      	ands	r3, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002844:	00d2      	lsls	r2, r2, #3
 8002846:	4907      	ldr	r1, [pc, #28]	; (8002864 <HAL_RCC_OscConfig+0x85c>)
 8002848:	4313      	orrs	r3, r2
 800284a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_OscConfig+0x85c>)
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	4a04      	ldr	r2, [pc, #16]	; (8002864 <HAL_RCC_OscConfig+0x85c>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3730      	adds	r7, #48	; 0x30
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	58024400 	.word	0x58024400
 8002868:	ffff0007 	.word	0xffff0007

0800286c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e19c      	b.n	8002bba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002880:	4b8a      	ldr	r3, [pc, #552]	; (8002aac <HAL_RCC_ClockConfig+0x240>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d910      	bls.n	80028b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b87      	ldr	r3, [pc, #540]	; (8002aac <HAL_RCC_ClockConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 020f 	bic.w	r2, r3, #15
 8002896:	4985      	ldr	r1, [pc, #532]	; (8002aac <HAL_RCC_ClockConfig+0x240>)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	4313      	orrs	r3, r2
 800289c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	4b83      	ldr	r3, [pc, #524]	; (8002aac <HAL_RCC_ClockConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e184      	b.n	8002bba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d010      	beq.n	80028de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	4b7b      	ldr	r3, [pc, #492]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d908      	bls.n	80028de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028cc:	4b78      	ldr	r3, [pc, #480]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	4975      	ldr	r1, [pc, #468]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d010      	beq.n	800290c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695a      	ldr	r2, [r3, #20]
 80028ee:	4b70      	ldr	r3, [pc, #448]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d908      	bls.n	800290c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028fa:	4b6d      	ldr	r3, [pc, #436]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	496a      	ldr	r1, [pc, #424]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 8002908:	4313      	orrs	r3, r2
 800290a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	d010      	beq.n	800293a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699a      	ldr	r2, [r3, #24]
 800291c:	4b64      	ldr	r3, [pc, #400]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002924:	429a      	cmp	r2, r3
 8002926:	d908      	bls.n	800293a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002928:	4b61      	ldr	r3, [pc, #388]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	495e      	ldr	r1, [pc, #376]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 8002936:	4313      	orrs	r3, r2
 8002938:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	2b00      	cmp	r3, #0
 8002944:	d010      	beq.n	8002968 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69da      	ldr	r2, [r3, #28]
 800294a:	4b59      	ldr	r3, [pc, #356]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002952:	429a      	cmp	r2, r3
 8002954:	d908      	bls.n	8002968 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002956:	4b56      	ldr	r3, [pc, #344]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	4953      	ldr	r1, [pc, #332]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 8002964:	4313      	orrs	r3, r2
 8002966:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d010      	beq.n	8002996 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	4b4d      	ldr	r3, [pc, #308]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	429a      	cmp	r2, r3
 8002982:	d908      	bls.n	8002996 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002984:	4b4a      	ldr	r3, [pc, #296]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f023 020f 	bic.w	r2, r3, #15
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4947      	ldr	r1, [pc, #284]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 8002992:	4313      	orrs	r3, r2
 8002994:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d055      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80029a2:	4b43      	ldr	r3, [pc, #268]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	4940      	ldr	r1, [pc, #256]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d107      	bne.n	80029cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029bc:	4b3c      	ldr	r3, [pc, #240]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d121      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0f6      	b.n	8002bba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d107      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029d4:	4b36      	ldr	r3, [pc, #216]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d115      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0ea      	b.n	8002bba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029ec:	4b30      	ldr	r3, [pc, #192]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d109      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0de      	b.n	8002bba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029fc:	4b2c      	ldr	r3, [pc, #176]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0d6      	b.n	8002bba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a0c:	4b28      	ldr	r3, [pc, #160]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	f023 0207 	bic.w	r2, r3, #7
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4925      	ldr	r1, [pc, #148]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a1e:	f7fe fa4f 	bl	8000ec0 <HAL_GetTick>
 8002a22:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a24:	e00a      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a26:	f7fe fa4b 	bl	8000ec0 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e0be      	b.n	8002bba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3c:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d1eb      	bne.n	8002a26 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d010      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d208      	bcs.n	8002a7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a6a:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f023 020f 	bic.w	r2, r3, #15
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	490e      	ldr	r1, [pc, #56]	; (8002ab0 <HAL_RCC_ClockConfig+0x244>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_RCC_ClockConfig+0x240>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d214      	bcs.n	8002ab4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <HAL_RCC_ClockConfig+0x240>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 020f 	bic.w	r2, r3, #15
 8002a92:	4906      	ldr	r1, [pc, #24]	; (8002aac <HAL_RCC_ClockConfig+0x240>)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b04      	ldr	r3, [pc, #16]	; (8002aac <HAL_RCC_ClockConfig+0x240>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e086      	b.n	8002bba <HAL_RCC_ClockConfig+0x34e>
 8002aac:	52002000 	.word	0x52002000
 8002ab0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d010      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <HAL_RCC_ClockConfig+0x358>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d208      	bcs.n	8002ae2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ad0:	4b3c      	ldr	r3, [pc, #240]	; (8002bc4 <HAL_RCC_ClockConfig+0x358>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	4939      	ldr	r1, [pc, #228]	; (8002bc4 <HAL_RCC_ClockConfig+0x358>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d010      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695a      	ldr	r2, [r3, #20]
 8002af2:	4b34      	ldr	r3, [pc, #208]	; (8002bc4 <HAL_RCC_ClockConfig+0x358>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d208      	bcs.n	8002b10 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002afe:	4b31      	ldr	r3, [pc, #196]	; (8002bc4 <HAL_RCC_ClockConfig+0x358>)
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	492e      	ldr	r1, [pc, #184]	; (8002bc4 <HAL_RCC_ClockConfig+0x358>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d010      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699a      	ldr	r2, [r3, #24]
 8002b20:	4b28      	ldr	r3, [pc, #160]	; (8002bc4 <HAL_RCC_ClockConfig+0x358>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d208      	bcs.n	8002b3e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b2c:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <HAL_RCC_ClockConfig+0x358>)
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	4922      	ldr	r1, [pc, #136]	; (8002bc4 <HAL_RCC_ClockConfig+0x358>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d010      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <HAL_RCC_ClockConfig+0x358>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d208      	bcs.n	8002b6c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <HAL_RCC_ClockConfig+0x358>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	4917      	ldr	r1, [pc, #92]	; (8002bc4 <HAL_RCC_ClockConfig+0x358>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002b6c:	f000 f834 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <HAL_RCC_ClockConfig+0x358>)
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	4912      	ldr	r1, [pc, #72]	; (8002bc8 <HAL_RCC_ClockConfig+0x35c>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
 8002b88:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <HAL_RCC_ClockConfig+0x358>)
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	4a0d      	ldr	r2, [pc, #52]	; (8002bc8 <HAL_RCC_ClockConfig+0x35c>)
 8002b94:	5cd3      	ldrb	r3, [r2, r3]
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba0:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <HAL_RCC_ClockConfig+0x360>)
 8002ba2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ba4:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <HAL_RCC_ClockConfig+0x364>)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_RCC_ClockConfig+0x368>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe f93c 	bl	8000e2c <HAL_InitTick>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	58024400 	.word	0x58024400
 8002bc8:	080097a0 	.word	0x080097a0
 8002bcc:	24000004 	.word	0x24000004
 8002bd0:	24000000 	.word	0x24000000
 8002bd4:	24000008 	.word	0x24000008

08002bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	; 0x24
 8002bdc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bde:	4bb3      	ldr	r3, [pc, #716]	; (8002eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002be6:	2b18      	cmp	r3, #24
 8002be8:	f200 8155 	bhi.w	8002e96 <HAL_RCC_GetSysClockFreq+0x2be>
 8002bec:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf2:	bf00      	nop
 8002bf4:	08002c59 	.word	0x08002c59
 8002bf8:	08002e97 	.word	0x08002e97
 8002bfc:	08002e97 	.word	0x08002e97
 8002c00:	08002e97 	.word	0x08002e97
 8002c04:	08002e97 	.word	0x08002e97
 8002c08:	08002e97 	.word	0x08002e97
 8002c0c:	08002e97 	.word	0x08002e97
 8002c10:	08002e97 	.word	0x08002e97
 8002c14:	08002c7f 	.word	0x08002c7f
 8002c18:	08002e97 	.word	0x08002e97
 8002c1c:	08002e97 	.word	0x08002e97
 8002c20:	08002e97 	.word	0x08002e97
 8002c24:	08002e97 	.word	0x08002e97
 8002c28:	08002e97 	.word	0x08002e97
 8002c2c:	08002e97 	.word	0x08002e97
 8002c30:	08002e97 	.word	0x08002e97
 8002c34:	08002c85 	.word	0x08002c85
 8002c38:	08002e97 	.word	0x08002e97
 8002c3c:	08002e97 	.word	0x08002e97
 8002c40:	08002e97 	.word	0x08002e97
 8002c44:	08002e97 	.word	0x08002e97
 8002c48:	08002e97 	.word	0x08002e97
 8002c4c:	08002e97 	.word	0x08002e97
 8002c50:	08002e97 	.word	0x08002e97
 8002c54:	08002c8b 	.word	0x08002c8b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c58:	4b94      	ldr	r3, [pc, #592]	; (8002eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d009      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c64:	4b91      	ldr	r3, [pc, #580]	; (8002eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	08db      	lsrs	r3, r3, #3
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	4a90      	ldr	r2, [pc, #576]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
 8002c74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002c76:	e111      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002c78:	4b8d      	ldr	r3, [pc, #564]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c7a:	61bb      	str	r3, [r7, #24]
      break;
 8002c7c:	e10e      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002c7e:	4b8d      	ldr	r3, [pc, #564]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c80:	61bb      	str	r3, [r7, #24]
      break;
 8002c82:	e10b      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002c84:	4b8c      	ldr	r3, [pc, #560]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002c86:	61bb      	str	r3, [r7, #24]
      break;
 8002c88:	e108      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c8a:	4b88      	ldr	r3, [pc, #544]	; (8002eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002c94:	4b85      	ldr	r3, [pc, #532]	; (8002eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c9e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ca0:	4b82      	ldr	r3, [pc, #520]	; (8002eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002caa:	4b80      	ldr	r3, [pc, #512]	; (8002eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cae:	08db      	lsrs	r3, r3, #3
 8002cb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	fb02 f303 	mul.w	r3, r2, r3
 8002cba:	ee07 3a90 	vmov	s15, r3
 8002cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80e1 	beq.w	8002e90 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	f000 8083 	beq.w	8002ddc <HAL_RCC_GetSysClockFreq+0x204>
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	f200 80a1 	bhi.w	8002e20 <HAL_RCC_GetSysClockFreq+0x248>
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0x114>
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d056      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002cea:	e099      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cec:	4b6f      	ldr	r3, [pc, #444]	; (8002eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d02d      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002cf8:	4b6c      	ldr	r3, [pc, #432]	; (8002eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	08db      	lsrs	r3, r3, #3
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	4a6b      	ldr	r2, [pc, #428]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
 8002d08:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	ee07 3a90 	vmov	s15, r3
 8002d10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	ee07 3a90 	vmov	s15, r3
 8002d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d22:	4b62      	ldr	r3, [pc, #392]	; (8002eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2a:	ee07 3a90 	vmov	s15, r3
 8002d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d32:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d36:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002ebc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002d52:	e087      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	ee07 3a90 	vmov	s15, r3
 8002d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d5e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002ec0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d66:	4b51      	ldr	r3, [pc, #324]	; (8002eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d6e:	ee07 3a90 	vmov	s15, r3
 8002d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d76:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d7a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002ebc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d96:	e065      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	ee07 3a90 	vmov	s15, r3
 8002d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002ec4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002daa:	4b40      	ldr	r3, [pc, #256]	; (8002eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db2:	ee07 3a90 	vmov	s15, r3
 8002db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dba:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dbe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002ebc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002dda:	e043      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	ee07 3a90 	vmov	s15, r3
 8002de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002ec8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dee:	4b2f      	ldr	r3, [pc, #188]	; (8002eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df6:	ee07 3a90 	vmov	s15, r3
 8002dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e02:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002ebc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e1e:	e021      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	ee07 3a90 	vmov	s15, r3
 8002e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e2a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002ec4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e32:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3a:	ee07 3a90 	vmov	s15, r3
 8002e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e46:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002ebc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e62:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	0a5b      	lsrs	r3, r3, #9
 8002e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e6e:	3301      	adds	r3, #1
 8002e70:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	ee07 3a90 	vmov	s15, r3
 8002e78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e88:	ee17 3a90 	vmov	r3, s15
 8002e8c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002e8e:	e005      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61bb      	str	r3, [r7, #24]
      break;
 8002e94:	e002      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002e96:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e98:	61bb      	str	r3, [r7, #24]
      break;
 8002e9a:	bf00      	nop
  }

  return sysclockfreq;
 8002e9c:	69bb      	ldr	r3, [r7, #24]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3724      	adds	r7, #36	; 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	58024400 	.word	0x58024400
 8002eb0:	03d09000 	.word	0x03d09000
 8002eb4:	003d0900 	.word	0x003d0900
 8002eb8:	007a1200 	.word	0x007a1200
 8002ebc:	46000000 	.word	0x46000000
 8002ec0:	4c742400 	.word	0x4c742400
 8002ec4:	4a742400 	.word	0x4a742400
 8002ec8:	4af42400 	.word	0x4af42400

08002ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002ed2:	f7ff fe81 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <HAL_RCC_GetHCLKFreq+0x50>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	490f      	ldr	r1, [pc, #60]	; (8002f20 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ee4:	5ccb      	ldrb	r3, [r1, r3]
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	fa22 f303 	lsr.w	r3, r2, r3
 8002eee:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <HAL_RCC_GetHCLKFreq+0x50>)
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	4a09      	ldr	r2, [pc, #36]	; (8002f20 <HAL_RCC_GetHCLKFreq+0x54>)
 8002efa:	5cd3      	ldrb	r3, [r2, r3]
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	fa22 f303 	lsr.w	r3, r2, r3
 8002f06:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f0a:	4a07      	ldr	r2, [pc, #28]	; (8002f28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	58024400 	.word	0x58024400
 8002f20:	080097a0 	.word	0x080097a0
 8002f24:	24000004 	.word	0x24000004
 8002f28:	24000000 	.word	0x24000000

08002f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002f30:	f7ff ffcc 	bl	8002ecc <HAL_RCC_GetHCLKFreq>
 8002f34:	4602      	mov	r2, r0
 8002f36:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	091b      	lsrs	r3, r3, #4
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	4904      	ldr	r1, [pc, #16]	; (8002f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f42:	5ccb      	ldrb	r3, [r1, r3]
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	58024400 	.word	0x58024400
 8002f54:	080097a0 	.word	0x080097a0

08002f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002f5c:	f7ff ffb6 	bl	8002ecc <HAL_RCC_GetHCLKFreq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	4904      	ldr	r1, [pc, #16]	; (8002f80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f6e:	5ccb      	ldrb	r3, [r1, r3]
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	58024400 	.word	0x58024400
 8002f80:	080097a0 	.word	0x080097a0

08002f84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f88:	b0c8      	sub	sp, #288	; 0x120
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f90:	2300      	movs	r3, #0
 8002f92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f96:	2300      	movs	r3, #0
 8002f98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002fa8:	2500      	movs	r5, #0
 8002faa:	ea54 0305 	orrs.w	r3, r4, r5
 8002fae:	d049      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fba:	d02f      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002fbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fc0:	d828      	bhi.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002fc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fc6:	d01a      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002fc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fcc:	d822      	bhi.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fd6:	d007      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fd8:	e01c      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fda:	4ba7      	ldr	r3, [pc, #668]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fde:	4aa6      	ldr	r2, [pc, #664]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002fe6:	e01a      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fec:	3308      	adds	r3, #8
 8002fee:	2102      	movs	r1, #2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f001 fc43 	bl	800487c <RCCEx_PLL2_Config>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ffc:	e00f      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003002:	3328      	adds	r3, #40	; 0x28
 8003004:	2102      	movs	r1, #2
 8003006:	4618      	mov	r0, r3
 8003008:	f001 fcea 	bl	80049e0 <RCCEx_PLL3_Config>
 800300c:	4603      	mov	r3, r0
 800300e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003012:	e004      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800301a:	e000      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800301c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800301e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10a      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003026:	4b94      	ldr	r3, [pc, #592]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800302e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003034:	4a90      	ldr	r2, [pc, #576]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003036:	430b      	orrs	r3, r1
 8003038:	6513      	str	r3, [r2, #80]	; 0x50
 800303a:	e003      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003040:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003050:	f04f 0900 	mov.w	r9, #0
 8003054:	ea58 0309 	orrs.w	r3, r8, r9
 8003058:	d047      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800305a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003060:	2b04      	cmp	r3, #4
 8003062:	d82a      	bhi.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003064:	a201      	add	r2, pc, #4	; (adr r2, 800306c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306a:	bf00      	nop
 800306c:	08003081 	.word	0x08003081
 8003070:	0800308f 	.word	0x0800308f
 8003074:	080030a5 	.word	0x080030a5
 8003078:	080030c3 	.word	0x080030c3
 800307c:	080030c3 	.word	0x080030c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003080:	4b7d      	ldr	r3, [pc, #500]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	4a7c      	ldr	r2, [pc, #496]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800308a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800308c:	e01a      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800308e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003092:	3308      	adds	r3, #8
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f001 fbf0 	bl	800487c <RCCEx_PLL2_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030a2:	e00f      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030a8:	3328      	adds	r3, #40	; 0x28
 80030aa:	2100      	movs	r1, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f001 fc97 	bl	80049e0 <RCCEx_PLL3_Config>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030b8:	e004      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030c0:	e000      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80030c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10a      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030cc:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d0:	f023 0107 	bic.w	r1, r3, #7
 80030d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	4a67      	ldr	r2, [pc, #412]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030dc:	430b      	orrs	r3, r1
 80030de:	6513      	str	r3, [r2, #80]	; 0x50
 80030e0:	e003      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80030ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80030f6:	f04f 0b00 	mov.w	fp, #0
 80030fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80030fe:	d054      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800310a:	d036      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800310c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003110:	d82f      	bhi.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003116:	d032      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800311c:	d829      	bhi.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800311e:	2bc0      	cmp	r3, #192	; 0xc0
 8003120:	d02f      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003122:	2bc0      	cmp	r3, #192	; 0xc0
 8003124:	d825      	bhi.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003126:	2b80      	cmp	r3, #128	; 0x80
 8003128:	d018      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800312a:	2b80      	cmp	r3, #128	; 0x80
 800312c:	d821      	bhi.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003132:	2b40      	cmp	r3, #64	; 0x40
 8003134:	d007      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003136:	e01c      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003138:	4b4f      	ldr	r3, [pc, #316]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	4a4e      	ldr	r2, [pc, #312]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800313e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003142:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003144:	e01e      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800314a:	3308      	adds	r3, #8
 800314c:	2100      	movs	r1, #0
 800314e:	4618      	mov	r0, r3
 8003150:	f001 fb94 	bl	800487c <RCCEx_PLL2_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800315a:	e013      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800315c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003160:	3328      	adds	r3, #40	; 0x28
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f001 fc3b 	bl	80049e0 <RCCEx_PLL3_Config>
 800316a:	4603      	mov	r3, r0
 800316c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003170:	e008      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003178:	e004      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800317a:	bf00      	nop
 800317c:	e002      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800317e:	bf00      	nop
 8003180:	e000      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003184:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800318c:	4b3a      	ldr	r3, [pc, #232]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800318e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003190:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319a:	4a37      	ldr	r2, [pc, #220]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800319c:	430b      	orrs	r3, r1
 800319e:	6513      	str	r3, [r2, #80]	; 0x50
 80031a0:	e003      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80031aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80031b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80031ba:	2300      	movs	r3, #0
 80031bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80031c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80031c4:	460b      	mov	r3, r1
 80031c6:	4313      	orrs	r3, r2
 80031c8:	d05c      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80031ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80031d4:	d03b      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80031d6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80031da:	d834      	bhi.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80031dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e0:	d037      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80031e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e6:	d82e      	bhi.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80031e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80031ec:	d033      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80031ee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80031f2:	d828      	bhi.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80031f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f8:	d01a      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80031fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fe:	d822      	bhi.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003208:	d007      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800320a:	e01c      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800320c:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	4a19      	ldr	r2, [pc, #100]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003216:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003218:	e01e      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800321a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800321e:	3308      	adds	r3, #8
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f001 fb2a 	bl	800487c <RCCEx_PLL2_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800322e:	e013      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003234:	3328      	adds	r3, #40	; 0x28
 8003236:	2100      	movs	r1, #0
 8003238:	4618      	mov	r0, r3
 800323a:	f001 fbd1 	bl	80049e0 <RCCEx_PLL3_Config>
 800323e:	4603      	mov	r3, r0
 8003240:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003244:	e008      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800324c:	e004      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800324e:	bf00      	nop
 8003250:	e002      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003252:	bf00      	nop
 8003254:	e000      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003256:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003258:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10d      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003264:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800326c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326e:	4a02      	ldr	r2, [pc, #8]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003270:	430b      	orrs	r3, r1
 8003272:	6513      	str	r3, [r2, #80]	; 0x50
 8003274:	e006      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003276:	bf00      	nop
 8003278:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003280:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003284:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003290:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003294:	2300      	movs	r3, #0
 8003296:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800329a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800329e:	460b      	mov	r3, r1
 80032a0:	4313      	orrs	r3, r2
 80032a2:	d03a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80032a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032aa:	2b30      	cmp	r3, #48	; 0x30
 80032ac:	d01f      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80032ae:	2b30      	cmp	r3, #48	; 0x30
 80032b0:	d819      	bhi.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	d00c      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80032b6:	2b20      	cmp	r3, #32
 80032b8:	d815      	bhi.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d019      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80032be:	2b10      	cmp	r3, #16
 80032c0:	d111      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032c2:	4bae      	ldr	r3, [pc, #696]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	4aad      	ldr	r2, [pc, #692]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80032ce:	e011      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032d4:	3308      	adds	r3, #8
 80032d6:	2102      	movs	r1, #2
 80032d8:	4618      	mov	r0, r3
 80032da:	f001 facf 	bl	800487c <RCCEx_PLL2_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80032e4:	e006      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032ec:	e002      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80032ee:	bf00      	nop
 80032f0:	e000      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80032f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80032fc:	4b9f      	ldr	r3, [pc, #636]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003300:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330a:	4a9c      	ldr	r2, [pc, #624]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800330c:	430b      	orrs	r3, r1
 800330e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003310:	e003      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003312:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003316:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800331a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003322:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003326:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800332a:	2300      	movs	r3, #0
 800332c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003330:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003334:	460b      	mov	r3, r1
 8003336:	4313      	orrs	r3, r2
 8003338:	d051      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800333a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800333e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003344:	d035      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800334a:	d82e      	bhi.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 800334c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003350:	d031      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003352:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003356:	d828      	bhi.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335c:	d01a      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800335e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003362:	d822      	bhi.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336c:	d007      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800336e:	e01c      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003370:	4b82      	ldr	r3, [pc, #520]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	4a81      	ldr	r2, [pc, #516]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800337a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800337c:	e01c      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800337e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003382:	3308      	adds	r3, #8
 8003384:	2100      	movs	r1, #0
 8003386:	4618      	mov	r0, r3
 8003388:	f001 fa78 	bl	800487c <RCCEx_PLL2_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003392:	e011      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003398:	3328      	adds	r3, #40	; 0x28
 800339a:	2100      	movs	r1, #0
 800339c:	4618      	mov	r0, r3
 800339e:	f001 fb1f 	bl	80049e0 <RCCEx_PLL3_Config>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033a8:	e006      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033b0:	e002      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80033b2:	bf00      	nop
 80033b4:	e000      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80033b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10a      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80033c0:	4b6e      	ldr	r3, [pc, #440]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80033c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ce:	4a6b      	ldr	r2, [pc, #428]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033d0:	430b      	orrs	r3, r1
 80033d2:	6513      	str	r3, [r2, #80]	; 0x50
 80033d4:	e003      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80033de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80033ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033ee:	2300      	movs	r3, #0
 80033f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80033f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80033f8:	460b      	mov	r3, r1
 80033fa:	4313      	orrs	r3, r2
 80033fc:	d053      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80033fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003408:	d033      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800340a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800340e:	d82c      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003410:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003414:	d02f      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003416:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800341a:	d826      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800341c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003420:	d02b      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003422:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003426:	d820      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800342c:	d012      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800342e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003432:	d81a      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d022      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343c:	d115      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800343e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003442:	3308      	adds	r3, #8
 8003444:	2101      	movs	r1, #1
 8003446:	4618      	mov	r0, r3
 8003448:	f001 fa18 	bl	800487c <RCCEx_PLL2_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003452:	e015      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003458:	3328      	adds	r3, #40	; 0x28
 800345a:	2101      	movs	r1, #1
 800345c:	4618      	mov	r0, r3
 800345e:	f001 fabf 	bl	80049e0 <RCCEx_PLL3_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003468:	e00a      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003470:	e006      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003472:	bf00      	nop
 8003474:	e004      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003476:	bf00      	nop
 8003478:	e002      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800347e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003480:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10a      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003488:	4b3c      	ldr	r3, [pc, #240]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800348a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003496:	4a39      	ldr	r2, [pc, #228]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003498:	430b      	orrs	r3, r1
 800349a:	6513      	str	r3, [r2, #80]	; 0x50
 800349c:	e003      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80034a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ae:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80034b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034b6:	2300      	movs	r3, #0
 80034b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034bc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4313      	orrs	r3, r2
 80034c4:	d060      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80034c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034ce:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80034d2:	d039      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80034d4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80034d8:	d832      	bhi.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80034da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034de:	d035      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80034e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034e4:	d82c      	bhi.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ea:	d031      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80034ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f0:	d826      	bhi.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80034f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034f6:	d02d      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80034f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034fc:	d820      	bhi.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80034fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003502:	d012      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003508:	d81a      	bhi.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d024      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800350e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003512:	d115      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003518:	3308      	adds	r3, #8
 800351a:	2101      	movs	r1, #1
 800351c:	4618      	mov	r0, r3
 800351e:	f001 f9ad 	bl	800487c <RCCEx_PLL2_Config>
 8003522:	4603      	mov	r3, r0
 8003524:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003528:	e017      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800352a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800352e:	3328      	adds	r3, #40	; 0x28
 8003530:	2101      	movs	r1, #1
 8003532:	4618      	mov	r0, r3
 8003534:	f001 fa54 	bl	80049e0 <RCCEx_PLL3_Config>
 8003538:	4603      	mov	r3, r0
 800353a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800353e:	e00c      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003546:	e008      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003548:	bf00      	nop
 800354a:	e006      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800354c:	bf00      	nop
 800354e:	e004      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003550:	bf00      	nop
 8003552:	e002      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003554:	bf00      	nop
 8003556:	e000      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800355a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10e      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003566:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800356a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800356e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003572:	4a02      	ldr	r2, [pc, #8]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003574:	430b      	orrs	r3, r1
 8003576:	6593      	str	r3, [r2, #88]	; 0x58
 8003578:	e006      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800357a:	bf00      	nop
 800357c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003580:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003584:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003590:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003598:	2300      	movs	r3, #0
 800359a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800359e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035a2:	460b      	mov	r3, r1
 80035a4:	4313      	orrs	r3, r2
 80035a6:	d037      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80035a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035b2:	d00e      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80035b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035b8:	d816      	bhi.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d018      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80035be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035c2:	d111      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c4:	4bc4      	ldr	r3, [pc, #784]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	4ac3      	ldr	r2, [pc, #780]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80035d0:	e00f      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035d6:	3308      	adds	r3, #8
 80035d8:	2101      	movs	r1, #1
 80035da:	4618      	mov	r0, r3
 80035dc:	f001 f94e 	bl	800487c <RCCEx_PLL2_Config>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80035e6:	e004      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035ee:	e000      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80035f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10a      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035fa:	4bb7      	ldr	r3, [pc, #732]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003608:	4ab3      	ldr	r2, [pc, #716]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800360a:	430b      	orrs	r3, r1
 800360c:	6513      	str	r3, [r2, #80]	; 0x50
 800360e:	e003      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003610:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003614:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003624:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003628:	2300      	movs	r3, #0
 800362a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800362e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003632:	460b      	mov	r3, r1
 8003634:	4313      	orrs	r3, r2
 8003636:	d039      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800363c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363e:	2b03      	cmp	r3, #3
 8003640:	d81c      	bhi.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003642:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003648:	08003685 	.word	0x08003685
 800364c:	08003659 	.word	0x08003659
 8003650:	08003667 	.word	0x08003667
 8003654:	08003685 	.word	0x08003685
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003658:	4b9f      	ldr	r3, [pc, #636]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	4a9e      	ldr	r2, [pc, #632]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800365e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003662:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003664:	e00f      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800366a:	3308      	adds	r3, #8
 800366c:	2102      	movs	r1, #2
 800366e:	4618      	mov	r0, r3
 8003670:	f001 f904 	bl	800487c <RCCEx_PLL2_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800367a:	e004      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003682:	e000      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003686:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10a      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800368e:	4b92      	ldr	r3, [pc, #584]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003692:	f023 0103 	bic.w	r1, r3, #3
 8003696:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800369a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369c:	4a8e      	ldr	r2, [pc, #568]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800369e:	430b      	orrs	r3, r1
 80036a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036a2:	e003      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80036b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036bc:	2300      	movs	r3, #0
 80036be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80036c6:	460b      	mov	r3, r1
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f000 8099 	beq.w	8003800 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036ce:	4b83      	ldr	r3, [pc, #524]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a82      	ldr	r2, [pc, #520]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036da:	f7fd fbf1 	bl	8000ec0 <HAL_GetTick>
 80036de:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036e2:	e00b      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e4:	f7fd fbec 	bl	8000ec0 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b64      	cmp	r3, #100	; 0x64
 80036f2:	d903      	bls.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036fa:	e005      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036fc:	4b77      	ldr	r3, [pc, #476]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0ed      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003708:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800370c:	2b00      	cmp	r3, #0
 800370e:	d173      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003710:	4b71      	ldr	r3, [pc, #452]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003712:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003718:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800371c:	4053      	eors	r3, r2
 800371e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003722:	2b00      	cmp	r3, #0
 8003724:	d015      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003726:	4b6c      	ldr	r3, [pc, #432]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003732:	4b69      	ldr	r3, [pc, #420]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	4a68      	ldr	r2, [pc, #416]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800373e:	4b66      	ldr	r3, [pc, #408]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003742:	4a65      	ldr	r2, [pc, #404]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003748:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800374a:	4a63      	ldr	r2, [pc, #396]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003756:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800375a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375e:	d118      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fd fbae 	bl	8000ec0 <HAL_GetTick>
 8003764:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003768:	e00d      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376a:	f7fd fba9 	bl	8000ec0 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003774:	1ad2      	subs	r2, r2, r3
 8003776:	f241 3388 	movw	r3, #5000	; 0x1388
 800377a:	429a      	cmp	r2, r3
 800377c:	d903      	bls.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003784:	e005      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003786:	4b54      	ldr	r3, [pc, #336]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0eb      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003792:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003796:	2b00      	cmp	r3, #0
 8003798:	d129      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800379a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800379e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037aa:	d10e      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x846>
 80037ac:	4b4a      	ldr	r3, [pc, #296]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80037b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037bc:	091a      	lsrs	r2, r3, #4
 80037be:	4b48      	ldr	r3, [pc, #288]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	4a45      	ldr	r2, [pc, #276]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6113      	str	r3, [r2, #16]
 80037c8:	e005      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80037ca:	4b43      	ldr	r3, [pc, #268]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	4a42      	ldr	r2, [pc, #264]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80037d4:	6113      	str	r3, [r2, #16]
 80037d6:	4b40      	ldr	r3, [pc, #256]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80037da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e6:	4a3c      	ldr	r2, [pc, #240]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037e8:	430b      	orrs	r3, r1
 80037ea:	6713      	str	r3, [r2, #112]	; 0x70
 80037ec:	e008      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80037f6:	e003      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003808:	f002 0301 	and.w	r3, r2, #1
 800380c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003810:	2300      	movs	r3, #0
 8003812:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003816:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800381a:	460b      	mov	r3, r1
 800381c:	4313      	orrs	r3, r2
 800381e:	f000 8090 	beq.w	8003942 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382a:	2b28      	cmp	r3, #40	; 0x28
 800382c:	d870      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800382e:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003834:	08003919 	.word	0x08003919
 8003838:	08003911 	.word	0x08003911
 800383c:	08003911 	.word	0x08003911
 8003840:	08003911 	.word	0x08003911
 8003844:	08003911 	.word	0x08003911
 8003848:	08003911 	.word	0x08003911
 800384c:	08003911 	.word	0x08003911
 8003850:	08003911 	.word	0x08003911
 8003854:	080038e5 	.word	0x080038e5
 8003858:	08003911 	.word	0x08003911
 800385c:	08003911 	.word	0x08003911
 8003860:	08003911 	.word	0x08003911
 8003864:	08003911 	.word	0x08003911
 8003868:	08003911 	.word	0x08003911
 800386c:	08003911 	.word	0x08003911
 8003870:	08003911 	.word	0x08003911
 8003874:	080038fb 	.word	0x080038fb
 8003878:	08003911 	.word	0x08003911
 800387c:	08003911 	.word	0x08003911
 8003880:	08003911 	.word	0x08003911
 8003884:	08003911 	.word	0x08003911
 8003888:	08003911 	.word	0x08003911
 800388c:	08003911 	.word	0x08003911
 8003890:	08003911 	.word	0x08003911
 8003894:	08003919 	.word	0x08003919
 8003898:	08003911 	.word	0x08003911
 800389c:	08003911 	.word	0x08003911
 80038a0:	08003911 	.word	0x08003911
 80038a4:	08003911 	.word	0x08003911
 80038a8:	08003911 	.word	0x08003911
 80038ac:	08003911 	.word	0x08003911
 80038b0:	08003911 	.word	0x08003911
 80038b4:	08003919 	.word	0x08003919
 80038b8:	08003911 	.word	0x08003911
 80038bc:	08003911 	.word	0x08003911
 80038c0:	08003911 	.word	0x08003911
 80038c4:	08003911 	.word	0x08003911
 80038c8:	08003911 	.word	0x08003911
 80038cc:	08003911 	.word	0x08003911
 80038d0:	08003911 	.word	0x08003911
 80038d4:	08003919 	.word	0x08003919
 80038d8:	58024400 	.word	0x58024400
 80038dc:	58024800 	.word	0x58024800
 80038e0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e8:	3308      	adds	r3, #8
 80038ea:	2101      	movs	r1, #1
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 ffc5 	bl	800487c <RCCEx_PLL2_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80038f8:	e00f      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038fe:	3328      	adds	r3, #40	; 0x28
 8003900:	2101      	movs	r1, #1
 8003902:	4618      	mov	r0, r3
 8003904:	f001 f86c 	bl	80049e0 <RCCEx_PLL3_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800390e:	e004      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003916:	e000      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800391a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10b      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003922:	4bc0      	ldr	r3, [pc, #768]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003926:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800392a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800392e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003932:	4abc      	ldr	r2, [pc, #752]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003934:	430b      	orrs	r3, r1
 8003936:	6553      	str	r3, [r2, #84]	; 0x54
 8003938:	e003      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800393e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	f002 0302 	and.w	r3, r2, #2
 800394e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003952:	2300      	movs	r3, #0
 8003954:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003958:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800395c:	460b      	mov	r3, r1
 800395e:	4313      	orrs	r3, r2
 8003960:	d043      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800396a:	2b05      	cmp	r3, #5
 800396c:	d824      	bhi.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800396e:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003974:	080039c1 	.word	0x080039c1
 8003978:	0800398d 	.word	0x0800398d
 800397c:	080039a3 	.word	0x080039a3
 8003980:	080039c1 	.word	0x080039c1
 8003984:	080039c1 	.word	0x080039c1
 8003988:	080039c1 	.word	0x080039c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800398c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003990:	3308      	adds	r3, #8
 8003992:	2101      	movs	r1, #1
 8003994:	4618      	mov	r0, r3
 8003996:	f000 ff71 	bl	800487c <RCCEx_PLL2_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80039a0:	e00f      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039a6:	3328      	adds	r3, #40	; 0x28
 80039a8:	2101      	movs	r1, #1
 80039aa:	4618      	mov	r0, r3
 80039ac:	f001 f818 	bl	80049e0 <RCCEx_PLL3_Config>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80039b6:	e004      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80039be:	e000      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80039c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10b      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80039ca:	4b96      	ldr	r3, [pc, #600]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	f023 0107 	bic.w	r1, r3, #7
 80039d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039da:	4a92      	ldr	r2, [pc, #584]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039dc:	430b      	orrs	r3, r1
 80039de:	6553      	str	r3, [r2, #84]	; 0x54
 80039e0:	e003      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	f002 0304 	and.w	r3, r2, #4
 80039f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a00:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4313      	orrs	r3, r2
 8003a08:	d043      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a12:	2b05      	cmp	r3, #5
 8003a14:	d824      	bhi.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003a16:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1c:	08003a69 	.word	0x08003a69
 8003a20:	08003a35 	.word	0x08003a35
 8003a24:	08003a4b 	.word	0x08003a4b
 8003a28:	08003a69 	.word	0x08003a69
 8003a2c:	08003a69 	.word	0x08003a69
 8003a30:	08003a69 	.word	0x08003a69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a38:	3308      	adds	r3, #8
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 ff1d 	bl	800487c <RCCEx_PLL2_Config>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a48:	e00f      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a4e:	3328      	adds	r3, #40	; 0x28
 8003a50:	2101      	movs	r1, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 ffc4 	bl	80049e0 <RCCEx_PLL3_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a5e:	e004      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a66:	e000      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10b      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a72:	4b6c      	ldr	r3, [pc, #432]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a76:	f023 0107 	bic.w	r1, r3, #7
 8003a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a82:	4a68      	ldr	r2, [pc, #416]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6593      	str	r3, [r2, #88]	; 0x58
 8003a88:	e003      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a8e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9a:	f002 0320 	and.w	r3, r2, #32
 8003a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003aa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003aac:	460b      	mov	r3, r1
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	d055      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003abe:	d033      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac4:	d82c      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aca:	d02f      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad0:	d826      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ad2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ad6:	d02b      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003ad8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003adc:	d820      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae2:	d012      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae8:	d81a      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d022      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003af2:	d115      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af8:	3308      	adds	r3, #8
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 febd 	bl	800487c <RCCEx_PLL2_Config>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b08:	e015      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b0e:	3328      	adds	r3, #40	; 0x28
 8003b10:	2102      	movs	r1, #2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 ff64 	bl	80049e0 <RCCEx_PLL3_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b1e:	e00a      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b26:	e006      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003b28:	bf00      	nop
 8003b2a:	e004      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003b2c:	bf00      	nop
 8003b2e:	e002      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003b30:	bf00      	nop
 8003b32:	e000      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10b      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b3e:	4b39      	ldr	r3, [pc, #228]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b42:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b4e:	4a35      	ldr	r2, [pc, #212]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b50:	430b      	orrs	r3, r1
 8003b52:	6553      	str	r3, [r2, #84]	; 0x54
 8003b54:	e003      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b5a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b66:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	d058      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b86:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b8a:	d033      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003b8c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b90:	d82c      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b96:	d02f      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9c:	d826      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ba2:	d02b      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003ba4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ba8:	d820      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bae:	d012      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb4:	d81a      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d022      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbe:	d115      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fe57 	bl	800487c <RCCEx_PLL2_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003bd4:	e015      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bda:	3328      	adds	r3, #40	; 0x28
 8003bdc:	2102      	movs	r1, #2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fefe 	bl	80049e0 <RCCEx_PLL3_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003bea:	e00a      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003bf2:	e006      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003bf4:	bf00      	nop
 8003bf6:	e004      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003bf8:	bf00      	nop
 8003bfa:	e002      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003bfc:	bf00      	nop
 8003bfe:	e000      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10e      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c0a:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c1a:	4a02      	ldr	r2, [pc, #8]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c20:	e006      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003c22:	bf00      	nop
 8003c24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c38:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c40:	2300      	movs	r3, #0
 8003c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c46:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	d055      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c58:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c5c:	d033      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003c5e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c62:	d82c      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c68:	d02f      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c6e:	d826      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003c70:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c74:	d02b      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003c76:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c7a:	d820      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c80:	d012      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003c82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c86:	d81a      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d022      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c90:	d115      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c96:	3308      	adds	r3, #8
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fdee 	bl	800487c <RCCEx_PLL2_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ca6:	e015      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cac:	3328      	adds	r3, #40	; 0x28
 8003cae:	2102      	movs	r1, #2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fe95 	bl	80049e0 <RCCEx_PLL3_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003cbc:	e00a      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cc4:	e006      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003cc6:	bf00      	nop
 8003cc8:	e004      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003cca:	bf00      	nop
 8003ccc:	e002      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003cce:	bf00      	nop
 8003cd0:	e000      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10b      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003cdc:	4ba1      	ldr	r3, [pc, #644]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003cec:	4a9d      	ldr	r2, [pc, #628]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8003cf2:	e003      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cf8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	f002 0308 	and.w	r3, r2, #8
 8003d08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003d16:	460b      	mov	r3, r1
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	d01e      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d2e:	3328      	adds	r3, #40	; 0x28
 8003d30:	2102      	movs	r1, #2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fe54 	bl	80049e0 <RCCEx_PLL3_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003d44:	4b87      	ldr	r3, [pc, #540]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d54:	4a83      	ldr	r2, [pc, #524]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d56:	430b      	orrs	r3, r1
 8003d58:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d62:	f002 0310 	and.w	r3, r2, #16
 8003d66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003d70:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003d74:	460b      	mov	r3, r1
 8003d76:	4313      	orrs	r3, r2
 8003d78:	d01e      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d86:	d10c      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d8c:	3328      	adds	r3, #40	; 0x28
 8003d8e:	2102      	movs	r1, #2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fe25 	bl	80049e0 <RCCEx_PLL3_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003da2:	4b70      	ldr	r3, [pc, #448]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003db2:	4a6c      	ldr	r2, [pc, #432]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003db4:	430b      	orrs	r3, r1
 8003db6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003dc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003dce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	d03e      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ddc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003de4:	d022      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dea:	d81b      	bhi.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df4:	d00b      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003df6:	e015      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fd3b 	bl	800487c <RCCEx_PLL2_Config>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e0c:	e00f      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e12:	3328      	adds	r3, #40	; 0x28
 8003e14:	2102      	movs	r1, #2
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fde2 	bl	80049e0 <RCCEx_PLL3_Config>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e22:	e004      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e2a:	e000      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e36:	4b4b      	ldr	r3, [pc, #300]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e46:	4a47      	ldr	r2, [pc, #284]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e4c:	e003      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e52:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003e62:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e64:	2300      	movs	r3, #0
 8003e66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e68:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	d03b      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e7e:	d01f      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003e80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e84:	d818      	bhi.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e8a:	d003      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003e8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e90:	d007      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003e92:	e011      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e94:	4b33      	ldr	r3, [pc, #204]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	4a32      	ldr	r2, [pc, #200]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ea0:	e00f      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea6:	3328      	adds	r3, #40	; 0x28
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fd98 	bl	80049e0 <RCCEx_PLL3_Config>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003eb6:	e004      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10b      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003eca:	4b26      	ldr	r3, [pc, #152]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eda:	4a22      	ldr	r2, [pc, #136]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003edc:	430b      	orrs	r3, r1
 8003ede:	6553      	str	r3, [r2, #84]	; 0x54
 8003ee0:	e003      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ee6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003ef6:	673b      	str	r3, [r7, #112]	; 0x70
 8003ef8:	2300      	movs	r3, #0
 8003efa:	677b      	str	r3, [r7, #116]	; 0x74
 8003efc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003f00:	460b      	mov	r3, r1
 8003f02:	4313      	orrs	r3, r2
 8003f04:	d034      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f14:	d007      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003f16:	e011      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f18:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	4a11      	ldr	r2, [pc, #68]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f24:	e00e      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f2a:	3308      	adds	r3, #8
 8003f2c:	2102      	movs	r1, #2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fca4 	bl	800487c <RCCEx_PLL2_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f3a:	e003      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10d      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f4c:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5a:	4a02      	ldr	r2, [pc, #8]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f60:	e006      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003f62:	bf00      	nop
 8003f64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f78:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003f7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f7e:	2300      	movs	r3, #0
 8003f80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f82:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003f86:	460b      	mov	r3, r1
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	d00c      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f90:	3328      	adds	r3, #40	; 0x28
 8003f92:	2102      	movs	r1, #2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fd23 	bl	80049e0 <RCCEx_PLL3_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003fb2:	663b      	str	r3, [r7, #96]	; 0x60
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	667b      	str	r3, [r7, #100]	; 0x64
 8003fb8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	d038      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fce:	d018      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fd4:	d811      	bhi.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fda:	d014      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fe0:	d80b      	bhi.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d011      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fea:	d106      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fec:	4bc3      	ldr	r3, [pc, #780]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	4ac2      	ldr	r2, [pc, #776]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003ff8:	e008      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004000:	e004      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004002:	bf00      	nop
 8004004:	e002      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004006:	bf00      	nop
 8004008:	e000      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800400a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800400c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10b      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004014:	4bb9      	ldr	r3, [pc, #740]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004018:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800401c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004024:	4ab5      	ldr	r2, [pc, #724]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004026:	430b      	orrs	r3, r1
 8004028:	6553      	str	r3, [r2, #84]	; 0x54
 800402a:	e003      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004030:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004040:	65bb      	str	r3, [r7, #88]	; 0x58
 8004042:	2300      	movs	r3, #0
 8004044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004046:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800404a:	460b      	mov	r3, r1
 800404c:	4313      	orrs	r3, r2
 800404e:	d009      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004050:	4baa      	ldr	r3, [pc, #680]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004054:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800405c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800405e:	4aa7      	ldr	r2, [pc, #668]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004060:	430b      	orrs	r3, r1
 8004062:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004064:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004070:	653b      	str	r3, [r7, #80]	; 0x50
 8004072:	2300      	movs	r3, #0
 8004074:	657b      	str	r3, [r7, #84]	; 0x54
 8004076:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800407a:	460b      	mov	r3, r1
 800407c:	4313      	orrs	r3, r2
 800407e:	d009      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004080:	4b9e      	ldr	r3, [pc, #632]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004084:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004088:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800408c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408e:	4a9b      	ldr	r2, [pc, #620]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004090:	430b      	orrs	r3, r1
 8004092:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80040a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80040a2:	2300      	movs	r3, #0
 80040a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80040aa:	460b      	mov	r3, r1
 80040ac:	4313      	orrs	r3, r2
 80040ae:	d009      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80040b0:	4b92      	ldr	r3, [pc, #584]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80040b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040be:	4a8f      	ldr	r2, [pc, #572]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80040c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040cc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80040d0:	643b      	str	r3, [r7, #64]	; 0x40
 80040d2:	2300      	movs	r3, #0
 80040d4:	647b      	str	r3, [r7, #68]	; 0x44
 80040d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80040da:	460b      	mov	r3, r1
 80040dc:	4313      	orrs	r3, r2
 80040de:	d00e      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040e0:	4b86      	ldr	r3, [pc, #536]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	4a85      	ldr	r2, [pc, #532]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040ea:	6113      	str	r3, [r2, #16]
 80040ec:	4b83      	ldr	r3, [pc, #524]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040ee:	6919      	ldr	r1, [r3, #16]
 80040f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80040f8:	4a80      	ldr	r2, [pc, #512]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040fa:	430b      	orrs	r3, r1
 80040fc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80040fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004106:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800410a:	63bb      	str	r3, [r7, #56]	; 0x38
 800410c:	2300      	movs	r3, #0
 800410e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004110:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004114:	460b      	mov	r3, r1
 8004116:	4313      	orrs	r3, r2
 8004118:	d009      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800411a:	4b78      	ldr	r3, [pc, #480]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800411c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	4a74      	ldr	r2, [pc, #464]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800412a:	430b      	orrs	r3, r1
 800412c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800412e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004136:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800413a:	633b      	str	r3, [r7, #48]	; 0x30
 800413c:	2300      	movs	r3, #0
 800413e:	637b      	str	r3, [r7, #52]	; 0x34
 8004140:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004144:	460b      	mov	r3, r1
 8004146:	4313      	orrs	r3, r2
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800414a:	4b6c      	ldr	r3, [pc, #432]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800415a:	4a68      	ldr	r2, [pc, #416]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800415c:	430b      	orrs	r3, r1
 800415e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004160:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004168:	2100      	movs	r1, #0
 800416a:	62b9      	str	r1, [r7, #40]	; 0x28
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004172:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004176:	460b      	mov	r3, r1
 8004178:	4313      	orrs	r3, r2
 800417a:	d011      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800417c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004180:	3308      	adds	r3, #8
 8004182:	2100      	movs	r1, #0
 8004184:	4618      	mov	r0, r3
 8004186:	f000 fb79 	bl	800487c <RCCEx_PLL2_Config>
 800418a:	4603      	mov	r3, r0
 800418c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004190:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004198:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800419c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80041a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a8:	2100      	movs	r1, #0
 80041aa:	6239      	str	r1, [r7, #32]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
 80041b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80041b6:	460b      	mov	r3, r1
 80041b8:	4313      	orrs	r3, r2
 80041ba:	d011      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041c0:	3308      	adds	r3, #8
 80041c2:	2101      	movs	r1, #1
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 fb59 	bl	800487c <RCCEx_PLL2_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80041d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80041e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	2100      	movs	r1, #0
 80041ea:	61b9      	str	r1, [r7, #24]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80041f6:	460b      	mov	r3, r1
 80041f8:	4313      	orrs	r3, r2
 80041fa:	d011      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004200:	3308      	adds	r3, #8
 8004202:	2102      	movs	r1, #2
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fb39 	bl	800487c <RCCEx_PLL2_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004210:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004218:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800421c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	2100      	movs	r1, #0
 800422a:	6139      	str	r1, [r7, #16]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004236:	460b      	mov	r3, r1
 8004238:	4313      	orrs	r3, r2
 800423a:	d011      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800423c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004240:	3328      	adds	r3, #40	; 0x28
 8004242:	2100      	movs	r1, #0
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fbcb 	bl	80049e0 <RCCEx_PLL3_Config>
 800424a:	4603      	mov	r3, r0
 800424c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004250:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004258:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800425c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	2100      	movs	r1, #0
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004276:	460b      	mov	r3, r1
 8004278:	4313      	orrs	r3, r2
 800427a:	d011      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800427c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004280:	3328      	adds	r3, #40	; 0x28
 8004282:	2101      	movs	r1, #1
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fbab 	bl	80049e0 <RCCEx_PLL3_Config>
 800428a:	4603      	mov	r3, r0
 800428c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004290:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004298:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800429c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80042a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a8:	2100      	movs	r1, #0
 80042aa:	6039      	str	r1, [r7, #0]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	607b      	str	r3, [r7, #4]
 80042b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80042b6:	460b      	mov	r3, r1
 80042b8:	4313      	orrs	r3, r2
 80042ba:	d011      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042c0:	3328      	adds	r3, #40	; 0x28
 80042c2:	2102      	movs	r1, #2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fb8b 	bl	80049e0 <RCCEx_PLL3_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80042d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80042e0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	e000      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80042f4:	46bd      	mov	sp, r7
 80042f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042fa:	bf00      	nop
 80042fc:	58024400 	.word	0x58024400

08004300 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004304:	f7fe fde2 	bl	8002ecc <HAL_RCC_GetHCLKFreq>
 8004308:	4602      	mov	r2, r0
 800430a:	4b06      	ldr	r3, [pc, #24]	; (8004324 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	091b      	lsrs	r3, r3, #4
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	4904      	ldr	r1, [pc, #16]	; (8004328 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004316:	5ccb      	ldrb	r3, [r1, r3]
 8004318:	f003 031f 	and.w	r3, r3, #31
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004320:	4618      	mov	r0, r3
 8004322:	bd80      	pop	{r7, pc}
 8004324:	58024400 	.word	0x58024400
 8004328:	080097a0 	.word	0x080097a0

0800432c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800432c:	b480      	push	{r7}
 800432e:	b089      	sub	sp, #36	; 0x24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004334:	4ba1      	ldr	r3, [pc, #644]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	f003 0303 	and.w	r3, r3, #3
 800433c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800433e:	4b9f      	ldr	r3, [pc, #636]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	0b1b      	lsrs	r3, r3, #12
 8004344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004348:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800434a:	4b9c      	ldr	r3, [pc, #624]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434e:	091b      	lsrs	r3, r3, #4
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004356:	4b99      	ldr	r3, [pc, #612]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	08db      	lsrs	r3, r3, #3
 800435c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	fb02 f303 	mul.w	r3, r2, r3
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 8111 	beq.w	800459c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	2b02      	cmp	r3, #2
 800437e:	f000 8083 	beq.w	8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b02      	cmp	r3, #2
 8004386:	f200 80a1 	bhi.w	80044cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d056      	beq.n	8004444 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004396:	e099      	b.n	80044cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004398:	4b88      	ldr	r3, [pc, #544]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d02d      	beq.n	8004400 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043a4:	4b85      	ldr	r3, [pc, #532]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	08db      	lsrs	r3, r3, #3
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	4a84      	ldr	r2, [pc, #528]	; (80045c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80043b0:	fa22 f303 	lsr.w	r3, r2, r3
 80043b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	ee07 3a90 	vmov	s15, r3
 80043bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ce:	4b7b      	ldr	r3, [pc, #492]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043de:	ed97 6a03 	vldr	s12, [r7, #12]
 80043e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80043fe:	e087      	b.n	8004510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800440e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004412:	4b6a      	ldr	r3, [pc, #424]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004422:	ed97 6a03 	vldr	s12, [r7, #12]
 8004426:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800442a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800442e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800443a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004442:	e065      	b.n	8004510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004456:	4b59      	ldr	r3, [pc, #356]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004466:	ed97 6a03 	vldr	s12, [r7, #12]
 800446a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800446e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800447a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800447e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004486:	e043      	b.n	8004510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	ee07 3a90 	vmov	s15, r3
 800448e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004492:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800449a:	4b48      	ldr	r3, [pc, #288]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044ca:	e021      	b.n	8004510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	ee07 3a90 	vmov	s15, r3
 80044d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044de:	4b37      	ldr	r3, [pc, #220]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80044f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800450a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800450e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004510:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	0a5b      	lsrs	r3, r3, #9
 8004516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004526:	ee37 7a87 	vadd.f32	s14, s15, s14
 800452a:	edd7 6a07 	vldr	s13, [r7, #28]
 800452e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004536:	ee17 2a90 	vmov	r2, s15
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800453e:	4b1f      	ldr	r3, [pc, #124]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	0c1b      	lsrs	r3, r3, #16
 8004544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004548:	ee07 3a90 	vmov	s15, r3
 800454c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004550:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004554:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004558:	edd7 6a07 	vldr	s13, [r7, #28]
 800455c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004564:	ee17 2a90 	vmov	r2, s15
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800456c:	4b13      	ldr	r3, [pc, #76]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	0e1b      	lsrs	r3, r3, #24
 8004572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004582:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004586:	edd7 6a07 	vldr	s13, [r7, #28]
 800458a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800458e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004592:	ee17 2a90 	vmov	r2, s15
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800459a:	e008      	b.n	80045ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	609a      	str	r2, [r3, #8]
}
 80045ae:	bf00      	nop
 80045b0:	3724      	adds	r7, #36	; 0x24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	58024400 	.word	0x58024400
 80045c0:	03d09000 	.word	0x03d09000
 80045c4:	46000000 	.word	0x46000000
 80045c8:	4c742400 	.word	0x4c742400
 80045cc:	4a742400 	.word	0x4a742400
 80045d0:	4af42400 	.word	0x4af42400

080045d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b089      	sub	sp, #36	; 0x24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045dc:	4ba1      	ldr	r3, [pc, #644]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80045e6:	4b9f      	ldr	r3, [pc, #636]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	0d1b      	lsrs	r3, r3, #20
 80045ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80045f2:	4b9c      	ldr	r3, [pc, #624]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80045fe:	4b99      	ldr	r3, [pc, #612]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	08db      	lsrs	r3, r3, #3
 8004604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8111 	beq.w	8004844 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	2b02      	cmp	r3, #2
 8004626:	f000 8083 	beq.w	8004730 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b02      	cmp	r3, #2
 800462e:	f200 80a1 	bhi.w	8004774 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d056      	beq.n	80046ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800463e:	e099      	b.n	8004774 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004640:	4b88      	ldr	r3, [pc, #544]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d02d      	beq.n	80046a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800464c:	4b85      	ldr	r3, [pc, #532]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	08db      	lsrs	r3, r3, #3
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	4a84      	ldr	r2, [pc, #528]	; (8004868 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
 800465c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	ee07 3a90 	vmov	s15, r3
 8004664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004676:	4b7b      	ldr	r3, [pc, #492]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004686:	ed97 6a03 	vldr	s12, [r7, #12]
 800468a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800486c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800468e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800469a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800469e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80046a6:	e087      	b.n	80047b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004870 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80046b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ba:	4b6a      	ldr	r3, [pc, #424]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800486c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ea:	e065      	b.n	80047b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80046fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046fe:	4b59      	ldr	r3, [pc, #356]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004712:	eddf 5a56 	vldr	s11, [pc, #344]	; 800486c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800471a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800471e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800472e:	e043      	b.n	80047b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800473e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004742:	4b48      	ldr	r3, [pc, #288]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474a:	ee07 3a90 	vmov	s15, r3
 800474e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004752:	ed97 6a03 	vldr	s12, [r7, #12]
 8004756:	eddf 5a45 	vldr	s11, [pc, #276]	; 800486c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800475a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800475e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800476a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800476e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004772:	e021      	b.n	80047b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004786:	4b37      	ldr	r3, [pc, #220]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004796:	ed97 6a03 	vldr	s12, [r7, #12]
 800479a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800486c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800479e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80047b8:	4b2a      	ldr	r3, [pc, #168]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	0a5b      	lsrs	r3, r3, #9
 80047be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80047d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047de:	ee17 2a90 	vmov	r2, s15
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80047e6:	4b1f      	ldr	r3, [pc, #124]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	0c1b      	lsrs	r3, r3, #16
 80047ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f0:	ee07 3a90 	vmov	s15, r3
 80047f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004800:	edd7 6a07 	vldr	s13, [r7, #28]
 8004804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800480c:	ee17 2a90 	vmov	r2, s15
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004814:	4b13      	ldr	r3, [pc, #76]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	0e1b      	lsrs	r3, r3, #24
 800481a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800482a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800482e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800483a:	ee17 2a90 	vmov	r2, s15
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004842:	e008      	b.n	8004856 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	609a      	str	r2, [r3, #8]
}
 8004856:	bf00      	nop
 8004858:	3724      	adds	r7, #36	; 0x24
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	58024400 	.word	0x58024400
 8004868:	03d09000 	.word	0x03d09000
 800486c:	46000000 	.word	0x46000000
 8004870:	4c742400 	.word	0x4c742400
 8004874:	4a742400 	.word	0x4a742400
 8004878:	4af42400 	.word	0x4af42400

0800487c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800488a:	4b53      	ldr	r3, [pc, #332]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b03      	cmp	r3, #3
 8004894:	d101      	bne.n	800489a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e099      	b.n	80049ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800489a:	4b4f      	ldr	r3, [pc, #316]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a4e      	ldr	r2, [pc, #312]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 80048a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a6:	f7fc fb0b 	bl	8000ec0 <HAL_GetTick>
 80048aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048ac:	e008      	b.n	80048c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80048ae:	f7fc fb07 	bl	8000ec0 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e086      	b.n	80049ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048c0:	4b45      	ldr	r3, [pc, #276]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f0      	bne.n	80048ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80048cc:	4b42      	ldr	r3, [pc, #264]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	031b      	lsls	r3, r3, #12
 80048da:	493f      	ldr	r1, [pc, #252]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	628b      	str	r3, [r1, #40]	; 0x28
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	025b      	lsls	r3, r3, #9
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	041b      	lsls	r3, r3, #16
 80048fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	3b01      	subs	r3, #1
 800490a:	061b      	lsls	r3, r3, #24
 800490c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004910:	4931      	ldr	r1, [pc, #196]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004912:	4313      	orrs	r3, r2
 8004914:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004916:	4b30      	ldr	r3, [pc, #192]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	492d      	ldr	r1, [pc, #180]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004924:	4313      	orrs	r3, r2
 8004926:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004928:	4b2b      	ldr	r3, [pc, #172]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	f023 0220 	bic.w	r2, r3, #32
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	4928      	ldr	r1, [pc, #160]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004936:	4313      	orrs	r3, r2
 8004938:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800493a:	4b27      	ldr	r3, [pc, #156]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	4a26      	ldr	r2, [pc, #152]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004940:	f023 0310 	bic.w	r3, r3, #16
 8004944:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004946:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800494a:	4b24      	ldr	r3, [pc, #144]	; (80049dc <RCCEx_PLL2_Config+0x160>)
 800494c:	4013      	ands	r3, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	69d2      	ldr	r2, [r2, #28]
 8004952:	00d2      	lsls	r2, r2, #3
 8004954:	4920      	ldr	r1, [pc, #128]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004956:	4313      	orrs	r3, r2
 8004958:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800495a:	4b1f      	ldr	r3, [pc, #124]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	4a1e      	ldr	r2, [pc, #120]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004960:	f043 0310 	orr.w	r3, r3, #16
 8004964:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800496c:	4b1a      	ldr	r3, [pc, #104]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	4a19      	ldr	r2, [pc, #100]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004972:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004976:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004978:	e00f      	b.n	800499a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d106      	bne.n	800498e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004980:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	4a14      	ldr	r2, [pc, #80]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800498a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800498c:	e005      	b.n	800499a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800498e:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	4a11      	ldr	r2, [pc, #68]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004994:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004998:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800499a:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a0e      	ldr	r2, [pc, #56]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 80049a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a6:	f7fc fa8b 	bl	8000ec0 <HAL_GetTick>
 80049aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049ac:	e008      	b.n	80049c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80049ae:	f7fc fa87 	bl	8000ec0 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e006      	b.n	80049ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	58024400 	.word	0x58024400
 80049dc:	ffff0007 	.word	0xffff0007

080049e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049ee:	4b53      	ldr	r3, [pc, #332]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d101      	bne.n	80049fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e099      	b.n	8004b32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80049fe:	4b4f      	ldr	r3, [pc, #316]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a4e      	ldr	r2, [pc, #312]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a0a:	f7fc fa59 	bl	8000ec0 <HAL_GetTick>
 8004a0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a10:	e008      	b.n	8004a24 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a12:	f7fc fa55 	bl	8000ec0 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e086      	b.n	8004b32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a24:	4b45      	ldr	r3, [pc, #276]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a30:	4b42      	ldr	r3, [pc, #264]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	051b      	lsls	r3, r3, #20
 8004a3e:	493f      	ldr	r1, [pc, #252]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	628b      	str	r3, [r1, #40]	; 0x28
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	025b      	lsls	r3, r3, #9
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	041b      	lsls	r3, r3, #16
 8004a62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	061b      	lsls	r3, r3, #24
 8004a70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a74:	4931      	ldr	r1, [pc, #196]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a7a:	4b30      	ldr	r3, [pc, #192]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	492d      	ldr	r1, [pc, #180]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a8c:	4b2b      	ldr	r3, [pc, #172]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	4928      	ldr	r1, [pc, #160]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a9e:	4b27      	ldr	r3, [pc, #156]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa2:	4a26      	ldr	r2, [pc, #152]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004aaa:	4b24      	ldr	r3, [pc, #144]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aae:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <RCCEx_PLL3_Config+0x160>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	69d2      	ldr	r2, [r2, #28]
 8004ab6:	00d2      	lsls	r2, r2, #3
 8004ab8:	4920      	ldr	r1, [pc, #128]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004abe:	4b1f      	ldr	r3, [pc, #124]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	4a1e      	ldr	r2, [pc, #120]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d106      	bne.n	8004ade <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ad0:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	4a19      	ldr	r2, [pc, #100]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004ad6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ada:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004adc:	e00f      	b.n	8004afe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d106      	bne.n	8004af2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ae4:	4b15      	ldr	r3, [pc, #84]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	4a14      	ldr	r2, [pc, #80]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004aea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004aee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004af0:	e005      	b.n	8004afe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004af2:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	4a11      	ldr	r2, [pc, #68]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004af8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004afc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004afe:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a0e      	ldr	r2, [pc, #56]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b0a:	f7fc f9d9 	bl	8000ec0 <HAL_GetTick>
 8004b0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b10:	e008      	b.n	8004b24 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b12:	f7fc f9d5 	bl	8000ec0 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e006      	b.n	8004b32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	58024400 	.word	0x58024400
 8004b40:	ffff0007 	.word	0xffff0007

08004b44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e042      	b.n	8004bdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7fb ffdb 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2224      	movs	r2, #36	; 0x24
 8004b72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fc48 	bl	800541c <UART_SetConfig>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e022      	b.n	8004bdc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f001 faa8 	bl	80060f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f001 fb2f 	bl	8006238 <UART_CheckIdleState>
 8004bda:	4603      	mov	r3, r0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08a      	sub	sp, #40	; 0x28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	d137      	bne.n	8004c6c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <HAL_UART_Receive_IT+0x24>
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e030      	b.n	8004c6e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a18      	ldr	r2, [pc, #96]	; (8004c78 <HAL_UART_Receive_IT+0x94>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d01f      	beq.n	8004c5c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d018      	beq.n	8004c5c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	e853 3f00 	ldrex	r3, [r3]
 8004c36:	613b      	str	r3, [r7, #16]
   return(result);
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	623b      	str	r3, [r7, #32]
 8004c4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4c:	69f9      	ldr	r1, [r7, #28]
 8004c4e:	6a3a      	ldr	r2, [r7, #32]
 8004c50:	e841 2300 	strex	r3, r2, [r1]
 8004c54:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e6      	bne.n	8004c2a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f001 fbfa 	bl	800645c <UART_Start_Receive_IT>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	e000      	b.n	8004c6e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c6c:	2302      	movs	r3, #2
  }
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3728      	adds	r7, #40	; 0x28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	58000c00 	.word	0x58000c00

08004c7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b0ba      	sub	sp, #232	; 0xe8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ca2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004ca6:	f640 030f 	movw	r3, #2063	; 0x80f
 8004caa:	4013      	ands	r3, r2
 8004cac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004cb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d11b      	bne.n	8004cf0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d015      	beq.n	8004cf0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d105      	bne.n	8004cdc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d009      	beq.n	8004cf0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 8377 	beq.w	80053d4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	4798      	blx	r3
      }
      return;
 8004cee:	e371      	b.n	80053d4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004cf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 8123 	beq.w	8004f40 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004cfa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004cfe:	4b8d      	ldr	r3, [pc, #564]	; (8004f34 <HAL_UART_IRQHandler+0x2b8>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004d06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004d0a:	4b8b      	ldr	r3, [pc, #556]	; (8004f38 <HAL_UART_IRQHandler+0x2bc>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 8116 	beq.w	8004f40 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d011      	beq.n	8004d44 <HAL_UART_IRQHandler+0xc8>
 8004d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00b      	beq.n	8004d44 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2201      	movs	r2, #1
 8004d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3a:	f043 0201 	orr.w	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d011      	beq.n	8004d74 <HAL_UART_IRQHandler+0xf8>
 8004d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00b      	beq.n	8004d74 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2202      	movs	r2, #2
 8004d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6a:	f043 0204 	orr.w	r2, r3, #4
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d011      	beq.n	8004da4 <HAL_UART_IRQHandler+0x128>
 8004d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00b      	beq.n	8004da4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2204      	movs	r2, #4
 8004d92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9a:	f043 0202 	orr.w	r2, r3, #2
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d017      	beq.n	8004de0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d105      	bne.n	8004dc8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004dbc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004dc0:	4b5c      	ldr	r3, [pc, #368]	; (8004f34 <HAL_UART_IRQHandler+0x2b8>)
 8004dc2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00b      	beq.n	8004de0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2208      	movs	r2, #8
 8004dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd6:	f043 0208 	orr.w	r2, r3, #8
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d012      	beq.n	8004e12 <HAL_UART_IRQHandler+0x196>
 8004dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00c      	beq.n	8004e12 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e08:	f043 0220 	orr.w	r2, r3, #32
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 82dd 	beq.w	80053d8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d013      	beq.n	8004e52 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d105      	bne.n	8004e42 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d007      	beq.n	8004e52 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	2b40      	cmp	r3, #64	; 0x40
 8004e68:	d005      	beq.n	8004e76 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d054      	beq.n	8004f20 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f001 fc12 	bl	80066a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e86:	2b40      	cmp	r3, #64	; 0x40
 8004e88:	d146      	bne.n	8004f18 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3308      	adds	r3, #8
 8004e90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3308      	adds	r3, #8
 8004eb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004eb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004eba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ec2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ece:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1d9      	bne.n	8004e8a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d017      	beq.n	8004f10 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ee6:	4a15      	ldr	r2, [pc, #84]	; (8004f3c <HAL_UART_IRQHandler+0x2c0>)
 8004ee8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fc fc1f 	bl	8001734 <HAL_DMA_Abort_IT>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d019      	beq.n	8004f30 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f0e:	e00f      	b.n	8004f30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7fb fb9d 	bl	8000650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f16:	e00b      	b.n	8004f30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7fb fb99 	bl	8000650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f1e:	e007      	b.n	8004f30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7fb fb95 	bl	8000650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004f2e:	e253      	b.n	80053d8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f30:	bf00      	nop
    return;
 8004f32:	e251      	b.n	80053d8 <HAL_UART_IRQHandler+0x75c>
 8004f34:	10000001 	.word	0x10000001
 8004f38:	04000120 	.word	0x04000120
 8004f3c:	0800676d 	.word	0x0800676d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	f040 81e7 	bne.w	8005318 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4e:	f003 0310 	and.w	r3, r3, #16
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 81e0 	beq.w	8005318 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 81d9 	beq.w	8005318 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2210      	movs	r2, #16
 8004f6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	f040 8151 	bne.w	8005220 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a96      	ldr	r2, [pc, #600]	; (80051e0 <HAL_UART_IRQHandler+0x564>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d068      	beq.n	800505e <HAL_UART_IRQHandler+0x3e2>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a93      	ldr	r2, [pc, #588]	; (80051e4 <HAL_UART_IRQHandler+0x568>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d061      	beq.n	800505e <HAL_UART_IRQHandler+0x3e2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a91      	ldr	r2, [pc, #580]	; (80051e8 <HAL_UART_IRQHandler+0x56c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d05a      	beq.n	800505e <HAL_UART_IRQHandler+0x3e2>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a8e      	ldr	r2, [pc, #568]	; (80051ec <HAL_UART_IRQHandler+0x570>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d053      	beq.n	800505e <HAL_UART_IRQHandler+0x3e2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a8c      	ldr	r2, [pc, #560]	; (80051f0 <HAL_UART_IRQHandler+0x574>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d04c      	beq.n	800505e <HAL_UART_IRQHandler+0x3e2>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a89      	ldr	r2, [pc, #548]	; (80051f4 <HAL_UART_IRQHandler+0x578>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d045      	beq.n	800505e <HAL_UART_IRQHandler+0x3e2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a87      	ldr	r2, [pc, #540]	; (80051f8 <HAL_UART_IRQHandler+0x57c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d03e      	beq.n	800505e <HAL_UART_IRQHandler+0x3e2>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a84      	ldr	r2, [pc, #528]	; (80051fc <HAL_UART_IRQHandler+0x580>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d037      	beq.n	800505e <HAL_UART_IRQHandler+0x3e2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a82      	ldr	r2, [pc, #520]	; (8005200 <HAL_UART_IRQHandler+0x584>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d030      	beq.n	800505e <HAL_UART_IRQHandler+0x3e2>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a7f      	ldr	r2, [pc, #508]	; (8005204 <HAL_UART_IRQHandler+0x588>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d029      	beq.n	800505e <HAL_UART_IRQHandler+0x3e2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a7d      	ldr	r2, [pc, #500]	; (8005208 <HAL_UART_IRQHandler+0x58c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d022      	beq.n	800505e <HAL_UART_IRQHandler+0x3e2>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a7a      	ldr	r2, [pc, #488]	; (800520c <HAL_UART_IRQHandler+0x590>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d01b      	beq.n	800505e <HAL_UART_IRQHandler+0x3e2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a78      	ldr	r2, [pc, #480]	; (8005210 <HAL_UART_IRQHandler+0x594>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d014      	beq.n	800505e <HAL_UART_IRQHandler+0x3e2>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a75      	ldr	r2, [pc, #468]	; (8005214 <HAL_UART_IRQHandler+0x598>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00d      	beq.n	800505e <HAL_UART_IRQHandler+0x3e2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a73      	ldr	r2, [pc, #460]	; (8005218 <HAL_UART_IRQHandler+0x59c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d006      	beq.n	800505e <HAL_UART_IRQHandler+0x3e2>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a70      	ldr	r2, [pc, #448]	; (800521c <HAL_UART_IRQHandler+0x5a0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d106      	bne.n	800506c <HAL_UART_IRQHandler+0x3f0>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	b29b      	uxth	r3, r3
 800506a:	e005      	b.n	8005078 <HAL_UART_IRQHandler+0x3fc>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	b29b      	uxth	r3, r3
 8005078:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800507c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 81ab 	beq.w	80053dc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800508c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005090:	429a      	cmp	r2, r3
 8005092:	f080 81a3 	bcs.w	80053dc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800509c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ac:	f000 8087 	beq.w	80051be <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80050de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80050f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1da      	bne.n	80050b0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3308      	adds	r3, #8
 8005100:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800510a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800510c:	f023 0301 	bic.w	r3, r3, #1
 8005110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3308      	adds	r3, #8
 800511a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800511e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005122:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005126:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1e1      	bne.n	80050fa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3308      	adds	r3, #8
 800513c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005140:	e853 3f00 	ldrex	r3, [r3]
 8005144:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800514c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3308      	adds	r3, #8
 8005156:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800515a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800515c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005160:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e3      	bne.n	8005136 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800518a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800518c:	f023 0310 	bic.w	r3, r3, #16
 8005190:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	461a      	mov	r2, r3
 800519a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800519e:	65bb      	str	r3, [r7, #88]	; 0x58
 80051a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e4      	bne.n	800517c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fb ff9d 	bl	80010f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2202      	movs	r2, #2
 80051c2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	4619      	mov	r1, r3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f913 	bl	8005404 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051de:	e0fd      	b.n	80053dc <HAL_UART_IRQHandler+0x760>
 80051e0:	40020010 	.word	0x40020010
 80051e4:	40020028 	.word	0x40020028
 80051e8:	40020040 	.word	0x40020040
 80051ec:	40020058 	.word	0x40020058
 80051f0:	40020070 	.word	0x40020070
 80051f4:	40020088 	.word	0x40020088
 80051f8:	400200a0 	.word	0x400200a0
 80051fc:	400200b8 	.word	0x400200b8
 8005200:	40020410 	.word	0x40020410
 8005204:	40020428 	.word	0x40020428
 8005208:	40020440 	.word	0x40020440
 800520c:	40020458 	.word	0x40020458
 8005210:	40020470 	.word	0x40020470
 8005214:	40020488 	.word	0x40020488
 8005218:	400204a0 	.word	0x400204a0
 800521c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800522c:	b29b      	uxth	r3, r3
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 80cf 	beq.w	80053e0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8005242:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 80ca 	beq.w	80053e0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005260:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	461a      	mov	r2, r3
 800526a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800526e:	647b      	str	r3, [r7, #68]	; 0x44
 8005270:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005274:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005276:	e841 2300 	strex	r3, r2, [r1]
 800527a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800527c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e4      	bne.n	800524c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3308      	adds	r3, #8
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	e853 3f00 	ldrex	r3, [r3]
 8005290:	623b      	str	r3, [r7, #32]
   return(result);
 8005292:	6a3a      	ldr	r2, [r7, #32]
 8005294:	4b55      	ldr	r3, [pc, #340]	; (80053ec <HAL_UART_IRQHandler+0x770>)
 8005296:	4013      	ands	r3, r2
 8005298:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3308      	adds	r3, #8
 80052a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052a6:	633a      	str	r2, [r7, #48]	; 0x30
 80052a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e3      	bne.n	8005282 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	60fb      	str	r3, [r7, #12]
   return(result);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0310 	bic.w	r3, r3, #16
 80052e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f4:	69b9      	ldr	r1, [r7, #24]
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	e841 2300 	strex	r3, r2, [r1]
 80052fc:	617b      	str	r3, [r7, #20]
   return(result);
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1e4      	bne.n	80052ce <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800530a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f877 	bl	8005404 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005316:	e063      	b.n	80053e0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800531c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00e      	beq.n	8005342 <HAL_UART_IRQHandler+0x6c6>
 8005324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d008      	beq.n	8005342 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005338:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f001 ff74 	bl	8007228 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005340:	e051      	b.n	80053e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534a:	2b00      	cmp	r3, #0
 800534c:	d014      	beq.n	8005378 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800534e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005356:	2b00      	cmp	r3, #0
 8005358:	d105      	bne.n	8005366 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800535a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800535e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d008      	beq.n	8005378 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800536a:	2b00      	cmp	r3, #0
 800536c:	d03a      	beq.n	80053e4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	4798      	blx	r3
    }
    return;
 8005376:	e035      	b.n	80053e4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800537c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005380:	2b00      	cmp	r3, #0
 8005382:	d009      	beq.n	8005398 <HAL_UART_IRQHandler+0x71c>
 8005384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f001 fa01 	bl	8006798 <UART_EndTransmit_IT>
    return;
 8005396:	e026      	b.n	80053e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d009      	beq.n	80053b8 <HAL_UART_IRQHandler+0x73c>
 80053a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f001 ff4d 	bl	8007250 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053b6:	e016      	b.n	80053e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80053b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d010      	beq.n	80053e6 <HAL_UART_IRQHandler+0x76a>
 80053c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	da0c      	bge.n	80053e6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f001 ff35 	bl	800723c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053d2:	e008      	b.n	80053e6 <HAL_UART_IRQHandler+0x76a>
      return;
 80053d4:	bf00      	nop
 80053d6:	e006      	b.n	80053e6 <HAL_UART_IRQHandler+0x76a>
    return;
 80053d8:	bf00      	nop
 80053da:	e004      	b.n	80053e6 <HAL_UART_IRQHandler+0x76a>
      return;
 80053dc:	bf00      	nop
 80053de:	e002      	b.n	80053e6 <HAL_UART_IRQHandler+0x76a>
      return;
 80053e0:	bf00      	nop
 80053e2:	e000      	b.n	80053e6 <HAL_UART_IRQHandler+0x76a>
    return;
 80053e4:	bf00      	nop
  }
}
 80053e6:	37e8      	adds	r7, #232	; 0xe8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	effffffe 	.word	0xeffffffe

080053f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	460b      	mov	r3, r1
 800540e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800541c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005420:	b092      	sub	sp, #72	; 0x48
 8005422:	af00      	add	r7, sp, #0
 8005424:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	431a      	orrs	r2, r3
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	431a      	orrs	r2, r3
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	4313      	orrs	r3, r2
 8005442:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	4bbe      	ldr	r3, [pc, #760]	; (8005744 <UART_SetConfig+0x328>)
 800544c:	4013      	ands	r3, r2
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	6812      	ldr	r2, [r2, #0]
 8005452:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005454:	430b      	orrs	r3, r1
 8005456:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4ab3      	ldr	r2, [pc, #716]	; (8005748 <UART_SetConfig+0x32c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005484:	4313      	orrs	r3, r2
 8005486:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	4baf      	ldr	r3, [pc, #700]	; (800574c <UART_SetConfig+0x330>)
 8005490:	4013      	ands	r3, r2
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	6812      	ldr	r2, [r2, #0]
 8005496:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005498:	430b      	orrs	r3, r1
 800549a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a2:	f023 010f 	bic.w	r1, r3, #15
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4aa6      	ldr	r2, [pc, #664]	; (8005750 <UART_SetConfig+0x334>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d177      	bne.n	80055ac <UART_SetConfig+0x190>
 80054bc:	4ba5      	ldr	r3, [pc, #660]	; (8005754 <UART_SetConfig+0x338>)
 80054be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054c4:	2b28      	cmp	r3, #40	; 0x28
 80054c6:	d86d      	bhi.n	80055a4 <UART_SetConfig+0x188>
 80054c8:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <UART_SetConfig+0xb4>)
 80054ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ce:	bf00      	nop
 80054d0:	08005575 	.word	0x08005575
 80054d4:	080055a5 	.word	0x080055a5
 80054d8:	080055a5 	.word	0x080055a5
 80054dc:	080055a5 	.word	0x080055a5
 80054e0:	080055a5 	.word	0x080055a5
 80054e4:	080055a5 	.word	0x080055a5
 80054e8:	080055a5 	.word	0x080055a5
 80054ec:	080055a5 	.word	0x080055a5
 80054f0:	0800557d 	.word	0x0800557d
 80054f4:	080055a5 	.word	0x080055a5
 80054f8:	080055a5 	.word	0x080055a5
 80054fc:	080055a5 	.word	0x080055a5
 8005500:	080055a5 	.word	0x080055a5
 8005504:	080055a5 	.word	0x080055a5
 8005508:	080055a5 	.word	0x080055a5
 800550c:	080055a5 	.word	0x080055a5
 8005510:	08005585 	.word	0x08005585
 8005514:	080055a5 	.word	0x080055a5
 8005518:	080055a5 	.word	0x080055a5
 800551c:	080055a5 	.word	0x080055a5
 8005520:	080055a5 	.word	0x080055a5
 8005524:	080055a5 	.word	0x080055a5
 8005528:	080055a5 	.word	0x080055a5
 800552c:	080055a5 	.word	0x080055a5
 8005530:	0800558d 	.word	0x0800558d
 8005534:	080055a5 	.word	0x080055a5
 8005538:	080055a5 	.word	0x080055a5
 800553c:	080055a5 	.word	0x080055a5
 8005540:	080055a5 	.word	0x080055a5
 8005544:	080055a5 	.word	0x080055a5
 8005548:	080055a5 	.word	0x080055a5
 800554c:	080055a5 	.word	0x080055a5
 8005550:	08005595 	.word	0x08005595
 8005554:	080055a5 	.word	0x080055a5
 8005558:	080055a5 	.word	0x080055a5
 800555c:	080055a5 	.word	0x080055a5
 8005560:	080055a5 	.word	0x080055a5
 8005564:	080055a5 	.word	0x080055a5
 8005568:	080055a5 	.word	0x080055a5
 800556c:	080055a5 	.word	0x080055a5
 8005570:	0800559d 	.word	0x0800559d
 8005574:	2301      	movs	r3, #1
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557a:	e326      	b.n	8005bca <UART_SetConfig+0x7ae>
 800557c:	2304      	movs	r3, #4
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005582:	e322      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005584:	2308      	movs	r3, #8
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558a:	e31e      	b.n	8005bca <UART_SetConfig+0x7ae>
 800558c:	2310      	movs	r3, #16
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005592:	e31a      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005594:	2320      	movs	r3, #32
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559a:	e316      	b.n	8005bca <UART_SetConfig+0x7ae>
 800559c:	2340      	movs	r3, #64	; 0x40
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a2:	e312      	b.n	8005bca <UART_SetConfig+0x7ae>
 80055a4:	2380      	movs	r3, #128	; 0x80
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055aa:	e30e      	b.n	8005bca <UART_SetConfig+0x7ae>
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a69      	ldr	r2, [pc, #420]	; (8005758 <UART_SetConfig+0x33c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d130      	bne.n	8005618 <UART_SetConfig+0x1fc>
 80055b6:	4b67      	ldr	r3, [pc, #412]	; (8005754 <UART_SetConfig+0x338>)
 80055b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	2b05      	cmp	r3, #5
 80055c0:	d826      	bhi.n	8005610 <UART_SetConfig+0x1f4>
 80055c2:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <UART_SetConfig+0x1ac>)
 80055c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c8:	080055e1 	.word	0x080055e1
 80055cc:	080055e9 	.word	0x080055e9
 80055d0:	080055f1 	.word	0x080055f1
 80055d4:	080055f9 	.word	0x080055f9
 80055d8:	08005601 	.word	0x08005601
 80055dc:	08005609 	.word	0x08005609
 80055e0:	2300      	movs	r3, #0
 80055e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055e6:	e2f0      	b.n	8005bca <UART_SetConfig+0x7ae>
 80055e8:	2304      	movs	r3, #4
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ee:	e2ec      	b.n	8005bca <UART_SetConfig+0x7ae>
 80055f0:	2308      	movs	r3, #8
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f6:	e2e8      	b.n	8005bca <UART_SetConfig+0x7ae>
 80055f8:	2310      	movs	r3, #16
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fe:	e2e4      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005600:	2320      	movs	r3, #32
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005606:	e2e0      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005608:	2340      	movs	r3, #64	; 0x40
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560e:	e2dc      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005610:	2380      	movs	r3, #128	; 0x80
 8005612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005616:	e2d8      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a4f      	ldr	r2, [pc, #316]	; (800575c <UART_SetConfig+0x340>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d130      	bne.n	8005684 <UART_SetConfig+0x268>
 8005622:	4b4c      	ldr	r3, [pc, #304]	; (8005754 <UART_SetConfig+0x338>)
 8005624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	2b05      	cmp	r3, #5
 800562c:	d826      	bhi.n	800567c <UART_SetConfig+0x260>
 800562e:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <UART_SetConfig+0x218>)
 8005630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005634:	0800564d 	.word	0x0800564d
 8005638:	08005655 	.word	0x08005655
 800563c:	0800565d 	.word	0x0800565d
 8005640:	08005665 	.word	0x08005665
 8005644:	0800566d 	.word	0x0800566d
 8005648:	08005675 	.word	0x08005675
 800564c:	2300      	movs	r3, #0
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005652:	e2ba      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005654:	2304      	movs	r3, #4
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800565a:	e2b6      	b.n	8005bca <UART_SetConfig+0x7ae>
 800565c:	2308      	movs	r3, #8
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005662:	e2b2      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005664:	2310      	movs	r3, #16
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566a:	e2ae      	b.n	8005bca <UART_SetConfig+0x7ae>
 800566c:	2320      	movs	r3, #32
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005672:	e2aa      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005674:	2340      	movs	r3, #64	; 0x40
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567a:	e2a6      	b.n	8005bca <UART_SetConfig+0x7ae>
 800567c:	2380      	movs	r3, #128	; 0x80
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005682:	e2a2      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a35      	ldr	r2, [pc, #212]	; (8005760 <UART_SetConfig+0x344>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d130      	bne.n	80056f0 <UART_SetConfig+0x2d4>
 800568e:	4b31      	ldr	r3, [pc, #196]	; (8005754 <UART_SetConfig+0x338>)
 8005690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	2b05      	cmp	r3, #5
 8005698:	d826      	bhi.n	80056e8 <UART_SetConfig+0x2cc>
 800569a:	a201      	add	r2, pc, #4	; (adr r2, 80056a0 <UART_SetConfig+0x284>)
 800569c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a0:	080056b9 	.word	0x080056b9
 80056a4:	080056c1 	.word	0x080056c1
 80056a8:	080056c9 	.word	0x080056c9
 80056ac:	080056d1 	.word	0x080056d1
 80056b0:	080056d9 	.word	0x080056d9
 80056b4:	080056e1 	.word	0x080056e1
 80056b8:	2300      	movs	r3, #0
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056be:	e284      	b.n	8005bca <UART_SetConfig+0x7ae>
 80056c0:	2304      	movs	r3, #4
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c6:	e280      	b.n	8005bca <UART_SetConfig+0x7ae>
 80056c8:	2308      	movs	r3, #8
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ce:	e27c      	b.n	8005bca <UART_SetConfig+0x7ae>
 80056d0:	2310      	movs	r3, #16
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d6:	e278      	b.n	8005bca <UART_SetConfig+0x7ae>
 80056d8:	2320      	movs	r3, #32
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056de:	e274      	b.n	8005bca <UART_SetConfig+0x7ae>
 80056e0:	2340      	movs	r3, #64	; 0x40
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e6:	e270      	b.n	8005bca <UART_SetConfig+0x7ae>
 80056e8:	2380      	movs	r3, #128	; 0x80
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ee:	e26c      	b.n	8005bca <UART_SetConfig+0x7ae>
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a1b      	ldr	r2, [pc, #108]	; (8005764 <UART_SetConfig+0x348>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d142      	bne.n	8005780 <UART_SetConfig+0x364>
 80056fa:	4b16      	ldr	r3, [pc, #88]	; (8005754 <UART_SetConfig+0x338>)
 80056fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fe:	f003 0307 	and.w	r3, r3, #7
 8005702:	2b05      	cmp	r3, #5
 8005704:	d838      	bhi.n	8005778 <UART_SetConfig+0x35c>
 8005706:	a201      	add	r2, pc, #4	; (adr r2, 800570c <UART_SetConfig+0x2f0>)
 8005708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570c:	08005725 	.word	0x08005725
 8005710:	0800572d 	.word	0x0800572d
 8005714:	08005735 	.word	0x08005735
 8005718:	0800573d 	.word	0x0800573d
 800571c:	08005769 	.word	0x08005769
 8005720:	08005771 	.word	0x08005771
 8005724:	2300      	movs	r3, #0
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572a:	e24e      	b.n	8005bca <UART_SetConfig+0x7ae>
 800572c:	2304      	movs	r3, #4
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005732:	e24a      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005734:	2308      	movs	r3, #8
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573a:	e246      	b.n	8005bca <UART_SetConfig+0x7ae>
 800573c:	2310      	movs	r3, #16
 800573e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005742:	e242      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005744:	cfff69f3 	.word	0xcfff69f3
 8005748:	58000c00 	.word	0x58000c00
 800574c:	11fff4ff 	.word	0x11fff4ff
 8005750:	40011000 	.word	0x40011000
 8005754:	58024400 	.word	0x58024400
 8005758:	40004400 	.word	0x40004400
 800575c:	40004800 	.word	0x40004800
 8005760:	40004c00 	.word	0x40004c00
 8005764:	40005000 	.word	0x40005000
 8005768:	2320      	movs	r3, #32
 800576a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800576e:	e22c      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005770:	2340      	movs	r3, #64	; 0x40
 8005772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005776:	e228      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005778:	2380      	movs	r3, #128	; 0x80
 800577a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800577e:	e224      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4ab1      	ldr	r2, [pc, #708]	; (8005a4c <UART_SetConfig+0x630>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d176      	bne.n	8005878 <UART_SetConfig+0x45c>
 800578a:	4bb1      	ldr	r3, [pc, #708]	; (8005a50 <UART_SetConfig+0x634>)
 800578c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005792:	2b28      	cmp	r3, #40	; 0x28
 8005794:	d86c      	bhi.n	8005870 <UART_SetConfig+0x454>
 8005796:	a201      	add	r2, pc, #4	; (adr r2, 800579c <UART_SetConfig+0x380>)
 8005798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579c:	08005841 	.word	0x08005841
 80057a0:	08005871 	.word	0x08005871
 80057a4:	08005871 	.word	0x08005871
 80057a8:	08005871 	.word	0x08005871
 80057ac:	08005871 	.word	0x08005871
 80057b0:	08005871 	.word	0x08005871
 80057b4:	08005871 	.word	0x08005871
 80057b8:	08005871 	.word	0x08005871
 80057bc:	08005849 	.word	0x08005849
 80057c0:	08005871 	.word	0x08005871
 80057c4:	08005871 	.word	0x08005871
 80057c8:	08005871 	.word	0x08005871
 80057cc:	08005871 	.word	0x08005871
 80057d0:	08005871 	.word	0x08005871
 80057d4:	08005871 	.word	0x08005871
 80057d8:	08005871 	.word	0x08005871
 80057dc:	08005851 	.word	0x08005851
 80057e0:	08005871 	.word	0x08005871
 80057e4:	08005871 	.word	0x08005871
 80057e8:	08005871 	.word	0x08005871
 80057ec:	08005871 	.word	0x08005871
 80057f0:	08005871 	.word	0x08005871
 80057f4:	08005871 	.word	0x08005871
 80057f8:	08005871 	.word	0x08005871
 80057fc:	08005859 	.word	0x08005859
 8005800:	08005871 	.word	0x08005871
 8005804:	08005871 	.word	0x08005871
 8005808:	08005871 	.word	0x08005871
 800580c:	08005871 	.word	0x08005871
 8005810:	08005871 	.word	0x08005871
 8005814:	08005871 	.word	0x08005871
 8005818:	08005871 	.word	0x08005871
 800581c:	08005861 	.word	0x08005861
 8005820:	08005871 	.word	0x08005871
 8005824:	08005871 	.word	0x08005871
 8005828:	08005871 	.word	0x08005871
 800582c:	08005871 	.word	0x08005871
 8005830:	08005871 	.word	0x08005871
 8005834:	08005871 	.word	0x08005871
 8005838:	08005871 	.word	0x08005871
 800583c:	08005869 	.word	0x08005869
 8005840:	2301      	movs	r3, #1
 8005842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005846:	e1c0      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005848:	2304      	movs	r3, #4
 800584a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800584e:	e1bc      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005850:	2308      	movs	r3, #8
 8005852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005856:	e1b8      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005858:	2310      	movs	r3, #16
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585e:	e1b4      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005860:	2320      	movs	r3, #32
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005866:	e1b0      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005868:	2340      	movs	r3, #64	; 0x40
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586e:	e1ac      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005870:	2380      	movs	r3, #128	; 0x80
 8005872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005876:	e1a8      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a75      	ldr	r2, [pc, #468]	; (8005a54 <UART_SetConfig+0x638>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d130      	bne.n	80058e4 <UART_SetConfig+0x4c8>
 8005882:	4b73      	ldr	r3, [pc, #460]	; (8005a50 <UART_SetConfig+0x634>)
 8005884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	2b05      	cmp	r3, #5
 800588c:	d826      	bhi.n	80058dc <UART_SetConfig+0x4c0>
 800588e:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <UART_SetConfig+0x478>)
 8005890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005894:	080058ad 	.word	0x080058ad
 8005898:	080058b5 	.word	0x080058b5
 800589c:	080058bd 	.word	0x080058bd
 80058a0:	080058c5 	.word	0x080058c5
 80058a4:	080058cd 	.word	0x080058cd
 80058a8:	080058d5 	.word	0x080058d5
 80058ac:	2300      	movs	r3, #0
 80058ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058b2:	e18a      	b.n	8005bca <UART_SetConfig+0x7ae>
 80058b4:	2304      	movs	r3, #4
 80058b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ba:	e186      	b.n	8005bca <UART_SetConfig+0x7ae>
 80058bc:	2308      	movs	r3, #8
 80058be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c2:	e182      	b.n	8005bca <UART_SetConfig+0x7ae>
 80058c4:	2310      	movs	r3, #16
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ca:	e17e      	b.n	8005bca <UART_SetConfig+0x7ae>
 80058cc:	2320      	movs	r3, #32
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d2:	e17a      	b.n	8005bca <UART_SetConfig+0x7ae>
 80058d4:	2340      	movs	r3, #64	; 0x40
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058da:	e176      	b.n	8005bca <UART_SetConfig+0x7ae>
 80058dc:	2380      	movs	r3, #128	; 0x80
 80058de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e2:	e172      	b.n	8005bca <UART_SetConfig+0x7ae>
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a5b      	ldr	r2, [pc, #364]	; (8005a58 <UART_SetConfig+0x63c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d130      	bne.n	8005950 <UART_SetConfig+0x534>
 80058ee:	4b58      	ldr	r3, [pc, #352]	; (8005a50 <UART_SetConfig+0x634>)
 80058f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	2b05      	cmp	r3, #5
 80058f8:	d826      	bhi.n	8005948 <UART_SetConfig+0x52c>
 80058fa:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <UART_SetConfig+0x4e4>)
 80058fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005900:	08005919 	.word	0x08005919
 8005904:	08005921 	.word	0x08005921
 8005908:	08005929 	.word	0x08005929
 800590c:	08005931 	.word	0x08005931
 8005910:	08005939 	.word	0x08005939
 8005914:	08005941 	.word	0x08005941
 8005918:	2300      	movs	r3, #0
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800591e:	e154      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005920:	2304      	movs	r3, #4
 8005922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005926:	e150      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005928:	2308      	movs	r3, #8
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592e:	e14c      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005930:	2310      	movs	r3, #16
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005936:	e148      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005938:	2320      	movs	r3, #32
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593e:	e144      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005940:	2340      	movs	r3, #64	; 0x40
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005946:	e140      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005948:	2380      	movs	r3, #128	; 0x80
 800594a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800594e:	e13c      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a41      	ldr	r2, [pc, #260]	; (8005a5c <UART_SetConfig+0x640>)
 8005956:	4293      	cmp	r3, r2
 8005958:	f040 8082 	bne.w	8005a60 <UART_SetConfig+0x644>
 800595c:	4b3c      	ldr	r3, [pc, #240]	; (8005a50 <UART_SetConfig+0x634>)
 800595e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005960:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005964:	2b28      	cmp	r3, #40	; 0x28
 8005966:	d86d      	bhi.n	8005a44 <UART_SetConfig+0x628>
 8005968:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <UART_SetConfig+0x554>)
 800596a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596e:	bf00      	nop
 8005970:	08005a15 	.word	0x08005a15
 8005974:	08005a45 	.word	0x08005a45
 8005978:	08005a45 	.word	0x08005a45
 800597c:	08005a45 	.word	0x08005a45
 8005980:	08005a45 	.word	0x08005a45
 8005984:	08005a45 	.word	0x08005a45
 8005988:	08005a45 	.word	0x08005a45
 800598c:	08005a45 	.word	0x08005a45
 8005990:	08005a1d 	.word	0x08005a1d
 8005994:	08005a45 	.word	0x08005a45
 8005998:	08005a45 	.word	0x08005a45
 800599c:	08005a45 	.word	0x08005a45
 80059a0:	08005a45 	.word	0x08005a45
 80059a4:	08005a45 	.word	0x08005a45
 80059a8:	08005a45 	.word	0x08005a45
 80059ac:	08005a45 	.word	0x08005a45
 80059b0:	08005a25 	.word	0x08005a25
 80059b4:	08005a45 	.word	0x08005a45
 80059b8:	08005a45 	.word	0x08005a45
 80059bc:	08005a45 	.word	0x08005a45
 80059c0:	08005a45 	.word	0x08005a45
 80059c4:	08005a45 	.word	0x08005a45
 80059c8:	08005a45 	.word	0x08005a45
 80059cc:	08005a45 	.word	0x08005a45
 80059d0:	08005a2d 	.word	0x08005a2d
 80059d4:	08005a45 	.word	0x08005a45
 80059d8:	08005a45 	.word	0x08005a45
 80059dc:	08005a45 	.word	0x08005a45
 80059e0:	08005a45 	.word	0x08005a45
 80059e4:	08005a45 	.word	0x08005a45
 80059e8:	08005a45 	.word	0x08005a45
 80059ec:	08005a45 	.word	0x08005a45
 80059f0:	08005a35 	.word	0x08005a35
 80059f4:	08005a45 	.word	0x08005a45
 80059f8:	08005a45 	.word	0x08005a45
 80059fc:	08005a45 	.word	0x08005a45
 8005a00:	08005a45 	.word	0x08005a45
 8005a04:	08005a45 	.word	0x08005a45
 8005a08:	08005a45 	.word	0x08005a45
 8005a0c:	08005a45 	.word	0x08005a45
 8005a10:	08005a3d 	.word	0x08005a3d
 8005a14:	2301      	movs	r3, #1
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a1a:	e0d6      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005a1c:	2304      	movs	r3, #4
 8005a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a22:	e0d2      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005a24:	2308      	movs	r3, #8
 8005a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a2a:	e0ce      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005a2c:	2310      	movs	r3, #16
 8005a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a32:	e0ca      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005a34:	2320      	movs	r3, #32
 8005a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a3a:	e0c6      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005a3c:	2340      	movs	r3, #64	; 0x40
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a42:	e0c2      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005a44:	2380      	movs	r3, #128	; 0x80
 8005a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a4a:	e0be      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005a4c:	40011400 	.word	0x40011400
 8005a50:	58024400 	.word	0x58024400
 8005a54:	40007800 	.word	0x40007800
 8005a58:	40007c00 	.word	0x40007c00
 8005a5c:	40011800 	.word	0x40011800
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4aad      	ldr	r2, [pc, #692]	; (8005d1c <UART_SetConfig+0x900>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d176      	bne.n	8005b58 <UART_SetConfig+0x73c>
 8005a6a:	4bad      	ldr	r3, [pc, #692]	; (8005d20 <UART_SetConfig+0x904>)
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a72:	2b28      	cmp	r3, #40	; 0x28
 8005a74:	d86c      	bhi.n	8005b50 <UART_SetConfig+0x734>
 8005a76:	a201      	add	r2, pc, #4	; (adr r2, 8005a7c <UART_SetConfig+0x660>)
 8005a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7c:	08005b21 	.word	0x08005b21
 8005a80:	08005b51 	.word	0x08005b51
 8005a84:	08005b51 	.word	0x08005b51
 8005a88:	08005b51 	.word	0x08005b51
 8005a8c:	08005b51 	.word	0x08005b51
 8005a90:	08005b51 	.word	0x08005b51
 8005a94:	08005b51 	.word	0x08005b51
 8005a98:	08005b51 	.word	0x08005b51
 8005a9c:	08005b29 	.word	0x08005b29
 8005aa0:	08005b51 	.word	0x08005b51
 8005aa4:	08005b51 	.word	0x08005b51
 8005aa8:	08005b51 	.word	0x08005b51
 8005aac:	08005b51 	.word	0x08005b51
 8005ab0:	08005b51 	.word	0x08005b51
 8005ab4:	08005b51 	.word	0x08005b51
 8005ab8:	08005b51 	.word	0x08005b51
 8005abc:	08005b31 	.word	0x08005b31
 8005ac0:	08005b51 	.word	0x08005b51
 8005ac4:	08005b51 	.word	0x08005b51
 8005ac8:	08005b51 	.word	0x08005b51
 8005acc:	08005b51 	.word	0x08005b51
 8005ad0:	08005b51 	.word	0x08005b51
 8005ad4:	08005b51 	.word	0x08005b51
 8005ad8:	08005b51 	.word	0x08005b51
 8005adc:	08005b39 	.word	0x08005b39
 8005ae0:	08005b51 	.word	0x08005b51
 8005ae4:	08005b51 	.word	0x08005b51
 8005ae8:	08005b51 	.word	0x08005b51
 8005aec:	08005b51 	.word	0x08005b51
 8005af0:	08005b51 	.word	0x08005b51
 8005af4:	08005b51 	.word	0x08005b51
 8005af8:	08005b51 	.word	0x08005b51
 8005afc:	08005b41 	.word	0x08005b41
 8005b00:	08005b51 	.word	0x08005b51
 8005b04:	08005b51 	.word	0x08005b51
 8005b08:	08005b51 	.word	0x08005b51
 8005b0c:	08005b51 	.word	0x08005b51
 8005b10:	08005b51 	.word	0x08005b51
 8005b14:	08005b51 	.word	0x08005b51
 8005b18:	08005b51 	.word	0x08005b51
 8005b1c:	08005b49 	.word	0x08005b49
 8005b20:	2301      	movs	r3, #1
 8005b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b26:	e050      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005b28:	2304      	movs	r3, #4
 8005b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b2e:	e04c      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005b30:	2308      	movs	r3, #8
 8005b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b36:	e048      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005b38:	2310      	movs	r3, #16
 8005b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b3e:	e044      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005b40:	2320      	movs	r3, #32
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b46:	e040      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005b48:	2340      	movs	r3, #64	; 0x40
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b4e:	e03c      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005b50:	2380      	movs	r3, #128	; 0x80
 8005b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b56:	e038      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a71      	ldr	r2, [pc, #452]	; (8005d24 <UART_SetConfig+0x908>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d130      	bne.n	8005bc4 <UART_SetConfig+0x7a8>
 8005b62:	4b6f      	ldr	r3, [pc, #444]	; (8005d20 <UART_SetConfig+0x904>)
 8005b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	2b05      	cmp	r3, #5
 8005b6c:	d826      	bhi.n	8005bbc <UART_SetConfig+0x7a0>
 8005b6e:	a201      	add	r2, pc, #4	; (adr r2, 8005b74 <UART_SetConfig+0x758>)
 8005b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b74:	08005b8d 	.word	0x08005b8d
 8005b78:	08005b95 	.word	0x08005b95
 8005b7c:	08005b9d 	.word	0x08005b9d
 8005b80:	08005ba5 	.word	0x08005ba5
 8005b84:	08005bad 	.word	0x08005bad
 8005b88:	08005bb5 	.word	0x08005bb5
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b92:	e01a      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005b94:	2304      	movs	r3, #4
 8005b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9a:	e016      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005b9c:	2308      	movs	r3, #8
 8005b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba2:	e012      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005ba4:	2310      	movs	r3, #16
 8005ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005baa:	e00e      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005bac:	2320      	movs	r3, #32
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bb2:	e00a      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005bb4:	2340      	movs	r3, #64	; 0x40
 8005bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bba:	e006      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005bbc:	2380      	movs	r3, #128	; 0x80
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bc2:	e002      	b.n	8005bca <UART_SetConfig+0x7ae>
 8005bc4:	2380      	movs	r3, #128	; 0x80
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a55      	ldr	r2, [pc, #340]	; (8005d24 <UART_SetConfig+0x908>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	f040 80f8 	bne.w	8005dc6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bd6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	dc46      	bgt.n	8005c6c <UART_SetConfig+0x850>
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	db75      	blt.n	8005cce <UART_SetConfig+0x8b2>
 8005be2:	3b02      	subs	r3, #2
 8005be4:	2b1e      	cmp	r3, #30
 8005be6:	d872      	bhi.n	8005cce <UART_SetConfig+0x8b2>
 8005be8:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <UART_SetConfig+0x7d4>)
 8005bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bee:	bf00      	nop
 8005bf0:	08005c73 	.word	0x08005c73
 8005bf4:	08005ccf 	.word	0x08005ccf
 8005bf8:	08005c7b 	.word	0x08005c7b
 8005bfc:	08005ccf 	.word	0x08005ccf
 8005c00:	08005ccf 	.word	0x08005ccf
 8005c04:	08005ccf 	.word	0x08005ccf
 8005c08:	08005c8b 	.word	0x08005c8b
 8005c0c:	08005ccf 	.word	0x08005ccf
 8005c10:	08005ccf 	.word	0x08005ccf
 8005c14:	08005ccf 	.word	0x08005ccf
 8005c18:	08005ccf 	.word	0x08005ccf
 8005c1c:	08005ccf 	.word	0x08005ccf
 8005c20:	08005ccf 	.word	0x08005ccf
 8005c24:	08005ccf 	.word	0x08005ccf
 8005c28:	08005c9b 	.word	0x08005c9b
 8005c2c:	08005ccf 	.word	0x08005ccf
 8005c30:	08005ccf 	.word	0x08005ccf
 8005c34:	08005ccf 	.word	0x08005ccf
 8005c38:	08005ccf 	.word	0x08005ccf
 8005c3c:	08005ccf 	.word	0x08005ccf
 8005c40:	08005ccf 	.word	0x08005ccf
 8005c44:	08005ccf 	.word	0x08005ccf
 8005c48:	08005ccf 	.word	0x08005ccf
 8005c4c:	08005ccf 	.word	0x08005ccf
 8005c50:	08005ccf 	.word	0x08005ccf
 8005c54:	08005ccf 	.word	0x08005ccf
 8005c58:	08005ccf 	.word	0x08005ccf
 8005c5c:	08005ccf 	.word	0x08005ccf
 8005c60:	08005ccf 	.word	0x08005ccf
 8005c64:	08005ccf 	.word	0x08005ccf
 8005c68:	08005cc1 	.word	0x08005cc1
 8005c6c:	2b40      	cmp	r3, #64	; 0x40
 8005c6e:	d02a      	beq.n	8005cc6 <UART_SetConfig+0x8aa>
 8005c70:	e02d      	b.n	8005cce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005c72:	f7fe fb45 	bl	8004300 <HAL_RCCEx_GetD3PCLK1Freq>
 8005c76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c78:	e02f      	b.n	8005cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fe fb54 	bl	800432c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c88:	e027      	b.n	8005cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c8a:	f107 0318 	add.w	r3, r7, #24
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fe fca0 	bl	80045d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c98:	e01f      	b.n	8005cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c9a:	4b21      	ldr	r3, [pc, #132]	; (8005d20 <UART_SetConfig+0x904>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d009      	beq.n	8005cba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ca6:	4b1e      	ldr	r3, [pc, #120]	; (8005d20 <UART_SetConfig+0x904>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	08db      	lsrs	r3, r3, #3
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	; (8005d28 <UART_SetConfig+0x90c>)
 8005cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cb8:	e00f      	b.n	8005cda <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005cba:	4b1b      	ldr	r3, [pc, #108]	; (8005d28 <UART_SetConfig+0x90c>)
 8005cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cbe:	e00c      	b.n	8005cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cc0:	4b1a      	ldr	r3, [pc, #104]	; (8005d2c <UART_SetConfig+0x910>)
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cc4:	e009      	b.n	8005cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ccc:	e005      	b.n	8005cda <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005cd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 81ee 	beq.w	80060be <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	4a12      	ldr	r2, [pc, #72]	; (8005d30 <UART_SetConfig+0x914>)
 8005ce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cec:	461a      	mov	r2, r3
 8005cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cf4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	4413      	add	r3, r2
 8005d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d305      	bcc.n	8005d12 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d910      	bls.n	8005d34 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d18:	e1d1      	b.n	80060be <UART_SetConfig+0xca2>
 8005d1a:	bf00      	nop
 8005d1c:	40011c00 	.word	0x40011c00
 8005d20:	58024400 	.word	0x58024400
 8005d24:	58000c00 	.word	0x58000c00
 8005d28:	03d09000 	.word	0x03d09000
 8005d2c:	003d0900 	.word	0x003d0900
 8005d30:	080097b0 	.word	0x080097b0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d36:	2200      	movs	r2, #0
 8005d38:	60bb      	str	r3, [r7, #8]
 8005d3a:	60fa      	str	r2, [r7, #12]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	4ac0      	ldr	r2, [pc, #768]	; (8006044 <UART_SetConfig+0xc28>)
 8005d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2200      	movs	r2, #0
 8005d4a:	603b      	str	r3, [r7, #0]
 8005d4c:	607a      	str	r2, [r7, #4]
 8005d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d56:	f7fa fac9 	bl	80002ec <__aeabi_uldivmod>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4610      	mov	r0, r2
 8005d60:	4619      	mov	r1, r3
 8005d62:	f04f 0200 	mov.w	r2, #0
 8005d66:	f04f 0300 	mov.w	r3, #0
 8005d6a:	020b      	lsls	r3, r1, #8
 8005d6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d70:	0202      	lsls	r2, r0, #8
 8005d72:	6979      	ldr	r1, [r7, #20]
 8005d74:	6849      	ldr	r1, [r1, #4]
 8005d76:	0849      	lsrs	r1, r1, #1
 8005d78:	2000      	movs	r0, #0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	eb12 0804 	adds.w	r8, r2, r4
 8005d82:	eb43 0905 	adc.w	r9, r3, r5
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	469a      	mov	sl, r3
 8005d8e:	4693      	mov	fp, r2
 8005d90:	4652      	mov	r2, sl
 8005d92:	465b      	mov	r3, fp
 8005d94:	4640      	mov	r0, r8
 8005d96:	4649      	mov	r1, r9
 8005d98:	f7fa faa8 	bl	80002ec <__aeabi_uldivmod>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4613      	mov	r3, r2
 8005da2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005daa:	d308      	bcc.n	8005dbe <UART_SetConfig+0x9a2>
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005db2:	d204      	bcs.n	8005dbe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dba:	60da      	str	r2, [r3, #12]
 8005dbc:	e17f      	b.n	80060be <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005dc4:	e17b      	b.n	80060be <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dce:	f040 80bd 	bne.w	8005f4c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005dd2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	dc48      	bgt.n	8005e6c <UART_SetConfig+0xa50>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	db7b      	blt.n	8005ed6 <UART_SetConfig+0xaba>
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d879      	bhi.n	8005ed6 <UART_SetConfig+0xaba>
 8005de2:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <UART_SetConfig+0x9cc>)
 8005de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de8:	08005e73 	.word	0x08005e73
 8005dec:	08005e7b 	.word	0x08005e7b
 8005df0:	08005ed7 	.word	0x08005ed7
 8005df4:	08005ed7 	.word	0x08005ed7
 8005df8:	08005e83 	.word	0x08005e83
 8005dfc:	08005ed7 	.word	0x08005ed7
 8005e00:	08005ed7 	.word	0x08005ed7
 8005e04:	08005ed7 	.word	0x08005ed7
 8005e08:	08005e93 	.word	0x08005e93
 8005e0c:	08005ed7 	.word	0x08005ed7
 8005e10:	08005ed7 	.word	0x08005ed7
 8005e14:	08005ed7 	.word	0x08005ed7
 8005e18:	08005ed7 	.word	0x08005ed7
 8005e1c:	08005ed7 	.word	0x08005ed7
 8005e20:	08005ed7 	.word	0x08005ed7
 8005e24:	08005ed7 	.word	0x08005ed7
 8005e28:	08005ea3 	.word	0x08005ea3
 8005e2c:	08005ed7 	.word	0x08005ed7
 8005e30:	08005ed7 	.word	0x08005ed7
 8005e34:	08005ed7 	.word	0x08005ed7
 8005e38:	08005ed7 	.word	0x08005ed7
 8005e3c:	08005ed7 	.word	0x08005ed7
 8005e40:	08005ed7 	.word	0x08005ed7
 8005e44:	08005ed7 	.word	0x08005ed7
 8005e48:	08005ed7 	.word	0x08005ed7
 8005e4c:	08005ed7 	.word	0x08005ed7
 8005e50:	08005ed7 	.word	0x08005ed7
 8005e54:	08005ed7 	.word	0x08005ed7
 8005e58:	08005ed7 	.word	0x08005ed7
 8005e5c:	08005ed7 	.word	0x08005ed7
 8005e60:	08005ed7 	.word	0x08005ed7
 8005e64:	08005ed7 	.word	0x08005ed7
 8005e68:	08005ec9 	.word	0x08005ec9
 8005e6c:	2b40      	cmp	r3, #64	; 0x40
 8005e6e:	d02e      	beq.n	8005ece <UART_SetConfig+0xab2>
 8005e70:	e031      	b.n	8005ed6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e72:	f7fd f85b 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8005e76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e78:	e033      	b.n	8005ee2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e7a:	f7fd f86d 	bl	8002f58 <HAL_RCC_GetPCLK2Freq>
 8005e7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e80:	e02f      	b.n	8005ee2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe fa50 	bl	800432c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e90:	e027      	b.n	8005ee2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e92:	f107 0318 	add.w	r3, r7, #24
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe fb9c 	bl	80045d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ea0:	e01f      	b.n	8005ee2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ea2:	4b69      	ldr	r3, [pc, #420]	; (8006048 <UART_SetConfig+0xc2c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0320 	and.w	r3, r3, #32
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005eae:	4b66      	ldr	r3, [pc, #408]	; (8006048 <UART_SetConfig+0xc2c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	08db      	lsrs	r3, r3, #3
 8005eb4:	f003 0303 	and.w	r3, r3, #3
 8005eb8:	4a64      	ldr	r2, [pc, #400]	; (800604c <UART_SetConfig+0xc30>)
 8005eba:	fa22 f303 	lsr.w	r3, r2, r3
 8005ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ec0:	e00f      	b.n	8005ee2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005ec2:	4b62      	ldr	r3, [pc, #392]	; (800604c <UART_SetConfig+0xc30>)
 8005ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ec6:	e00c      	b.n	8005ee2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ec8:	4b61      	ldr	r3, [pc, #388]	; (8006050 <UART_SetConfig+0xc34>)
 8005eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ecc:	e009      	b.n	8005ee2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ed4:	e005      	b.n	8005ee2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005ee0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80ea 	beq.w	80060be <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	4a55      	ldr	r2, [pc, #340]	; (8006044 <UART_SetConfig+0xc28>)
 8005ef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005efc:	005a      	lsls	r2, r3, #1
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	441a      	add	r2, r3
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f12:	2b0f      	cmp	r3, #15
 8005f14:	d916      	bls.n	8005f44 <UART_SetConfig+0xb28>
 8005f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f1c:	d212      	bcs.n	8005f44 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f023 030f 	bic.w	r3, r3, #15
 8005f26:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2a:	085b      	lsrs	r3, r3, #1
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f36:	4313      	orrs	r3, r2
 8005f38:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005f40:	60da      	str	r2, [r3, #12]
 8005f42:	e0bc      	b.n	80060be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005f4a:	e0b8      	b.n	80060be <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005f50:	2b20      	cmp	r3, #32
 8005f52:	dc4b      	bgt.n	8005fec <UART_SetConfig+0xbd0>
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f2c0 8087 	blt.w	8006068 <UART_SetConfig+0xc4c>
 8005f5a:	2b20      	cmp	r3, #32
 8005f5c:	f200 8084 	bhi.w	8006068 <UART_SetConfig+0xc4c>
 8005f60:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <UART_SetConfig+0xb4c>)
 8005f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f66:	bf00      	nop
 8005f68:	08005ff3 	.word	0x08005ff3
 8005f6c:	08005ffb 	.word	0x08005ffb
 8005f70:	08006069 	.word	0x08006069
 8005f74:	08006069 	.word	0x08006069
 8005f78:	08006003 	.word	0x08006003
 8005f7c:	08006069 	.word	0x08006069
 8005f80:	08006069 	.word	0x08006069
 8005f84:	08006069 	.word	0x08006069
 8005f88:	08006013 	.word	0x08006013
 8005f8c:	08006069 	.word	0x08006069
 8005f90:	08006069 	.word	0x08006069
 8005f94:	08006069 	.word	0x08006069
 8005f98:	08006069 	.word	0x08006069
 8005f9c:	08006069 	.word	0x08006069
 8005fa0:	08006069 	.word	0x08006069
 8005fa4:	08006069 	.word	0x08006069
 8005fa8:	08006023 	.word	0x08006023
 8005fac:	08006069 	.word	0x08006069
 8005fb0:	08006069 	.word	0x08006069
 8005fb4:	08006069 	.word	0x08006069
 8005fb8:	08006069 	.word	0x08006069
 8005fbc:	08006069 	.word	0x08006069
 8005fc0:	08006069 	.word	0x08006069
 8005fc4:	08006069 	.word	0x08006069
 8005fc8:	08006069 	.word	0x08006069
 8005fcc:	08006069 	.word	0x08006069
 8005fd0:	08006069 	.word	0x08006069
 8005fd4:	08006069 	.word	0x08006069
 8005fd8:	08006069 	.word	0x08006069
 8005fdc:	08006069 	.word	0x08006069
 8005fe0:	08006069 	.word	0x08006069
 8005fe4:	08006069 	.word	0x08006069
 8005fe8:	0800605b 	.word	0x0800605b
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	d037      	beq.n	8006060 <UART_SetConfig+0xc44>
 8005ff0:	e03a      	b.n	8006068 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff2:	f7fc ff9b 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8005ff6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ff8:	e03c      	b.n	8006074 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ffa:	f7fc ffad 	bl	8002f58 <HAL_RCC_GetPCLK2Freq>
 8005ffe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006000:	e038      	b.n	8006074 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006006:	4618      	mov	r0, r3
 8006008:	f7fe f990 	bl	800432c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006010:	e030      	b.n	8006074 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006012:	f107 0318 	add.w	r3, r7, #24
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe fadc 	bl	80045d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006020:	e028      	b.n	8006074 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006022:	4b09      	ldr	r3, [pc, #36]	; (8006048 <UART_SetConfig+0xc2c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d012      	beq.n	8006054 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800602e:	4b06      	ldr	r3, [pc, #24]	; (8006048 <UART_SetConfig+0xc2c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	08db      	lsrs	r3, r3, #3
 8006034:	f003 0303 	and.w	r3, r3, #3
 8006038:	4a04      	ldr	r2, [pc, #16]	; (800604c <UART_SetConfig+0xc30>)
 800603a:	fa22 f303 	lsr.w	r3, r2, r3
 800603e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006040:	e018      	b.n	8006074 <UART_SetConfig+0xc58>
 8006042:	bf00      	nop
 8006044:	080097b0 	.word	0x080097b0
 8006048:	58024400 	.word	0x58024400
 800604c:	03d09000 	.word	0x03d09000
 8006050:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006054:	4b24      	ldr	r3, [pc, #144]	; (80060e8 <UART_SetConfig+0xccc>)
 8006056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006058:	e00c      	b.n	8006074 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800605a:	4b24      	ldr	r3, [pc, #144]	; (80060ec <UART_SetConfig+0xcd0>)
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800605e:	e009      	b.n	8006074 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006064:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006066:	e005      	b.n	8006074 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006072:	bf00      	nop
    }

    if (pclk != 0U)
 8006074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d021      	beq.n	80060be <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	4a1c      	ldr	r2, [pc, #112]	; (80060f0 <UART_SetConfig+0xcd4>)
 8006080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006084:	461a      	mov	r2, r3
 8006086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006088:	fbb3 f2f2 	udiv	r2, r3, r2
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	085b      	lsrs	r3, r3, #1
 8006092:	441a      	add	r2, r3
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	fbb2 f3f3 	udiv	r3, r2, r3
 800609c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800609e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a0:	2b0f      	cmp	r3, #15
 80060a2:	d909      	bls.n	80060b8 <UART_SetConfig+0xc9c>
 80060a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060aa:	d205      	bcs.n	80060b8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60da      	str	r2, [r3, #12]
 80060b6:	e002      	b.n	80060be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2200      	movs	r2, #0
 80060d2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2200      	movs	r2, #0
 80060d8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80060da:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3748      	adds	r7, #72	; 0x48
 80060e2:	46bd      	mov	sp, r7
 80060e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060e8:	03d09000 	.word	0x03d09000
 80060ec:	003d0900 	.word	0x003d0900
 80060f0:	080097b0 	.word	0x080097b0

080060f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006188:	f003 0310 	and.w	r3, r3, #16
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01a      	beq.n	800620a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061f2:	d10a      	bne.n	800620a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	605a      	str	r2, [r3, #4]
  }
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b098      	sub	sp, #96	; 0x60
 800623c:	af02      	add	r7, sp, #8
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006248:	f7fa fe3a 	bl	8000ec0 <HAL_GetTick>
 800624c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b08      	cmp	r3, #8
 800625a:	d12f      	bne.n	80062bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800625c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006264:	2200      	movs	r2, #0
 8006266:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f88e 	bl	800638c <UART_WaitOnFlagUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d022      	beq.n	80062bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627e:	e853 3f00 	ldrex	r3, [r3]
 8006282:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800628a:	653b      	str	r3, [r7, #80]	; 0x50
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	461a      	mov	r2, r3
 8006292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006294:	647b      	str	r3, [r7, #68]	; 0x44
 8006296:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006298:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800629a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800629c:	e841 2300 	strex	r3, r2, [r1]
 80062a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1e6      	bne.n	8006276 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e063      	b.n	8006384 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0304 	and.w	r3, r3, #4
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d149      	bne.n	800635e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062d2:	2200      	movs	r2, #0
 80062d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f857 	bl	800638c <UART_WaitOnFlagUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d03c      	beq.n	800635e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	623b      	str	r3, [r7, #32]
   return(result);
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006302:	633b      	str	r3, [r7, #48]	; 0x30
 8006304:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e6      	bne.n	80062e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3308      	adds	r3, #8
 800631c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	60fb      	str	r3, [r7, #12]
   return(result);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f023 0301 	bic.w	r3, r3, #1
 800632c:	64bb      	str	r3, [r7, #72]	; 0x48
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3308      	adds	r3, #8
 8006334:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006336:	61fa      	str	r2, [r7, #28]
 8006338:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	69b9      	ldr	r1, [r7, #24]
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	617b      	str	r3, [r7, #20]
   return(result);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1e5      	bne.n	8006316 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2220      	movs	r2, #32
 800634e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e012      	b.n	8006384 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2220      	movs	r2, #32
 800636a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3758      	adds	r7, #88	; 0x58
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	4613      	mov	r3, r2
 800639a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800639c:	e049      	b.n	8006432 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a4:	d045      	beq.n	8006432 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a6:	f7fa fd8b 	bl	8000ec0 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d302      	bcc.n	80063bc <UART_WaitOnFlagUntilTimeout+0x30>
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e048      	b.n	8006452 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d031      	beq.n	8006432 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d110      	bne.n	80063fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2208      	movs	r2, #8
 80063e2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f95b 	bl	80066a0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2208      	movs	r2, #8
 80063ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e029      	b.n	8006452 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800640c:	d111      	bne.n	8006432 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006416:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 f941 	bl	80066a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2220      	movs	r2, #32
 8006422:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e00f      	b.n	8006452 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	69da      	ldr	r2, [r3, #28]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	4013      	ands	r3, r2
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	429a      	cmp	r2, r3
 8006440:	bf0c      	ite	eq
 8006442:	2301      	moveq	r3, #1
 8006444:	2300      	movne	r3, #0
 8006446:	b2db      	uxtb	r3, r3
 8006448:	461a      	mov	r2, r3
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	429a      	cmp	r2, r3
 800644e:	d0a6      	beq.n	800639e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800645c:	b480      	push	{r7}
 800645e:	b0a3      	sub	sp, #140	; 0x8c
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	4613      	mov	r3, r2
 8006468:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	88fa      	ldrh	r2, [r7, #6]
 8006474:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	88fa      	ldrh	r2, [r7, #6]
 800647c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648e:	d10e      	bne.n	80064ae <UART_Start_Receive_IT+0x52>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d105      	bne.n	80064a4 <UART_Start_Receive_IT+0x48>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800649e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064a2:	e02d      	b.n	8006500 <UART_Start_Receive_IT+0xa4>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	22ff      	movs	r2, #255	; 0xff
 80064a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064ac:	e028      	b.n	8006500 <UART_Start_Receive_IT+0xa4>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10d      	bne.n	80064d2 <UART_Start_Receive_IT+0x76>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <UART_Start_Receive_IT+0x6c>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	22ff      	movs	r2, #255	; 0xff
 80064c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064c6:	e01b      	b.n	8006500 <UART_Start_Receive_IT+0xa4>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	227f      	movs	r2, #127	; 0x7f
 80064cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064d0:	e016      	b.n	8006500 <UART_Start_Receive_IT+0xa4>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064da:	d10d      	bne.n	80064f8 <UART_Start_Receive_IT+0x9c>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d104      	bne.n	80064ee <UART_Start_Receive_IT+0x92>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	227f      	movs	r2, #127	; 0x7f
 80064e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064ec:	e008      	b.n	8006500 <UART_Start_Receive_IT+0xa4>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	223f      	movs	r2, #63	; 0x3f
 80064f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064f6:	e003      	b.n	8006500 <UART_Start_Receive_IT+0xa4>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2222      	movs	r2, #34	; 0x22
 800650c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3308      	adds	r3, #8
 8006516:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006522:	f043 0301 	orr.w	r3, r3, #1
 8006526:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3308      	adds	r3, #8
 8006530:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006534:	673a      	str	r2, [r7, #112]	; 0x70
 8006536:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006538:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800653a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800653c:	e841 2300 	strex	r3, r2, [r1]
 8006540:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1e3      	bne.n	8006510 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800654c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006550:	d14f      	bne.n	80065f2 <UART_Start_Receive_IT+0x196>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006558:	88fa      	ldrh	r2, [r7, #6]
 800655a:	429a      	cmp	r2, r3
 800655c:	d349      	bcc.n	80065f2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006566:	d107      	bne.n	8006578 <UART_Start_Receive_IT+0x11c>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d103      	bne.n	8006578 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4a47      	ldr	r2, [pc, #284]	; (8006690 <UART_Start_Receive_IT+0x234>)
 8006574:	675a      	str	r2, [r3, #116]	; 0x74
 8006576:	e002      	b.n	800657e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4a46      	ldr	r2, [pc, #280]	; (8006694 <UART_Start_Receive_IT+0x238>)
 800657c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d01a      	beq.n	80065bc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800658e:	e853 3f00 	ldrex	r3, [r3]
 8006592:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800659a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065aa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065b0:	e841 2300 	strex	r3, r2, [r1]
 80065b4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e4      	bne.n	8006586 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3308      	adds	r3, #8
 80065c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3308      	adds	r3, #8
 80065da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80065dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80065de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e5      	bne.n	80065bc <UART_Start_Receive_IT+0x160>
 80065f0:	e046      	b.n	8006680 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fa:	d107      	bne.n	800660c <UART_Start_Receive_IT+0x1b0>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d103      	bne.n	800660c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4a24      	ldr	r2, [pc, #144]	; (8006698 <UART_Start_Receive_IT+0x23c>)
 8006608:	675a      	str	r2, [r3, #116]	; 0x74
 800660a:	e002      	b.n	8006612 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4a23      	ldr	r2, [pc, #140]	; (800669c <UART_Start_Receive_IT+0x240>)
 8006610:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d019      	beq.n	800664e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800662e:	677b      	str	r3, [r7, #116]	; 0x74
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006638:	637b      	str	r3, [r7, #52]	; 0x34
 800663a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800663e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e6      	bne.n	800661a <UART_Start_Receive_IT+0x1be>
 800664c:	e018      	b.n	8006680 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	e853 3f00 	ldrex	r3, [r3]
 800665a:	613b      	str	r3, [r7, #16]
   return(result);
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f043 0320 	orr.w	r3, r3, #32
 8006662:	67bb      	str	r3, [r7, #120]	; 0x78
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	461a      	mov	r2, r3
 800666a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800666c:	623b      	str	r3, [r7, #32]
 800666e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	69f9      	ldr	r1, [r7, #28]
 8006672:	6a3a      	ldr	r2, [r7, #32]
 8006674:	e841 2300 	strex	r3, r2, [r1]
 8006678:	61bb      	str	r3, [r7, #24]
   return(result);
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e6      	bne.n	800664e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	378c      	adds	r7, #140	; 0x8c
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	08006ec1 	.word	0x08006ec1
 8006694:	08006b61 	.word	0x08006b61
 8006698:	080069a9 	.word	0x080069a9
 800669c:	080067f1 	.word	0x080067f1

080066a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b095      	sub	sp, #84	; 0x54
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c6:	643b      	str	r3, [r7, #64]	; 0x40
 80066c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066ce:	e841 2300 	strex	r3, r2, [r1]
 80066d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1e6      	bne.n	80066a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3308      	adds	r3, #8
 80066e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	e853 3f00 	ldrex	r3, [r3]
 80066e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80066ea:	69fa      	ldr	r2, [r7, #28]
 80066ec:	4b1e      	ldr	r3, [pc, #120]	; (8006768 <UART_EndRxTransfer+0xc8>)
 80066ee:	4013      	ands	r3, r2
 80066f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3308      	adds	r3, #8
 80066f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006702:	e841 2300 	strex	r3, r2, [r1]
 8006706:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1e5      	bne.n	80066da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006712:	2b01      	cmp	r3, #1
 8006714:	d118      	bne.n	8006748 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	60bb      	str	r3, [r7, #8]
   return(result);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f023 0310 	bic.w	r3, r3, #16
 800672a:	647b      	str	r3, [r7, #68]	; 0x44
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	461a      	mov	r2, r3
 8006732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6979      	ldr	r1, [r7, #20]
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	613b      	str	r3, [r7, #16]
   return(result);
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e6      	bne.n	8006716 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800675c:	bf00      	nop
 800675e:	3754      	adds	r7, #84	; 0x54
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	effffffe 	.word	0xeffffffe

0800676c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006778:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f7f9 ff60 	bl	8000650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006790:	bf00      	nop
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b088      	sub	sp, #32
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b4:	61fb      	str	r3, [r7, #28]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	61bb      	str	r3, [r7, #24]
 80067c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	6979      	ldr	r1, [r7, #20]
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	613b      	str	r3, [r7, #16]
   return(result);
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e6      	bne.n	80067a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7fe fe05 	bl	80053f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067e6:	bf00      	nop
 80067e8:	3720      	adds	r7, #32
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
	...

080067f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b09c      	sub	sp, #112	; 0x70
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067fe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006808:	2b22      	cmp	r3, #34	; 0x22
 800680a:	f040 80be 	bne.w	800698a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006818:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800681c:	b2d9      	uxtb	r1, r3
 800681e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006822:	b2da      	uxtb	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006828:	400a      	ands	r2, r1
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800683e:	b29b      	uxth	r3, r3
 8006840:	3b01      	subs	r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006850:	b29b      	uxth	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	f040 80a1 	bne.w	800699a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800686c:	66bb      	str	r3, [r7, #104]	; 0x68
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006876:	65bb      	str	r3, [r7, #88]	; 0x58
 8006878:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800687c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e6      	bne.n	8006858 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3308      	adds	r3, #8
 8006890:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800689a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689c:	f023 0301 	bic.w	r3, r3, #1
 80068a0:	667b      	str	r3, [r7, #100]	; 0x64
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3308      	adds	r3, #8
 80068a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80068aa:	647a      	str	r2, [r7, #68]	; 0x44
 80068ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e5      	bne.n	800688a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a33      	ldr	r2, [pc, #204]	; (80069a4 <UART_RxISR_8BIT+0x1b4>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d01f      	beq.n	800691c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d018      	beq.n	800691c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	e853 3f00 	ldrex	r3, [r3]
 80068f6:	623b      	str	r3, [r7, #32]
   return(result);
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068fe:	663b      	str	r3, [r7, #96]	; 0x60
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	461a      	mov	r2, r3
 8006906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006908:	633b      	str	r3, [r7, #48]	; 0x30
 800690a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800690e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006910:	e841 2300 	strex	r3, r2, [r1]
 8006914:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1e6      	bne.n	80068ea <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006920:	2b01      	cmp	r3, #1
 8006922:	d12e      	bne.n	8006982 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	60fb      	str	r3, [r7, #12]
   return(result);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0310 	bic.w	r3, r3, #16
 800693e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	461a      	mov	r2, r3
 8006946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006948:	61fb      	str	r3, [r7, #28]
 800694a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	69b9      	ldr	r1, [r7, #24]
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	617b      	str	r3, [r7, #20]
   return(result);
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e6      	bne.n	800692a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f003 0310 	and.w	r3, r3, #16
 8006966:	2b10      	cmp	r3, #16
 8006968:	d103      	bne.n	8006972 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2210      	movs	r2, #16
 8006970:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7fe fd42 	bl	8005404 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006980:	e00b      	b.n	800699a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7f9 fe30 	bl	80005e8 <HAL_UART_RxCpltCallback>
}
 8006988:	e007      	b.n	800699a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	699a      	ldr	r2, [r3, #24]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f042 0208 	orr.w	r2, r2, #8
 8006998:	619a      	str	r2, [r3, #24]
}
 800699a:	bf00      	nop
 800699c:	3770      	adds	r7, #112	; 0x70
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	58000c00 	.word	0x58000c00

080069a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b09c      	sub	sp, #112	; 0x70
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80069b6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069c0:	2b22      	cmp	r3, #34	; 0x22
 80069c2:	f040 80be 	bne.w	8006b42 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80069d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80069da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80069de:	4013      	ands	r3, r2
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ea:	1c9a      	adds	r2, r3, #2
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f040 80a1 	bne.w	8006b52 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a24:	667b      	str	r3, [r7, #100]	; 0x64
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a2e:	657b      	str	r3, [r7, #84]	; 0x54
 8006a30:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e6      	bne.n	8006a10 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3308      	adds	r3, #8
 8006a48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	f023 0301 	bic.w	r3, r3, #1
 8006a58:	663b      	str	r3, [r7, #96]	; 0x60
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3308      	adds	r3, #8
 8006a60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a62:	643a      	str	r2, [r7, #64]	; 0x40
 8006a64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e5      	bne.n	8006a42 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a33      	ldr	r2, [pc, #204]	; (8006b5c <UART_RxISR_16BIT+0x1b4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d01f      	beq.n	8006ad4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d018      	beq.n	8006ad4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	e853 3f00 	ldrex	r3, [r3]
 8006aae:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ac2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e6      	bne.n	8006aa2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d12e      	bne.n	8006b3a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	e853 3f00 	ldrex	r3, [r3]
 8006aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f023 0310 	bic.w	r3, r3, #16
 8006af6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b00:	61bb      	str	r3, [r7, #24]
 8006b02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	6979      	ldr	r1, [r7, #20]
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e6      	bne.n	8006ae2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	f003 0310 	and.w	r3, r3, #16
 8006b1e:	2b10      	cmp	r3, #16
 8006b20:	d103      	bne.n	8006b2a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2210      	movs	r2, #16
 8006b28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b30:	4619      	mov	r1, r3
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7fe fc66 	bl	8005404 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b38:	e00b      	b.n	8006b52 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7f9 fd54 	bl	80005e8 <HAL_UART_RxCpltCallback>
}
 8006b40:	e007      	b.n	8006b52 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0208 	orr.w	r2, r2, #8
 8006b50:	619a      	str	r2, [r3, #24]
}
 8006b52:	bf00      	nop
 8006b54:	3770      	adds	r7, #112	; 0x70
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	58000c00 	.word	0x58000c00

08006b60 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b0ac      	sub	sp, #176	; 0xb0
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b6e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b96:	2b22      	cmp	r3, #34	; 0x22
 8006b98:	f040 8180 	bne.w	8006e9c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ba2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ba6:	e123      	b.n	8006df0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bb2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006bb6:	b2d9      	uxtb	r1, r3
 8006bb8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc2:	400a      	ands	r2, r1
 8006bc4:	b2d2      	uxtb	r2, r2
 8006bc6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006bee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d053      	beq.n	8006ca2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d011      	beq.n	8006c2a <UART_RxISR_8BIT_FIFOEN+0xca>
 8006c06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00b      	beq.n	8006c2a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2201      	movs	r2, #1
 8006c18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c20:	f043 0201 	orr.w	r2, r3, #1
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d011      	beq.n	8006c5a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00b      	beq.n	8006c5a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2202      	movs	r2, #2
 8006c48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c50:	f043 0204 	orr.w	r2, r3, #4
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c5e:	f003 0304 	and.w	r3, r3, #4
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d011      	beq.n	8006c8a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006c66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00b      	beq.n	8006c8a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2204      	movs	r2, #4
 8006c78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c80:	f043 0202 	orr.w	r2, r3, #2
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d006      	beq.n	8006ca2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7f9 fcdb 	bl	8000650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f040 80a0 	bne.w	8006df0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cd4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006cd8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006cda:	e841 2300 	strex	r3, r2, [r1]
 8006cde:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1e4      	bne.n	8006cb0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3308      	adds	r3, #8
 8006cec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006cf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cf8:	4b6e      	ldr	r3, [pc, #440]	; (8006eb4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	3308      	adds	r3, #8
 8006d06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d0a:	66ba      	str	r2, [r7, #104]	; 0x68
 8006d0c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006d10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d12:	e841 2300 	strex	r3, r2, [r1]
 8006d16:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006d18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1e3      	bne.n	8006ce6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2220      	movs	r2, #32
 8006d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a60      	ldr	r2, [pc, #384]	; (8006eb8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d021      	beq.n	8006d80 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d01a      	beq.n	8006d80 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d52:	e853 3f00 	ldrex	r3, [r3]
 8006d56:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d6c:	657b      	str	r3, [r7, #84]	; 0x54
 8006d6e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d74:	e841 2300 	strex	r3, r2, [r1]
 8006d78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1e4      	bne.n	8006d4a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d130      	bne.n	8006dea <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9e:	f023 0310 	bic.w	r3, r3, #16
 8006da2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006db0:	643b      	str	r3, [r7, #64]	; 0x40
 8006db2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006db6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006db8:	e841 2300 	strex	r3, r2, [r1]
 8006dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1e4      	bne.n	8006d8e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	f003 0310 	and.w	r3, r3, #16
 8006dce:	2b10      	cmp	r3, #16
 8006dd0:	d103      	bne.n	8006dda <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2210      	movs	r2, #16
 8006dd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fe fb0e 	bl	8005404 <HAL_UARTEx_RxEventCallback>
 8006de8:	e002      	b.n	8006df0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7f9 fbfc 	bl	80005e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006df0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d006      	beq.n	8006e06 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8006df8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dfc:	f003 0320 	and.w	r3, r3, #32
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f47f aed1 	bne.w	8006ba8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e0c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006e10:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d049      	beq.n	8006eac <UART_RxISR_8BIT_FIFOEN+0x34c>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e1e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d242      	bcs.n	8006eac <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3308      	adds	r3, #8
 8006e46:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1e3      	bne.n	8006e26 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a16      	ldr	r2, [pc, #88]	; (8006ebc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006e62:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	f043 0320 	orr.w	r3, r3, #32
 8006e78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	461a      	mov	r2, r3
 8006e82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e86:	61bb      	str	r3, [r7, #24]
 8006e88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	6979      	ldr	r1, [r7, #20]
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	613b      	str	r3, [r7, #16]
   return(result);
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e4      	bne.n	8006e64 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e9a:	e007      	b.n	8006eac <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699a      	ldr	r2, [r3, #24]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 0208 	orr.w	r2, r2, #8
 8006eaa:	619a      	str	r2, [r3, #24]
}
 8006eac:	bf00      	nop
 8006eae:	37b0      	adds	r7, #176	; 0xb0
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	effffffe 	.word	0xeffffffe
 8006eb8:	58000c00 	.word	0x58000c00
 8006ebc:	080067f1 	.word	0x080067f1

08006ec0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b0ae      	sub	sp, #184	; 0xb8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ece:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ef6:	2b22      	cmp	r3, #34	; 0x22
 8006ef8:	f040 8184 	bne.w	8007204 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f02:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f06:	e127      	b.n	8007158 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006f1a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006f1e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006f22:	4013      	ands	r3, r2
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f30:	1c9a      	adds	r2, r3, #2
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f56:	f003 0307 	and.w	r3, r3, #7
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d053      	beq.n	8007006 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d011      	beq.n	8006f8e <UART_RxISR_16BIT_FIFOEN+0xce>
 8006f6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00b      	beq.n	8006f8e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f84:	f043 0201 	orr.w	r2, r3, #1
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d011      	beq.n	8006fbe <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006f9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00b      	beq.n	8006fbe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2202      	movs	r2, #2
 8006fac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb4:	f043 0204 	orr.w	r2, r3, #4
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fc2:	f003 0304 	and.w	r3, r3, #4
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d011      	beq.n	8006fee <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006fca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00b      	beq.n	8006fee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2204      	movs	r2, #4
 8006fdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe4:	f043 0202 	orr.w	r2, r3, #2
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d006      	beq.n	8007006 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7f9 fb29 	bl	8000650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	f040 80a2 	bne.w	8007158 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	461a      	mov	r2, r3
 8007032:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007036:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800703a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800703e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e2      	bne.n	8007014 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3308      	adds	r3, #8
 8007054:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800705e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007060:	4b6e      	ldr	r3, [pc, #440]	; (800721c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8007062:	4013      	ands	r3, r2
 8007064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3308      	adds	r3, #8
 800706e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007072:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007074:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007078:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e3      	bne.n	800704e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a60      	ldr	r2, [pc, #384]	; (8007220 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d021      	beq.n	80070e8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d01a      	beq.n	80070e8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ba:	e853 3f00 	ldrex	r3, [r3]
 80070be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80070d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070dc:	e841 2300 	strex	r3, r2, [r1]
 80070e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1e4      	bne.n	80070b2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d130      	bne.n	8007152 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	e853 3f00 	ldrex	r3, [r3]
 8007102:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007106:	f023 0310 	bic.w	r3, r3, #16
 800710a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007118:	647b      	str	r3, [r7, #68]	; 0x44
 800711a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800711e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e4      	bne.n	80070f6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	f003 0310 	and.w	r3, r3, #16
 8007136:	2b10      	cmp	r3, #16
 8007138:	d103      	bne.n	8007142 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2210      	movs	r2, #16
 8007140:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007148:	4619      	mov	r1, r3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7fe f95a 	bl	8005404 <HAL_UARTEx_RxEventCallback>
 8007150:	e002      	b.n	8007158 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7f9 fa48 	bl	80005e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007158:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800715c:	2b00      	cmp	r3, #0
 800715e:	d006      	beq.n	800716e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8007160:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007164:	f003 0320 	and.w	r3, r3, #32
 8007168:	2b00      	cmp	r3, #0
 800716a:	f47f aecd 	bne.w	8006f08 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007174:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007178:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800717c:	2b00      	cmp	r3, #0
 800717e:	d049      	beq.n	8007214 <UART_RxISR_16BIT_FIFOEN+0x354>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007186:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800718a:	429a      	cmp	r2, r3
 800718c:	d242      	bcs.n	8007214 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3308      	adds	r3, #8
 8007194:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	e853 3f00 	ldrex	r3, [r3]
 800719c:	623b      	str	r3, [r7, #32]
   return(result);
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3308      	adds	r3, #8
 80071ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80071b2:	633a      	str	r2, [r7, #48]	; 0x30
 80071b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ba:	e841 2300 	strex	r3, r2, [r1]
 80071be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1e3      	bne.n	800718e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a16      	ldr	r2, [pc, #88]	; (8007224 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80071ca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f043 0320 	orr.w	r3, r3, #32
 80071e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	461a      	mov	r2, r3
 80071ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071ee:	61fb      	str	r3, [r7, #28]
 80071f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	69b9      	ldr	r1, [r7, #24]
 80071f4:	69fa      	ldr	r2, [r7, #28]
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	617b      	str	r3, [r7, #20]
   return(result);
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e4      	bne.n	80071cc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007202:	e007      	b.n	8007214 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699a      	ldr	r2, [r3, #24]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0208 	orr.w	r2, r2, #8
 8007212:	619a      	str	r2, [r3, #24]
}
 8007214:	bf00      	nop
 8007216:	37b8      	adds	r7, #184	; 0xb8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	effffffe 	.word	0xeffffffe
 8007220:	58000c00 	.word	0x58000c00
 8007224:	080069a9 	.word	0x080069a9

08007228 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007272:	2b01      	cmp	r3, #1
 8007274:	d101      	bne.n	800727a <HAL_UARTEx_DisableFifoMode+0x16>
 8007276:	2302      	movs	r3, #2
 8007278:	e027      	b.n	80072ca <HAL_UARTEx_DisableFifoMode+0x66>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2224      	movs	r2, #36	; 0x24
 8007286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 0201 	bic.w	r2, r2, #1
 80072a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80072a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d101      	bne.n	80072ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072ea:	2302      	movs	r3, #2
 80072ec:	e02d      	b.n	800734a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2224      	movs	r2, #36	; 0x24
 80072fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 0201 	bic.w	r2, r2, #1
 8007314:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f850 	bl	80073d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2220      	movs	r2, #32
 800733c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007362:	2b01      	cmp	r3, #1
 8007364:	d101      	bne.n	800736a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007366:	2302      	movs	r3, #2
 8007368:	e02d      	b.n	80073c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2224      	movs	r2, #36	; 0x24
 8007376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f022 0201 	bic.w	r2, r2, #1
 8007390:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f812 	bl	80073d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2220      	movs	r2, #32
 80073b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d108      	bne.n	80073f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073f0:	e031      	b.n	8007456 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073f2:	2310      	movs	r3, #16
 80073f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073f6:	2310      	movs	r3, #16
 80073f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	0e5b      	lsrs	r3, r3, #25
 8007402:	b2db      	uxtb	r3, r3
 8007404:	f003 0307 	and.w	r3, r3, #7
 8007408:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	0f5b      	lsrs	r3, r3, #29
 8007412:	b2db      	uxtb	r3, r3
 8007414:	f003 0307 	and.w	r3, r3, #7
 8007418:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800741a:	7bbb      	ldrb	r3, [r7, #14]
 800741c:	7b3a      	ldrb	r2, [r7, #12]
 800741e:	4911      	ldr	r1, [pc, #68]	; (8007464 <UARTEx_SetNbDataToProcess+0x94>)
 8007420:	5c8a      	ldrb	r2, [r1, r2]
 8007422:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007426:	7b3a      	ldrb	r2, [r7, #12]
 8007428:	490f      	ldr	r1, [pc, #60]	; (8007468 <UARTEx_SetNbDataToProcess+0x98>)
 800742a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800742c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007430:	b29a      	uxth	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	7b7a      	ldrb	r2, [r7, #13]
 800743c:	4909      	ldr	r1, [pc, #36]	; (8007464 <UARTEx_SetNbDataToProcess+0x94>)
 800743e:	5c8a      	ldrb	r2, [r1, r2]
 8007440:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007444:	7b7a      	ldrb	r2, [r7, #13]
 8007446:	4908      	ldr	r1, [pc, #32]	; (8007468 <UARTEx_SetNbDataToProcess+0x98>)
 8007448:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800744a:	fb93 f3f2 	sdiv	r3, r3, r2
 800744e:	b29a      	uxth	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007456:	bf00      	nop
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	080097c8 	.word	0x080097c8
 8007468:	080097d0 	.word	0x080097d0

0800746c <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 800746c:	b480      	push	{r7}
 800746e:	b08f      	sub	sp, #60	; 0x3c
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	891a      	ldrh	r2, [r3, #8]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	8a1b      	ldrh	r3, [r3, #16]
 800747e:	429a      	cmp	r2, r3
 8007480:	d301      	bcc.n	8007486 <load_descriptor_values+0x1a>
        return false;
 8007482:	2300      	movs	r3, #0
 8007484:	e156      	b.n	8007734 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	895b      	ldrh	r3, [r3, #10]
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	62fb      	str	r3, [r7, #44]	; 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8007498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749a:	0a1b      	lsrs	r3, r3, #8
 800749c:	b2da      	uxtb	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 80074a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a4:	f003 0303 	and.w	r3, r3, #3
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d05a      	beq.n	8007562 <load_descriptor_values+0xf6>
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	f200 8094 	bhi.w	80075da <load_descriptor_values+0x16e>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <load_descriptor_values+0x50>
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d01f      	beq.n	80074fa <load_descriptor_values+0x8e>
 80074ba:	e08e      	b.n	80075da <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 80074c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c4:	089b      	lsrs	r3, r3, #2
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 80074d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d4:	0e1b      	lsrs	r3, r3, #24
 80074d6:	b25b      	sxtb	r3, r3
 80074d8:	f003 030f 	and.w	r3, r3, #15
 80074dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = (word0 >> 16) & 0xFF;
 80074e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e2:	0c1b      	lsrs	r3, r3, #16
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 80074e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ea:	0f1b      	lsrs	r3, r3, #28
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	f003 030f 	and.w	r3, r3, #15
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	825a      	strh	r2, [r3, #18]
            break;
 80074f8:	e0b4      	b.n	8007664 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	895b      	ldrh	r3, [r3, #10]
 8007504:	3301      	adds	r3, #1
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 800750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007510:	0c1b      	lsrs	r3, r3, #16
 8007512:	b29b      	uxth	r3, r3
 8007514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007518:	b29a      	uxth	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 800751e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007520:	089b      	lsrs	r3, r3, #2
 8007522:	b29b      	uxth	r3, r3
 8007524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007528:	b29a      	uxth	r2, r3
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	0f1b      	lsrs	r3, r3, #28
 800752e:	b29b      	uxth	r3, r3
 8007530:	019b      	lsls	r3, r3, #6
 8007532:	b29b      	uxth	r3, r3
 8007534:	4313      	orrs	r3, r2
 8007536:	b29a      	uxth	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 800753c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753e:	0f1b      	lsrs	r3, r3, #28
 8007540:	b25b      	sxtb	r3, r3
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word1 & 0xFFFF;
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	b29b      	uxth	r3, r3
 800754e:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	0c1b      	lsrs	r3, r3, #16
 8007554:	b29b      	uxth	r3, r3
 8007556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800755a:	b29a      	uxth	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	825a      	strh	r2, [r3, #18]
            break;
 8007560:	e080      	b.n	8007664 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	895b      	ldrh	r3, [r3, #10]
 800756c:	3301      	adds	r3, #1
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	62bb      	str	r3, [r7, #40]	; 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	895b      	ldrh	r3, [r3, #10]
 8007580:	3302      	adds	r3, #2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	895b      	ldrh	r3, [r3, #10]
 8007594:	3303      	adds	r3, #3
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 800759e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a0:	0c1b      	lsrs	r3, r3, #16
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 80075a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075aa:	089b      	lsrs	r3, r3, #2
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	0a1b      	lsrs	r3, r3, #8
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	019b      	lsls	r3, r3, #6
 80075bc:	b29b      	uxth	r3, r3
 80075be:	4313      	orrs	r3, r2
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 80075c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 80075d0:	6a3b      	ldr	r3, [r7, #32]
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	825a      	strh	r2, [r3, #18]
            break;
 80075d8:	e044      	b.n	8007664 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	895b      	ldrh	r3, [r3, #10]
 80075e4:	3301      	adds	r3, #1
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	895b      	ldrh	r3, [r3, #10]
 80075f8:	3302      	adds	r3, #2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	895b      	ldrh	r3, [r3, #10]
 800760c:	3303      	adds	r3, #3
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	895b      	ldrh	r3, [r3, #10]
 8007620:	3304      	adds	r3, #4
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	b29a      	uxth	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8007632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007634:	089b      	lsrs	r3, r3, #2
 8007636:	b29b      	uxth	r3, r3
 8007638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800763c:	b29a      	uxth	r2, r3
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	0a1b      	lsrs	r3, r3, #8
 8007642:	b29b      	uxth	r3, r3
 8007644:	019b      	lsls	r3, r3, #6
 8007646:	b29b      	uxth	r3, r3
 8007648:	4313      	orrs	r3, r2
 800764a:	b29a      	uxth	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	b29a      	uxth	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	825a      	strh	r2, [r3, #18]
            break;
 8007662:	bf00      	nop
        }
    }

    if (!iter->message)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d106      	bne.n	800767a <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	621a      	str	r2, [r3, #32]
 8007678:	e041      	b.n	80076fe <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007680:	441a      	add	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8007686:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800768a:	2b00      	cmp	r3, #0
 800768c:	d008      	beq.n	80076a0 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699a      	ldr	r2, [r3, #24]
 8007692:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007696:	425b      	negs	r3, r3
 8007698:	441a      	add	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	621a      	str	r2, [r3, #32]
 800769e:	e01a      	b.n	80076d6 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	7d9b      	ldrb	r3, [r3, #22]
 80076a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80076a8:	2b20      	cmp	r3, #32
 80076aa:	d111      	bne.n	80076d0 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	7d9b      	ldrb	r3, [r3, #22]
 80076b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d005      	beq.n	80076c4 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	7d9b      	ldrb	r3, [r3, #22]
 80076bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 80076c0:	2b80      	cmp	r3, #128	; 0x80
 80076c2:	d105      	bne.n	80076d0 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f103 0214 	add.w	r2, r3, #20
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	621a      	str	r2, [r3, #32]
 80076ce:	e002      	b.n	80076d6 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	7d9b      	ldrb	r3, [r3, #22]
 80076da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076de:	2b80      	cmp	r3, #128	; 0x80
 80076e0:	d109      	bne.n	80076f6 <load_descriptor_values+0x28a>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	61da      	str	r2, [r3, #28]
 80076f4:	e003      	b.n	80076fe <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	699a      	ldr	r2, [r3, #24]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	7d9b      	ldrb	r3, [r3, #22]
 8007702:	f003 030f 	and.w	r3, r3, #15
 8007706:	2b08      	cmp	r3, #8
 8007708:	d005      	beq.n	8007716 <load_descriptor_values+0x2aa>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7d9b      	ldrb	r3, [r3, #22]
 800770e:	f003 030f 	and.w	r3, r3, #15
 8007712:	2b09      	cmp	r3, #9
 8007714:	d10a      	bne.n	800772c <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	89db      	ldrh	r3, [r3, #14]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	625a      	str	r2, [r3, #36]	; 0x24
 800772a:	e002      	b.n	8007732 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 8007732:	2301      	movs	r3, #1
}
 8007734:	4618      	mov	r0, r3
 8007736:	373c      	adds	r7, #60	; 0x3c
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
    iter->index++;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	891b      	ldrh	r3, [r3, #8]
 800774c:	3301      	adds	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	891a      	ldrh	r2, [r3, #8]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	8a1b      	ldrh	r3, [r3, #16]
 800775e:	429a      	cmp	r2, r3
 8007760:	d30c      	bcc.n	800777c <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 800777a:	e03c      	b.n	80077f6 <advance_iterator+0xb6>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	895b      	ldrh	r3, [r3, #10]
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	0a1b      	lsrs	r3, r3, #8
 8007792:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f003 0303 	and.w	r3, r3, #3
 800779a:	2201      	movs	r2, #1
 800779c:	fa02 f303 	lsl.w	r3, r2, r3
 80077a0:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	895a      	ldrh	r2, [r3, #10]
 80077a6:	893b      	ldrh	r3, [r7, #8]
 80077a8:	4413      	add	r3, r2
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	899a      	ldrh	r2, [r3, #12]
 80077b4:	7afb      	ldrb	r3, [r7, #11]
 80077b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	bf0c      	ite	eq
 80077be:	2301      	moveq	r3, #1
 80077c0:	2300      	movne	r3, #0
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	4413      	add	r3, r2
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	89da      	ldrh	r2, [r3, #14]
 80077d2:	7afb      	ldrb	r3, [r7, #11]
 80077d4:	f003 030f 	and.w	r3, r3, #15
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d004      	beq.n	80077e6 <advance_iterator+0xa6>
 80077dc:	7afb      	ldrb	r3, [r7, #11]
 80077de:	f003 030f 	and.w	r3, r3, #15
 80077e2:	2b09      	cmp	r3, #9
 80077e4:	d101      	bne.n	80077ea <advance_iterator+0xaa>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e000      	b.n	80077ec <advance_iterator+0xac>
 80077ea:	2300      	movs	r3, #0
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	4413      	add	r3, r2
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	81da      	strh	r2, [r3, #14]
}
 80077f6:	bf00      	nop
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b084      	sub	sp, #16
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 800780e:	2228      	movs	r2, #40	; 0x28
 8007810:	2100      	movs	r1, #0
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f001 fe9e 	bl	8009554 <memset>

    iter->descriptor = desc;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	601a      	str	r2, [r3, #0]
    iter->message = message;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f7ff fe21 	bl	800746c <load_descriptor_values>
 800782a:	4603      	mov	r3, r0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	0a1b      	lsrs	r3, r3, #8
 8007852:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007856:	2b80      	cmp	r3, #128	; 0x80
 8007858:	d109      	bne.n	800786e <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	3304      	adds	r3, #4
 800785e:	461a      	mov	r2, r3
 8007860:	6939      	ldr	r1, [r7, #16]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7ff ffcd 	bl	8007802 <pb_field_iter_begin>
 8007868:	4603      	mov	r3, r0
 800786a:	75fb      	strb	r3, [r7, #23]
 800786c:	e008      	b.n	8007880 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	461a      	mov	r2, r3
 8007874:	6939      	ldr	r1, [r7, #16]
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7ff ffc3 	bl	8007802 <pb_field_iter_begin>
 800787c:	4603      	mov	r3, r0
 800787e:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	f103 020c 	add.w	r2, r3, #12
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	621a      	str	r2, [r3, #32]
    return status;
 800788a:	7dfb      	ldrb	r3, [r7, #23]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff ff4f 	bl	8007740 <advance_iterator>
    (void)load_descriptor_values(iter);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7ff fde2 	bl	800746c <load_descriptor_values>
    return iter->index != 0;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	891b      	ldrh	r3, [r3, #8]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	bf14      	ite	ne
 80078b0:	2301      	movne	r3, #1
 80078b2:	2300      	moveq	r3, #0
 80078b4:	b2db      	uxtb	r3, r3
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b084      	sub	sp, #16
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	8a1b      	ldrh	r3, [r3, #16]
 80078cc:	461a      	mov	r2, r3
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d101      	bne.n	80078d8 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 80078d4:	2301      	movs	r3, #1
 80078d6:	e044      	b.n	8007962 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	8a9b      	ldrh	r3, [r3, #20]
 80078de:	461a      	mov	r2, r3
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d901      	bls.n	80078ea <pb_field_iter_find+0x2c>
    {
        return false;
 80078e6:	2300      	movs	r3, #0
 80078e8:	e03b      	b.n	8007962 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	891b      	ldrh	r3, [r3, #8]
 80078ee:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	8a1b      	ldrh	r3, [r3, #16]
 80078f4:	461a      	mov	r2, r3
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d204      	bcs.n	8007906 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	8a1a      	ldrh	r2, [r3, #16]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff ff1a 	bl	8007740 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	895b      	ldrh	r3, [r3, #10]
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	089a      	lsrs	r2, r3, #2
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	4053      	eors	r3, r2
 8007926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800792a:	2b00      	cmp	r3, #0
 800792c:	d110      	bne.n	8007950 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7ff fd9c 	bl	800746c <load_descriptor_values>

                if (iter->tag == tag &&
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	8a1b      	ldrh	r3, [r3, #16]
 8007938:	461a      	mov	r2, r3
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	4293      	cmp	r3, r2
 800793e:	d107      	bne.n	8007950 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	7d9b      	ldrb	r3, [r3, #22]
 8007944:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8007948:	2b0a      	cmp	r3, #10
 800794a:	d001      	beq.n	8007950 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 800794c:	2301      	movs	r3, #1
 800794e:	e008      	b.n	8007962 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	891b      	ldrh	r3, [r3, #8]
 8007954:	89fa      	ldrh	r2, [r7, #14]
 8007956:	429a      	cmp	r2, r3
 8007958:	d1d5      	bne.n	8007906 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7ff fd86 	bl	800746c <load_descriptor_values>
        return false;
 8007960:	2300      	movs	r3, #0
    }
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	7d9b      	ldrb	r3, [r3, #22]
 8007976:	f003 030f 	and.w	r3, r3, #15
 800797a:	2b0a      	cmp	r3, #10
 800797c:	d101      	bne.n	8007982 <pb_field_iter_find_extension+0x18>
    {
        return true;
 800797e:	2301      	movs	r3, #1
 8007980:	e022      	b.n	80079c8 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	891b      	ldrh	r3, [r3, #8]
 8007986:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7ff fed9 	bl	8007740 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	895b      	ldrh	r3, [r3, #10]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	0a1b      	lsrs	r3, r3, #8
 80079a4:	f003 030f 	and.w	r3, r3, #15
 80079a8:	2b0a      	cmp	r3, #10
 80079aa:	d104      	bne.n	80079b6 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7ff fd5d 	bl	800746c <load_descriptor_values>
 80079b2:	4603      	mov	r3, r0
 80079b4:	e008      	b.n	80079c8 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	891b      	ldrh	r3, [r3, #8]
 80079ba:	89fa      	ldrh	r2, [r7, #14]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d1e3      	bne.n	8007988 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f7ff fd53 	bl	800746c <load_descriptor_values>
        return false;
 80079c6:	2300      	movs	r3, #0
    }
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	441a      	add	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d004      	beq.n	80079fe <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6979      	ldr	r1, [r7, #20]
 80079f8:	68b8      	ldr	r0, [r7, #8]
 80079fa:	f001 fdd7 	bl	80095ac <memcpy>
    }
    
    return true;
 80079fe:	2301      	movs	r3, #1
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b088      	sub	sp, #32
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <pb_read+0x16>
        return true;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e05f      	b.n	8007ade <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d123      	bne.n	8007a6c <pb_read+0x64>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a2f      	ldr	r2, [pc, #188]	; (8007ae8 <pb_read+0xe0>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d01e      	beq.n	8007a6c <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8007a2e:	e011      	b.n	8007a54 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8007a30:	f107 0310 	add.w	r3, r7, #16
 8007a34:	2210      	movs	r2, #16
 8007a36:	4619      	mov	r1, r3
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f7ff ffe5 	bl	8007a08 <pb_read>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	f083 0301 	eor.w	r3, r3, #1
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <pb_read+0x46>
				return false;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e047      	b.n	8007ade <pb_read+0xd6>
			
			count -= 16;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	3b10      	subs	r3, #16
 8007a52:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b10      	cmp	r3, #16
 8007a58:	d8ea      	bhi.n	8007a30 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 8007a5a:	f107 0310 	add.w	r3, r7, #16
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	4619      	mov	r1, r3
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f7ff ffd0 	bl	8007a08 <pb_read>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	e038      	b.n	8007ade <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d90b      	bls.n	8007a8e <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <pb_read+0x7c>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	e000      	b.n	8007a86 <pb_read+0x7e>
 8007a84:	4b19      	ldr	r3, [pc, #100]	; (8007aec <pb_read+0xe4>)
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	60d3      	str	r3, [r2, #12]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e027      	b.n	8007ade <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	68b9      	ldr	r1, [r7, #8]
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	4798      	blx	r3
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	f083 0301 	eor.w	r3, r3, #1
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00b      	beq.n	8007abe <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d002      	beq.n	8007ab4 <pb_read+0xac>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	e000      	b.n	8007ab6 <pb_read+0xae>
 8007ab4:	4b0e      	ldr	r3, [pc, #56]	; (8007af0 <pb_read+0xe8>)
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	60d3      	str	r3, [r2, #12]
 8007aba:	2300      	movs	r3, #0
 8007abc:	e00f      	b.n	8007ade <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d903      	bls.n	8007ad0 <pb_read+0xc8>
        stream->bytes_left = 0;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	609a      	str	r2, [r3, #8]
 8007ace:	e005      	b.n	8007adc <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	689a      	ldr	r2, [r3, #8]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	1ad2      	subs	r2, r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	609a      	str	r2, [r3, #8]

    return true;
 8007adc:	2301      	movs	r3, #1
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3720      	adds	r7, #32
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	080079d1 	.word	0x080079d1
 8007aec:	080095e4 	.word	0x080095e4
 8007af0:	080095f4 	.word	0x080095f4

08007af4 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10b      	bne.n	8007b1e <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <pb_readbyte+0x20>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	e000      	b.n	8007b16 <pb_readbyte+0x22>
 8007b14:	4b13      	ldr	r3, [pc, #76]	; (8007b64 <pb_readbyte+0x70>)
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	60d3      	str	r3, [r2, #12]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	e01d      	b.n	8007b5a <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2201      	movs	r2, #1
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	4798      	blx	r3
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	f083 0301 	eor.w	r3, r3, #1
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00b      	beq.n	8007b4e <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <pb_readbyte+0x50>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	e000      	b.n	8007b46 <pb_readbyte+0x52>
 8007b44:	4b08      	ldr	r3, [pc, #32]	; (8007b68 <pb_readbyte+0x74>)
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	60d3      	str	r3, [r2, #12]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e005      	b.n	8007b5a <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	1e5a      	subs	r2, r3, #1
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	609a      	str	r2, [r3, #8]
    
    return true;    
 8007b58:	2301      	movs	r3, #1
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	080095e4 	.word	0x080095e4
 8007b68:	080095f4 	.word	0x080095f4

08007b6c <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8007b6c:	b490      	push	{r4, r7}
 8007b6e:	b08a      	sub	sp, #40	; 0x28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8007b78:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <pb_istream_from_buffer+0x38>)
 8007b7a:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	461c      	mov	r4, r3
 8007b90:	f107 0318 	add.w	r3, r7, #24
 8007b94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	3728      	adds	r7, #40	; 0x28
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bc90      	pop	{r4, r7}
 8007ba2:	4770      	bx	lr
 8007ba4:	080079d1 	.word	0x080079d1

08007ba8 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b088      	sub	sp, #32
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8007bb4:	f107 0315 	add.w	r3, r7, #21
 8007bb8:	4619      	mov	r1, r3
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f7ff ff9a 	bl	8007af4 <pb_readbyte>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	f083 0301 	eor.w	r3, r3, #1
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00b      	beq.n	8007be4 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d105      	bne.n	8007be0 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8007be0:	2300      	movs	r3, #0
 8007be2:	e084      	b.n	8007cee <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8007be4:	7d7b      	ldrb	r3, [r7, #21]
 8007be6:	b25b      	sxtb	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	db02      	blt.n	8007bf2 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8007bec:	7d7b      	ldrb	r3, [r7, #21]
 8007bee:	61fb      	str	r3, [r7, #28]
 8007bf0:	e079      	b.n	8007ce6 <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8007bf2:	2307      	movs	r3, #7
 8007bf4:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8007bf6:	7d7b      	ldrb	r3, [r7, #21]
 8007bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bfc:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8007bfe:	f107 0315 	add.w	r3, r7, #21
 8007c02:	4619      	mov	r1, r3
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f7ff ff75 	bl	8007af4 <pb_readbyte>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	f083 0301 	eor.w	r3, r3, #1
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d001      	beq.n	8007c1a <pb_decode_varint32_eof+0x72>
                return false;
 8007c16:	2300      	movs	r3, #0
 8007c18:	e069      	b.n	8007cee <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	2b1f      	cmp	r3, #31
 8007c1e:	d92f      	bls.n	8007c80 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	2b3e      	cmp	r3, #62	; 0x3e
 8007c24:	d801      	bhi.n	8007c2a <pb_decode_varint32_eof+0x82>
 8007c26:	23ff      	movs	r3, #255	; 0xff
 8007c28:	e000      	b.n	8007c2c <pb_decode_varint32_eof+0x84>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8007c2e:	7d7b      	ldrb	r3, [r7, #21]
 8007c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d006      	beq.n	8007c46 <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8007c38:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	da05      	bge.n	8007c4a <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 8007c3e:	7d7b      	ldrb	r3, [r7, #21]
 8007c40:	7dfa      	ldrb	r2, [r7, #23]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d101      	bne.n	8007c4a <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8007c46:	2301      	movs	r3, #1
 8007c48:	e000      	b.n	8007c4c <pb_decode_varint32_eof+0xa4>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	75bb      	strb	r3, [r7, #22]
 8007c4e:	7dbb      	ldrb	r3, [r7, #22]
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	2b3f      	cmp	r3, #63	; 0x3f
 8007c5a:	d805      	bhi.n	8007c68 <pb_decode_varint32_eof+0xc0>
 8007c5c:	7dbb      	ldrb	r3, [r7, #22]
 8007c5e:	f083 0301 	eor.w	r3, r3, #1
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d037      	beq.n	8007cd8 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <pb_decode_varint32_eof+0xce>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	e000      	b.n	8007c78 <pb_decode_varint32_eof+0xd0>
 8007c76:	4b20      	ldr	r3, [pc, #128]	; (8007cf8 <pb_decode_varint32_eof+0x150>)
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	60d3      	str	r3, [r2, #12]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	e036      	b.n	8007cee <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	2b1c      	cmp	r3, #28
 8007c84:	d11f      	bne.n	8007cc6 <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 8007c86:	7d7b      	ldrb	r3, [r7, #21]
 8007c88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d010      	beq.n	8007cb2 <pb_decode_varint32_eof+0x10a>
 8007c90:	7d7b      	ldrb	r3, [r7, #21]
 8007c92:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007c96:	2b78      	cmp	r3, #120	; 0x78
 8007c98:	d00b      	beq.n	8007cb2 <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d002      	beq.n	8007ca8 <pb_decode_varint32_eof+0x100>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	e000      	b.n	8007caa <pb_decode_varint32_eof+0x102>
 8007ca8:	4b13      	ldr	r3, [pc, #76]	; (8007cf8 <pb_decode_varint32_eof+0x150>)
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	60d3      	str	r3, [r2, #12]
 8007cae:	2300      	movs	r3, #0
 8007cb0:	e01d      	b.n	8007cee <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 8007cb2:	7d7b      	ldrb	r3, [r7, #21]
 8007cb4:	f003 020f 	and.w	r2, r3, #15
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	fa02 f303 	lsl.w	r3, r2, r3
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	61fb      	str	r3, [r7, #28]
 8007cc4:	e008      	b.n	8007cd8 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8007cc6:	7d7b      	ldrb	r3, [r7, #21]
 8007cc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd2:	69fa      	ldr	r2, [r7, #28]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	3307      	adds	r3, #7
 8007cdc:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8007cde:	7d7b      	ldrb	r3, [r7, #21]
 8007ce0:	b25b      	sxtb	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	db8b      	blt.n	8007bfe <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	69fa      	ldr	r2, [r7, #28]
 8007cea:	601a      	str	r2, [r3, #0]
   return true;
 8007cec:	2301      	movs	r3, #1
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3720      	adds	r7, #32
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	08009600 	.word	0x08009600

08007cfc <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8007d06:	2200      	movs	r2, #0
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7ff ff4c 	bl	8007ba8 <pb_decode_varint32_eof>
 8007d10:	4603      	mov	r3, r0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8007d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d20:	b08a      	sub	sp, #40	; 0x28
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	627b      	str	r3, [r7, #36]	; 0x24
    uint64_t result = 0;
 8007d2c:	f04f 0200 	mov.w	r2, #0
 8007d30:	f04f 0300 	mov.w	r3, #0
 8007d34:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 8007d38:	f107 0317 	add.w	r3, r7, #23
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f7ff fed8 	bl	8007af4 <pb_readbyte>
 8007d44:	4603      	mov	r3, r0
 8007d46:	f083 0301 	eor.w	r3, r3, #1
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d001      	beq.n	8007d54 <pb_decode_varint+0x38>
            return false;
 8007d50:	2300      	movs	r3, #0
 8007d52:	e041      	b.n	8007dd8 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	2b3e      	cmp	r3, #62	; 0x3e
 8007d58:	d910      	bls.n	8007d7c <pb_decode_varint+0x60>
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
 8007d5c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00b      	beq.n	8007d7c <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d002      	beq.n	8007d72 <pb_decode_varint+0x56>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	e000      	b.n	8007d74 <pb_decode_varint+0x58>
 8007d72:	4b1c      	ldr	r3, [pc, #112]	; (8007de4 <pb_decode_varint+0xc8>)
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	60d3      	str	r3, [r2, #12]
 8007d78:	2300      	movs	r3, #0
 8007d7a:	e02d      	b.n	8007dd8 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2200      	movs	r2, #0
 8007d82:	603b      	str	r3, [r7, #0]
 8007d84:	607a      	str	r2, [r7, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	f003 087f 	and.w	r8, r3, #127	; 0x7f
 8007d8c:	f04f 0900 	mov.w	r9, #0
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	f1a3 0120 	sub.w	r1, r3, #32
 8007d96:	f1c3 0220 	rsb	r2, r3, #32
 8007d9a:	fa09 f503 	lsl.w	r5, r9, r3
 8007d9e:	fa08 f101 	lsl.w	r1, r8, r1
 8007da2:	430d      	orrs	r5, r1
 8007da4:	fa28 f202 	lsr.w	r2, r8, r2
 8007da8:	4315      	orrs	r5, r2
 8007daa:	fa08 f403 	lsl.w	r4, r8, r3
 8007dae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007db2:	ea42 0a04 	orr.w	sl, r2, r4
 8007db6:	ea43 0b05 	orr.w	fp, r3, r5
 8007dba:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc0:	3307      	adds	r3, #7
 8007dc2:	627b      	str	r3, [r7, #36]	; 0x24
    } while (byte & 0x80);
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
 8007dc6:	b25b      	sxtb	r3, r3
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	dbb5      	blt.n	8007d38 <pb_decode_varint+0x1c>
    
    *dest = result;
 8007dcc:	68b9      	ldr	r1, [r7, #8]
 8007dce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dd2:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 8007dd6:	2301      	movs	r3, #1
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3728      	adds	r7, #40	; 0x28
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007de2:	bf00      	nop
 8007de4:	08009600 	.word	0x08009600

08007de8 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8007df0:	f107 030f 	add.w	r3, r7, #15
 8007df4:	2201      	movs	r2, #1
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7ff fe05 	bl	8007a08 <pb_read>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	f083 0301 	eor.w	r3, r3, #1
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <pb_skip_varint+0x26>
            return false;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	e004      	b.n	8007e18 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
 8007e10:	b25b      	sxtb	r3, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	dbec      	blt.n	8007df0 <pb_skip_varint+0x8>
    return true;
 8007e16:	2301      	movs	r3, #1
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8007e28:	f107 030c 	add.w	r3, r7, #12
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff ff64 	bl	8007cfc <pb_decode_varint32>
 8007e34:	4603      	mov	r3, r0
 8007e36:	f083 0301 	eor.w	r3, r3, #1
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <pb_skip_string+0x24>
        return false;
 8007e40:	2300      	movs	r3, #0
 8007e42:	e006      	b.n	8007e52 <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	461a      	mov	r2, r3
 8007e48:	2100      	movs	r1, #0
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7ff fddc 	bl	8007a08 <pb_read>
 8007e50:	4603      	mov	r3, r0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b086      	sub	sp, #24
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	60f8      	str	r0, [r7, #12]
 8007e62:	60b9      	str	r1, [r7, #8]
 8007e64:	607a      	str	r2, [r7, #4]
 8007e66:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2200      	movs	r2, #0
 8007e72:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8007e7a:	f107 0314 	add.w	r3, r7, #20
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	4619      	mov	r1, r3
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f7ff fe90 	bl	8007ba8 <pb_decode_varint32_eof>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	f083 0301 	eor.w	r3, r3, #1
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d001      	beq.n	8007e98 <pb_decode_tag+0x3e>
    {
        return false;
 8007e94:	2300      	movs	r3, #0
 8007e96:	e00b      	b.n	8007eb0 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	08da      	lsrs	r2, r3, #3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	f003 0307 	and.w	r3, r3, #7
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	701a      	strb	r2, [r3, #0]
    return true;
 8007eae:	2301      	movs	r3, #1
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3718      	adds	r7, #24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	2b05      	cmp	r3, #5
 8007ec8:	d826      	bhi.n	8007f18 <pb_skip_field+0x60>
 8007eca:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <pb_skip_field+0x18>)
 8007ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed0:	08007ee9 	.word	0x08007ee9
 8007ed4:	08007ef3 	.word	0x08007ef3
 8007ed8:	08007f01 	.word	0x08007f01
 8007edc:	08007f19 	.word	0x08007f19
 8007ee0:	08007f19 	.word	0x08007f19
 8007ee4:	08007f0b 	.word	0x08007f0b
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7ff ff7d 	bl	8007de8 <pb_skip_varint>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	e01d      	b.n	8007f2e <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8007ef2:	2208      	movs	r2, #8
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7ff fd86 	bl	8007a08 <pb_read>
 8007efc:	4603      	mov	r3, r0
 8007efe:	e016      	b.n	8007f2e <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7ff ff8d 	bl	8007e20 <pb_skip_string>
 8007f06:	4603      	mov	r3, r0
 8007f08:	e011      	b.n	8007f2e <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8007f0a:	2204      	movs	r2, #4
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7ff fd7a 	bl	8007a08 <pb_read>
 8007f14:	4603      	mov	r3, r0
 8007f16:	e00a      	b.n	8007f2e <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <pb_skip_field+0x6e>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	e000      	b.n	8007f28 <pb_skip_field+0x70>
 8007f26:	4b04      	ldr	r3, [pc, #16]	; (8007f38 <pb_skip_field+0x80>)
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	60d3      	str	r3, [r2, #12]
 8007f2c:	2300      	movs	r3, #0
    }
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	08009610 	.word	0x08009610

08007f3c <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	607a      	str	r2, [r7, #4]
 8007f46:	603b      	str	r3, [r7, #0]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 8007f52:	7afb      	ldrb	r3, [r7, #11]
 8007f54:	2b05      	cmp	r3, #5
 8007f56:	d03f      	beq.n	8007fd8 <read_raw_value+0x9c>
 8007f58:	2b05      	cmp	r3, #5
 8007f5a:	dc47      	bgt.n	8007fec <read_raw_value+0xb0>
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <read_raw_value+0x2a>
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d02f      	beq.n	8007fc4 <read_raw_value+0x88>
 8007f64:	e042      	b.n	8007fec <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	1c5a      	adds	r2, r3, #1
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d20b      	bcs.n	8007f98 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <read_raw_value+0x52>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	e000      	b.n	8007f90 <read_raw_value+0x54>
 8007f8e:	4b1f      	ldr	r3, [pc, #124]	; (800800c <read_raw_value+0xd0>)
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	60d3      	str	r3, [r2, #12]
 8007f94:	2300      	movs	r3, #0
 8007f96:	e034      	b.n	8008002 <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 8007f98:	2201      	movs	r2, #1
 8007f9a:	6879      	ldr	r1, [r7, #4]
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff fd33 	bl	8007a08 <pb_read>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	f083 0301 	eor.w	r3, r3, #1
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <read_raw_value+0x76>
                    return false;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	e027      	b.n	8008002 <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	b25b      	sxtb	r3, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dbd5      	blt.n	8007f6c <read_raw_value+0x30>
            return true;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e01e      	b.n	8008002 <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2208      	movs	r2, #8
 8007fc8:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 8007fca:	2208      	movs	r2, #8
 8007fcc:	6879      	ldr	r1, [r7, #4]
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f7ff fd1a 	bl	8007a08 <pb_read>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	e014      	b.n	8008002 <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	2204      	movs	r2, #4
 8007fdc:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 8007fde:	2204      	movs	r2, #4
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f7ff fd10 	bl	8007a08 <pb_read>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	e00a      	b.n	8008002 <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <read_raw_value+0xbe>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	e000      	b.n	8007ffc <read_raw_value+0xc0>
 8007ffa:	4b05      	ldr	r3, [pc, #20]	; (8008010 <read_raw_value+0xd4>)
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	60d3      	str	r3, [r2, #12]
 8008000:	2300      	movs	r3, #0
    }
}
 8008002:	4618      	mov	r0, r3
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	08009600 	.word	0x08009600
 8008010:	08009610 	.word	0x08009610

08008014 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8008014:	b590      	push	{r4, r7, lr}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 800801e:	f107 030c 	add.w	r3, r7, #12
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7ff fe69 	bl	8007cfc <pb_decode_varint32>
 800802a:	4603      	mov	r3, r0
 800802c:	f083 0301 	eor.w	r3, r3, #1
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <pb_make_string_substream+0x26>
        return false;
 8008036:	2300      	movs	r3, #0
 8008038:	e020      	b.n	800807c <pb_make_string_substream+0x68>
    
    *substream = *stream;
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4614      	mov	r4, r2
 8008040:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008042:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	429a      	cmp	r2, r3
 800804e:	d20b      	bcs.n	8008068 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <pb_make_string_substream+0x4a>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	e000      	b.n	8008060 <pb_make_string_substream+0x4c>
 800805e:	4b09      	ldr	r3, [pc, #36]	; (8008084 <pb_make_string_substream+0x70>)
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	60d3      	str	r3, [r2, #12]
 8008064:	2300      	movs	r3, #0
 8008066:	e009      	b.n	800807c <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	689a      	ldr	r2, [r3, #8]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	1ad2      	subs	r2, r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	609a      	str	r2, [r3, #8]
    return true;
 800807a:	2301      	movs	r3, #1
}
 800807c:	4618      	mov	r0, r3
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	bd90      	pop	{r4, r7, pc}
 8008084:	08009624 	.word	0x08009624

08008088 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00e      	beq.n	80080b8 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	461a      	mov	r2, r3
 80080a0:	2100      	movs	r1, #0
 80080a2:	6838      	ldr	r0, [r7, #0]
 80080a4:	f7ff fcb0 	bl	8007a08 <pb_read>
 80080a8:	4603      	mov	r3, r0
 80080aa:	f083 0301 	eor.w	r3, r3, #1
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <pb_close_string_substream+0x30>
            return false;
 80080b4:	2300      	movs	r3, #0
 80080b6:	e008      	b.n	80080ca <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	68da      	ldr	r2, [r3, #12]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	60da      	str	r2, [r3, #12]
#endif
    return true;
 80080c8:	2301      	movs	r3, #1
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
	...

080080d4 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	460b      	mov	r3, r1
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	7d9b      	ldrb	r3, [r3, #22]
 80080e6:	f003 030f 	and.w	r3, r3, #15
 80080ea:	2b0b      	cmp	r3, #11
 80080ec:	f200 80d4 	bhi.w	8008298 <decode_basic_field+0x1c4>
 80080f0:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <decode_basic_field+0x24>)
 80080f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f6:	bf00      	nop
 80080f8:	08008129 	.word	0x08008129
 80080fc:	08008159 	.word	0x08008159
 8008100:	08008159 	.word	0x08008159
 8008104:	08008159 	.word	0x08008159
 8008108:	08008189 	.word	0x08008189
 800810c:	080081bd 	.word	0x080081bd
 8008110:	080081f1 	.word	0x080081f1
 8008114:	0800821b 	.word	0x0800821b
 8008118:	08008245 	.word	0x08008245
 800811c:	08008245 	.word	0x08008245
 8008120:	08008299 	.word	0x08008299
 8008124:	0800826f 	.word	0x0800826f
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8008128:	7afb      	ldrb	r3, [r7, #11]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00e      	beq.n	800814c <decode_basic_field+0x78>
 800812e:	7afb      	ldrb	r3, [r7, #11]
 8008130:	2bff      	cmp	r3, #255	; 0xff
 8008132:	d00b      	beq.n	800814c <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <decode_basic_field+0x6e>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	e000      	b.n	8008144 <decode_basic_field+0x70>
 8008142:	4b5d      	ldr	r3, [pc, #372]	; (80082b8 <decode_basic_field+0x1e4>)
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	60d3      	str	r3, [r2, #12]
 8008148:	2300      	movs	r3, #0
 800814a:	e0b0      	b.n	80082ae <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 800814c:	6879      	ldr	r1, [r7, #4]
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f000 fef6 	bl	8008f40 <pb_dec_bool>
 8008154:	4603      	mov	r3, r0
 8008156:	e0aa      	b.n	80082ae <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8008158:	7afb      	ldrb	r3, [r7, #11]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00e      	beq.n	800817c <decode_basic_field+0xa8>
 800815e:	7afb      	ldrb	r3, [r7, #11]
 8008160:	2bff      	cmp	r3, #255	; 0xff
 8008162:	d00b      	beq.n	800817c <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <decode_basic_field+0x9e>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	e000      	b.n	8008174 <decode_basic_field+0xa0>
 8008172:	4b51      	ldr	r3, [pc, #324]	; (80082b8 <decode_basic_field+0x1e4>)
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	60d3      	str	r3, [r2, #12]
 8008178:	2300      	movs	r3, #0
 800817a:	e098      	b.n	80082ae <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 feee 	bl	8008f60 <pb_dec_varint>
 8008184:	4603      	mov	r3, r0
 8008186:	e092      	b.n	80082ae <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 8008188:	7afb      	ldrb	r3, [r7, #11]
 800818a:	2b05      	cmp	r3, #5
 800818c:	d00e      	beq.n	80081ac <decode_basic_field+0xd8>
 800818e:	7afb      	ldrb	r3, [r7, #11]
 8008190:	2bff      	cmp	r3, #255	; 0xff
 8008192:	d00b      	beq.n	80081ac <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <decode_basic_field+0xce>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	e000      	b.n	80081a4 <decode_basic_field+0xd0>
 80081a2:	4b45      	ldr	r3, [pc, #276]	; (80082b8 <decode_basic_field+0x1e4>)
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	60d3      	str	r3, [r2, #12]
 80081a8:	2300      	movs	r3, #0
 80081aa:	e080      	b.n	80082ae <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	69db      	ldr	r3, [r3, #28]
 80081b0:	4619      	mov	r1, r3
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f000 fe8a 	bl	8008ecc <pb_decode_fixed32>
 80081b8:	4603      	mov	r3, r0
 80081ba:	e078      	b.n	80082ae <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 80081bc:	7afb      	ldrb	r3, [r7, #11]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d00e      	beq.n	80081e0 <decode_basic_field+0x10c>
 80081c2:	7afb      	ldrb	r3, [r7, #11]
 80081c4:	2bff      	cmp	r3, #255	; 0xff
 80081c6:	d00b      	beq.n	80081e0 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <decode_basic_field+0x102>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	e000      	b.n	80081d8 <decode_basic_field+0x104>
 80081d6:	4b38      	ldr	r3, [pc, #224]	; (80082b8 <decode_basic_field+0x1e4>)
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	60d3      	str	r3, [r2, #12]
 80081dc:	2300      	movs	r3, #0
 80081de:	e066      	b.n	80082ae <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	4619      	mov	r1, r3
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f000 fe8c 	bl	8008f04 <pb_decode_fixed64>
 80081ec:	4603      	mov	r3, r0
 80081ee:	e05e      	b.n	80082ae <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 80081f0:	7afb      	ldrb	r3, [r7, #11]
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d00b      	beq.n	800820e <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <decode_basic_field+0x130>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	e000      	b.n	8008206 <decode_basic_field+0x132>
 8008204:	4b2c      	ldr	r3, [pc, #176]	; (80082b8 <decode_basic_field+0x1e4>)
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	60d3      	str	r3, [r2, #12]
 800820a:	2300      	movs	r3, #0
 800820c:	e04f      	b.n	80082ae <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f000 ffd1 	bl	80091b8 <pb_dec_bytes>
 8008216:	4603      	mov	r3, r0
 8008218:	e049      	b.n	80082ae <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 800821a:	7afb      	ldrb	r3, [r7, #11]
 800821c:	2b02      	cmp	r3, #2
 800821e:	d00b      	beq.n	8008238 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d002      	beq.n	800822e <decode_basic_field+0x15a>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	e000      	b.n	8008230 <decode_basic_field+0x15c>
 800822e:	4b22      	ldr	r3, [pc, #136]	; (80082b8 <decode_basic_field+0x1e4>)
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	60d3      	str	r3, [r2, #12]
 8008234:	2300      	movs	r3, #0
 8008236:	e03a      	b.n	80082ae <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 8008238:	6879      	ldr	r1, [r7, #4]
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f001 f830 	bl	80092a0 <pb_dec_string>
 8008240:	4603      	mov	r3, r0
 8008242:	e034      	b.n	80082ae <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 8008244:	7afb      	ldrb	r3, [r7, #11]
 8008246:	2b02      	cmp	r3, #2
 8008248:	d00b      	beq.n	8008262 <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <decode_basic_field+0x184>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	e000      	b.n	800825a <decode_basic_field+0x186>
 8008258:	4b17      	ldr	r3, [pc, #92]	; (80082b8 <decode_basic_field+0x1e4>)
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	60d3      	str	r3, [r2, #12]
 800825e:	2300      	movs	r3, #0
 8008260:	e025      	b.n	80082ae <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 8008262:	6879      	ldr	r1, [r7, #4]
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f001 f897 	bl	8009398 <pb_dec_submessage>
 800826a:	4603      	mov	r3, r0
 800826c:	e01f      	b.n	80082ae <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 800826e:	7afb      	ldrb	r3, [r7, #11]
 8008270:	2b02      	cmp	r3, #2
 8008272:	d00b      	beq.n	800828c <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d002      	beq.n	8008282 <decode_basic_field+0x1ae>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	e000      	b.n	8008284 <decode_basic_field+0x1b0>
 8008282:	4b0d      	ldr	r3, [pc, #52]	; (80082b8 <decode_basic_field+0x1e4>)
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	60d3      	str	r3, [r2, #12]
 8008288:	2300      	movs	r3, #0
 800828a:	e010      	b.n	80082ae <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 800828c:	6879      	ldr	r1, [r7, #4]
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f001 f90c 	bl	80094ac <pb_dec_fixed_length_bytes>
 8008294:	4603      	mov	r3, r0
 8008296:	e00a      	b.n	80082ae <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <decode_basic_field+0x1d2>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	e000      	b.n	80082a8 <decode_basic_field+0x1d4>
 80082a6:	4b05      	ldr	r3, [pc, #20]	; (80082bc <decode_basic_field+0x1e8>)
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	60d3      	str	r3, [r2, #12]
 80082ac:	2300      	movs	r3, #0
    }
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	0800963c 	.word	0x0800963c
 80082bc:	0800964c 	.word	0x0800964c

080082c0 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b096      	sub	sp, #88	; 0x58
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	460b      	mov	r3, r1
 80082ca:	607a      	str	r2, [r7, #4]
 80082cc:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	7d9b      	ldrb	r3, [r3, #22]
 80082d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80082d6:	2b30      	cmp	r3, #48	; 0x30
 80082d8:	f000 80c2 	beq.w	8008460 <decode_static_field+0x1a0>
 80082dc:	2b30      	cmp	r3, #48	; 0x30
 80082de:	f200 811a 	bhi.w	8008516 <decode_static_field+0x256>
 80082e2:	2b20      	cmp	r3, #32
 80082e4:	d01f      	beq.n	8008326 <decode_static_field+0x66>
 80082e6:	2b20      	cmp	r3, #32
 80082e8:	f200 8115 	bhi.w	8008516 <decode_static_field+0x256>
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <decode_static_field+0x36>
 80082f0:	2b10      	cmp	r3, #16
 80082f2:	d008      	beq.n	8008306 <decode_static_field+0x46>
 80082f4:	e10f      	b.n	8008516 <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 80082f6:	7afb      	ldrb	r3, [r7, #11]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	4619      	mov	r1, r3
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f7ff fee9 	bl	80080d4 <decode_basic_field>
 8008302:	4603      	mov	r3, r0
 8008304:	e112      	b.n	800852c <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d003      	beq.n	8008316 <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	2201      	movs	r2, #1
 8008314:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 8008316:	7afb      	ldrb	r3, [r7, #11]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	4619      	mov	r1, r3
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f7ff fed9 	bl	80080d4 <decode_basic_field>
 8008322:	4603      	mov	r3, r0
 8008324:	e102      	b.n	800852c <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 8008326:	7afb      	ldrb	r3, [r7, #11]
 8008328:	2b02      	cmp	r3, #2
 800832a:	d16c      	bne.n	8008406 <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	7d9b      	ldrb	r3, [r3, #22]
 8008330:	f003 030f 	and.w	r3, r3, #15
 8008334:	2b05      	cmp	r3, #5
 8008336:	d866      	bhi.n	8008406 <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 8008338:	2301      	movs	r3, #1
 800833a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	653b      	str	r3, [r7, #80]	; 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	8a52      	ldrh	r2, [r2, #18]
 800834c:	4611      	mov	r1, r2
 800834e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008350:	8812      	ldrh	r2, [r2, #0]
 8008352:	fb01 f202 	mul.w	r2, r1, r2
 8008356:	441a      	add	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 800835c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008360:	4619      	mov	r1, r3
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f7ff fe56 	bl	8008014 <pb_make_string_substream>
 8008368:	4603      	mov	r3, r0
 800836a:	f083 0301 	eor.w	r3, r3, #1
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	d01f      	beq.n	80083b4 <decode_static_field+0xf4>
                    return false;
 8008374:	2300      	movs	r3, #0
 8008376:	e0d9      	b.n	800852c <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 8008378:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	21ff      	movs	r1, #255	; 0xff
 8008380:	4618      	mov	r0, r3
 8008382:	f7ff fea7 	bl	80080d4 <decode_basic_field>
 8008386:	4603      	mov	r3, r0
 8008388:	f083 0301 	eor.w	r3, r3, #1
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <decode_static_field+0xda>
                    {
                        status = false;
 8008392:	2300      	movs	r3, #0
 8008394:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 8008398:	e015      	b.n	80083c6 <decode_static_field+0x106>
                    }
                    (*size)++;
 800839a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	3301      	adds	r3, #1
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083a4:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	8a52      	ldrh	r2, [r2, #18]
 80083ae:	441a      	add	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 80083b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d005      	beq.n	80083c6 <decode_static_field+0x106>
 80083ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083bc:	881a      	ldrh	r2, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	8a9b      	ldrh	r3, [r3, #20]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d3d8      	bcc.n	8008378 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 80083c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00b      	beq.n	80083e4 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <decode_static_field+0x11a>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	e000      	b.n	80083dc <decode_static_field+0x11c>
 80083da:	4b56      	ldr	r3, [pc, #344]	; (8008534 <decode_static_field+0x274>)
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	60d3      	str	r3, [r2, #12]
 80083e0:	2300      	movs	r3, #0
 80083e2:	e0a3      	b.n	800852c <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 80083e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80083e8:	4619      	mov	r1, r3
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff fe4c 	bl	8008088 <pb_close_string_substream>
 80083f0:	4603      	mov	r3, r0
 80083f2:	f083 0301 	eor.w	r3, r3, #1
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <decode_static_field+0x140>
                    return false;
 80083fc:	2300      	movs	r3, #0
 80083fe:	e095      	b.n	800852c <decode_static_field+0x26c>

                return status;
 8008400:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008404:	e092      	b.n	800852c <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	64fb      	str	r3, [r7, #76]	; 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	8a52      	ldrh	r2, [r2, #18]
 8008414:	4611      	mov	r1, r2
 8008416:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008418:	8812      	ldrh	r2, [r2, #0]
 800841a:	fb01 f202 	mul.w	r2, r1, r2
 800841e:	441a      	add	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 8008424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	1c5a      	adds	r2, r3, #1
 800842a:	b291      	uxth	r1, r2
 800842c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800842e:	8011      	strh	r1, [r2, #0]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	8a92      	ldrh	r2, [r2, #20]
 8008434:	4293      	cmp	r3, r2
 8008436:	d30b      	bcc.n	8008450 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d002      	beq.n	8008446 <decode_static_field+0x186>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	e000      	b.n	8008448 <decode_static_field+0x188>
 8008446:	4b3b      	ldr	r3, [pc, #236]	; (8008534 <decode_static_field+0x274>)
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	60d3      	str	r3, [r2, #12]
 800844c:	2300      	movs	r3, #0
 800844e:	e06d      	b.n	800852c <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 8008450:	7afb      	ldrb	r3, [r7, #11]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	4619      	mov	r1, r3
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f7ff fe3c 	bl	80080d4 <decode_basic_field>
 800845c:	4603      	mov	r3, r0
 800845e:	e065      	b.n	800852c <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	7d9b      	ldrb	r3, [r3, #22]
 8008464:	f003 030f 	and.w	r3, r3, #15
 8008468:	2b08      	cmp	r3, #8
 800846a:	d005      	beq.n	8008478 <decode_static_field+0x1b8>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	7d9b      	ldrb	r3, [r3, #22]
 8008470:	f003 030f 	and.w	r3, r3, #15
 8008474:	2b09      	cmp	r3, #9
 8008476:	d141      	bne.n	80084fc <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a1b      	ldr	r3, [r3, #32]
 800847c:	881a      	ldrh	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8008482:	429a      	cmp	r2, r3
 8008484:	d03a      	beq.n	80084fc <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	69d8      	ldr	r0, [r3, #28]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	8a5b      	ldrh	r3, [r3, #18]
 800848e:	461a      	mov	r2, r3
 8008490:	2100      	movs	r1, #0
 8008492:	f001 f85f 	bl	8009554 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10a      	bne.n	80084b6 <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d105      	bne.n	80084b6 <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d022      	beq.n	80084fc <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	69da      	ldr	r2, [r3, #28]
 80084be:	f107 0314 	add.w	r3, r7, #20
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7ff f99d 	bl	8007802 <pb_field_iter_begin>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d016      	beq.n	80084fc <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 80084ce:	f107 0314 	add.w	r3, r7, #20
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 fa4d 	bl	8008972 <pb_message_set_to_defaults>
 80084d8:	4603      	mov	r3, r0
 80084da:	f083 0301 	eor.w	r3, r3, #1
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00b      	beq.n	80084fc <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <decode_static_field+0x232>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	e000      	b.n	80084f4 <decode_static_field+0x234>
 80084f2:	4b11      	ldr	r3, [pc, #68]	; (8008538 <decode_static_field+0x278>)
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	60d3      	str	r3, [r2, #12]
 80084f8:	2300      	movs	r3, #0
 80084fa:	e017      	b.n	800852c <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a1b      	ldr	r3, [r3, #32]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	8a12      	ldrh	r2, [r2, #16]
 8008504:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 8008506:	7afb      	ldrb	r3, [r7, #11]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	4619      	mov	r1, r3
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f7ff fde1 	bl	80080d4 <decode_basic_field>
 8008512:	4603      	mov	r3, r0
 8008514:	e00a      	b.n	800852c <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d002      	beq.n	8008524 <decode_static_field+0x264>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	e000      	b.n	8008526 <decode_static_field+0x266>
 8008524:	4b05      	ldr	r3, [pc, #20]	; (800853c <decode_static_field+0x27c>)
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	60d3      	str	r3, [r2, #12]
 800852a:	2300      	movs	r3, #0
    }
}
 800852c:	4618      	mov	r0, r3
 800852e:	3758      	adds	r7, #88	; 0x58
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	08009660 	.word	0x08009660
 8008538:	08009670 	.word	0x08009670
 800853c:	0800964c 	.word	0x0800964c

08008540 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	460b      	mov	r3, r1
 800854a:	607a      	str	r2, [r7, #4]
 800854c:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d002      	beq.n	800855c <decode_pointer_field+0x1c>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	e000      	b.n	800855e <decode_pointer_field+0x1e>
 800855c:	4b04      	ldr	r3, [pc, #16]	; (8008570 <decode_pointer_field+0x30>)
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	60d3      	str	r3, [r2, #12]
 8008562:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8008564:	4618      	mov	r0, r3
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr
 8008570:	08009688 	.word	0x08009688

08008574 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8008574:	b590      	push	{r4, r7, lr}
 8008576:	b097      	sub	sp, #92	; 0x5c
 8008578:	af00      	add	r7, sp, #0
 800857a:	61f8      	str	r0, [r7, #28]
 800857c:	460b      	mov	r3, r1
 800857e:	617a      	str	r2, [r7, #20]
 8008580:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d106      	bne.n	800859a <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 800858c:	7efb      	ldrb	r3, [r7, #27]
 800858e:	4619      	mov	r1, r3
 8008590:	69f8      	ldr	r0, [r7, #28]
 8008592:	f7ff fc91 	bl	8007eb8 <pb_skip_field>
 8008596:	4603      	mov	r3, r0
 8008598:	e070      	b.n	800867c <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 800859a:	7efb      	ldrb	r3, [r7, #27]
 800859c:	2b02      	cmp	r3, #2
 800859e:	d145      	bne.n	800862c <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 80085a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80085a4:	4619      	mov	r1, r3
 80085a6:	69f8      	ldr	r0, [r7, #28]
 80085a8:	f7ff fd34 	bl	8008014 <pb_make_string_substream>
 80085ac:	4603      	mov	r3, r0
 80085ae:	f083 0301 	eor.w	r3, r3, #1
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <decode_callback_field+0x48>
            return false;
 80085b8:	2300      	movs	r3, #0
 80085ba:	e05f      	b.n	800867c <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 80085bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085be:	657b      	str	r3, [r7, #84]	; 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	2100      	movs	r1, #0
 80085ce:	4798      	blx	r3
 80085d0:	4603      	mov	r3, r0
 80085d2:	f083 0301 	eor.w	r3, r3, #1
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d010      	beq.n	80085fe <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d002      	beq.n	80085ea <decode_callback_field+0x76>
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	e005      	b.n	80085f6 <decode_callback_field+0x82>
 80085ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <decode_callback_field+0x80>
 80085f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085f2:	e000      	b.n	80085f6 <decode_callback_field+0x82>
 80085f4:	4b23      	ldr	r3, [pc, #140]	; (8008684 <decode_callback_field+0x110>)
 80085f6:	69fa      	ldr	r2, [r7, #28]
 80085f8:	60d3      	str	r3, [r2, #12]
                return false;
 80085fa:	2300      	movs	r3, #0
 80085fc:	e03e      	b.n	800867c <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 80085fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <decode_callback_field+0x98>
 8008604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008606:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008608:	429a      	cmp	r2, r3
 800860a:	d8d7      	bhi.n	80085bc <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 800860c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008610:	4619      	mov	r1, r3
 8008612:	69f8      	ldr	r0, [r7, #28]
 8008614:	f7ff fd38 	bl	8008088 <pb_close_string_substream>
 8008618:	4603      	mov	r3, r0
 800861a:	f083 0301 	eor.w	r3, r3, #1
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <decode_callback_field+0xb4>
            return false;
 8008624:	2300      	movs	r3, #0
 8008626:	e029      	b.n	800867c <decode_callback_field+0x108>

        return true;
 8008628:	2301      	movs	r3, #1
 800862a:	e027      	b.n	800867c <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 800862c:	230a      	movs	r3, #10
 800862e:	627b      	str	r3, [r7, #36]	; 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8008630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008634:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008638:	7ef9      	ldrb	r1, [r7, #27]
 800863a:	69f8      	ldr	r0, [r7, #28]
 800863c:	f7ff fc7e 	bl	8007f3c <read_raw_value>
 8008640:	4603      	mov	r3, r0
 8008642:	f083 0301 	eor.w	r3, r3, #1
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <decode_callback_field+0xdc>
            return false;
 800864c:	2300      	movs	r3, #0
 800864e:	e015      	b.n	800867c <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 8008650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008652:	463b      	mov	r3, r7
 8008654:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008658:	4618      	mov	r0, r3
 800865a:	f7ff fa87 	bl	8007b6c <pb_istream_from_buffer>
 800865e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8008662:	463b      	mov	r3, r7
 8008664:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008666:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8008674:	697a      	ldr	r2, [r7, #20]
 8008676:	2100      	movs	r1, #0
 8008678:	4798      	blx	r3
 800867a:	4603      	mov	r3, r0
    }
}
 800867c:	4618      	mov	r0, r3
 800867e:	375c      	adds	r7, #92	; 0x5c
 8008680:	46bd      	mov	sp, r7
 8008682:	bd90      	pop	{r4, r7, pc}
 8008684:	0800969c 	.word	0x0800969c

08008688 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	460b      	mov	r3, r1
 8008692:	607a      	str	r2, [r7, #4]
 8008694:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	7d9b      	ldrb	r3, [r3, #22]
 800869a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800869e:	2b80      	cmp	r3, #128	; 0x80
 80086a0:	d00e      	beq.n	80086c0 <decode_field+0x38>
 80086a2:	2b80      	cmp	r3, #128	; 0x80
 80086a4:	d81c      	bhi.n	80086e0 <decode_field+0x58>
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <decode_field+0x28>
 80086aa:	2b40      	cmp	r3, #64	; 0x40
 80086ac:	d010      	beq.n	80086d0 <decode_field+0x48>
 80086ae:	e017      	b.n	80086e0 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 80086b0:	7afb      	ldrb	r3, [r7, #11]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	4619      	mov	r1, r3
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f7ff fe02 	bl	80082c0 <decode_static_field>
 80086bc:	4603      	mov	r3, r0
 80086be:	e01a      	b.n	80086f6 <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 80086c0:	7afb      	ldrb	r3, [r7, #11]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	4619      	mov	r1, r3
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7ff ff3a 	bl	8008540 <decode_pointer_field>
 80086cc:	4603      	mov	r3, r0
 80086ce:	e012      	b.n	80086f6 <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 80086d0:	7afb      	ldrb	r3, [r7, #11]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	4619      	mov	r1, r3
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f7ff ff4c 	bl	8008574 <decode_callback_field>
 80086dc:	4603      	mov	r3, r0
 80086de:	e00a      	b.n	80086f6 <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <decode_field+0x66>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	e000      	b.n	80086f0 <decode_field+0x68>
 80086ee:	4b04      	ldr	r3, [pc, #16]	; (8008700 <decode_field+0x78>)
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	60d3      	str	r3, [r2, #12]
 80086f4:	2300      	movs	r3, #0
    }
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	0800964c 	.word	0x0800964c

08008704 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b08e      	sub	sp, #56	; 0x38
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8008712:	f107 0310 	add.w	r3, r7, #16
 8008716:	68b9      	ldr	r1, [r7, #8]
 8008718:	4618      	mov	r0, r3
 800871a:	f7ff f88b 	bl	8007834 <pb_field_iter_begin_extension>
 800871e:	4603      	mov	r3, r0
 8008720:	f083 0301 	eor.w	r3, r3, #1
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00b      	beq.n	8008742 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d002      	beq.n	8008738 <default_extension_decoder+0x34>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	e000      	b.n	800873a <default_extension_decoder+0x36>
 8008738:	4b0e      	ldr	r3, [pc, #56]	; (8008774 <default_extension_decoder+0x70>)
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	60d3      	str	r3, [r2, #12]
 800873e:	2300      	movs	r3, #0
 8008740:	e014      	b.n	800876c <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 8008742:	8c3b      	ldrh	r3, [r7, #32]
 8008744:	461a      	mov	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4293      	cmp	r3, r2
 800874a:	d102      	bne.n	8008752 <default_extension_decoder+0x4e>
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <default_extension_decoder+0x52>
        return true;
 8008752:	2301      	movs	r3, #1
 8008754:	e00a      	b.n	800876c <default_extension_decoder+0x68>

    extension->found = true;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2201      	movs	r2, #1
 800875a:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 800875c:	f107 0210 	add.w	r2, r7, #16
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	4619      	mov	r1, r3
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f7ff ff8f 	bl	8008688 <decode_field>
 800876a:	4603      	mov	r3, r0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3738      	adds	r7, #56	; 0x38
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	080096ac 	.word	0x080096ac

08008778 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8008778:	b590      	push	{r4, r7, lr}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	4613      	mov	r3, r2
 8008786:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 800878e:	e022      	b.n	80087d6 <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681c      	ldr	r4, [r3, #0]
 80087a0:	79fb      	ldrb	r3, [r7, #7]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	47a0      	blx	r4
 80087aa:	4603      	mov	r3, r0
 80087ac:	75fb      	strb	r3, [r7, #23]
 80087ae:	e007      	b.n	80087c0 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f7ff ffa4 	bl	8008704 <default_extension_decoder>
 80087bc:	4603      	mov	r3, r0
 80087be:	75fb      	strb	r3, [r7, #23]

        if (!status)
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
 80087c2:	f083 0301 	eor.w	r3, r3, #1
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d001      	beq.n	80087d0 <decode_extension+0x58>
            return false;
 80087cc:	2300      	movs	r3, #0
 80087ce:	e00b      	b.n	80087e8 <decode_extension+0x70>
        
        extension = extension->next;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d004      	beq.n	80087e6 <decode_extension+0x6e>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d0d4      	beq.n	8008790 <decode_extension+0x18>
    }
    
    return true;
 80087e6:	2301      	movs	r3, #1
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	371c      	adds	r7, #28
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd90      	pop	{r4, r7, pc}

080087f0 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08e      	sub	sp, #56	; 0x38
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	7d9b      	ldrb	r3, [r3, #22]
 80087fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8008800:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008804:	f003 030f 	and.w	r3, r3, #15
 8008808:	2b0a      	cmp	r3, #10
 800880a:	d124      	bne.n	8008856 <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	69db      	ldr	r3, [r3, #28]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 8008814:	e01b      	b.n	800884e <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 8008816:	f107 0308 	add.w	r3, r7, #8
 800881a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800881c:	4618      	mov	r0, r3
 800881e:	f7ff f809 	bl	8007834 <pb_field_iter_begin_extension>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00f      	beq.n	8008848 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 8008828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882a:	2200      	movs	r2, #0
 800882c:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 800882e:	f107 0308 	add.w	r3, r7, #8
 8008832:	4618      	mov	r0, r3
 8008834:	f000 f89d 	bl	8008972 <pb_message_set_to_defaults>
 8008838:	4603      	mov	r3, r0
 800883a:	f083 0301 	eor.w	r3, r3, #1
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <pb_field_set_to_default+0x58>
                    return false;
 8008844:	2300      	movs	r3, #0
 8008846:	e090      	b.n	800896a <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 8008848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 800884e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1e0      	bne.n	8008816 <pb_field_set_to_default+0x26>
 8008854:	e088      	b.n	8008968 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8008856:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800885a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d166      	bne.n	8008930 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 8008862:	2301      	movs	r3, #1
 8008864:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8008868:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800886c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008870:	2b10      	cmp	r3, #16
 8008872:	d108      	bne.n	8008886 <pb_field_set_to_default+0x96>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a1b      	ldr	r3, [r3, #32]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d004      	beq.n	8008886 <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a1b      	ldr	r3, [r3, #32]
 8008880:	2200      	movs	r2, #0
 8008882:	701a      	strb	r2, [r3, #0]
 8008884:	e012      	b.n	80088ac <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8008886:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800888a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800888e:	2b20      	cmp	r3, #32
 8008890:	d005      	beq.n	800889e <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8008892:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008896:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800889a:	2b30      	cmp	r3, #48	; 0x30
 800889c:	d106      	bne.n	80088ac <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a1b      	ldr	r3, [r3, #32]
 80088a2:	2200      	movs	r2, #0
 80088a4:	801a      	strh	r2, [r3, #0]
            init_data = false;
 80088a6:	2300      	movs	r3, #0
 80088a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        if (init_data)
 80088ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d059      	beq.n	8008968 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	7d9b      	ldrb	r3, [r3, #22]
 80088b8:	f003 030f 	and.w	r3, r3, #15
 80088bc:	2b08      	cmp	r3, #8
 80088be:	d005      	beq.n	80088cc <pb_field_set_to_default+0xdc>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	7d9b      	ldrb	r3, [r3, #22]
 80088c4:	f003 030f 	and.w	r3, r3, #15
 80088c8:	2b09      	cmp	r3, #9
 80088ca:	d128      	bne.n	800891e <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10a      	bne.n	80088ec <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088da:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d105      	bne.n	80088ec <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d018      	beq.n	800891e <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	69da      	ldr	r2, [r3, #28]
 80088f4:	f107 0308 	add.w	r3, r7, #8
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fe ff82 	bl	8007802 <pb_field_iter_begin>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d030      	beq.n	8008966 <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8008904:	f107 0308 	add.w	r3, r7, #8
 8008908:	4618      	mov	r0, r3
 800890a:	f000 f832 	bl	8008972 <pb_message_set_to_defaults>
 800890e:	4603      	mov	r3, r0
 8008910:	f083 0301 	eor.w	r3, r3, #1
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d025      	beq.n	8008966 <pb_field_set_to_default+0x176>
                        return false;
 800891a:	2300      	movs	r3, #0
 800891c:	e025      	b.n	800896a <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	69d8      	ldr	r0, [r3, #28]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	8a5b      	ldrh	r3, [r3, #18]
 8008926:	461a      	mov	r2, r3
 8008928:	2100      	movs	r1, #0
 800892a:	f000 fe13 	bl	8009554 <memset>
 800892e:	e01b      	b.n	8008968 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8008930:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008934:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008938:	2b80      	cmp	r3, #128	; 0x80
 800893a:	d115      	bne.n	8008968 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	2200      	movs	r2, #0
 8008942:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8008944:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008948:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800894c:	2b20      	cmp	r3, #32
 800894e:	d005      	beq.n	800895c <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8008950:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008954:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8008958:	2b30      	cmp	r3, #48	; 0x30
 800895a:	d105      	bne.n	8008968 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a1b      	ldr	r3, [r3, #32]
 8008960:	2200      	movs	r2, #0
 8008962:	801a      	strh	r2, [r3, #0]
 8008964:	e000      	b.n	8008968 <pb_field_set_to_default+0x178>
            {
 8008966:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 8008968:	2301      	movs	r3, #1
}
 800896a:	4618      	mov	r0, r3
 800896c:	3738      	adds	r7, #56	; 0x38
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 8008972:	b590      	push	{r4, r7, lr}
 8008974:	b08d      	sub	sp, #52	; 0x34
 8008976:	af00      	add	r7, sp, #0
 8008978:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 800897a:	f107 0320 	add.w	r3, r7, #32
 800897e:	2200      	movs	r2, #0
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	605a      	str	r2, [r3, #4]
 8008984:	609a      	str	r2, [r3, #8]
 8008986:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 8008988:	2300      	movs	r3, #0
 800898a:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 800898c:	2300      	movs	r3, #0
 800898e:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d020      	beq.n	80089dc <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	6899      	ldr	r1, [r3, #8]
 80089a0:	463b      	mov	r3, r7
 80089a2:	f04f 32ff 	mov.w	r2, #4294967295
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7ff f8e0 	bl	8007b6c <pb_istream_from_buffer>
 80089ac:	f107 0420 	add.w	r4, r7, #32
 80089b0:	463b      	mov	r3, r7
 80089b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80089b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 80089b8:	f107 031a 	add.w	r3, r7, #26
 80089bc:	f107 021c 	add.w	r2, r7, #28
 80089c0:	f107 011b 	add.w	r1, r7, #27
 80089c4:	f107 0020 	add.w	r0, r7, #32
 80089c8:	f7ff fa47 	bl	8007e5a <pb_decode_tag>
 80089cc:	4603      	mov	r3, r0
 80089ce:	f083 0301 	eor.w	r3, r3, #1
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <pb_message_set_to_defaults+0x6a>
            return false;
 80089d8:	2300      	movs	r3, #0
 80089da:	e043      	b.n	8008a64 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 80089dc:	6978      	ldr	r0, [r7, #20]
 80089de:	f7ff ff07 	bl	80087f0 <pb_field_set_to_default>
 80089e2:	4603      	mov	r3, r0
 80089e4:	f083 0301 	eor.w	r3, r3, #1
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <pb_message_set_to_defaults+0x80>
            return false;
 80089ee:	2300      	movs	r3, #0
 80089f0:	e038      	b.n	8008a64 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d02e      	beq.n	8008a56 <pb_message_set_to_defaults+0xe4>
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	8a1b      	ldrh	r3, [r3, #16]
 80089fc:	461a      	mov	r2, r3
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d128      	bne.n	8008a56 <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8008a04:	7ef9      	ldrb	r1, [r7, #27]
 8008a06:	f107 0320 	add.w	r3, r7, #32
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7ff fe3b 	bl	8008688 <decode_field>
 8008a12:	4603      	mov	r3, r0
 8008a14:	f083 0301 	eor.w	r3, r3, #1
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <pb_message_set_to_defaults+0xb0>
                return false;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	e020      	b.n	8008a64 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8008a22:	f107 031a 	add.w	r3, r7, #26
 8008a26:	f107 021c 	add.w	r2, r7, #28
 8008a2a:	f107 011b 	add.w	r1, r7, #27
 8008a2e:	f107 0020 	add.w	r0, r7, #32
 8008a32:	f7ff fa12 	bl	8007e5a <pb_decode_tag>
 8008a36:	4603      	mov	r3, r0
 8008a38:	f083 0301 	eor.w	r3, r3, #1
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <pb_message_set_to_defaults+0xd4>
                return false;
 8008a42:	2300      	movs	r3, #0
 8008a44:	e00e      	b.n	8008a64 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	2200      	movs	r2, #0
 8008a54:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 8008a56:	6978      	ldr	r0, [r7, #20]
 8008a58:	f7fe ff1c 	bl	8007894 <pb_field_iter_next>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1bc      	bne.n	80089dc <pb_message_set_to_defaults+0x6a>

    return true;
 8008a62:	2301      	movs	r3, #1
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3734      	adds	r7, #52	; 0x34
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd90      	pop	{r4, r7, pc}

08008a6c <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b09a      	sub	sp, #104	; 0x68
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
 8008a78:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	667b      	str	r3, [r7, #100]	; 0x64
    pb_extension_t *extensions = NULL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	663b      	str	r3, [r7, #96]	; 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 8008a82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a86:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    pb_size_t fixed_count_size = 0;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    pb_size_t fixed_count_total_size = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 8008a96:	2300      	movs	r3, #0
 8008a98:	643b      	str	r3, [r7, #64]	; 0x40
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	647b      	str	r3, [r7, #68]	; 0x44
    const uint32_t allbits = ~(uint32_t)0;
 8008a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa2:	657b      	str	r3, [r7, #84]	; 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8008aa4:	f107 0318 	add.w	r3, r7, #24
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	68b9      	ldr	r1, [r7, #8]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fe fea8 	bl	8007802 <pb_field_iter_begin>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 8102 	beq.w	8008cbe <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f040 80fc 	bne.w	8008cbe <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 8008ac6:	f107 0318 	add.w	r3, r7, #24
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7ff ff51 	bl	8008972 <pb_message_set_to_defaults>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	f083 0301 	eor.w	r3, r3, #1
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 80f0 	beq.w	8008cbe <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d002      	beq.n	8008aec <pb_decode_inner+0x80>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	e000      	b.n	8008aee <pb_decode_inner+0x82>
 8008aec:	4b99      	ldr	r3, [pc, #612]	; (8008d54 <pb_decode_inner+0x2e8>)
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	60d3      	str	r3, [r2, #12]
 8008af2:	2300      	movs	r3, #0
 8008af4:	e16d      	b.n	8008dd2 <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8008af6:	f107 0312 	add.w	r3, r7, #18
 8008afa:	f107 0214 	add.w	r2, r7, #20
 8008afe:	f107 0113 	add.w	r1, r7, #19
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f7ff f9a9 	bl	8007e5a <pb_decode_tag>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	f083 0301 	eor.w	r3, r3, #1
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d005      	beq.n	8008b20 <pb_decode_inner+0xb4>
        {
            if (eof)
 8008b14:	7cbb      	ldrb	r3, [r7, #18]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f040 80d7 	bne.w	8008cca <pb_decode_inner+0x25e>
                break;
            else
                return false;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	e158      	b.n	8008dd2 <pb_decode_inner+0x366>
        }

        if (tag == 0)
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d111      	bne.n	8008b4a <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	f003 0304 	and.w	r3, r3, #4
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f040 80ce 	bne.w	8008cce <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d002      	beq.n	8008b40 <pb_decode_inner+0xd4>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	e000      	b.n	8008b42 <pb_decode_inner+0xd6>
 8008b40:	4b85      	ldr	r3, [pc, #532]	; (8008d58 <pb_decode_inner+0x2ec>)
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	60d3      	str	r3, [r2, #12]
 8008b46:	2300      	movs	r3, #0
 8008b48:	e143      	b.n	8008dd2 <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8008b4a:	697a      	ldr	r2, [r7, #20]
 8008b4c:	f107 0318 	add.w	r3, r7, #24
 8008b50:	4611      	mov	r1, r2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe feb3 	bl	80078be <pb_field_iter_find>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	f083 0301 	eor.w	r3, r3, #1
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d105      	bne.n	8008b70 <pb_decode_inner+0x104>
 8008b64:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008b68:	f003 030f 	and.w	r3, r3, #15
 8008b6c:	2b0a      	cmp	r3, #10
 8008b6e:	d13c      	bne.n	8008bea <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8008b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d112      	bne.n	8008b9c <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 8008b76:	f107 0318 	add.w	r3, r7, #24
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fe fef5 	bl	800796a <pb_field_iter_find_extension>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d004      	beq.n	8008b90 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 8008b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	663b      	str	r3, [r7, #96]	; 0x60
                    extension_range_start = iter.tag;
 8008b8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b8e:	667b      	str	r3, [r7, #100]	; 0x64
                }

                if (!extensions)
 8008b90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d102      	bne.n	8008b9c <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 8008b96:	f04f 33ff 	mov.w	r3, #4294967295
 8008b9a:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            if (tag >= extension_range_start)
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d815      	bhi.n	8008bd0 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	64fb      	str	r3, [r7, #76]	; 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 8008baa:	6979      	ldr	r1, [r7, #20]
 8008bac:	7cfa      	ldrb	r2, [r7, #19]
 8008bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f7ff fde1 	bl	8008778 <decode_extension>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	f083 0301 	eor.w	r3, r3, #1
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <pb_decode_inner+0x15a>
                    return false;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e105      	b.n	8008dd2 <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d173      	bne.n	8008cb8 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8008bd0:	7cfb      	ldrb	r3, [r7, #19]
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7ff f96f 	bl	8007eb8 <pb_skip_field>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	f083 0301 	eor.w	r3, r3, #1
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d06a      	beq.n	8008cbc <pb_decode_inner+0x250>
                return false;
 8008be6:	2300      	movs	r3, #0
 8008be8:	e0f3      	b.n	8008dd2 <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 8008bea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008bee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008bf2:	2b20      	cmp	r3, #32
 8008bf4:	d12e      	bne.n	8008c54 <pb_decode_inner+0x1e8>
 8008bf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bf8:	f107 0318 	add.w	r3, r7, #24
 8008bfc:	3314      	adds	r3, #20
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d128      	bne.n	8008c54 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 8008c02:	8c3b      	ldrh	r3, [r7, #32]
 8008c04:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d020      	beq.n	8008c4e <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8008c0c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008c10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d011      	beq.n	8008c3c <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 8008c18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8008c1c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d00b      	beq.n	8008c3c <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d002      	beq.n	8008c32 <pb_decode_inner+0x1c6>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	e000      	b.n	8008c34 <pb_decode_inner+0x1c8>
 8008c32:	4b4a      	ldr	r3, [pc, #296]	; (8008d5c <pb_decode_inner+0x2f0>)
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	60d3      	str	r3, [r2, #12]
 8008c38:	2300      	movs	r3, #0
 8008c3a:	e0ca      	b.n	8008dd2 <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8008c3c:	8c3b      	ldrh	r3, [r7, #32]
 8008c3e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                fixed_count_size = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                fixed_count_total_size = iter.array_size;
 8008c48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c4a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }

            iter.pSize = &fixed_count_size;
 8008c4e:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8008c52:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8008c54:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008c58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d11c      	bne.n	8008c9a <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8008c60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c62:	2b3f      	cmp	r3, #63	; 0x3f
 8008c64:	d819      	bhi.n	8008c9a <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8008c66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c68:	f003 031f 	and.w	r3, r3, #31
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c72:	653b      	str	r3, [r7, #80]	; 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 8008c74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c76:	095b      	lsrs	r3, r3, #5
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	3368      	adds	r3, #104	; 0x68
 8008c7e:	443b      	add	r3, r7
 8008c80:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8008c84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c86:	095b      	lsrs	r3, r3, #5
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c8e:	431a      	orrs	r2, r3
 8008c90:	008b      	lsls	r3, r1, #2
 8008c92:	3368      	adds	r3, #104	; 0x68
 8008c94:	443b      	add	r3, r7
 8008c96:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8008c9a:	7cfb      	ldrb	r3, [r7, #19]
 8008c9c:	f107 0218 	add.w	r2, r7, #24
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f7ff fcf0 	bl	8008688 <decode_field>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	f083 0301 	eor.w	r3, r3, #1
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d004      	beq.n	8008cbe <pb_decode_inner+0x252>
            return false;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	e08c      	b.n	8008dd2 <pb_decode_inner+0x366>
                    continue;
 8008cb8:	bf00      	nop
 8008cba:	e000      	b.n	8008cbe <pb_decode_inner+0x252>
            continue;
 8008cbc:	bf00      	nop
    while (stream->bytes_left)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f47f af17 	bne.w	8008af6 <pb_decode_inner+0x8a>
 8008cc8:	e002      	b.n	8008cd0 <pb_decode_inner+0x264>
                break;
 8008cca:	bf00      	nop
 8008ccc:	e000      	b.n	8008cd0 <pb_decode_inner+0x264>
            break;
 8008cce:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 8008cd0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d011      	beq.n	8008d00 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8008cdc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8008ce0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d00b      	beq.n	8008d00 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <pb_decode_inner+0x28a>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	e000      	b.n	8008cf8 <pb_decode_inner+0x28c>
 8008cf6:	4b19      	ldr	r3, [pc, #100]	; (8008d5c <pb_decode_inner+0x2f0>)
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	60d3      	str	r3, [r2, #12]
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	e068      	b.n	8008dd2 <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	8a5b      	ldrh	r3, [r3, #18]
 8008d04:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        if (req_field_count > 0)
 8008d08:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d05f      	beq.n	8008dd0 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8008d10:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008d14:	2b40      	cmp	r3, #64	; 0x40
 8008d16:	d902      	bls.n	8008d1e <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 8008d18:	2340      	movs	r3, #64	; 0x40
 8008d1a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8008d24:	e023      	b.n	8008d6e <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 8008d26:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	3368      	adds	r3, #104	; 0x68
 8008d2e:	443b      	add	r3, r7
 8008d30:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8008d34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d014      	beq.n	8008d64 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d002      	beq.n	8008d48 <pb_decode_inner+0x2dc>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	e000      	b.n	8008d4a <pb_decode_inner+0x2de>
 8008d48:	4b05      	ldr	r3, [pc, #20]	; (8008d60 <pb_decode_inner+0x2f4>)
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	60d3      	str	r3, [r2, #12]
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e03f      	b.n	8008dd2 <pb_decode_inner+0x366>
 8008d52:	bf00      	nop
 8008d54:	08009670 	.word	0x08009670
 8008d58:	080096c0 	.word	0x080096c0
 8008d5c:	080096cc 	.word	0x080096cc
 8008d60:	080096f0 	.word	0x080096f0
            for (i = 0; i < (req_field_count >> 5); i++)
 8008d64:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8008d68:	3301      	adds	r3, #1
 8008d6a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8008d6e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008d72:	095b      	lsrs	r3, r3, #5
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d3d3      	bcc.n	8008d26 <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8008d7e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008d82:	f003 031f 	and.w	r3, r3, #31
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d022      	beq.n	8008dd0 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8008d8a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008d8e:	095b      	lsrs	r3, r3, #5
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	3368      	adds	r3, #104	; 0x68
 8008d96:	443b      	add	r3, r7
 8008d98:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8008d9c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	f003 031f 	and.w	r3, r3, #31
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	f1c3 0320 	rsb	r3, r3, #32
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	4619      	mov	r1, r3
 8008db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008db2:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d00b      	beq.n	8008dd0 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <pb_decode_inner+0x35a>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	e000      	b.n	8008dc8 <pb_decode_inner+0x35c>
 8008dc6:	4b05      	ldr	r3, [pc, #20]	; (8008ddc <pb_decode_inner+0x370>)
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	60d3      	str	r3, [r2, #12]
 8008dcc:	2300      	movs	r3, #0
 8008dce:	e000      	b.n	8008dd2 <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 8008dd0:	2301      	movs	r3, #1
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3768      	adds	r7, #104	; 0x68
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	080096f0 	.word	0x080096f0

08008de0 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 8008dec:	2300      	movs	r3, #0
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	68b9      	ldr	r1, [r7, #8]
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f7ff fe3a 	bl	8008a6c <pb_decode_inner>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 8008dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3718      	adds	r7, #24
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 8008e10:	f107 030c 	add.w	r3, r7, #12
 8008e14:	4619      	mov	r1, r3
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7fe ff70 	bl	8007cfc <pb_decode_varint32>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	f083 0301 	eor.w	r3, r3, #1
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <pb_decode_bool+0x26>
        return false;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	e008      	b.n	8008e3e <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	bf14      	ite	ne
 8008e32:	2301      	movne	r3, #1
 8008e34:	2300      	moveq	r3, #0
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	701a      	strb	r2, [r3, #0]
    return true;
 8008e3c:	2301      	movs	r3, #1
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 8008e46:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 8008e52:	f107 0308 	add.w	r3, r7, #8
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7fe ff5f 	bl	8007d1c <pb_decode_varint>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	f083 0301 	eor.w	r3, r3, #1
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <pb_decode_svarint+0x28>
        return false;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	e029      	b.n	8008ec2 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 8008e6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e72:	f002 0401 	and.w	r4, r2, #1
 8008e76:	2500      	movs	r5, #0
 8008e78:	ea54 0305 	orrs.w	r3, r4, r5
 8008e7c:	d013      	beq.n	8008ea6 <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 8008e7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e82:	f04f 0200 	mov.w	r2, #0
 8008e86:	f04f 0300 	mov.w	r3, #0
 8008e8a:	0842      	lsrs	r2, r0, #1
 8008e8c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8008e90:	084b      	lsrs	r3, r1, #1
 8008e92:	ea6f 0802 	mvn.w	r8, r2
 8008e96:	ea6f 0903 	mvn.w	r9, r3
 8008e9a:	4642      	mov	r2, r8
 8008e9c:	464b      	mov	r3, r9
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	e9c1 2300 	strd	r2, r3, [r1]
 8008ea4:	e00c      	b.n	8008ec0 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 8008ea6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008eaa:	f04f 0200 	mov.w	r2, #0
 8008eae:	f04f 0300 	mov.w	r3, #0
 8008eb2:	0842      	lsrs	r2, r0, #1
 8008eb4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8008eb8:	084b      	lsrs	r3, r1, #1
 8008eba:	6839      	ldr	r1, [r7, #0]
 8008ebc:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 8008ec0:	2301      	movs	r3, #1
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08008ecc <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 8008ed6:	f107 030c 	add.w	r3, r7, #12
 8008eda:	2204      	movs	r2, #4
 8008edc:	4619      	mov	r1, r3
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7fe fd92 	bl	8007a08 <pb_read>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	f083 0301 	eor.w	r3, r3, #1
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <pb_decode_fixed32+0x28>
        return false;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	e003      	b.n	8008efc <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 8008efa:	2301      	movs	r3, #1
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 8008f0e:	f107 0308 	add.w	r3, r7, #8
 8008f12:	2208      	movs	r2, #8
 8008f14:	4619      	mov	r1, r3
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7fe fd76 	bl	8007a08 <pb_read>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	f083 0301 	eor.w	r3, r3, #1
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d001      	beq.n	8008f2c <pb_decode_fixed64+0x28>
        return false;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	e005      	b.n	8008f38 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 8008f2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 8008f36:	2301      	movs	r3, #1
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7ff ff58 	bl	8008e06 <pb_decode_bool>
 8008f56:	4603      	mov	r3, r0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8008f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f64:	b094      	sub	sp, #80	; 0x50
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6278      	str	r0, [r7, #36]	; 0x24
 8008f6a:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	7d9b      	ldrb	r3, [r3, #22]
 8008f70:	f003 030f 	and.w	r3, r3, #15
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d179      	bne.n	800906c <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 8008f78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f80:	f7fe fecc 	bl	8007d1c <pb_decode_varint>
 8008f84:	4603      	mov	r3, r0
 8008f86:	f083 0301 	eor.w	r3, r3, #1
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <pb_dec_varint+0x34>
            return false;
 8008f90:	2300      	movs	r3, #0
 8008f92:	e107      	b.n	80091a4 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	8a5b      	ldrh	r3, [r3, #18]
 8008f98:	2b08      	cmp	r3, #8
 8008f9a:	d10a      	bne.n	8008fb2 <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	69d9      	ldr	r1, [r3, #28]
 8008fa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008fa4:	e9c1 2300 	strd	r2, r3, [r1]
 8008fa8:	e9d1 2300 	ldrd	r2, r3, [r1]
 8008fac:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8008fb0:	e046      	b.n	8009040 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 8008fb2:	6a3b      	ldr	r3, [r7, #32]
 8008fb4:	8a5b      	ldrh	r3, [r3, #18]
 8008fb6:	2b04      	cmp	r3, #4
 8008fb8:	d10e      	bne.n	8008fd8 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 8008fba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	613b      	str	r3, [r7, #16]
 8008fcc:	617a      	str	r2, [r7, #20]
 8008fce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008fd2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8008fd6:	e033      	b.n	8009040 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 8008fd8:	6a3b      	ldr	r3, [r7, #32]
 8008fda:	8a5b      	ldrh	r3, [r3, #18]
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d10f      	bne.n	8009000 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 8008fe0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	b282      	uxth	r2, r0
 8008fea:	801a      	strh	r2, [r3, #0]
 8008fec:	881b      	ldrh	r3, [r3, #0]
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	60bb      	str	r3, [r7, #8]
 8008ff4:	60fa      	str	r2, [r7, #12]
 8008ff6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008ffa:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8008ffe:	e01f      	b.n	8009040 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 8009000:	6a3b      	ldr	r3, [r7, #32]
 8009002:	8a5b      	ldrh	r3, [r3, #18]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d10f      	bne.n	8009028 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 8009008:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	69db      	ldr	r3, [r3, #28]
 8009010:	b2c2      	uxtb	r2, r0
 8009012:	701a      	strb	r2, [r3, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2200      	movs	r2, #0
 800901a:	603b      	str	r3, [r7, #0]
 800901c:	607a      	str	r2, [r7, #4]
 800901e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009022:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8009026:	e00b      	b.n	8009040 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d002      	beq.n	8009036 <pb_dec_varint+0xd6>
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	e000      	b.n	8009038 <pb_dec_varint+0xd8>
 8009036:	4b5e      	ldr	r3, [pc, #376]	; (80091b0 <pb_dec_varint+0x250>)
 8009038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800903a:	60d3      	str	r3, [r2, #12]
 800903c:	2300      	movs	r3, #0
 800903e:	e0b1      	b.n	80091a4 <pb_dec_varint+0x244>

        if (clamped != value)
 8009040:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009044:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009048:	4299      	cmp	r1, r3
 800904a:	bf08      	it	eq
 800904c:	4290      	cmpeq	r0, r2
 800904e:	d00b      	beq.n	8009068 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <pb_dec_varint+0xfe>
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	e000      	b.n	8009060 <pb_dec_varint+0x100>
 800905e:	4b55      	ldr	r3, [pc, #340]	; (80091b4 <pb_dec_varint+0x254>)
 8009060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009062:	60d3      	str	r3, [r2, #12]
 8009064:	2300      	movs	r3, #0
 8009066:	e09d      	b.n	80091a4 <pb_dec_varint+0x244>

        return true;
 8009068:	2301      	movs	r3, #1
 800906a:	e09b      	b.n	80091a4 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 800906c:	6a3b      	ldr	r3, [r7, #32]
 800906e:	7d9b      	ldrb	r3, [r3, #22]
 8009070:	f003 030f 	and.w	r3, r3, #15
 8009074:	2b03      	cmp	r3, #3
 8009076:	d10d      	bne.n	8009094 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 8009078:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800907c:	4619      	mov	r1, r3
 800907e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009080:	f7ff fee1 	bl	8008e46 <pb_decode_svarint>
 8009084:	4603      	mov	r3, r0
 8009086:	f083 0301 	eor.w	r3, r3, #1
 800908a:	b2db      	uxtb	r3, r3
 800908c:	2b00      	cmp	r3, #0
 800908e:	d022      	beq.n	80090d6 <pb_dec_varint+0x176>
                return false;
 8009090:	2300      	movs	r3, #0
 8009092:	e087      	b.n	80091a4 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 8009094:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009098:	4619      	mov	r1, r3
 800909a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800909c:	f7fe fe3e 	bl	8007d1c <pb_decode_varint>
 80090a0:	4603      	mov	r3, r0
 80090a2:	f083 0301 	eor.w	r3, r3, #1
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <pb_dec_varint+0x150>
                return false;
 80090ac:	2300      	movs	r3, #0
 80090ae:	e079      	b.n	80091a4 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 80090b0:	6a3b      	ldr	r3, [r7, #32]
 80090b2:	8a5b      	ldrh	r3, [r3, #18]
 80090b4:	2b08      	cmp	r3, #8
 80090b6:	d104      	bne.n	80090c2 <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 80090b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80090bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80090c0:	e009      	b.n	80090d6 <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 80090c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80090c6:	4613      	mov	r3, r2
 80090c8:	17da      	asrs	r2, r3, #31
 80090ca:	61bb      	str	r3, [r7, #24]
 80090cc:	61fa      	str	r2, [r7, #28]
 80090ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	8a5b      	ldrh	r3, [r3, #18]
 80090da:	2b08      	cmp	r3, #8
 80090dc:	d10a      	bne.n	80090f4 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 80090de:	6a3b      	ldr	r3, [r7, #32]
 80090e0:	69d9      	ldr	r1, [r3, #28]
 80090e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090e6:	e9c1 2300 	strd	r2, r3, [r1]
 80090ea:	e9d1 2300 	ldrd	r2, r3, [r1]
 80090ee:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80090f2:	e042      	b.n	800917a <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 80090f4:	6a3b      	ldr	r3, [r7, #32]
 80090f6:	8a5b      	ldrh	r3, [r3, #18]
 80090f8:	2b04      	cmp	r3, #4
 80090fa:	d10c      	bne.n	8009116 <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 80090fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009100:	6a3b      	ldr	r3, [r7, #32]
 8009102:	69db      	ldr	r3, [r3, #28]
 8009104:	4602      	mov	r2, r0
 8009106:	601a      	str	r2, [r3, #0]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	17da      	asrs	r2, r3, #31
 800910c:	469a      	mov	sl, r3
 800910e:	4693      	mov	fp, r2
 8009110:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
 8009114:	e031      	b.n	800917a <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	8a5b      	ldrh	r3, [r3, #18]
 800911a:	2b02      	cmp	r3, #2
 800911c:	d10e      	bne.n	800913c <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 800911e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009122:	6a3b      	ldr	r3, [r7, #32]
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	b202      	sxth	r2, r0
 8009128:	801a      	strh	r2, [r3, #0]
 800912a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800912e:	b21b      	sxth	r3, r3
 8009130:	17da      	asrs	r2, r3, #31
 8009132:	4698      	mov	r8, r3
 8009134:	4691      	mov	r9, r2
 8009136:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 800913a:	e01e      	b.n	800917a <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 800913c:	6a3b      	ldr	r3, [r7, #32]
 800913e:	8a5b      	ldrh	r3, [r3, #18]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d10e      	bne.n	8009162 <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 8009144:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009148:	6a3b      	ldr	r3, [r7, #32]
 800914a:	69db      	ldr	r3, [r3, #28]
 800914c:	b242      	sxtb	r2, r0
 800914e:	701a      	strb	r2, [r3, #0]
 8009150:	f993 3000 	ldrsb.w	r3, [r3]
 8009154:	b25b      	sxtb	r3, r3
 8009156:	17da      	asrs	r2, r3, #31
 8009158:	461c      	mov	r4, r3
 800915a:	4615      	mov	r5, r2
 800915c:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 8009160:	e00b      	b.n	800917a <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d002      	beq.n	8009170 <pb_dec_varint+0x210>
 800916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	e000      	b.n	8009172 <pb_dec_varint+0x212>
 8009170:	4b0f      	ldr	r3, [pc, #60]	; (80091b0 <pb_dec_varint+0x250>)
 8009172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009174:	60d3      	str	r3, [r2, #12]
 8009176:	2300      	movs	r3, #0
 8009178:	e014      	b.n	80091a4 <pb_dec_varint+0x244>

        if (clamped != svalue)
 800917a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800917e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009182:	4299      	cmp	r1, r3
 8009184:	bf08      	it	eq
 8009186:	4290      	cmpeq	r0, r2
 8009188:	d00b      	beq.n	80091a2 <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 800918a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d002      	beq.n	8009198 <pb_dec_varint+0x238>
 8009192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	e000      	b.n	800919a <pb_dec_varint+0x23a>
 8009198:	4b06      	ldr	r3, [pc, #24]	; (80091b4 <pb_dec_varint+0x254>)
 800919a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800919c:	60d3      	str	r3, [r2, #12]
 800919e:	2300      	movs	r3, #0
 80091a0:	e000      	b.n	80091a4 <pb_dec_varint+0x244>

        return true;
 80091a2:	2301      	movs	r3, #1
    }
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3750      	adds	r7, #80	; 0x50
 80091a8:	46bd      	mov	sp, r7
 80091aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091ae:	bf00      	nop
 80091b0:	08009708 	.word	0x08009708
 80091b4:	0800971c 	.word	0x0800971c

080091b8 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 80091c2:	f107 030c 	add.w	r3, r7, #12
 80091c6:	4619      	mov	r1, r3
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7fe fd97 	bl	8007cfc <pb_decode_varint32>
 80091ce:	4603      	mov	r3, r0
 80091d0:	f083 0301 	eor.w	r3, r3, #1
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <pb_dec_bytes+0x26>
        return false;
 80091da:	2300      	movs	r3, #0
 80091dc:	e055      	b.n	800928a <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091e4:	d30b      	bcc.n	80091fe <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d002      	beq.n	80091f4 <pb_dec_bytes+0x3c>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	e000      	b.n	80091f6 <pb_dec_bytes+0x3e>
 80091f4:	4b27      	ldr	r3, [pc, #156]	; (8009294 <pb_dec_bytes+0xdc>)
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	60d3      	str	r3, [r2, #12]
 80091fa:	2300      	movs	r3, #0
 80091fc:	e045      	b.n	800928a <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3302      	adds	r3, #2
 8009202:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	429a      	cmp	r2, r3
 800920a:	d20b      	bcs.n	8009224 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <pb_dec_bytes+0x62>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	e000      	b.n	800921c <pb_dec_bytes+0x64>
 800921a:	4b1f      	ldr	r3, [pc, #124]	; (8009298 <pb_dec_bytes+0xe0>)
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	60d3      	str	r3, [r2, #12]
 8009220:	2300      	movs	r3, #0
 8009222:	e032      	b.n	800928a <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	7d9b      	ldrb	r3, [r3, #22]
 8009228:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800922c:	2b80      	cmp	r3, #128	; 0x80
 800922e:	d10b      	bne.n	8009248 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <pb_dec_bytes+0x86>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	e000      	b.n	8009240 <pb_dec_bytes+0x88>
 800923e:	4b17      	ldr	r3, [pc, #92]	; (800929c <pb_dec_bytes+0xe4>)
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	60d3      	str	r3, [r2, #12]
 8009244:	2300      	movs	r3, #0
 8009246:	e020      	b.n	800928a <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	8a5b      	ldrh	r3, [r3, #18]
 800924c:	461a      	mov	r2, r3
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	4293      	cmp	r3, r2
 8009252:	d90b      	bls.n	800926c <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d002      	beq.n	8009262 <pb_dec_bytes+0xaa>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	e000      	b.n	8009264 <pb_dec_bytes+0xac>
 8009262:	4b0c      	ldr	r3, [pc, #48]	; (8009294 <pb_dec_bytes+0xdc>)
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	60d3      	str	r3, [r2, #12]
 8009268:	2300      	movs	r3, #0
 800926a:	e00e      	b.n	800928a <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	69db      	ldr	r3, [r3, #28]
 8009270:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	b29a      	uxth	r2, r3
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	3302      	adds	r3, #2
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	4619      	mov	r1, r3
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7fe fbc0 	bl	8007a08 <pb_read>
 8009288:	4603      	mov	r3, r0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3718      	adds	r7, #24
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	08009730 	.word	0x08009730
 8009298:	08009740 	.word	0x08009740
 800929c:	08009688 	.word	0x08009688

080092a0 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	69db      	ldr	r3, [r3, #28]
 80092ae:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 80092b0:	f107 030c 	add.w	r3, r7, #12
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7fe fd20 	bl	8007cfc <pb_decode_varint32>
 80092bc:	4603      	mov	r3, r0
 80092be:	f083 0301 	eor.w	r3, r3, #1
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <pb_dec_string+0x2c>
        return false;
 80092c8:	2300      	movs	r3, #0
 80092ca:	e05a      	b.n	8009382 <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d2:	d10b      	bne.n	80092ec <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d002      	beq.n	80092e2 <pb_dec_string+0x42>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	e000      	b.n	80092e4 <pb_dec_string+0x44>
 80092e2:	4b2a      	ldr	r3, [pc, #168]	; (800938c <pb_dec_string+0xec>)
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	60d3      	str	r3, [r2, #12]
 80092e8:	2300      	movs	r3, #0
 80092ea:	e04a      	b.n	8009382 <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	3301      	adds	r3, #1
 80092f0:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	693a      	ldr	r2, [r7, #16]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d20b      	bcs.n	8009312 <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d002      	beq.n	8009308 <pb_dec_string+0x68>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	e000      	b.n	800930a <pb_dec_string+0x6a>
 8009308:	4b20      	ldr	r3, [pc, #128]	; (800938c <pb_dec_string+0xec>)
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	60d3      	str	r3, [r2, #12]
 800930e:	2300      	movs	r3, #0
 8009310:	e037      	b.n	8009382 <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	7d9b      	ldrb	r3, [r3, #22]
 8009316:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800931a:	2b80      	cmp	r3, #128	; 0x80
 800931c:	d10b      	bne.n	8009336 <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d002      	beq.n	800932c <pb_dec_string+0x8c>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	e000      	b.n	800932e <pb_dec_string+0x8e>
 800932c:	4b18      	ldr	r3, [pc, #96]	; (8009390 <pb_dec_string+0xf0>)
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	60d3      	str	r3, [r2, #12]
 8009332:	2300      	movs	r3, #0
 8009334:	e025      	b.n	8009382 <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	8a5b      	ldrh	r3, [r3, #18]
 800933a:	461a      	mov	r2, r3
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	4293      	cmp	r3, r2
 8009340:	d90b      	bls.n	800935a <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d002      	beq.n	8009350 <pb_dec_string+0xb0>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	e000      	b.n	8009352 <pb_dec_string+0xb2>
 8009350:	4b10      	ldr	r3, [pc, #64]	; (8009394 <pb_dec_string+0xf4>)
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	60d3      	str	r3, [r2, #12]
 8009356:	2300      	movs	r3, #0
 8009358:	e013      	b.n	8009382 <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	4413      	add	r3, r2
 8009360:	2200      	movs	r2, #0
 8009362:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	461a      	mov	r2, r3
 8009368:	6979      	ldr	r1, [r7, #20]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f7fe fb4c 	bl	8007a08 <pb_read>
 8009370:	4603      	mov	r3, r0
 8009372:	f083 0301 	eor.w	r3, r3, #1
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <pb_dec_string+0xe0>
        return false;
 800937c:	2300      	movs	r3, #0
 800937e:	e000      	b.n	8009382 <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8009380:	2301      	movs	r3, #1
}
 8009382:	4618      	mov	r0, r3
 8009384:	3718      	adds	r7, #24
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	08009740 	.word	0x08009740
 8009390:	08009688 	.word	0x08009688
 8009394:	08009750 	.word	0x08009750

08009398 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b08a      	sub	sp, #40	; 0x28
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
    bool status = true;
 80093a2:	2301      	movs	r3, #1
 80093a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool submsg_consumed = false;
 80093a8:	2300      	movs	r3, #0
 80093aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 80093ae:	f107 030c 	add.w	r3, r7, #12
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7fe fe2d 	bl	8008014 <pb_make_string_substream>
 80093ba:	4603      	mov	r3, r0
 80093bc:	f083 0301 	eor.w	r3, r3, #1
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d001      	beq.n	80093ca <pb_dec_submessage+0x32>
        return false;
 80093c6:	2300      	movs	r3, #0
 80093c8:	e069      	b.n	800949e <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10b      	bne.n	80093ea <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d002      	beq.n	80093e0 <pb_dec_submessage+0x48>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	e000      	b.n	80093e2 <pb_dec_submessage+0x4a>
 80093e0:	4b31      	ldr	r3, [pc, #196]	; (80094a8 <pb_dec_submessage+0x110>)
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	60d3      	str	r3, [r2, #12]
 80093e6:	2300      	movs	r3, #0
 80093e8:	e059      	b.n	800949e <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	7d9b      	ldrb	r3, [r3, #22]
 80093ee:	f003 030f 	and.w	r3, r3, #15
 80093f2:	2b09      	cmp	r3, #9
 80093f4:	d11c      	bne.n	8009430 <pb_dec_submessage+0x98>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d018      	beq.n	8009430 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	3b08      	subs	r3, #8
 8009404:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d010      	beq.n	8009430 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	69fa      	ldr	r2, [r7, #28]
 8009414:	3204      	adds	r2, #4
 8009416:	f107 000c 	add.w	r0, r7, #12
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	4798      	blx	r3
 800941e:	4603      	mov	r3, r0
 8009420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (substream.bytes_left == 0)
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d102      	bne.n	8009430 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 800942a:	2301      	movs	r3, #1
 800942c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 8009430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009434:	2b00      	cmp	r3, #0
 8009436:	d022      	beq.n	800947e <pb_dec_submessage+0xe6>
 8009438:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800943c:	f083 0301 	eor.w	r3, r3, #1
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	d01b      	beq.n	800947e <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 8009446:	2300      	movs	r3, #0
 8009448:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	7d9b      	ldrb	r3, [r3, #22]
 800944e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d107      	bne.n	8009466 <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	7d9b      	ldrb	r3, [r3, #22]
 800945a:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800945e:	2b20      	cmp	r3, #32
 8009460:	d001      	beq.n	8009466 <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 8009462:	2301      	movs	r3, #1
 8009464:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	69da      	ldr	r2, [r3, #28]
 800946e:	f107 000c 	add.w	r0, r7, #12
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	f7ff fafa 	bl	8008a6c <pb_decode_inner>
 8009478:	4603      	mov	r3, r0
 800947a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 800947e:	f107 030c 	add.w	r3, r7, #12
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7fe fdff 	bl	8008088 <pb_close_string_substream>
 800948a:	4603      	mov	r3, r0
 800948c:	f083 0301 	eor.w	r3, r3, #1
 8009490:	b2db      	uxtb	r3, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <pb_dec_submessage+0x102>
        return false;
 8009496:	2300      	movs	r3, #0
 8009498:	e001      	b.n	800949e <pb_dec_submessage+0x106>

    return status;
 800949a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3728      	adds	r7, #40	; 0x28
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	08009760 	.word	0x08009760

080094ac <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 80094b6:	f107 030c 	add.w	r3, r7, #12
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f7fe fc1d 	bl	8007cfc <pb_decode_varint32>
 80094c2:	4603      	mov	r3, r0
 80094c4:	f083 0301 	eor.w	r3, r3, #1
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <pb_dec_fixed_length_bytes+0x26>
        return false;
 80094ce:	2300      	movs	r3, #0
 80094d0:	e037      	b.n	8009542 <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094d8:	d30b      	bcc.n	80094f2 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d002      	beq.n	80094e8 <pb_dec_fixed_length_bytes+0x3c>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	e000      	b.n	80094ea <pb_dec_fixed_length_bytes+0x3e>
 80094e8:	4b18      	ldr	r3, [pc, #96]	; (800954c <pb_dec_fixed_length_bytes+0xa0>)
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	60d3      	str	r3, [r2, #12]
 80094ee:	2300      	movs	r3, #0
 80094f0:	e027      	b.n	8009542 <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d109      	bne.n	800950c <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	69d8      	ldr	r0, [r3, #28]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	8a5b      	ldrh	r3, [r3, #18]
 8009500:	461a      	mov	r2, r3
 8009502:	2100      	movs	r1, #0
 8009504:	f000 f826 	bl	8009554 <memset>
        return true;
 8009508:	2301      	movs	r3, #1
 800950a:	e01a      	b.n	8009542 <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	8a5b      	ldrh	r3, [r3, #18]
 8009510:	461a      	mov	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	429a      	cmp	r2, r3
 8009516:	d00b      	beq.n	8009530 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <pb_dec_fixed_length_bytes+0x7a>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	e000      	b.n	8009528 <pb_dec_fixed_length_bytes+0x7c>
 8009526:	4b0a      	ldr	r3, [pc, #40]	; (8009550 <pb_dec_fixed_length_bytes+0xa4>)
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	60d3      	str	r3, [r2, #12]
 800952c:	2300      	movs	r3, #0
 800952e:	e008      	b.n	8009542 <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	69d9      	ldr	r1, [r3, #28]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	8a5b      	ldrh	r3, [r3, #18]
 8009538:	461a      	mov	r2, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7fe fa64 	bl	8007a08 <pb_read>
 8009540:	4603      	mov	r3, r0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	08009730 	.word	0x08009730
 8009550:	0800977c 	.word	0x0800977c

08009554 <memset>:
 8009554:	4402      	add	r2, r0
 8009556:	4603      	mov	r3, r0
 8009558:	4293      	cmp	r3, r2
 800955a:	d100      	bne.n	800955e <memset+0xa>
 800955c:	4770      	bx	lr
 800955e:	f803 1b01 	strb.w	r1, [r3], #1
 8009562:	e7f9      	b.n	8009558 <memset+0x4>

08009564 <__libc_init_array>:
 8009564:	b570      	push	{r4, r5, r6, lr}
 8009566:	4d0d      	ldr	r5, [pc, #52]	; (800959c <__libc_init_array+0x38>)
 8009568:	4c0d      	ldr	r4, [pc, #52]	; (80095a0 <__libc_init_array+0x3c>)
 800956a:	1b64      	subs	r4, r4, r5
 800956c:	10a4      	asrs	r4, r4, #2
 800956e:	2600      	movs	r6, #0
 8009570:	42a6      	cmp	r6, r4
 8009572:	d109      	bne.n	8009588 <__libc_init_array+0x24>
 8009574:	4d0b      	ldr	r5, [pc, #44]	; (80095a4 <__libc_init_array+0x40>)
 8009576:	4c0c      	ldr	r4, [pc, #48]	; (80095a8 <__libc_init_array+0x44>)
 8009578:	f000 f826 	bl	80095c8 <_init>
 800957c:	1b64      	subs	r4, r4, r5
 800957e:	10a4      	asrs	r4, r4, #2
 8009580:	2600      	movs	r6, #0
 8009582:	42a6      	cmp	r6, r4
 8009584:	d105      	bne.n	8009592 <__libc_init_array+0x2e>
 8009586:	bd70      	pop	{r4, r5, r6, pc}
 8009588:	f855 3b04 	ldr.w	r3, [r5], #4
 800958c:	4798      	blx	r3
 800958e:	3601      	adds	r6, #1
 8009590:	e7ee      	b.n	8009570 <__libc_init_array+0xc>
 8009592:	f855 3b04 	ldr.w	r3, [r5], #4
 8009596:	4798      	blx	r3
 8009598:	3601      	adds	r6, #1
 800959a:	e7f2      	b.n	8009582 <__libc_init_array+0x1e>
 800959c:	08009804 	.word	0x08009804
 80095a0:	08009804 	.word	0x08009804
 80095a4:	08009804 	.word	0x08009804
 80095a8:	08009808 	.word	0x08009808

080095ac <memcpy>:
 80095ac:	440a      	add	r2, r1
 80095ae:	4291      	cmp	r1, r2
 80095b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80095b4:	d100      	bne.n	80095b8 <memcpy+0xc>
 80095b6:	4770      	bx	lr
 80095b8:	b510      	push	{r4, lr}
 80095ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095c2:	4291      	cmp	r1, r2
 80095c4:	d1f9      	bne.n	80095ba <memcpy+0xe>
 80095c6:	bd10      	pop	{r4, pc}

080095c8 <_init>:
 80095c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ca:	bf00      	nop
 80095cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ce:	bc08      	pop	{r3}
 80095d0:	469e      	mov	lr, r3
 80095d2:	4770      	bx	lr

080095d4 <_fini>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	bf00      	nop
 80095d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095da:	bc08      	pop	{r3}
 80095dc:	469e      	mov	lr, r3
 80095de:	4770      	bx	lr
