
STM32_protobuf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009328  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  080095d4  080095d4  000195d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080097f0  080097f0  000197f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080097f8  080097f8  000197f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080097fc  080097fc  000197fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08009800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b8  24000010  08009810  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240000c8  08009810  000200c8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012859  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000027c5  00000000  00000000  000328da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000cd0  00000000  00000000  000350a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000009f9  00000000  00000000  00035d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002ff32  00000000  00000000  00036769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013ed6  00000000  00000000  0006669b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001388db  00000000  00000000  0007a571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003448  00000000  00000000  001b2e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000a3  00000000  00000000  001b6294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080095bc 	.word	0x080095bc

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080095bc 	.word	0x080095bc

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b970 	b.w	80005e4 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
 8000326:	460f      	mov	r7, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4694      	mov	ip, r2
 8000330:	d965      	bls.n	80003fe <__udivmoddi4+0xe2>
 8000332:	fab2 f382 	clz	r3, r2
 8000336:	b143      	cbz	r3, 800034a <__udivmoddi4+0x2e>
 8000338:	fa02 fc03 	lsl.w	ip, r2, r3
 800033c:	f1c3 0220 	rsb	r2, r3, #32
 8000340:	409f      	lsls	r7, r3
 8000342:	fa20 f202 	lsr.w	r2, r0, r2
 8000346:	4317      	orrs	r7, r2
 8000348:	409c      	lsls	r4, r3
 800034a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034e:	fa1f f58c 	uxth.w	r5, ip
 8000352:	fbb7 f1fe 	udiv	r1, r7, lr
 8000356:	0c22      	lsrs	r2, r4, #16
 8000358:	fb0e 7711 	mls	r7, lr, r1, r7
 800035c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000360:	fb01 f005 	mul.w	r0, r1, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90a      	bls.n	800037e <__udivmoddi4+0x62>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000370:	f080 811c 	bcs.w	80005ac <__udivmoddi4+0x290>
 8000374:	4290      	cmp	r0, r2
 8000376:	f240 8119 	bls.w	80005ac <__udivmoddi4+0x290>
 800037a:	3902      	subs	r1, #2
 800037c:	4462      	add	r2, ip
 800037e:	1a12      	subs	r2, r2, r0
 8000380:	b2a4      	uxth	r4, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	fb00 f505 	mul.w	r5, r0, r5
 8000392:	42a5      	cmp	r5, r4
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x90>
 8000396:	eb1c 0404 	adds.w	r4, ip, r4
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x294>
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x294>
 80003a8:	4464      	add	r4, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11e      	cbz	r6, 80003be <__udivmoddi4+0xa2>
 80003b6:	40dc      	lsrs	r4, r3
 80003b8:	2300      	movs	r3, #0
 80003ba:	e9c6 4300 	strd	r4, r3, [r6]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0xbc>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80ed 	beq.w	80005a6 <__udivmoddi4+0x28a>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e9c6 0500 	strd	r0, r5, [r6]
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d149      	bne.n	8000474 <__udivmoddi4+0x158>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d302      	bcc.n	80003ea <__udivmoddi4+0xce>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	f200 80f8 	bhi.w	80005da <__udivmoddi4+0x2be>
 80003ea:	1a84      	subs	r4, r0, r2
 80003ec:	eb65 0203 	sbc.w	r2, r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	4617      	mov	r7, r2
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d0e2      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f8:	e9c6 4700 	strd	r4, r7, [r6]
 80003fc:	e7df      	b.n	80003be <__udivmoddi4+0xa2>
 80003fe:	b902      	cbnz	r2, 8000402 <__udivmoddi4+0xe6>
 8000400:	deff      	udf	#255	; 0xff
 8000402:	fab2 f382 	clz	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x210>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	2101      	movs	r1, #1
 8000418:	fbb2 f5f7 	udiv	r5, r2, r7
 800041c:	fb07 2015 	mls	r0, r7, r5, r2
 8000420:	0c22      	lsrs	r2, r4, #16
 8000422:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000426:	fb0e f005 	mul.w	r0, lr, r5
 800042a:	4290      	cmp	r0, r2
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x124>
 800042e:	eb1c 0202 	adds.w	r2, ip, r2
 8000432:	f105 38ff 	add.w	r8, r5, #4294967295
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4290      	cmp	r0, r2
 800043a:	f200 80cb 	bhi.w	80005d4 <__udivmoddi4+0x2b8>
 800043e:	4645      	mov	r5, r8
 8000440:	1a12      	subs	r2, r2, r0
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb2 f0f7 	udiv	r0, r2, r7
 8000448:	fb07 2210 	mls	r2, r7, r0, r2
 800044c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000450:	fb0e fe00 	mul.w	lr, lr, r0
 8000454:	45a6      	cmp	lr, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x14e>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x14c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f200 80bb 	bhi.w	80005de <__udivmoddi4+0x2c2>
 8000468:	4610      	mov	r0, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x98>
 8000474:	f1c1 0720 	rsb	r7, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 fc07 	lsr.w	ip, r2, r7
 800047e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000482:	fa05 f401 	lsl.w	r4, r5, r1
 8000486:	fa20 f307 	lsr.w	r3, r0, r7
 800048a:	40fd      	lsrs	r5, r7
 800048c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000490:	4323      	orrs	r3, r4
 8000492:	fbb5 f8f9 	udiv	r8, r5, r9
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fb09 5518 	mls	r5, r9, r8, r5
 800049e:	0c1c      	lsrs	r4, r3, #16
 80004a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a4:	fb08 f50e 	mul.w	r5, r8, lr
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	fa00 f001 	lsl.w	r0, r0, r1
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004bc:	f080 8088 	bcs.w	80005d0 <__udivmoddi4+0x2b4>
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	f240 8085 	bls.w	80005d0 <__udivmoddi4+0x2b4>
 80004c6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ca:	4464      	add	r4, ip
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	b29d      	uxth	r5, r3
 80004d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d4:	fb09 4413 	mls	r4, r9, r3, r4
 80004d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80004ec:	d26c      	bcs.n	80005c8 <__udivmoddi4+0x2ac>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	d96a      	bls.n	80005c8 <__udivmoddi4+0x2ac>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fa:	fba3 9502 	umull	r9, r5, r3, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	42ac      	cmp	r4, r5
 8000504:	46c8      	mov	r8, r9
 8000506:	46ae      	mov	lr, r5
 8000508:	d356      	bcc.n	80005b8 <__udivmoddi4+0x29c>
 800050a:	d053      	beq.n	80005b4 <__udivmoddi4+0x298>
 800050c:	b156      	cbz	r6, 8000524 <__udivmoddi4+0x208>
 800050e:	ebb0 0208 	subs.w	r2, r0, r8
 8000512:	eb64 040e 	sbc.w	r4, r4, lr
 8000516:	fa04 f707 	lsl.w	r7, r4, r7
 800051a:	40ca      	lsrs	r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	4317      	orrs	r7, r2
 8000520:	e9c6 7400 	strd	r7, r4, [r6]
 8000524:	4618      	mov	r0, r3
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	f1c3 0120 	rsb	r1, r3, #32
 8000530:	fa02 fc03 	lsl.w	ip, r2, r3
 8000534:	fa20 f201 	lsr.w	r2, r0, r1
 8000538:	fa25 f101 	lsr.w	r1, r5, r1
 800053c:	409d      	lsls	r5, r3
 800053e:	432a      	orrs	r2, r5
 8000540:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fbb1 f0f7 	udiv	r0, r1, r7
 800054c:	fb07 1510 	mls	r5, r7, r0, r1
 8000550:	0c11      	lsrs	r1, r2, #16
 8000552:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000556:	fb00 f50e 	mul.w	r5, r0, lr
 800055a:	428d      	cmp	r5, r1
 800055c:	fa04 f403 	lsl.w	r4, r4, r3
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x258>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f100 38ff 	add.w	r8, r0, #4294967295
 800056a:	d22f      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800056c:	428d      	cmp	r5, r1
 800056e:	d92d      	bls.n	80005cc <__udivmoddi4+0x2b0>
 8000570:	3802      	subs	r0, #2
 8000572:	4461      	add	r1, ip
 8000574:	1b49      	subs	r1, r1, r5
 8000576:	b292      	uxth	r2, r2
 8000578:	fbb1 f5f7 	udiv	r5, r1, r7
 800057c:	fb07 1115 	mls	r1, r7, r5, r1
 8000580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000584:	fb05 f10e 	mul.w	r1, r5, lr
 8000588:	4291      	cmp	r1, r2
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x282>
 800058c:	eb1c 0202 	adds.w	r2, ip, r2
 8000590:	f105 38ff 	add.w	r8, r5, #4294967295
 8000594:	d216      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000596:	4291      	cmp	r1, r2
 8000598:	d914      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	1a52      	subs	r2, r2, r1
 80005a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a4:	e738      	b.n	8000418 <__udivmoddi4+0xfc>
 80005a6:	4631      	mov	r1, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e708      	b.n	80003be <__udivmoddi4+0xa2>
 80005ac:	4639      	mov	r1, r7
 80005ae:	e6e6      	b.n	800037e <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x90>
 80005b4:	4548      	cmp	r0, r9
 80005b6:	d2a9      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b8:	ebb9 0802 	subs.w	r8, r9, r2
 80005bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c0:	3b01      	subs	r3, #1
 80005c2:	e7a3      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c4:	4645      	mov	r5, r8
 80005c6:	e7ea      	b.n	800059e <__udivmoddi4+0x282>
 80005c8:	462b      	mov	r3, r5
 80005ca:	e794      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005cc:	4640      	mov	r0, r8
 80005ce:	e7d1      	b.n	8000574 <__udivmoddi4+0x258>
 80005d0:	46d0      	mov	r8, sl
 80005d2:	e77b      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d4:	3d02      	subs	r5, #2
 80005d6:	4462      	add	r2, ip
 80005d8:	e732      	b.n	8000440 <__udivmoddi4+0x124>
 80005da:	4608      	mov	r0, r1
 80005dc:	e70a      	b.n	80003f4 <__udivmoddi4+0xd8>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	e742      	b.n	800046a <__udivmoddi4+0x14e>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Handle UART interrupt */
void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]

#ifdef PROTOBUF_LED_TIME_CRITICAL

	// Set yellow led to signal data processing to the user.
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2102      	movs	r1, #2
 80005f4:	480f      	ldr	r0, [pc, #60]	; (8000634 <HAL_UART_RxCpltCallback+0x4c>)
 80005f6:	f001 fc8d 	bl	8001f14 <HAL_GPIO_WritePin>

	if (!processProtobufMsg(uartBuffer))
 80005fa:	480f      	ldr	r0, [pc, #60]	; (8000638 <HAL_UART_RxCpltCallback+0x50>)
 80005fc:	f000 fa32 	bl	8000a64 <processProtobufMsg>
 8000600:	4603      	mov	r3, r0
 8000602:	f083 0301 	eor.w	r3, r3, #1
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	d005      	beq.n	8000618 <HAL_UART_RxCpltCallback+0x30>
	{
		// Set red led to signal decoding error to the user
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000612:	480a      	ldr	r0, [pc, #40]	; (800063c <HAL_UART_RxCpltCallback+0x54>)
 8000614:	f001 fc7e 	bl	8001f14 <HAL_GPIO_WritePin>
	}

	// Reset yellow led
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2102      	movs	r1, #2
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <HAL_UART_RxCpltCallback+0x4c>)
 800061e:	f001 fc79 	bl	8001f14 <HAL_GPIO_WritePin>
	}

#endif

	// Receive next message
	HAL_UART_Receive_IT(&huart3, uartBuffer, LED_STATE_MSG_LENGTH);
 8000622:	2202      	movs	r2, #2
 8000624:	4904      	ldr	r1, [pc, #16]	; (8000638 <HAL_UART_RxCpltCallback+0x50>)
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <HAL_UART_RxCpltCallback+0x58>)
 8000628:	f004 fad6 	bl	8004bd8 <HAL_UART_Receive_IT>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	58021000 	.word	0x58021000
 8000638:	240000c0 	.word	0x240000c0
 800063c:	58020400 	.word	0x58020400
 8000640:	2400002c 	.word	0x2400002c

08000644 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	// Set red led to signal error to the user
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000652:	4803      	ldr	r0, [pc, #12]	; (8000660 <HAL_UART_ErrorCallback+0x1c>)
 8000654:	f001 fc5e 	bl	8001f14 <HAL_GPIO_WritePin>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	58020400 	.word	0x58020400

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 fb9e 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f810 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f000 f8d8 	bl	8000824 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000674:	f000 f882 	bl	800077c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000678:	f000 f8cc 	bl	8000814 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  // Start UART receive
  HAL_UART_Receive_IT(&huart3, uartBuffer, LED_STATE_MSG_LENGTH);
 800067c:	2202      	movs	r2, #2
 800067e:	4902      	ldr	r1, [pc, #8]	; (8000688 <main+0x24>)
 8000680:	4802      	ldr	r0, [pc, #8]	; (800068c <main+0x28>)
 8000682:	f004 faa9 	bl	8004bd8 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000686:	e7fe      	b.n	8000686 <main+0x22>
 8000688:	240000c0 	.word	0x240000c0
 800068c:	2400002c 	.word	0x2400002c

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b09c      	sub	sp, #112	; 0x70
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069a:	224c      	movs	r2, #76	; 0x4c
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f008 ff52 	bl	8009548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2220      	movs	r2, #32
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f008 ff4c 	bl	8009548 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006b0:	4b30      	ldr	r3, [pc, #192]	; (8000774 <SystemClock_Config+0xe4>)
 80006b2:	f04f 32ff 	mov.w	r2, #4294967295
 80006b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006ba:	2004      	movs	r0, #4
 80006bc:	f001 fc44 	bl	8001f48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006c0:	2300      	movs	r3, #0
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <SystemClock_Config+0xe8>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a2b      	ldr	r2, [pc, #172]	; (8000778 <SystemClock_Config+0xe8>)
 80006ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b29      	ldr	r3, [pc, #164]	; (8000778 <SystemClock_Config+0xe8>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006dc:	bf00      	nop
 80006de:	4b26      	ldr	r3, [pc, #152]	; (8000778 <SystemClock_Config+0xe8>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006ea:	d1f8      	bne.n	80006de <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006ec:	2321      	movs	r3, #33	; 0x21
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006f6:	2301      	movs	r3, #1
 80006f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	2302      	movs	r3, #2
 8000700:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000702:	2301      	movs	r3, #1
 8000704:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000706:	2318      	movs	r3, #24
 8000708:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800070e:	2304      	movs	r3, #4
 8000710:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000712:	2302      	movs	r3, #2
 8000714:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000716:	230c      	movs	r3, #12
 8000718:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800071a:	2300      	movs	r3, #0
 800071c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fc68 	bl	8001ffc <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000732:	f000 f991 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	233f      	movs	r3, #63	; 0x3f
 8000738:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2303      	movs	r3, #3
 800073c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2102      	movs	r1, #2
 800075a:	4618      	mov	r0, r3
 800075c:	f002 f880 	bl	8002860 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000766:	f000 f977 	bl	8000a58 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3770      	adds	r7, #112	; 0x70
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	58024400 	.word	0x58024400
 8000778:	58024800 	.word	0x58024800

0800077c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <MX_USART3_UART_Init+0x90>)
 8000782:	4a23      	ldr	r2, [pc, #140]	; (8000810 <MX_USART3_UART_Init+0x94>)
 8000784:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_USART3_UART_Init+0x90>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_USART3_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_USART3_UART_Init+0x90>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_USART3_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_USART3_UART_Init+0x90>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_USART3_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_USART3_UART_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_USART3_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USART3_UART_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_USART3_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007c4:	4811      	ldr	r0, [pc, #68]	; (800080c <MX_USART3_UART_Init+0x90>)
 80007c6:	f004 f9b7 	bl	8004b38 <HAL_UART_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007d0:	f000 f942 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d4:	2100      	movs	r1, #0
 80007d6:	480d      	ldr	r0, [pc, #52]	; (800080c <MX_USART3_UART_Init+0x90>)
 80007d8:	f006 fd77 	bl	80072ca <HAL_UARTEx_SetTxFifoThreshold>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007e2:	f000 f939 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e6:	2100      	movs	r1, #0
 80007e8:	4808      	ldr	r0, [pc, #32]	; (800080c <MX_USART3_UART_Init+0x90>)
 80007ea:	f006 fdac 	bl	8007346 <HAL_UARTEx_SetRxFifoThreshold>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007f4:	f000 f930 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_USART3_UART_Init+0x90>)
 80007fa:	f006 fd2d 	bl	8007258 <HAL_UARTEx_DisableFifoMode>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000804:	f000 f928 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2400002c 	.word	0x2400002c
 8000810:	40004800 	.word	0x40004800

08000814 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08e      	sub	sp, #56	; 0x38
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	4b80      	ldr	r3, [pc, #512]	; (8000a3c <MX_GPIO_Init+0x218>)
 800083c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000840:	4a7e      	ldr	r2, [pc, #504]	; (8000a3c <MX_GPIO_Init+0x218>)
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800084a:	4b7c      	ldr	r3, [pc, #496]	; (8000a3c <MX_GPIO_Init+0x218>)
 800084c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	623b      	str	r3, [r7, #32]
 8000856:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000858:	4b78      	ldr	r3, [pc, #480]	; (8000a3c <MX_GPIO_Init+0x218>)
 800085a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800085e:	4a77      	ldr	r2, [pc, #476]	; (8000a3c <MX_GPIO_Init+0x218>)
 8000860:	f043 0320 	orr.w	r3, r3, #32
 8000864:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000868:	4b74      	ldr	r3, [pc, #464]	; (8000a3c <MX_GPIO_Init+0x218>)
 800086a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800086e:	f003 0320 	and.w	r3, r3, #32
 8000872:	61fb      	str	r3, [r7, #28]
 8000874:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	4b71      	ldr	r3, [pc, #452]	; (8000a3c <MX_GPIO_Init+0x218>)
 8000878:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800087c:	4a6f      	ldr	r2, [pc, #444]	; (8000a3c <MX_GPIO_Init+0x218>)
 800087e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000882:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000886:	4b6d      	ldr	r3, [pc, #436]	; (8000a3c <MX_GPIO_Init+0x218>)
 8000888:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000890:	61bb      	str	r3, [r7, #24]
 8000892:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000894:	4b69      	ldr	r3, [pc, #420]	; (8000a3c <MX_GPIO_Init+0x218>)
 8000896:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089a:	4a68      	ldr	r2, [pc, #416]	; (8000a3c <MX_GPIO_Init+0x218>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008a4:	4b65      	ldr	r3, [pc, #404]	; (8000a3c <MX_GPIO_Init+0x218>)
 80008a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b2:	4b62      	ldr	r3, [pc, #392]	; (8000a3c <MX_GPIO_Init+0x218>)
 80008b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b8:	4a60      	ldr	r2, [pc, #384]	; (8000a3c <MX_GPIO_Init+0x218>)
 80008ba:	f043 0308 	orr.w	r3, r3, #8
 80008be:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008c2:	4b5e      	ldr	r3, [pc, #376]	; (8000a3c <MX_GPIO_Init+0x218>)
 80008c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c8:	f003 0308 	and.w	r3, r3, #8
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d0:	4b5a      	ldr	r3, [pc, #360]	; (8000a3c <MX_GPIO_Init+0x218>)
 80008d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008d6:	4a59      	ldr	r2, [pc, #356]	; (8000a3c <MX_GPIO_Init+0x218>)
 80008d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008e0:	4b56      	ldr	r3, [pc, #344]	; (8000a3c <MX_GPIO_Init+0x218>)
 80008e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b53      	ldr	r3, [pc, #332]	; (8000a3c <MX_GPIO_Init+0x218>)
 80008f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f4:	4a51      	ldr	r2, [pc, #324]	; (8000a3c <MX_GPIO_Init+0x218>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008fe:	4b4f      	ldr	r3, [pc, #316]	; (8000a3c <MX_GPIO_Init+0x218>)
 8000900:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800090c:	4b4b      	ldr	r3, [pc, #300]	; (8000a3c <MX_GPIO_Init+0x218>)
 800090e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000912:	4a4a      	ldr	r2, [pc, #296]	; (8000a3c <MX_GPIO_Init+0x218>)
 8000914:	f043 0310 	orr.w	r3, r3, #16
 8000918:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800091c:	4b47      	ldr	r3, [pc, #284]	; (8000a3c <MX_GPIO_Init+0x218>)
 800091e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000922:	f003 0310 	and.w	r3, r3, #16
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000930:	4843      	ldr	r0, [pc, #268]	; (8000a40 <MX_GPIO_Init+0x21c>)
 8000932:	f001 faef 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f244 0101 	movw	r1, #16385	; 0x4001
 800093c:	4841      	ldr	r0, [pc, #260]	; (8000a44 <MX_GPIO_Init+0x220>)
 800093e:	f001 fae9 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2102      	movs	r1, #2
 8000946:	4840      	ldr	r0, [pc, #256]	; (8000a48 <MX_GPIO_Init+0x224>)
 8000948:	f001 fae4 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095e:	4619      	mov	r1, r3
 8000960:	483a      	ldr	r0, [pc, #232]	; (8000a4c <MX_GPIO_Init+0x228>)
 8000962:	f001 f927 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097c:	4619      	mov	r1, r3
 800097e:	4830      	ldr	r0, [pc, #192]	; (8000a40 <MX_GPIO_Init+0x21c>)
 8000980:	f001 f918 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000984:	f244 0301 	movw	r3, #16385	; 0x4001
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	4829      	ldr	r0, [pc, #164]	; (8000a44 <MX_GPIO_Init+0x220>)
 800099e:	f001 f909 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	4826      	ldr	r0, [pc, #152]	; (8000a50 <MX_GPIO_Init+0x22c>)
 80009b8:	f001 f8fc 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	4619      	mov	r1, r3
 80009d0:	4820      	ldr	r0, [pc, #128]	; (8000a54 <MX_GPIO_Init+0x230>)
 80009d2:	f001 f8ef 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80009e8:	230a      	movs	r3, #10
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f0:	4619      	mov	r1, r3
 80009f2:	4818      	ldr	r0, [pc, #96]	; (8000a54 <MX_GPIO_Init+0x230>)
 80009f4:	f001 f8de 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80009f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4810      	ldr	r0, [pc, #64]	; (8000a54 <MX_GPIO_Init+0x230>)
 8000a12:	f001 f8cf 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a16:	2302      	movs	r3, #2
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4806      	ldr	r0, [pc, #24]	; (8000a48 <MX_GPIO_Init+0x224>)
 8000a2e:	f001 f8c1 	bl	8001bb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a32:	bf00      	nop
 8000a34:	3738      	adds	r7, #56	; 0x38
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	58024400 	.word	0x58024400
 8000a40:	58021400 	.word	0x58021400
 8000a44:	58020400 	.word	0x58020400
 8000a48:	58021000 	.word	0x58021000
 8000a4c:	58020800 	.word	0x58020800
 8000a50:	58021800 	.word	0x58021800
 8000a54:	58020000 	.word	0x58020000

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <processProtobufMsg>:
  * 				user led accordingly.
  * @param buffer   Pointer to data buffer, which contains the coded message.
  * @retval 		If decoding protobuf was successful.
  */
bool processProtobufMsg( uint8_t *buffer )
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	// Allocate space for the decoded message.
	ChangeLedStateMsg message = ChangeLedStateMsg_init_zero;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	763b      	strb	r3, [r7, #24]
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]

	//Create a stream that reads from the buffer.
	pb_istream_t stream = pb_istream_from_buffer(buffer, LED_STATE_MSG_LENGTH);
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	2202      	movs	r2, #2
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f007 f86f 	bl	8007b60 <pb_istream_from_buffer>

	//Now we are ready to decode the message.
	pbDecodeStatus = pb_decode(&stream, ChangeLedStateMsg_fields, &message);
 8000a82:	f107 0218 	add.w	r2, r7, #24
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	4913      	ldr	r1, [pc, #76]	; (8000ad8 <processProtobufMsg+0x74>)
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f008 f9a1 	bl	8008dd4 <pb_decode>
 8000a92:	4603      	mov	r3, r0
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <processProtobufMsg+0x78>)
 8000a98:	701a      	strb	r2, [r3, #0]

	/* Change led state based on protobuf message. */
	if (message.has_led_state & pbDecodeStatus)
 8000a9a:	7e3b      	ldrb	r3, [r7, #24]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <processProtobufMsg+0x78>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d010      	beq.n	8000aca <processProtobufMsg+0x66>
	{
		if (message.led_state == 1)
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d105      	bne.n	8000aba <processProtobufMsg+0x56>
		{
			// Set green led.
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <processProtobufMsg+0x7c>)
 8000ab4:	f001 fa2e 	bl	8001f14 <HAL_GPIO_WritePin>
 8000ab8:	e007      	b.n	8000aca <processProtobufMsg+0x66>
		}
		else if (message.led_state == 0)
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d104      	bne.n	8000aca <processProtobufMsg+0x66>
		{
			// Reset green led.
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <processProtobufMsg+0x7c>)
 8000ac6:	f001 fa25 	bl	8001f14 <HAL_GPIO_WritePin>
		}
	}

	return pbDecodeStatus;
 8000aca:	4b04      	ldr	r3, [pc, #16]	; (8000adc <processProtobufMsg+0x78>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3720      	adds	r7, #32
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	080097d8 	.word	0x080097d8
 8000adc:	240000c2 	.word	0x240000c2
 8000ae0:	58020400 	.word	0x58020400

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_MspInit+0x30>)
 8000aec:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000af0:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_MspInit+0x30>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_MspInit+0x30>)
 8000afc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	58024400 	.word	0x58024400

08000b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b0ba      	sub	sp, #232	; 0xe8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	22c0      	movs	r2, #192	; 0xc0
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f008 fd05 	bl	8009548 <memset>
  if(huart->Instance==USART3)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a2b      	ldr	r2, [pc, #172]	; (8000bf0 <HAL_UART_MspInit+0xd8>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d14e      	bne.n	8000be6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b48:	f04f 0202 	mov.w	r2, #2
 8000b4c:	f04f 0300 	mov.w	r3, #0
 8000b50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f002 fa0a 	bl	8002f78 <HAL_RCCEx_PeriphCLKConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b6a:	f7ff ff75 	bl	8000a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b6e:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <HAL_UART_MspInit+0xdc>)
 8000b70:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b74:	4a1f      	ldr	r2, [pc, #124]	; (8000bf4 <HAL_UART_MspInit+0xdc>)
 8000b76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b7a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <HAL_UART_MspInit+0xdc>)
 8000b80:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <HAL_UART_MspInit+0xdc>)
 8000b8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b92:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <HAL_UART_MspInit+0xdc>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_UART_MspInit+0xdc>)
 8000b9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000baa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bc4:	2307      	movs	r3, #7
 8000bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4809      	ldr	r0, [pc, #36]	; (8000bf8 <HAL_UART_MspInit+0xe0>)
 8000bd2:	f000 ffef 	bl	8001bb4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2027      	movs	r0, #39	; 0x27
 8000bdc:	f000 fa51 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000be0:	2027      	movs	r0, #39	; 0x27
 8000be2:	f000 fa68 	bl	80010b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000be6:	bf00      	nop
 8000be8:	37e8      	adds	r7, #232	; 0xe8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40004800 	.word	0x40004800
 8000bf4:	58024400 	.word	0x58024400
 8000bf8:	58020c00 	.word	0x58020c00

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c48:	f000 f920 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <USART3_IRQHandler+0x10>)
 8000c56:	f004 f80b 	bl	8004c70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2400002c 	.word	0x2400002c

08000c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c68:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <SystemInit+0xd0>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a31      	ldr	r2, [pc, #196]	; (8000d34 <SystemInit+0xd0>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c78:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <SystemInit+0xd4>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 030f 	and.w	r3, r3, #15
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d807      	bhi.n	8000c94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c84:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <SystemInit+0xd4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f023 030f 	bic.w	r3, r3, #15
 8000c8c:	4a2a      	ldr	r2, [pc, #168]	; (8000d38 <SystemInit+0xd4>)
 8000c8e:	f043 0303 	orr.w	r3, r3, #3
 8000c92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c94:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <SystemInit+0xd8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a28      	ldr	r2, [pc, #160]	; (8000d3c <SystemInit+0xd8>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <SystemInit+0xd8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ca6:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <SystemInit+0xd8>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4924      	ldr	r1, [pc, #144]	; (8000d3c <SystemInit+0xd8>)
 8000cac:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <SystemInit+0xdc>)
 8000cae:	4013      	ands	r3, r2
 8000cb0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <SystemInit+0xd4>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d007      	beq.n	8000cce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <SystemInit+0xd4>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f023 030f 	bic.w	r3, r3, #15
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <SystemInit+0xd4>)
 8000cc8:	f043 0303 	orr.w	r3, r3, #3
 8000ccc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000cce:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <SystemInit+0xd8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <SystemInit+0xd8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <SystemInit+0xd8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <SystemInit+0xd8>)
 8000ce2:	4a18      	ldr	r2, [pc, #96]	; (8000d44 <SystemInit+0xe0>)
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <SystemInit+0xd8>)
 8000ce8:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <SystemInit+0xe4>)
 8000cea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <SystemInit+0xd8>)
 8000cee:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <SystemInit+0xe8>)
 8000cf0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <SystemInit+0xd8>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <SystemInit+0xd8>)
 8000cfa:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <SystemInit+0xe8>)
 8000cfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <SystemInit+0xd8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <SystemInit+0xd8>)
 8000d06:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <SystemInit+0xe8>)
 8000d08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <SystemInit+0xd8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <SystemInit+0xd8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a09      	ldr	r2, [pc, #36]	; (8000d3c <SystemInit+0xd8>)
 8000d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <SystemInit+0xd8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <SystemInit+0xec>)
 8000d24:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d28:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00
 8000d38:	52002000 	.word	0x52002000
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d44:	02020200 	.word	0x02020200
 8000d48:	01ff0000 	.word	0x01ff0000
 8000d4c:	01010280 	.word	0x01010280
 8000d50:	52004000 	.word	0x52004000

08000d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d58:	f7ff ff84 	bl	8000c64 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d5e:	490d      	ldr	r1, [pc, #52]	; (8000d94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d74:	4c0a      	ldr	r4, [pc, #40]	; (8000da0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d82:	f008 fbe9 	bl	8009558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d86:	f7ff fc6d 	bl	8000664 <main>
  bx  lr
 8000d8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d8c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000d90:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d94:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000d98:	08009800 	.word	0x08009800
  ldr r2, =_sbss
 8000d9c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000da0:	240000c8 	.word	0x240000c8

08000da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dae:	2003      	movs	r0, #3
 8000db0:	f000 f95c 	bl	800106c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000db4:	f001 ff0a 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8000db8:	4602      	mov	r2, r0
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_Init+0x68>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	0a1b      	lsrs	r3, r3, #8
 8000dc0:	f003 030f 	and.w	r3, r3, #15
 8000dc4:	4913      	ldr	r1, [pc, #76]	; (8000e14 <HAL_Init+0x6c>)
 8000dc6:	5ccb      	ldrb	r3, [r1, r3]
 8000dc8:	f003 031f 	and.w	r3, r3, #31
 8000dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_Init+0x68>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <HAL_Init+0x6c>)
 8000ddc:	5cd3      	ldrb	r3, [r2, r3]
 8000dde:	f003 031f 	and.w	r3, r3, #31
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	fa22 f303 	lsr.w	r3, r2, r3
 8000de8:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <HAL_Init+0x70>)
 8000dea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000dec:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <HAL_Init+0x74>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 f814 	bl	8000e20 <HAL_InitTick>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e002      	b.n	8000e08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e02:	f7ff fe6f 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	58024400 	.word	0x58024400
 8000e14:	08009794 	.word	0x08009794
 8000e18:	24000004 	.word	0x24000004
 8000e1c:	24000000 	.word	0x24000000

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_InitTick+0x60>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d101      	bne.n	8000e34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e021      	b.n	8000e78 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <HAL_InitTick+0x64>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_InitTick+0x60>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f941 	bl	80010d2 <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f90b 	bl	8001082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_InitTick+0x68>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	2400000c 	.word	0x2400000c
 8000e84:	24000000 	.word	0x24000000
 8000e88:	24000008 	.word	0x24000008

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	2400000c 	.word	0x2400000c
 8000eb0:	240000c4 	.word	0x240000c4

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	240000c4 	.word	0x240000c4

08000ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <__NVIC_SetPriorityGrouping+0x40>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <__NVIC_SetPriorityGrouping+0x40>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00
 8000f10:	05fa0000 	.word	0x05fa0000

08000f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <__NVIC_GetPriorityGrouping+0x18>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	f003 0307 	and.w	r3, r3, #7
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	db0b      	blt.n	8000f5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	f003 021f 	and.w	r2, r3, #31
 8000f48:	4907      	ldr	r1, [pc, #28]	; (8000f68 <__NVIC_EnableIRQ+0x38>)
 8000f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	2001      	movs	r0, #1
 8000f52:	fa00 f202 	lsl.w	r2, r0, r2
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000e100 	.word	0xe000e100

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	; (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
         );
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001038:	d301      	bcc.n	800103e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103a:	2301      	movs	r3, #1
 800103c:	e00f      	b.n	800105e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <SysTick_Config+0x40>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001046:	210f      	movs	r1, #15
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f7ff ff8e 	bl	8000f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <SysTick_Config+0x40>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <SysTick_Config+0x40>)
 8001058:	2207      	movs	r2, #7
 800105a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	e000e010 	.word	0xe000e010

0800106c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff29 	bl	8000ecc <__NVIC_SetPriorityGrouping>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001090:	f7ff ff40 	bl	8000f14 <__NVIC_GetPriorityGrouping>
 8001094:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff ff90 	bl	8000fc0 <NVIC_EncodePriority>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5f 	bl	8000f6c <__NVIC_SetPriority>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff33 	bl	8000f30 <__NVIC_EnableIRQ>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffa4 	bl	8001028 <SysTick_Config>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff fede 	bl	8000eb4 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e2dc      	b.n	80016be <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d008      	beq.n	8001122 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2280      	movs	r2, #128	; 0x80
 8001114:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e2cd      	b.n	80016be <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a76      	ldr	r2, [pc, #472]	; (8001300 <HAL_DMA_Abort+0x214>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d04a      	beq.n	80011c2 <HAL_DMA_Abort+0xd6>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a74      	ldr	r2, [pc, #464]	; (8001304 <HAL_DMA_Abort+0x218>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d045      	beq.n	80011c2 <HAL_DMA_Abort+0xd6>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a73      	ldr	r2, [pc, #460]	; (8001308 <HAL_DMA_Abort+0x21c>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d040      	beq.n	80011c2 <HAL_DMA_Abort+0xd6>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a71      	ldr	r2, [pc, #452]	; (800130c <HAL_DMA_Abort+0x220>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d03b      	beq.n	80011c2 <HAL_DMA_Abort+0xd6>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a70      	ldr	r2, [pc, #448]	; (8001310 <HAL_DMA_Abort+0x224>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d036      	beq.n	80011c2 <HAL_DMA_Abort+0xd6>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a6e      	ldr	r2, [pc, #440]	; (8001314 <HAL_DMA_Abort+0x228>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d031      	beq.n	80011c2 <HAL_DMA_Abort+0xd6>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a6d      	ldr	r2, [pc, #436]	; (8001318 <HAL_DMA_Abort+0x22c>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d02c      	beq.n	80011c2 <HAL_DMA_Abort+0xd6>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a6b      	ldr	r2, [pc, #428]	; (800131c <HAL_DMA_Abort+0x230>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d027      	beq.n	80011c2 <HAL_DMA_Abort+0xd6>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a6a      	ldr	r2, [pc, #424]	; (8001320 <HAL_DMA_Abort+0x234>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d022      	beq.n	80011c2 <HAL_DMA_Abort+0xd6>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a68      	ldr	r2, [pc, #416]	; (8001324 <HAL_DMA_Abort+0x238>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d01d      	beq.n	80011c2 <HAL_DMA_Abort+0xd6>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a67      	ldr	r2, [pc, #412]	; (8001328 <HAL_DMA_Abort+0x23c>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d018      	beq.n	80011c2 <HAL_DMA_Abort+0xd6>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a65      	ldr	r2, [pc, #404]	; (800132c <HAL_DMA_Abort+0x240>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d013      	beq.n	80011c2 <HAL_DMA_Abort+0xd6>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a64      	ldr	r2, [pc, #400]	; (8001330 <HAL_DMA_Abort+0x244>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d00e      	beq.n	80011c2 <HAL_DMA_Abort+0xd6>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a62      	ldr	r2, [pc, #392]	; (8001334 <HAL_DMA_Abort+0x248>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d009      	beq.n	80011c2 <HAL_DMA_Abort+0xd6>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a61      	ldr	r2, [pc, #388]	; (8001338 <HAL_DMA_Abort+0x24c>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d004      	beq.n	80011c2 <HAL_DMA_Abort+0xd6>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a5f      	ldr	r2, [pc, #380]	; (800133c <HAL_DMA_Abort+0x250>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_DMA_Abort+0xda>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_DMA_Abort+0xdc>
 80011c6:	2300      	movs	r3, #0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d013      	beq.n	80011f4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 021e 	bic.w	r2, r2, #30
 80011da:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ea:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	e00a      	b.n	800120a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 020e 	bic.w	r2, r2, #14
 8001202:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a3c      	ldr	r2, [pc, #240]	; (8001300 <HAL_DMA_Abort+0x214>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d072      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a3a      	ldr	r2, [pc, #232]	; (8001304 <HAL_DMA_Abort+0x218>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d06d      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a39      	ldr	r2, [pc, #228]	; (8001308 <HAL_DMA_Abort+0x21c>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d068      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a37      	ldr	r2, [pc, #220]	; (800130c <HAL_DMA_Abort+0x220>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d063      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a36      	ldr	r2, [pc, #216]	; (8001310 <HAL_DMA_Abort+0x224>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d05e      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a34      	ldr	r2, [pc, #208]	; (8001314 <HAL_DMA_Abort+0x228>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d059      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a33      	ldr	r2, [pc, #204]	; (8001318 <HAL_DMA_Abort+0x22c>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d054      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a31      	ldr	r2, [pc, #196]	; (800131c <HAL_DMA_Abort+0x230>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d04f      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a30      	ldr	r2, [pc, #192]	; (8001320 <HAL_DMA_Abort+0x234>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d04a      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a2e      	ldr	r2, [pc, #184]	; (8001324 <HAL_DMA_Abort+0x238>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d045      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a2d      	ldr	r2, [pc, #180]	; (8001328 <HAL_DMA_Abort+0x23c>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d040      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a2b      	ldr	r2, [pc, #172]	; (800132c <HAL_DMA_Abort+0x240>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d03b      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a2a      	ldr	r2, [pc, #168]	; (8001330 <HAL_DMA_Abort+0x244>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d036      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a28      	ldr	r2, [pc, #160]	; (8001334 <HAL_DMA_Abort+0x248>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d031      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a27      	ldr	r2, [pc, #156]	; (8001338 <HAL_DMA_Abort+0x24c>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d02c      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a25      	ldr	r2, [pc, #148]	; (800133c <HAL_DMA_Abort+0x250>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d027      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a24      	ldr	r2, [pc, #144]	; (8001340 <HAL_DMA_Abort+0x254>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d022      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a22      	ldr	r2, [pc, #136]	; (8001344 <HAL_DMA_Abort+0x258>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d01d      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a21      	ldr	r2, [pc, #132]	; (8001348 <HAL_DMA_Abort+0x25c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d018      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a1f      	ldr	r2, [pc, #124]	; (800134c <HAL_DMA_Abort+0x260>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d013      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a1e      	ldr	r2, [pc, #120]	; (8001350 <HAL_DMA_Abort+0x264>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d00e      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a1c      	ldr	r2, [pc, #112]	; (8001354 <HAL_DMA_Abort+0x268>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d009      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <HAL_DMA_Abort+0x26c>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d004      	beq.n	80012fa <HAL_DMA_Abort+0x20e>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <HAL_DMA_Abort+0x270>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d132      	bne.n	8001360 <HAL_DMA_Abort+0x274>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e031      	b.n	8001362 <HAL_DMA_Abort+0x276>
 80012fe:	bf00      	nop
 8001300:	40020010 	.word	0x40020010
 8001304:	40020028 	.word	0x40020028
 8001308:	40020040 	.word	0x40020040
 800130c:	40020058 	.word	0x40020058
 8001310:	40020070 	.word	0x40020070
 8001314:	40020088 	.word	0x40020088
 8001318:	400200a0 	.word	0x400200a0
 800131c:	400200b8 	.word	0x400200b8
 8001320:	40020410 	.word	0x40020410
 8001324:	40020428 	.word	0x40020428
 8001328:	40020440 	.word	0x40020440
 800132c:	40020458 	.word	0x40020458
 8001330:	40020470 	.word	0x40020470
 8001334:	40020488 	.word	0x40020488
 8001338:	400204a0 	.word	0x400204a0
 800133c:	400204b8 	.word	0x400204b8
 8001340:	58025408 	.word	0x58025408
 8001344:	5802541c 	.word	0x5802541c
 8001348:	58025430 	.word	0x58025430
 800134c:	58025444 	.word	0x58025444
 8001350:	58025458 	.word	0x58025458
 8001354:	5802546c 	.word	0x5802546c
 8001358:	58025480 	.word	0x58025480
 800135c:	58025494 	.word	0x58025494
 8001360:	2300      	movs	r3, #0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d007      	beq.n	8001376 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001374:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a6d      	ldr	r2, [pc, #436]	; (8001530 <HAL_DMA_Abort+0x444>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d04a      	beq.n	8001416 <HAL_DMA_Abort+0x32a>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a6b      	ldr	r2, [pc, #428]	; (8001534 <HAL_DMA_Abort+0x448>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d045      	beq.n	8001416 <HAL_DMA_Abort+0x32a>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a6a      	ldr	r2, [pc, #424]	; (8001538 <HAL_DMA_Abort+0x44c>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d040      	beq.n	8001416 <HAL_DMA_Abort+0x32a>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a68      	ldr	r2, [pc, #416]	; (800153c <HAL_DMA_Abort+0x450>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d03b      	beq.n	8001416 <HAL_DMA_Abort+0x32a>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a67      	ldr	r2, [pc, #412]	; (8001540 <HAL_DMA_Abort+0x454>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d036      	beq.n	8001416 <HAL_DMA_Abort+0x32a>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a65      	ldr	r2, [pc, #404]	; (8001544 <HAL_DMA_Abort+0x458>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d031      	beq.n	8001416 <HAL_DMA_Abort+0x32a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a64      	ldr	r2, [pc, #400]	; (8001548 <HAL_DMA_Abort+0x45c>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d02c      	beq.n	8001416 <HAL_DMA_Abort+0x32a>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a62      	ldr	r2, [pc, #392]	; (800154c <HAL_DMA_Abort+0x460>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d027      	beq.n	8001416 <HAL_DMA_Abort+0x32a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a61      	ldr	r2, [pc, #388]	; (8001550 <HAL_DMA_Abort+0x464>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d022      	beq.n	8001416 <HAL_DMA_Abort+0x32a>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a5f      	ldr	r2, [pc, #380]	; (8001554 <HAL_DMA_Abort+0x468>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d01d      	beq.n	8001416 <HAL_DMA_Abort+0x32a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a5e      	ldr	r2, [pc, #376]	; (8001558 <HAL_DMA_Abort+0x46c>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d018      	beq.n	8001416 <HAL_DMA_Abort+0x32a>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a5c      	ldr	r2, [pc, #368]	; (800155c <HAL_DMA_Abort+0x470>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d013      	beq.n	8001416 <HAL_DMA_Abort+0x32a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a5b      	ldr	r2, [pc, #364]	; (8001560 <HAL_DMA_Abort+0x474>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d00e      	beq.n	8001416 <HAL_DMA_Abort+0x32a>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a59      	ldr	r2, [pc, #356]	; (8001564 <HAL_DMA_Abort+0x478>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d009      	beq.n	8001416 <HAL_DMA_Abort+0x32a>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a58      	ldr	r2, [pc, #352]	; (8001568 <HAL_DMA_Abort+0x47c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d004      	beq.n	8001416 <HAL_DMA_Abort+0x32a>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a56      	ldr	r2, [pc, #344]	; (800156c <HAL_DMA_Abort+0x480>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d108      	bne.n	8001428 <HAL_DMA_Abort+0x33c>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0201 	bic.w	r2, r2, #1
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	e007      	b.n	8001438 <HAL_DMA_Abort+0x34c>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0201 	bic.w	r2, r2, #1
 8001436:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001438:	e013      	b.n	8001462 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800143a:	f7ff fd3b 	bl	8000eb4 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b05      	cmp	r3, #5
 8001446:	d90c      	bls.n	8001462 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2220      	movs	r2, #32
 800144c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2203      	movs	r2, #3
 8001452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e12d      	b.n	80016be <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1e5      	bne.n	800143a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a2f      	ldr	r2, [pc, #188]	; (8001530 <HAL_DMA_Abort+0x444>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d04a      	beq.n	800150e <HAL_DMA_Abort+0x422>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a2d      	ldr	r2, [pc, #180]	; (8001534 <HAL_DMA_Abort+0x448>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d045      	beq.n	800150e <HAL_DMA_Abort+0x422>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a2c      	ldr	r2, [pc, #176]	; (8001538 <HAL_DMA_Abort+0x44c>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d040      	beq.n	800150e <HAL_DMA_Abort+0x422>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a2a      	ldr	r2, [pc, #168]	; (800153c <HAL_DMA_Abort+0x450>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d03b      	beq.n	800150e <HAL_DMA_Abort+0x422>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a29      	ldr	r2, [pc, #164]	; (8001540 <HAL_DMA_Abort+0x454>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d036      	beq.n	800150e <HAL_DMA_Abort+0x422>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a27      	ldr	r2, [pc, #156]	; (8001544 <HAL_DMA_Abort+0x458>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d031      	beq.n	800150e <HAL_DMA_Abort+0x422>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a26      	ldr	r2, [pc, #152]	; (8001548 <HAL_DMA_Abort+0x45c>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d02c      	beq.n	800150e <HAL_DMA_Abort+0x422>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a24      	ldr	r2, [pc, #144]	; (800154c <HAL_DMA_Abort+0x460>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d027      	beq.n	800150e <HAL_DMA_Abort+0x422>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a23      	ldr	r2, [pc, #140]	; (8001550 <HAL_DMA_Abort+0x464>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d022      	beq.n	800150e <HAL_DMA_Abort+0x422>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a21      	ldr	r2, [pc, #132]	; (8001554 <HAL_DMA_Abort+0x468>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d01d      	beq.n	800150e <HAL_DMA_Abort+0x422>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a20      	ldr	r2, [pc, #128]	; (8001558 <HAL_DMA_Abort+0x46c>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d018      	beq.n	800150e <HAL_DMA_Abort+0x422>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a1e      	ldr	r2, [pc, #120]	; (800155c <HAL_DMA_Abort+0x470>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d013      	beq.n	800150e <HAL_DMA_Abort+0x422>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <HAL_DMA_Abort+0x474>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d00e      	beq.n	800150e <HAL_DMA_Abort+0x422>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a1b      	ldr	r2, [pc, #108]	; (8001564 <HAL_DMA_Abort+0x478>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d009      	beq.n	800150e <HAL_DMA_Abort+0x422>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a1a      	ldr	r2, [pc, #104]	; (8001568 <HAL_DMA_Abort+0x47c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d004      	beq.n	800150e <HAL_DMA_Abort+0x422>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a18      	ldr	r2, [pc, #96]	; (800156c <HAL_DMA_Abort+0x480>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_DMA_Abort+0x426>
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <HAL_DMA_Abort+0x428>
 8001512:	2300      	movs	r3, #0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d02b      	beq.n	8001570 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001522:	f003 031f 	and.w	r3, r3, #31
 8001526:	223f      	movs	r2, #63	; 0x3f
 8001528:	409a      	lsls	r2, r3
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	e02a      	b.n	8001586 <HAL_DMA_Abort+0x49a>
 8001530:	40020010 	.word	0x40020010
 8001534:	40020028 	.word	0x40020028
 8001538:	40020040 	.word	0x40020040
 800153c:	40020058 	.word	0x40020058
 8001540:	40020070 	.word	0x40020070
 8001544:	40020088 	.word	0x40020088
 8001548:	400200a0 	.word	0x400200a0
 800154c:	400200b8 	.word	0x400200b8
 8001550:	40020410 	.word	0x40020410
 8001554:	40020428 	.word	0x40020428
 8001558:	40020440 	.word	0x40020440
 800155c:	40020458 	.word	0x40020458
 8001560:	40020470 	.word	0x40020470
 8001564:	40020488 	.word	0x40020488
 8001568:	400204a0 	.word	0x400204a0
 800156c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001574:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157a:	f003 031f 	and.w	r3, r3, #31
 800157e:	2201      	movs	r2, #1
 8001580:	409a      	lsls	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a4f      	ldr	r2, [pc, #316]	; (80016c8 <HAL_DMA_Abort+0x5dc>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d072      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a4d      	ldr	r2, [pc, #308]	; (80016cc <HAL_DMA_Abort+0x5e0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d06d      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a4c      	ldr	r2, [pc, #304]	; (80016d0 <HAL_DMA_Abort+0x5e4>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d068      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a4a      	ldr	r2, [pc, #296]	; (80016d4 <HAL_DMA_Abort+0x5e8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d063      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a49      	ldr	r2, [pc, #292]	; (80016d8 <HAL_DMA_Abort+0x5ec>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d05e      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a47      	ldr	r2, [pc, #284]	; (80016dc <HAL_DMA_Abort+0x5f0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d059      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a46      	ldr	r2, [pc, #280]	; (80016e0 <HAL_DMA_Abort+0x5f4>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d054      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a44      	ldr	r2, [pc, #272]	; (80016e4 <HAL_DMA_Abort+0x5f8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d04f      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a43      	ldr	r2, [pc, #268]	; (80016e8 <HAL_DMA_Abort+0x5fc>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d04a      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a41      	ldr	r2, [pc, #260]	; (80016ec <HAL_DMA_Abort+0x600>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d045      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a40      	ldr	r2, [pc, #256]	; (80016f0 <HAL_DMA_Abort+0x604>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d040      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a3e      	ldr	r2, [pc, #248]	; (80016f4 <HAL_DMA_Abort+0x608>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d03b      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a3d      	ldr	r2, [pc, #244]	; (80016f8 <HAL_DMA_Abort+0x60c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d036      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a3b      	ldr	r2, [pc, #236]	; (80016fc <HAL_DMA_Abort+0x610>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d031      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a3a      	ldr	r2, [pc, #232]	; (8001700 <HAL_DMA_Abort+0x614>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d02c      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a38      	ldr	r2, [pc, #224]	; (8001704 <HAL_DMA_Abort+0x618>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d027      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a37      	ldr	r2, [pc, #220]	; (8001708 <HAL_DMA_Abort+0x61c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d022      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a35      	ldr	r2, [pc, #212]	; (800170c <HAL_DMA_Abort+0x620>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d01d      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a34      	ldr	r2, [pc, #208]	; (8001710 <HAL_DMA_Abort+0x624>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d018      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a32      	ldr	r2, [pc, #200]	; (8001714 <HAL_DMA_Abort+0x628>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d013      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a31      	ldr	r2, [pc, #196]	; (8001718 <HAL_DMA_Abort+0x62c>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d00e      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a2f      	ldr	r2, [pc, #188]	; (800171c <HAL_DMA_Abort+0x630>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d009      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a2e      	ldr	r2, [pc, #184]	; (8001720 <HAL_DMA_Abort+0x634>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d004      	beq.n	8001676 <HAL_DMA_Abort+0x58a>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a2c      	ldr	r2, [pc, #176]	; (8001724 <HAL_DMA_Abort+0x638>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d101      	bne.n	800167a <HAL_DMA_Abort+0x58e>
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <HAL_DMA_Abort+0x590>
 800167a:	2300      	movs	r3, #0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d015      	beq.n	80016ac <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001688:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00c      	beq.n	80016ac <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800169c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80016aa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40020010 	.word	0x40020010
 80016cc:	40020028 	.word	0x40020028
 80016d0:	40020040 	.word	0x40020040
 80016d4:	40020058 	.word	0x40020058
 80016d8:	40020070 	.word	0x40020070
 80016dc:	40020088 	.word	0x40020088
 80016e0:	400200a0 	.word	0x400200a0
 80016e4:	400200b8 	.word	0x400200b8
 80016e8:	40020410 	.word	0x40020410
 80016ec:	40020428 	.word	0x40020428
 80016f0:	40020440 	.word	0x40020440
 80016f4:	40020458 	.word	0x40020458
 80016f8:	40020470 	.word	0x40020470
 80016fc:	40020488 	.word	0x40020488
 8001700:	400204a0 	.word	0x400204a0
 8001704:	400204b8 	.word	0x400204b8
 8001708:	58025408 	.word	0x58025408
 800170c:	5802541c 	.word	0x5802541c
 8001710:	58025430 	.word	0x58025430
 8001714:	58025444 	.word	0x58025444
 8001718:	58025458 	.word	0x58025458
 800171c:	5802546c 	.word	0x5802546c
 8001720:	58025480 	.word	0x58025480
 8001724:	58025494 	.word	0x58025494

08001728 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e237      	b.n	8001baa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d004      	beq.n	8001750 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2280      	movs	r2, #128	; 0x80
 800174a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e22c      	b.n	8001baa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a5c      	ldr	r2, [pc, #368]	; (80018c8 <HAL_DMA_Abort_IT+0x1a0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d04a      	beq.n	80017f0 <HAL_DMA_Abort_IT+0xc8>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a5b      	ldr	r2, [pc, #364]	; (80018cc <HAL_DMA_Abort_IT+0x1a4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d045      	beq.n	80017f0 <HAL_DMA_Abort_IT+0xc8>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a59      	ldr	r2, [pc, #356]	; (80018d0 <HAL_DMA_Abort_IT+0x1a8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d040      	beq.n	80017f0 <HAL_DMA_Abort_IT+0xc8>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a58      	ldr	r2, [pc, #352]	; (80018d4 <HAL_DMA_Abort_IT+0x1ac>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d03b      	beq.n	80017f0 <HAL_DMA_Abort_IT+0xc8>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a56      	ldr	r2, [pc, #344]	; (80018d8 <HAL_DMA_Abort_IT+0x1b0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d036      	beq.n	80017f0 <HAL_DMA_Abort_IT+0xc8>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a55      	ldr	r2, [pc, #340]	; (80018dc <HAL_DMA_Abort_IT+0x1b4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d031      	beq.n	80017f0 <HAL_DMA_Abort_IT+0xc8>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a53      	ldr	r2, [pc, #332]	; (80018e0 <HAL_DMA_Abort_IT+0x1b8>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d02c      	beq.n	80017f0 <HAL_DMA_Abort_IT+0xc8>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <HAL_DMA_Abort_IT+0x1bc>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d027      	beq.n	80017f0 <HAL_DMA_Abort_IT+0xc8>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a50      	ldr	r2, [pc, #320]	; (80018e8 <HAL_DMA_Abort_IT+0x1c0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d022      	beq.n	80017f0 <HAL_DMA_Abort_IT+0xc8>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a4f      	ldr	r2, [pc, #316]	; (80018ec <HAL_DMA_Abort_IT+0x1c4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d01d      	beq.n	80017f0 <HAL_DMA_Abort_IT+0xc8>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a4d      	ldr	r2, [pc, #308]	; (80018f0 <HAL_DMA_Abort_IT+0x1c8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d018      	beq.n	80017f0 <HAL_DMA_Abort_IT+0xc8>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a4c      	ldr	r2, [pc, #304]	; (80018f4 <HAL_DMA_Abort_IT+0x1cc>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d013      	beq.n	80017f0 <HAL_DMA_Abort_IT+0xc8>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a4a      	ldr	r2, [pc, #296]	; (80018f8 <HAL_DMA_Abort_IT+0x1d0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00e      	beq.n	80017f0 <HAL_DMA_Abort_IT+0xc8>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a49      	ldr	r2, [pc, #292]	; (80018fc <HAL_DMA_Abort_IT+0x1d4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d009      	beq.n	80017f0 <HAL_DMA_Abort_IT+0xc8>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a47      	ldr	r2, [pc, #284]	; (8001900 <HAL_DMA_Abort_IT+0x1d8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d004      	beq.n	80017f0 <HAL_DMA_Abort_IT+0xc8>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a46      	ldr	r2, [pc, #280]	; (8001904 <HAL_DMA_Abort_IT+0x1dc>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d101      	bne.n	80017f4 <HAL_DMA_Abort_IT+0xcc>
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <HAL_DMA_Abort_IT+0xce>
 80017f4:	2300      	movs	r3, #0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 8086 	beq.w	8001908 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2204      	movs	r2, #4
 8001800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a2f      	ldr	r2, [pc, #188]	; (80018c8 <HAL_DMA_Abort_IT+0x1a0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d04a      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x17c>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a2e      	ldr	r2, [pc, #184]	; (80018cc <HAL_DMA_Abort_IT+0x1a4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d045      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x17c>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a2c      	ldr	r2, [pc, #176]	; (80018d0 <HAL_DMA_Abort_IT+0x1a8>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d040      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x17c>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a2b      	ldr	r2, [pc, #172]	; (80018d4 <HAL_DMA_Abort_IT+0x1ac>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d03b      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x17c>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a29      	ldr	r2, [pc, #164]	; (80018d8 <HAL_DMA_Abort_IT+0x1b0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d036      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x17c>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a28      	ldr	r2, [pc, #160]	; (80018dc <HAL_DMA_Abort_IT+0x1b4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d031      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x17c>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a26      	ldr	r2, [pc, #152]	; (80018e0 <HAL_DMA_Abort_IT+0x1b8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d02c      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x17c>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a25      	ldr	r2, [pc, #148]	; (80018e4 <HAL_DMA_Abort_IT+0x1bc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d027      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x17c>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a23      	ldr	r2, [pc, #140]	; (80018e8 <HAL_DMA_Abort_IT+0x1c0>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d022      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x17c>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a22      	ldr	r2, [pc, #136]	; (80018ec <HAL_DMA_Abort_IT+0x1c4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d01d      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x17c>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <HAL_DMA_Abort_IT+0x1c8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d018      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x17c>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1f      	ldr	r2, [pc, #124]	; (80018f4 <HAL_DMA_Abort_IT+0x1cc>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d013      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x17c>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <HAL_DMA_Abort_IT+0x1d0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d00e      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x17c>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a1c      	ldr	r2, [pc, #112]	; (80018fc <HAL_DMA_Abort_IT+0x1d4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d009      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x17c>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1a      	ldr	r2, [pc, #104]	; (8001900 <HAL_DMA_Abort_IT+0x1d8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d004      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x17c>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a19      	ldr	r2, [pc, #100]	; (8001904 <HAL_DMA_Abort_IT+0x1dc>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d108      	bne.n	80018b6 <HAL_DMA_Abort_IT+0x18e>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0201 	bic.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e178      	b.n	8001ba8 <HAL_DMA_Abort_IT+0x480>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0201 	bic.w	r2, r2, #1
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	e16f      	b.n	8001ba8 <HAL_DMA_Abort_IT+0x480>
 80018c8:	40020010 	.word	0x40020010
 80018cc:	40020028 	.word	0x40020028
 80018d0:	40020040 	.word	0x40020040
 80018d4:	40020058 	.word	0x40020058
 80018d8:	40020070 	.word	0x40020070
 80018dc:	40020088 	.word	0x40020088
 80018e0:	400200a0 	.word	0x400200a0
 80018e4:	400200b8 	.word	0x400200b8
 80018e8:	40020410 	.word	0x40020410
 80018ec:	40020428 	.word	0x40020428
 80018f0:	40020440 	.word	0x40020440
 80018f4:	40020458 	.word	0x40020458
 80018f8:	40020470 	.word	0x40020470
 80018fc:	40020488 	.word	0x40020488
 8001900:	400204a0 	.word	0x400204a0
 8001904:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 020e 	bic.w	r2, r2, #14
 8001916:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a6c      	ldr	r2, [pc, #432]	; (8001ad0 <HAL_DMA_Abort_IT+0x3a8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d04a      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x290>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a6b      	ldr	r2, [pc, #428]	; (8001ad4 <HAL_DMA_Abort_IT+0x3ac>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d045      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x290>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a69      	ldr	r2, [pc, #420]	; (8001ad8 <HAL_DMA_Abort_IT+0x3b0>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d040      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x290>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a68      	ldr	r2, [pc, #416]	; (8001adc <HAL_DMA_Abort_IT+0x3b4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d03b      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x290>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a66      	ldr	r2, [pc, #408]	; (8001ae0 <HAL_DMA_Abort_IT+0x3b8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d036      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x290>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a65      	ldr	r2, [pc, #404]	; (8001ae4 <HAL_DMA_Abort_IT+0x3bc>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d031      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x290>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a63      	ldr	r2, [pc, #396]	; (8001ae8 <HAL_DMA_Abort_IT+0x3c0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d02c      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x290>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a62      	ldr	r2, [pc, #392]	; (8001aec <HAL_DMA_Abort_IT+0x3c4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d027      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x290>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a60      	ldr	r2, [pc, #384]	; (8001af0 <HAL_DMA_Abort_IT+0x3c8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d022      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x290>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a5f      	ldr	r2, [pc, #380]	; (8001af4 <HAL_DMA_Abort_IT+0x3cc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d01d      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x290>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a5d      	ldr	r2, [pc, #372]	; (8001af8 <HAL_DMA_Abort_IT+0x3d0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d018      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x290>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a5c      	ldr	r2, [pc, #368]	; (8001afc <HAL_DMA_Abort_IT+0x3d4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d013      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x290>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a5a      	ldr	r2, [pc, #360]	; (8001b00 <HAL_DMA_Abort_IT+0x3d8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00e      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x290>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a59      	ldr	r2, [pc, #356]	; (8001b04 <HAL_DMA_Abort_IT+0x3dc>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d009      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x290>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a57      	ldr	r2, [pc, #348]	; (8001b08 <HAL_DMA_Abort_IT+0x3e0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d004      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x290>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a56      	ldr	r2, [pc, #344]	; (8001b0c <HAL_DMA_Abort_IT+0x3e4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d108      	bne.n	80019ca <HAL_DMA_Abort_IT+0x2a2>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e007      	b.n	80019da <HAL_DMA_Abort_IT+0x2b2>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0201 	bic.w	r2, r2, #1
 80019d8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a3c      	ldr	r2, [pc, #240]	; (8001ad0 <HAL_DMA_Abort_IT+0x3a8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d072      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a3a      	ldr	r2, [pc, #232]	; (8001ad4 <HAL_DMA_Abort_IT+0x3ac>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d06d      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a39      	ldr	r2, [pc, #228]	; (8001ad8 <HAL_DMA_Abort_IT+0x3b0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d068      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a37      	ldr	r2, [pc, #220]	; (8001adc <HAL_DMA_Abort_IT+0x3b4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d063      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a36      	ldr	r2, [pc, #216]	; (8001ae0 <HAL_DMA_Abort_IT+0x3b8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d05e      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a34      	ldr	r2, [pc, #208]	; (8001ae4 <HAL_DMA_Abort_IT+0x3bc>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d059      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a33      	ldr	r2, [pc, #204]	; (8001ae8 <HAL_DMA_Abort_IT+0x3c0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d054      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a31      	ldr	r2, [pc, #196]	; (8001aec <HAL_DMA_Abort_IT+0x3c4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d04f      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a30      	ldr	r2, [pc, #192]	; (8001af0 <HAL_DMA_Abort_IT+0x3c8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d04a      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a2e      	ldr	r2, [pc, #184]	; (8001af4 <HAL_DMA_Abort_IT+0x3cc>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d045      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a2d      	ldr	r2, [pc, #180]	; (8001af8 <HAL_DMA_Abort_IT+0x3d0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d040      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a2b      	ldr	r2, [pc, #172]	; (8001afc <HAL_DMA_Abort_IT+0x3d4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d03b      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a2a      	ldr	r2, [pc, #168]	; (8001b00 <HAL_DMA_Abort_IT+0x3d8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d036      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a28      	ldr	r2, [pc, #160]	; (8001b04 <HAL_DMA_Abort_IT+0x3dc>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d031      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a27      	ldr	r2, [pc, #156]	; (8001b08 <HAL_DMA_Abort_IT+0x3e0>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d02c      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a25      	ldr	r2, [pc, #148]	; (8001b0c <HAL_DMA_Abort_IT+0x3e4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d027      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a24      	ldr	r2, [pc, #144]	; (8001b10 <HAL_DMA_Abort_IT+0x3e8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d022      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a22      	ldr	r2, [pc, #136]	; (8001b14 <HAL_DMA_Abort_IT+0x3ec>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d01d      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a21      	ldr	r2, [pc, #132]	; (8001b18 <HAL_DMA_Abort_IT+0x3f0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d018      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1f      	ldr	r2, [pc, #124]	; (8001b1c <HAL_DMA_Abort_IT+0x3f4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d013      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <HAL_DMA_Abort_IT+0x3f8>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d00e      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <HAL_DMA_Abort_IT+0x3fc>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d009      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a1b      	ldr	r2, [pc, #108]	; (8001b28 <HAL_DMA_Abort_IT+0x400>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d004      	beq.n	8001aca <HAL_DMA_Abort_IT+0x3a2>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a19      	ldr	r2, [pc, #100]	; (8001b2c <HAL_DMA_Abort_IT+0x404>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d132      	bne.n	8001b30 <HAL_DMA_Abort_IT+0x408>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e031      	b.n	8001b32 <HAL_DMA_Abort_IT+0x40a>
 8001ace:	bf00      	nop
 8001ad0:	40020010 	.word	0x40020010
 8001ad4:	40020028 	.word	0x40020028
 8001ad8:	40020040 	.word	0x40020040
 8001adc:	40020058 	.word	0x40020058
 8001ae0:	40020070 	.word	0x40020070
 8001ae4:	40020088 	.word	0x40020088
 8001ae8:	400200a0 	.word	0x400200a0
 8001aec:	400200b8 	.word	0x400200b8
 8001af0:	40020410 	.word	0x40020410
 8001af4:	40020428 	.word	0x40020428
 8001af8:	40020440 	.word	0x40020440
 8001afc:	40020458 	.word	0x40020458
 8001b00:	40020470 	.word	0x40020470
 8001b04:	40020488 	.word	0x40020488
 8001b08:	400204a0 	.word	0x400204a0
 8001b0c:	400204b8 	.word	0x400204b8
 8001b10:	58025408 	.word	0x58025408
 8001b14:	5802541c 	.word	0x5802541c
 8001b18:	58025430 	.word	0x58025430
 8001b1c:	58025444 	.word	0x58025444
 8001b20:	58025458 	.word	0x58025458
 8001b24:	5802546c 	.word	0x5802546c
 8001b28:	58025480 	.word	0x58025480
 8001b2c:	58025494 	.word	0x58025494
 8001b30:	2300      	movs	r3, #0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d028      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b44:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	2201      	movs	r2, #1
 8001b56:	409a      	lsls	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b64:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00c      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b7c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001b86:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop

08001bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bc2:	4b89      	ldr	r3, [pc, #548]	; (8001de8 <HAL_GPIO_Init+0x234>)
 8001bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bc6:	e194      	b.n	8001ef2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2101      	movs	r1, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8186 	beq.w	8001eec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d005      	beq.n	8001bf8 <HAL_GPIO_Init+0x44>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d130      	bne.n	8001c5a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c2e:	2201      	movs	r2, #1
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	091b      	lsrs	r3, r3, #4
 8001c44:	f003 0201 	and.w	r2, r3, #1
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d017      	beq.n	8001c96 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	2203      	movs	r2, #3
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d123      	bne.n	8001cea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	08da      	lsrs	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3208      	adds	r2, #8
 8001caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	220f      	movs	r2, #15
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	08da      	lsrs	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3208      	adds	r2, #8
 8001ce4:	69b9      	ldr	r1, [r7, #24]
 8001ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0203 	and.w	r2, r3, #3
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 80e0 	beq.w	8001eec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2c:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <HAL_GPIO_Init+0x238>)
 8001d2e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001d32:	4a2e      	ldr	r2, [pc, #184]	; (8001dec <HAL_GPIO_Init+0x238>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <HAL_GPIO_Init+0x238>)
 8001d3e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d4a:	4a29      	ldr	r2, [pc, #164]	; (8001df0 <HAL_GPIO_Init+0x23c>)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	220f      	movs	r2, #15
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a20      	ldr	r2, [pc, #128]	; (8001df4 <HAL_GPIO_Init+0x240>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d052      	beq.n	8001e1c <HAL_GPIO_Init+0x268>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <HAL_GPIO_Init+0x244>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d031      	beq.n	8001de2 <HAL_GPIO_Init+0x22e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <HAL_GPIO_Init+0x248>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d02b      	beq.n	8001dde <HAL_GPIO_Init+0x22a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <HAL_GPIO_Init+0x24c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d025      	beq.n	8001dda <HAL_GPIO_Init+0x226>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <HAL_GPIO_Init+0x250>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d01f      	beq.n	8001dd6 <HAL_GPIO_Init+0x222>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a1b      	ldr	r2, [pc, #108]	; (8001e08 <HAL_GPIO_Init+0x254>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d019      	beq.n	8001dd2 <HAL_GPIO_Init+0x21e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a1a      	ldr	r2, [pc, #104]	; (8001e0c <HAL_GPIO_Init+0x258>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d013      	beq.n	8001dce <HAL_GPIO_Init+0x21a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a19      	ldr	r2, [pc, #100]	; (8001e10 <HAL_GPIO_Init+0x25c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00d      	beq.n	8001dca <HAL_GPIO_Init+0x216>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a18      	ldr	r2, [pc, #96]	; (8001e14 <HAL_GPIO_Init+0x260>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d007      	beq.n	8001dc6 <HAL_GPIO_Init+0x212>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <HAL_GPIO_Init+0x264>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d101      	bne.n	8001dc2 <HAL_GPIO_Init+0x20e>
 8001dbe:	2309      	movs	r3, #9
 8001dc0:	e02d      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001dc2:	230a      	movs	r3, #10
 8001dc4:	e02b      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001dc6:	2308      	movs	r3, #8
 8001dc8:	e029      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001dca:	2307      	movs	r3, #7
 8001dcc:	e027      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001dce:	2306      	movs	r3, #6
 8001dd0:	e025      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	e023      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	e021      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e01f      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e01d      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e01b      	b.n	8001e1e <HAL_GPIO_Init+0x26a>
 8001de6:	bf00      	nop
 8001de8:	58000080 	.word	0x58000080
 8001dec:	58024400 	.word	0x58024400
 8001df0:	58000400 	.word	0x58000400
 8001df4:	58020000 	.word	0x58020000
 8001df8:	58020400 	.word	0x58020400
 8001dfc:	58020800 	.word	0x58020800
 8001e00:	58020c00 	.word	0x58020c00
 8001e04:	58021000 	.word	0x58021000
 8001e08:	58021400 	.word	0x58021400
 8001e0c:	58021800 	.word	0x58021800
 8001e10:	58021c00 	.word	0x58021c00
 8001e14:	58022000 	.word	0x58022000
 8001e18:	58022400 	.word	0x58022400
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	f002 0203 	and.w	r2, r2, #3
 8001e24:	0092      	lsls	r2, r2, #2
 8001e26:	4093      	lsls	r3, r2
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e2e:	4938      	ldr	r1, [pc, #224]	; (8001f10 <HAL_GPIO_Init+0x35c>)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	3302      	adds	r3, #2
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f47f ae63 	bne.w	8001bc8 <HAL_GPIO_Init+0x14>
  }
}
 8001f02:	bf00      	nop
 8001f04:	bf00      	nop
 8001f06:	3724      	adds	r7, #36	; 0x24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	58000400 	.word	0x58000400

08001f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
 8001f20:	4613      	mov	r3, r2
 8001f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f24:	787b      	ldrb	r3, [r7, #1]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f30:	e003      	b.n	8001f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f32:	887b      	ldrh	r3, [r7, #2]
 8001f34:	041a      	lsls	r2, r3, #16
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	619a      	str	r2, [r3, #24]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001f50:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	2b06      	cmp	r3, #6
 8001f5a:	d00a      	beq.n	8001f72 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f5c:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e040      	b.n	8001ff0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e03e      	b.n	8001ff0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001f7a:	491f      	ldr	r1, [pc, #124]	; (8001ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001f82:	f7fe ff97 	bl	8000eb4 <HAL_GetTick>
 8001f86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f88:	e009      	b.n	8001f9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f8a:	f7fe ff93 	bl	8000eb4 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f98:	d901      	bls.n	8001f9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e028      	b.n	8001ff0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001faa:	d1ee      	bne.n	8001f8a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b1e      	cmp	r3, #30
 8001fb0:	d008      	beq.n	8001fc4 <HAL_PWREx_ConfigSupply+0x7c>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8001fb6:	d005      	beq.n	8001fc4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b1d      	cmp	r3, #29
 8001fbc:	d002      	beq.n	8001fc4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b2d      	cmp	r3, #45	; 0x2d
 8001fc2:	d114      	bne.n	8001fee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001fc4:	f7fe ff76 	bl	8000eb4 <HAL_GetTick>
 8001fc8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001fca:	e009      	b.n	8001fe0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001fcc:	f7fe ff72 	bl	8000eb4 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fda:	d901      	bls.n	8001fe0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e007      	b.n	8001ff0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fec:	d1ee      	bne.n	8001fcc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	58024800 	.word	0x58024800

08001ffc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08c      	sub	sp, #48	; 0x30
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	f000 bc1f 	b.w	800284e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80b3 	beq.w	8002184 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201e:	4b95      	ldr	r3, [pc, #596]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002028:	4b92      	ldr	r3, [pc, #584]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800202e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002030:	2b10      	cmp	r3, #16
 8002032:	d007      	beq.n	8002044 <HAL_RCC_OscConfig+0x48>
 8002034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002036:	2b18      	cmp	r3, #24
 8002038:	d112      	bne.n	8002060 <HAL_RCC_OscConfig+0x64>
 800203a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d10d      	bne.n	8002060 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	4b8b      	ldr	r3, [pc, #556]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 8098 	beq.w	8002182 <HAL_RCC_OscConfig+0x186>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 8093 	bne.w	8002182 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e3f6      	b.n	800284e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002068:	d106      	bne.n	8002078 <HAL_RCC_OscConfig+0x7c>
 800206a:	4b82      	ldr	r3, [pc, #520]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a81      	ldr	r2, [pc, #516]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	e058      	b.n	800212a <HAL_RCC_OscConfig+0x12e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d112      	bne.n	80020a6 <HAL_RCC_OscConfig+0xaa>
 8002080:	4b7c      	ldr	r3, [pc, #496]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a7b      	ldr	r2, [pc, #492]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 8002086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b79      	ldr	r3, [pc, #484]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a78      	ldr	r2, [pc, #480]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 8002092:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	4b76      	ldr	r3, [pc, #472]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a75      	ldr	r2, [pc, #468]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 800209e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	e041      	b.n	800212a <HAL_RCC_OscConfig+0x12e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ae:	d112      	bne.n	80020d6 <HAL_RCC_OscConfig+0xda>
 80020b0:	4b70      	ldr	r3, [pc, #448]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a6f      	ldr	r2, [pc, #444]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 80020b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	4b6d      	ldr	r3, [pc, #436]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a6c      	ldr	r2, [pc, #432]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 80020c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	4b6a      	ldr	r3, [pc, #424]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a69      	ldr	r2, [pc, #420]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 80020ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	e029      	b.n	800212a <HAL_RCC_OscConfig+0x12e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80020de:	d112      	bne.n	8002106 <HAL_RCC_OscConfig+0x10a>
 80020e0:	4b64      	ldr	r3, [pc, #400]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a63      	ldr	r2, [pc, #396]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 80020e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	4b61      	ldr	r3, [pc, #388]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a60      	ldr	r2, [pc, #384]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 80020f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b5e      	ldr	r3, [pc, #376]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a5d      	ldr	r2, [pc, #372]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 80020fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	e011      	b.n	800212a <HAL_RCC_OscConfig+0x12e>
 8002106:	4b5b      	ldr	r3, [pc, #364]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a5a      	ldr	r2, [pc, #360]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 800210c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b58      	ldr	r3, [pc, #352]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a57      	ldr	r2, [pc, #348]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 8002118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b55      	ldr	r3, [pc, #340]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a54      	ldr	r2, [pc, #336]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 8002124:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002128:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d013      	beq.n	800215a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7fe febf 	bl	8000eb4 <HAL_GetTick>
 8002136:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213a:	f7fe febb 	bl	8000eb4 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b64      	cmp	r3, #100	; 0x64
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e380      	b.n	800284e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800214c:	4b49      	ldr	r3, [pc, #292]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x13e>
 8002158:	e014      	b.n	8002184 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7fe feab 	bl	8000eb4 <HAL_GetTick>
 800215e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002162:	f7fe fea7 	bl	8000eb4 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b64      	cmp	r3, #100	; 0x64
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e36c      	b.n	800284e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002174:	4b3f      	ldr	r3, [pc, #252]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f0      	bne.n	8002162 <HAL_RCC_OscConfig+0x166>
 8002180:	e000      	b.n	8002184 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002182:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 808c 	beq.w	80022aa <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002192:	4b38      	ldr	r3, [pc, #224]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800219a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800219c:	4b35      	ldr	r3, [pc, #212]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <HAL_RCC_OscConfig+0x1bc>
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	2b18      	cmp	r3, #24
 80021ac:	d137      	bne.n	800221e <HAL_RCC_OscConfig+0x222>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d132      	bne.n	800221e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b8:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_OscConfig+0x1d4>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e33e      	b.n	800284e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021d0:	4b28      	ldr	r3, [pc, #160]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 0219 	bic.w	r2, r3, #25
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4925      	ldr	r1, [pc, #148]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e2:	f7fe fe67 	bl	8000eb4 <HAL_GetTick>
 80021e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ea:	f7fe fe63 	bl	8000eb4 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e328      	b.n	800284e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021fc:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002208:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	061b      	lsls	r3, r3, #24
 8002216:	4917      	ldr	r1, [pc, #92]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800221c:	e045      	b.n	80022aa <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d028      	beq.n	8002278 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002226:	4b13      	ldr	r3, [pc, #76]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 0219 	bic.w	r2, r3, #25
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	4910      	ldr	r1, [pc, #64]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7fe fe3c 	bl	8000eb4 <HAL_GetTick>
 800223c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002240:	f7fe fe38 	bl	8000eb4 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e2fd      	b.n	800284e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	061b      	lsls	r3, r3, #24
 800226c:	4901      	ldr	r1, [pc, #4]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
 8002272:	e01a      	b.n	80022aa <HAL_RCC_OscConfig+0x2ae>
 8002274:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002278:	4b97      	ldr	r3, [pc, #604]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a96      	ldr	r2, [pc, #600]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe fe16 	bl	8000eb4 <HAL_GetTick>
 8002288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228c:	f7fe fe12 	bl	8000eb4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e2d7      	b.n	800284e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800229e:	4b8e      	ldr	r3, [pc, #568]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d06a      	beq.n	800238c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022b6:	4b88      	ldr	r3, [pc, #544]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022c0:	4b85      	ldr	r3, [pc, #532]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 80022c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d007      	beq.n	80022dc <HAL_RCC_OscConfig+0x2e0>
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2b18      	cmp	r3, #24
 80022d0:	d11b      	bne.n	800230a <HAL_RCC_OscConfig+0x30e>
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d116      	bne.n	800230a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022dc:	4b7e      	ldr	r3, [pc, #504]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_OscConfig+0x2f8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	2b80      	cmp	r3, #128	; 0x80
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e2ac      	b.n	800284e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022f4:	4b78      	ldr	r3, [pc, #480]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	061b      	lsls	r3, r3, #24
 8002302:	4975      	ldr	r1, [pc, #468]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 8002304:	4313      	orrs	r3, r2
 8002306:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002308:	e040      	b.n	800238c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d023      	beq.n	800235a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002312:	4b71      	ldr	r3, [pc, #452]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a70      	ldr	r2, [pc, #448]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 8002318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231e:	f7fe fdc9 	bl	8000eb4 <HAL_GetTick>
 8002322:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002326:	f7fe fdc5 	bl	8000eb4 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e28a      	b.n	800284e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002338:	4b67      	ldr	r3, [pc, #412]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002344:	4b64      	ldr	r3, [pc, #400]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	061b      	lsls	r3, r3, #24
 8002352:	4961      	ldr	r1, [pc, #388]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 8002354:	4313      	orrs	r3, r2
 8002356:	60cb      	str	r3, [r1, #12]
 8002358:	e018      	b.n	800238c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800235a:	4b5f      	ldr	r3, [pc, #380]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a5e      	ldr	r2, [pc, #376]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 8002360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002366:	f7fe fda5 	bl	8000eb4 <HAL_GetTick>
 800236a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800236e:	f7fe fda1 	bl	8000eb4 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e266      	b.n	800284e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002380:	4b55      	ldr	r3, [pc, #340]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f0      	bne.n	800236e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d036      	beq.n	8002406 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d019      	beq.n	80023d4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a0:	4b4d      	ldr	r3, [pc, #308]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 80023a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a4:	4a4c      	ldr	r2, [pc, #304]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ac:	f7fe fd82 	bl	8000eb4 <HAL_GetTick>
 80023b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b4:	f7fe fd7e 	bl	8000eb4 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e243      	b.n	800284e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023c6:	4b44      	ldr	r3, [pc, #272]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 80023c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x3b8>
 80023d2:	e018      	b.n	8002406 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d4:	4b40      	ldr	r3, [pc, #256]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 80023d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d8:	4a3f      	ldr	r2, [pc, #252]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e0:	f7fe fd68 	bl	8000eb4 <HAL_GetTick>
 80023e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e8:	f7fe fd64 	bl	8000eb4 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e229      	b.n	800284e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023fa:	4b37      	ldr	r3, [pc, #220]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 80023fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0320 	and.w	r3, r3, #32
 800240e:	2b00      	cmp	r3, #0
 8002410:	d036      	beq.n	8002480 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d019      	beq.n	800244e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800241a:	4b2f      	ldr	r3, [pc, #188]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2e      	ldr	r2, [pc, #184]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 8002420:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002424:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002426:	f7fe fd45 	bl	8000eb4 <HAL_GetTick>
 800242a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800242e:	f7fe fd41 	bl	8000eb4 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e206      	b.n	800284e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002440:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x432>
 800244c:	e018      	b.n	8002480 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800244e:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a21      	ldr	r2, [pc, #132]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 8002454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002458:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800245a:	f7fe fd2b 	bl	8000eb4 <HAL_GetTick>
 800245e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002462:	f7fe fd27 	bl	8000eb4 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e1ec      	b.n	800284e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002474:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f0      	bne.n	8002462 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80af 	beq.w	80025ec <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <HAL_RCC_OscConfig+0x4e0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a12      	ldr	r2, [pc, #72]	; (80024dc <HAL_RCC_OscConfig+0x4e0>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002498:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800249a:	f7fe fd0b 	bl	8000eb4 <HAL_GetTick>
 800249e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a2:	f7fe fd07 	bl	8000eb4 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b64      	cmp	r3, #100	; 0x64
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e1cc      	b.n	800284e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_RCC_OscConfig+0x4e0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d10b      	bne.n	80024e0 <HAL_RCC_OscConfig+0x4e4>
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024cc:	4a02      	ldr	r2, [pc, #8]	; (80024d8 <HAL_RCC_OscConfig+0x4dc>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6713      	str	r3, [r2, #112]	; 0x70
 80024d4:	e05b      	b.n	800258e <HAL_RCC_OscConfig+0x592>
 80024d6:	bf00      	nop
 80024d8:	58024400 	.word	0x58024400
 80024dc:	58024800 	.word	0x58024800
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d112      	bne.n	800250e <HAL_RCC_OscConfig+0x512>
 80024e8:	4b9d      	ldr	r3, [pc, #628]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80024ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ec:	4a9c      	ldr	r2, [pc, #624]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80024ee:	f023 0301 	bic.w	r3, r3, #1
 80024f2:	6713      	str	r3, [r2, #112]	; 0x70
 80024f4:	4b9a      	ldr	r3, [pc, #616]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f8:	4a99      	ldr	r2, [pc, #612]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80024fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002500:	4b97      	ldr	r3, [pc, #604]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	4a96      	ldr	r2, [pc, #600]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002506:	f023 0304 	bic.w	r3, r3, #4
 800250a:	6713      	str	r3, [r2, #112]	; 0x70
 800250c:	e03f      	b.n	800258e <HAL_RCC_OscConfig+0x592>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b05      	cmp	r3, #5
 8002514:	d112      	bne.n	800253c <HAL_RCC_OscConfig+0x540>
 8002516:	4b92      	ldr	r3, [pc, #584]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251a:	4a91      	ldr	r2, [pc, #580]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 800251c:	f043 0304 	orr.w	r3, r3, #4
 8002520:	6713      	str	r3, [r2, #112]	; 0x70
 8002522:	4b8f      	ldr	r3, [pc, #572]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	4a8e      	ldr	r2, [pc, #568]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800252c:	6713      	str	r3, [r2, #112]	; 0x70
 800252e:	4b8c      	ldr	r3, [pc, #560]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	4a8b      	ldr	r2, [pc, #556]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6713      	str	r3, [r2, #112]	; 0x70
 800253a:	e028      	b.n	800258e <HAL_RCC_OscConfig+0x592>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b85      	cmp	r3, #133	; 0x85
 8002542:	d112      	bne.n	800256a <HAL_RCC_OscConfig+0x56e>
 8002544:	4b86      	ldr	r3, [pc, #536]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002548:	4a85      	ldr	r2, [pc, #532]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 800254a:	f043 0304 	orr.w	r3, r3, #4
 800254e:	6713      	str	r3, [r2, #112]	; 0x70
 8002550:	4b83      	ldr	r3, [pc, #524]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	4a82      	ldr	r2, [pc, #520]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800255a:	6713      	str	r3, [r2, #112]	; 0x70
 800255c:	4b80      	ldr	r3, [pc, #512]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	4a7f      	ldr	r2, [pc, #508]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6713      	str	r3, [r2, #112]	; 0x70
 8002568:	e011      	b.n	800258e <HAL_RCC_OscConfig+0x592>
 800256a:	4b7d      	ldr	r3, [pc, #500]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	4a7c      	ldr	r2, [pc, #496]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	6713      	str	r3, [r2, #112]	; 0x70
 8002576:	4b7a      	ldr	r3, [pc, #488]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	4a79      	ldr	r2, [pc, #484]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 800257c:	f023 0304 	bic.w	r3, r3, #4
 8002580:	6713      	str	r3, [r2, #112]	; 0x70
 8002582:	4b77      	ldr	r3, [pc, #476]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	4a76      	ldr	r2, [pc, #472]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800258c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d015      	beq.n	80025c2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002596:	f7fe fc8d 	bl	8000eb4 <HAL_GetTick>
 800259a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800259c:	e00a      	b.n	80025b4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259e:	f7fe fc89 	bl	8000eb4 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e14c      	b.n	800284e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025b4:	4b6a      	ldr	r3, [pc, #424]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0ee      	beq.n	800259e <HAL_RCC_OscConfig+0x5a2>
 80025c0:	e014      	b.n	80025ec <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c2:	f7fe fc77 	bl	8000eb4 <HAL_GetTick>
 80025c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7fe fc73 	bl	8000eb4 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e136      	b.n	800284e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025e0:	4b5f      	ldr	r3, [pc, #380]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1ee      	bne.n	80025ca <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 812b 	beq.w	800284c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80025f6:	4b5a      	ldr	r3, [pc, #360]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025fe:	2b18      	cmp	r3, #24
 8002600:	f000 80bb 	beq.w	800277a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	2b02      	cmp	r3, #2
 800260a:	f040 8095 	bne.w	8002738 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260e:	4b54      	ldr	r3, [pc, #336]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a53      	ldr	r2, [pc, #332]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002614:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7fe fc4b 	bl	8000eb4 <HAL_GetTick>
 800261e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002622:	f7fe fc47 	bl	8000eb4 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e10c      	b.n	800284e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002634:	4b4a      	ldr	r3, [pc, #296]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1f0      	bne.n	8002622 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002640:	4b47      	ldr	r3, [pc, #284]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002644:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_RCC_OscConfig+0x768>)
 8002646:	4013      	ands	r3, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002650:	0112      	lsls	r2, r2, #4
 8002652:	430a      	orrs	r2, r1
 8002654:	4942      	ldr	r1, [pc, #264]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002656:	4313      	orrs	r3, r2
 8002658:	628b      	str	r3, [r1, #40]	; 0x28
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	3b01      	subs	r3, #1
 8002660:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002668:	3b01      	subs	r3, #1
 800266a:	025b      	lsls	r3, r3, #9
 800266c:	b29b      	uxth	r3, r3
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002674:	3b01      	subs	r3, #1
 8002676:	041b      	lsls	r3, r3, #16
 8002678:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002682:	3b01      	subs	r3, #1
 8002684:	061b      	lsls	r3, r3, #24
 8002686:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800268a:	4935      	ldr	r1, [pc, #212]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 800268c:	4313      	orrs	r3, r2
 800268e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002690:	4b33      	ldr	r3, [pc, #204]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	4a32      	ldr	r2, [pc, #200]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800269c:	4b30      	ldr	r3, [pc, #192]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 800269e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026a0:	4b31      	ldr	r3, [pc, #196]	; (8002768 <HAL_RCC_OscConfig+0x76c>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026a8:	00d2      	lsls	r2, r2, #3
 80026aa:	492d      	ldr	r1, [pc, #180]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80026b0:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	f023 020c 	bic.w	r2, r3, #12
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	4928      	ldr	r1, [pc, #160]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80026c2:	4b27      	ldr	r3, [pc, #156]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	f023 0202 	bic.w	r2, r3, #2
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4924      	ldr	r1, [pc, #144]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80026d4:	4b22      	ldr	r3, [pc, #136]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	4a21      	ldr	r2, [pc, #132]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80026da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026e0:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	4a1e      	ldr	r2, [pc, #120]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80026e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80026ec:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	4a1b      	ldr	r2, [pc, #108]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80026f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	4a18      	ldr	r2, [pc, #96]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002704:	4b16      	ldr	r3, [pc, #88]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a15      	ldr	r2, [pc, #84]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 800270a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800270e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fbd0 	bl	8000eb4 <HAL_GetTick>
 8002714:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe fbcc 	bl	8000eb4 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e091      	b.n	800284e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x71c>
 8002736:	e089      	b.n	800284c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a08      	ldr	r2, [pc, #32]	; (8002760 <HAL_RCC_OscConfig+0x764>)
 800273e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fbb6 	bl	8000eb4 <HAL_GetTick>
 8002748:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800274a:	e00f      	b.n	800276c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274c:	f7fe fbb2 	bl	8000eb4 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d908      	bls.n	800276c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e077      	b.n	800284e <HAL_RCC_OscConfig+0x852>
 800275e:	bf00      	nop
 8002760:	58024400 	.word	0x58024400
 8002764:	fffffc0c 	.word	0xfffffc0c
 8002768:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800276c:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <HAL_RCC_OscConfig+0x85c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e9      	bne.n	800274c <HAL_RCC_OscConfig+0x750>
 8002778:	e068      	b.n	800284c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800277a:	4b37      	ldr	r3, [pc, #220]	; (8002858 <HAL_RCC_OscConfig+0x85c>)
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002780:	4b35      	ldr	r3, [pc, #212]	; (8002858 <HAL_RCC_OscConfig+0x85c>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	2b01      	cmp	r3, #1
 800278c:	d031      	beq.n	80027f2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f003 0203 	and.w	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d12a      	bne.n	80027f2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d122      	bne.n	80027f2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d11a      	bne.n	80027f2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	0a5b      	lsrs	r3, r3, #9
 80027c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d111      	bne.n	80027f2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d108      	bne.n	80027f2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	0e1b      	lsrs	r3, r3, #24
 80027e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d001      	beq.n	80027f6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e02b      	b.n	800284e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80027f6:	4b18      	ldr	r3, [pc, #96]	; (8002858 <HAL_RCC_OscConfig+0x85c>)
 80027f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fa:	08db      	lsrs	r3, r3, #3
 80027fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002800:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	429a      	cmp	r2, r3
 800280a:	d01f      	beq.n	800284c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <HAL_RCC_OscConfig+0x85c>)
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	4a11      	ldr	r2, [pc, #68]	; (8002858 <HAL_RCC_OscConfig+0x85c>)
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002818:	f7fe fb4c 	bl	8000eb4 <HAL_GetTick>
 800281c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800281e:	bf00      	nop
 8002820:	f7fe fb48 	bl	8000eb4 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	4293      	cmp	r3, r2
 800282a:	d0f9      	beq.n	8002820 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800282c:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_RCC_OscConfig+0x85c>)
 800282e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <HAL_RCC_OscConfig+0x860>)
 8002832:	4013      	ands	r3, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002838:	00d2      	lsls	r2, r2, #3
 800283a:	4907      	ldr	r1, [pc, #28]	; (8002858 <HAL_RCC_OscConfig+0x85c>)
 800283c:	4313      	orrs	r3, r2
 800283e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_RCC_OscConfig+0x85c>)
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	4a04      	ldr	r2, [pc, #16]	; (8002858 <HAL_RCC_OscConfig+0x85c>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3730      	adds	r7, #48	; 0x30
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	58024400 	.word	0x58024400
 800285c:	ffff0007 	.word	0xffff0007

08002860 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e19c      	b.n	8002bae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002874:	4b8a      	ldr	r3, [pc, #552]	; (8002aa0 <HAL_RCC_ClockConfig+0x240>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d910      	bls.n	80028a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b87      	ldr	r3, [pc, #540]	; (8002aa0 <HAL_RCC_ClockConfig+0x240>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 020f 	bic.w	r2, r3, #15
 800288a:	4985      	ldr	r1, [pc, #532]	; (8002aa0 <HAL_RCC_ClockConfig+0x240>)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	4313      	orrs	r3, r2
 8002890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	4b83      	ldr	r3, [pc, #524]	; (8002aa0 <HAL_RCC_ClockConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e184      	b.n	8002bae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d010      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	4b7b      	ldr	r3, [pc, #492]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028bc:	429a      	cmp	r2, r3
 80028be:	d908      	bls.n	80028d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028c0:	4b78      	ldr	r3, [pc, #480]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	4975      	ldr	r1, [pc, #468]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d010      	beq.n	8002900 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	4b70      	ldr	r3, [pc, #448]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d908      	bls.n	8002900 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028ee:	4b6d      	ldr	r3, [pc, #436]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	496a      	ldr	r1, [pc, #424]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	d010      	beq.n	800292e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699a      	ldr	r2, [r3, #24]
 8002910:	4b64      	ldr	r3, [pc, #400]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002918:	429a      	cmp	r2, r3
 800291a:	d908      	bls.n	800292e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800291c:	4b61      	ldr	r3, [pc, #388]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	495e      	ldr	r1, [pc, #376]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 800292a:	4313      	orrs	r3, r2
 800292c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	2b00      	cmp	r3, #0
 8002938:	d010      	beq.n	800295c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69da      	ldr	r2, [r3, #28]
 800293e:	4b59      	ldr	r3, [pc, #356]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002946:	429a      	cmp	r2, r3
 8002948:	d908      	bls.n	800295c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800294a:	4b56      	ldr	r3, [pc, #344]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	4953      	ldr	r1, [pc, #332]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 8002958:	4313      	orrs	r3, r2
 800295a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d010      	beq.n	800298a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	4b4d      	ldr	r3, [pc, #308]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	429a      	cmp	r2, r3
 8002976:	d908      	bls.n	800298a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002978:	4b4a      	ldr	r3, [pc, #296]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	f023 020f 	bic.w	r2, r3, #15
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4947      	ldr	r1, [pc, #284]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 8002986:	4313      	orrs	r3, r2
 8002988:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d055      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002996:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	4940      	ldr	r1, [pc, #256]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029b0:	4b3c      	ldr	r3, [pc, #240]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d121      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0f6      	b.n	8002bae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029c8:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d115      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0ea      	b.n	8002bae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d107      	bne.n	80029f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029e0:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0de      	b.n	8002bae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029f0:	4b2c      	ldr	r3, [pc, #176]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0d6      	b.n	8002bae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a00:	4b28      	ldr	r3, [pc, #160]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f023 0207 	bic.w	r2, r3, #7
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4925      	ldr	r1, [pc, #148]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a12:	f7fe fa4f 	bl	8000eb4 <HAL_GetTick>
 8002a16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a18:	e00a      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1a:	f7fe fa4b 	bl	8000eb4 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e0be      	b.n	8002bae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a30:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d1eb      	bne.n	8002a1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d010      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d208      	bcs.n	8002a70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a5e:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f023 020f 	bic.w	r2, r3, #15
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	490e      	ldr	r1, [pc, #56]	; (8002aa4 <HAL_RCC_ClockConfig+0x244>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_ClockConfig+0x240>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d214      	bcs.n	8002aa8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <HAL_RCC_ClockConfig+0x240>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 020f 	bic.w	r2, r3, #15
 8002a86:	4906      	ldr	r1, [pc, #24]	; (8002aa0 <HAL_RCC_ClockConfig+0x240>)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <HAL_RCC_ClockConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e086      	b.n	8002bae <HAL_RCC_ClockConfig+0x34e>
 8002aa0:	52002000 	.word	0x52002000
 8002aa4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d010      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <HAL_RCC_ClockConfig+0x358>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d208      	bcs.n	8002ad6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ac4:	4b3c      	ldr	r3, [pc, #240]	; (8002bb8 <HAL_RCC_ClockConfig+0x358>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	4939      	ldr	r1, [pc, #228]	; (8002bb8 <HAL_RCC_ClockConfig+0x358>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d010      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	4b34      	ldr	r3, [pc, #208]	; (8002bb8 <HAL_RCC_ClockConfig+0x358>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d208      	bcs.n	8002b04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002af2:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <HAL_RCC_ClockConfig+0x358>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	492e      	ldr	r1, [pc, #184]	; (8002bb8 <HAL_RCC_ClockConfig+0x358>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d010      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699a      	ldr	r2, [r3, #24]
 8002b14:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <HAL_RCC_ClockConfig+0x358>)
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d208      	bcs.n	8002b32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b20:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <HAL_RCC_ClockConfig+0x358>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	4922      	ldr	r1, [pc, #136]	; (8002bb8 <HAL_RCC_ClockConfig+0x358>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d010      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69da      	ldr	r2, [r3, #28]
 8002b42:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <HAL_RCC_ClockConfig+0x358>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d208      	bcs.n	8002b60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <HAL_RCC_ClockConfig+0x358>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	4917      	ldr	r1, [pc, #92]	; (8002bb8 <HAL_RCC_ClockConfig+0x358>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002b60:	f000 f834 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <HAL_RCC_ClockConfig+0x358>)
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	4912      	ldr	r1, [pc, #72]	; (8002bbc <HAL_RCC_ClockConfig+0x35c>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <HAL_RCC_ClockConfig+0x358>)
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <HAL_RCC_ClockConfig+0x35c>)
 8002b88:	5cd3      	ldrb	r3, [r2, r3]
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
 8002b94:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <HAL_RCC_ClockConfig+0x360>)
 8002b96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b98:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <HAL_RCC_ClockConfig+0x364>)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <HAL_RCC_ClockConfig+0x368>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe f93c 	bl	8000e20 <HAL_InitTick>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	58024400 	.word	0x58024400
 8002bbc:	08009794 	.word	0x08009794
 8002bc0:	24000004 	.word	0x24000004
 8002bc4:	24000000 	.word	0x24000000
 8002bc8:	24000008 	.word	0x24000008

08002bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bd2:	4bb3      	ldr	r3, [pc, #716]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bda:	2b18      	cmp	r3, #24
 8002bdc:	f200 8155 	bhi.w	8002e8a <HAL_RCC_GetSysClockFreq+0x2be>
 8002be0:	a201      	add	r2, pc, #4	; (adr r2, 8002be8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be6:	bf00      	nop
 8002be8:	08002c4d 	.word	0x08002c4d
 8002bec:	08002e8b 	.word	0x08002e8b
 8002bf0:	08002e8b 	.word	0x08002e8b
 8002bf4:	08002e8b 	.word	0x08002e8b
 8002bf8:	08002e8b 	.word	0x08002e8b
 8002bfc:	08002e8b 	.word	0x08002e8b
 8002c00:	08002e8b 	.word	0x08002e8b
 8002c04:	08002e8b 	.word	0x08002e8b
 8002c08:	08002c73 	.word	0x08002c73
 8002c0c:	08002e8b 	.word	0x08002e8b
 8002c10:	08002e8b 	.word	0x08002e8b
 8002c14:	08002e8b 	.word	0x08002e8b
 8002c18:	08002e8b 	.word	0x08002e8b
 8002c1c:	08002e8b 	.word	0x08002e8b
 8002c20:	08002e8b 	.word	0x08002e8b
 8002c24:	08002e8b 	.word	0x08002e8b
 8002c28:	08002c79 	.word	0x08002c79
 8002c2c:	08002e8b 	.word	0x08002e8b
 8002c30:	08002e8b 	.word	0x08002e8b
 8002c34:	08002e8b 	.word	0x08002e8b
 8002c38:	08002e8b 	.word	0x08002e8b
 8002c3c:	08002e8b 	.word	0x08002e8b
 8002c40:	08002e8b 	.word	0x08002e8b
 8002c44:	08002e8b 	.word	0x08002e8b
 8002c48:	08002c7f 	.word	0x08002c7f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c4c:	4b94      	ldr	r3, [pc, #592]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d009      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c58:	4b91      	ldr	r3, [pc, #580]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	08db      	lsrs	r3, r3, #3
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	4a90      	ldr	r2, [pc, #576]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c64:	fa22 f303 	lsr.w	r3, r2, r3
 8002c68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002c6a:	e111      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002c6c:	4b8d      	ldr	r3, [pc, #564]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c6e:	61bb      	str	r3, [r7, #24]
      break;
 8002c70:	e10e      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002c72:	4b8d      	ldr	r3, [pc, #564]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c74:	61bb      	str	r3, [r7, #24]
      break;
 8002c76:	e10b      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002c78:	4b8c      	ldr	r3, [pc, #560]	; (8002eac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002c7a:	61bb      	str	r3, [r7, #24]
      break;
 8002c7c:	e108      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c7e:	4b88      	ldr	r3, [pc, #544]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002c88:	4b85      	ldr	r3, [pc, #532]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c92:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c94:	4b82      	ldr	r3, [pc, #520]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002c9e:	4b80      	ldr	r3, [pc, #512]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca2:	08db      	lsrs	r3, r3, #3
 8002ca4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	ee07 3a90 	vmov	s15, r3
 8002cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80e1 	beq.w	8002e84 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	f000 8083 	beq.w	8002dd0 <HAL_RCC_GetSysClockFreq+0x204>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	f200 80a1 	bhi.w	8002e14 <HAL_RCC_GetSysClockFreq+0x248>
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x114>
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d056      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002cde:	e099      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ce0:	4b6f      	ldr	r3, [pc, #444]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d02d      	beq.n	8002d48 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002cec:	4b6c      	ldr	r3, [pc, #432]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	08db      	lsrs	r3, r3, #3
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	4a6b      	ldr	r2, [pc, #428]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	ee07 3a90 	vmov	s15, r3
 8002d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	ee07 3a90 	vmov	s15, r3
 8002d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d16:	4b62      	ldr	r3, [pc, #392]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d2a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002eb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d42:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002d46:	e087      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	ee07 3a90 	vmov	s15, r3
 8002d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d52:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002eb4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d5a:	4b51      	ldr	r3, [pc, #324]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d6e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002eb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d8a:	e065      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	ee07 3a90 	vmov	s15, r3
 8002d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d96:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002eb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d9e:	4b40      	ldr	r3, [pc, #256]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da6:	ee07 3a90 	vmov	s15, r3
 8002daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8002db2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002eb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002dce:	e043      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dda:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002ebc <HAL_RCC_GetSysClockFreq+0x2f0>
 8002dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002de2:	4b2f      	ldr	r3, [pc, #188]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002df6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002eb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e12:	e021      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	ee07 3a90 	vmov	s15, r3
 8002e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e1e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002eb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e26:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e2e:	ee07 3a90 	vmov	s15, r3
 8002e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e3a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002eb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e56:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002e58:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	0a5b      	lsrs	r3, r3, #9
 8002e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e62:	3301      	adds	r3, #1
 8002e64:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	ee07 3a90 	vmov	s15, r3
 8002e6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e70:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e7c:	ee17 3a90 	vmov	r3, s15
 8002e80:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002e82:	e005      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61bb      	str	r3, [r7, #24]
      break;
 8002e88:	e002      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002e8a:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e8c:	61bb      	str	r3, [r7, #24]
      break;
 8002e8e:	bf00      	nop
  }

  return sysclockfreq;
 8002e90:	69bb      	ldr	r3, [r7, #24]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	58024400 	.word	0x58024400
 8002ea4:	03d09000 	.word	0x03d09000
 8002ea8:	003d0900 	.word	0x003d0900
 8002eac:	007a1200 	.word	0x007a1200
 8002eb0:	46000000 	.word	0x46000000
 8002eb4:	4c742400 	.word	0x4c742400
 8002eb8:	4a742400 	.word	0x4a742400
 8002ebc:	4af42400 	.word	0x4af42400

08002ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002ec6:	f7ff fe81 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	0a1b      	lsrs	r3, r3, #8
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	490f      	ldr	r1, [pc, #60]	; (8002f14 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ed8:	5ccb      	ldrb	r3, [r1, r3]
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <HAL_RCC_GetHCLKFreq+0x54>)
 8002eee:	5cd3      	ldrb	r3, [r2, r3]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8002efa:	4a07      	ldr	r2, [pc, #28]	; (8002f18 <HAL_RCC_GetHCLKFreq+0x58>)
 8002efc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002efe:	4a07      	ldr	r2, [pc, #28]	; (8002f1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f06:	681b      	ldr	r3, [r3, #0]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	58024400 	.word	0x58024400
 8002f14:	08009794 	.word	0x08009794
 8002f18:	24000004 	.word	0x24000004
 8002f1c:	24000000 	.word	0x24000000

08002f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002f24:	f7ff ffcc 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	4904      	ldr	r1, [pc, #16]	; (8002f48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f36:	5ccb      	ldrb	r3, [r1, r3]
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	58024400 	.word	0x58024400
 8002f48:	08009794 	.word	0x08009794

08002f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002f50:	f7ff ffb6 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	0a1b      	lsrs	r3, r3, #8
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	4904      	ldr	r1, [pc, #16]	; (8002f74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	58024400 	.word	0x58024400
 8002f74:	08009794 	.word	0x08009794

08002f78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f7c:	b0c8      	sub	sp, #288	; 0x120
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f84:	2300      	movs	r3, #0
 8002f86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002f9c:	2500      	movs	r5, #0
 8002f9e:	ea54 0305 	orrs.w	r3, r4, r5
 8002fa2:	d049      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002faa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fae:	d02f      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002fb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fb4:	d828      	bhi.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002fb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fba:	d01a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002fbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fc0:	d822      	bhi.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fca:	d007      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fcc:	e01c      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fce:	4ba7      	ldr	r3, [pc, #668]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	4aa6      	ldr	r2, [pc, #664]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002fda:	e01a      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe0:	3308      	adds	r3, #8
 8002fe2:	2102      	movs	r1, #2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f001 fc43 	bl	8004870 <RCCEx_PLL2_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ff0:	e00f      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ff6:	3328      	adds	r3, #40	; 0x28
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f001 fcea 	bl	80049d4 <RCCEx_PLL3_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003006:	e004      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800300e:	e000      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003012:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800301a:	4b94      	ldr	r3, [pc, #592]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800301c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003028:	4a90      	ldr	r2, [pc, #576]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800302a:	430b      	orrs	r3, r1
 800302c:	6513      	str	r3, [r2, #80]	; 0x50
 800302e:	e003      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003030:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003034:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003038:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003044:	f04f 0900 	mov.w	r9, #0
 8003048:	ea58 0309 	orrs.w	r3, r8, r9
 800304c:	d047      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800304e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	2b04      	cmp	r3, #4
 8003056:	d82a      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003058:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305e:	bf00      	nop
 8003060:	08003075 	.word	0x08003075
 8003064:	08003083 	.word	0x08003083
 8003068:	08003099 	.word	0x08003099
 800306c:	080030b7 	.word	0x080030b7
 8003070:	080030b7 	.word	0x080030b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003074:	4b7d      	ldr	r3, [pc, #500]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	4a7c      	ldr	r2, [pc, #496]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800307a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800307e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003080:	e01a      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003086:	3308      	adds	r3, #8
 8003088:	2100      	movs	r1, #0
 800308a:	4618      	mov	r0, r3
 800308c:	f001 fbf0 	bl	8004870 <RCCEx_PLL2_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003096:	e00f      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800309c:	3328      	adds	r3, #40	; 0x28
 800309e:	2100      	movs	r1, #0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f001 fc97 	bl	80049d4 <RCCEx_PLL3_Config>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030ac:	e004      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030b4:	e000      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80030b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030c0:	4b6a      	ldr	r3, [pc, #424]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c4:	f023 0107 	bic.w	r1, r3, #7
 80030c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ce:	4a67      	ldr	r2, [pc, #412]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030d0:	430b      	orrs	r3, r1
 80030d2:	6513      	str	r3, [r2, #80]	; 0x50
 80030d4:	e003      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80030de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80030ea:	f04f 0b00 	mov.w	fp, #0
 80030ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80030f2:	d054      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80030f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80030fe:	d036      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003100:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003104:	d82f      	bhi.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800310a:	d032      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800310c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003110:	d829      	bhi.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003112:	2bc0      	cmp	r3, #192	; 0xc0
 8003114:	d02f      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003116:	2bc0      	cmp	r3, #192	; 0xc0
 8003118:	d825      	bhi.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800311a:	2b80      	cmp	r3, #128	; 0x80
 800311c:	d018      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800311e:	2b80      	cmp	r3, #128	; 0x80
 8003120:	d821      	bhi.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003126:	2b40      	cmp	r3, #64	; 0x40
 8003128:	d007      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800312a:	e01c      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800312c:	4b4f      	ldr	r3, [pc, #316]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	4a4e      	ldr	r2, [pc, #312]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003136:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003138:	e01e      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800313a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800313e:	3308      	adds	r3, #8
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f001 fb94 	bl	8004870 <RCCEx_PLL2_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800314e:	e013      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003154:	3328      	adds	r3, #40	; 0x28
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f001 fc3b 	bl	80049d4 <RCCEx_PLL3_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003164:	e008      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800316c:	e004      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800316e:	bf00      	nop
 8003170:	e002      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003172:	bf00      	nop
 8003174:	e000      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003178:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003180:	4b3a      	ldr	r3, [pc, #232]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003184:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800318c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318e:	4a37      	ldr	r2, [pc, #220]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003190:	430b      	orrs	r3, r1
 8003192:	6513      	str	r3, [r2, #80]	; 0x50
 8003194:	e003      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003196:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800319a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800319e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80031aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80031ae:	2300      	movs	r3, #0
 80031b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80031b4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80031b8:	460b      	mov	r3, r1
 80031ba:	4313      	orrs	r3, r2
 80031bc:	d05c      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80031be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80031c8:	d03b      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80031ca:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80031ce:	d834      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80031d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031d4:	d037      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80031d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031da:	d82e      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80031dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80031e0:	d033      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80031e2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80031e6:	d828      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80031e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ec:	d01a      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80031ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f2:	d822      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80031f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fc:	d007      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x296>
 80031fe:	e01c      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003200:	4b1a      	ldr	r3, [pc, #104]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	4a19      	ldr	r2, [pc, #100]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800320c:	e01e      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800320e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003212:	3308      	adds	r3, #8
 8003214:	2100      	movs	r1, #0
 8003216:	4618      	mov	r0, r3
 8003218:	f001 fb2a 	bl	8004870 <RCCEx_PLL2_Config>
 800321c:	4603      	mov	r3, r0
 800321e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003222:	e013      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003224:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003228:	3328      	adds	r3, #40	; 0x28
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f001 fbd1 	bl	80049d4 <RCCEx_PLL3_Config>
 8003232:	4603      	mov	r3, r0
 8003234:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003238:	e008      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003240:	e004      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003242:	bf00      	nop
 8003244:	e002      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003246:	bf00      	nop
 8003248:	e000      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800324a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800324c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10d      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003258:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800325c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003262:	4a02      	ldr	r2, [pc, #8]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003264:	430b      	orrs	r3, r1
 8003266:	6513      	str	r3, [r2, #80]	; 0x50
 8003268:	e006      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800326a:	bf00      	nop
 800326c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003270:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003274:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003280:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003284:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003288:	2300      	movs	r3, #0
 800328a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800328e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003292:	460b      	mov	r3, r1
 8003294:	4313      	orrs	r3, r2
 8003296:	d03a      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329e:	2b30      	cmp	r3, #48	; 0x30
 80032a0:	d01f      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80032a2:	2b30      	cmp	r3, #48	; 0x30
 80032a4:	d819      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x362>
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d00c      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	d815      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x362>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d019      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80032b2:	2b10      	cmp	r3, #16
 80032b4:	d111      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032b6:	4bae      	ldr	r3, [pc, #696]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	4aad      	ldr	r2, [pc, #692]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80032c2:	e011      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c8:	3308      	adds	r3, #8
 80032ca:	2102      	movs	r1, #2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f001 facf 	bl	8004870 <RCCEx_PLL2_Config>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80032d8:	e006      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032e0:	e002      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80032e2:	bf00      	nop
 80032e4:	e000      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80032e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10a      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80032f0:	4b9f      	ldr	r3, [pc, #636]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80032f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fe:	4a9c      	ldr	r2, [pc, #624]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003300:	430b      	orrs	r3, r1
 8003302:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003304:	e003      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003306:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800330a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800330e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003316:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800331a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800331e:	2300      	movs	r3, #0
 8003320:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003324:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003328:	460b      	mov	r3, r1
 800332a:	4313      	orrs	r3, r2
 800332c:	d051      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800332e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003334:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003338:	d035      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800333a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800333e:	d82e      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003340:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003344:	d031      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003346:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800334a:	d828      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800334c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003350:	d01a      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003356:	d822      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800335c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003360:	d007      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003362:	e01c      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003364:	4b82      	ldr	r3, [pc, #520]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	4a81      	ldr	r2, [pc, #516]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800336a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003370:	e01c      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003376:	3308      	adds	r3, #8
 8003378:	2100      	movs	r1, #0
 800337a:	4618      	mov	r0, r3
 800337c:	f001 fa78 	bl	8004870 <RCCEx_PLL2_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003386:	e011      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800338c:	3328      	adds	r3, #40	; 0x28
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f001 fb1f 	bl	80049d4 <RCCEx_PLL3_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800339c:	e006      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033a4:	e002      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80033a6:	bf00      	nop
 80033a8:	e000      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80033aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10a      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80033b4:	4b6e      	ldr	r3, [pc, #440]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80033bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c2:	4a6b      	ldr	r2, [pc, #428]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6513      	str	r3, [r2, #80]	; 0x50
 80033c8:	e003      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80033d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033da:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80033de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033e2:	2300      	movs	r3, #0
 80033e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80033e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80033ec:	460b      	mov	r3, r1
 80033ee:	4313      	orrs	r3, r2
 80033f0:	d053      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80033f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033fc:	d033      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80033fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003402:	d82c      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003404:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003408:	d02f      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800340a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800340e:	d826      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003410:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003414:	d02b      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003416:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800341a:	d820      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800341c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003420:	d012      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003422:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003426:	d81a      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003428:	2b00      	cmp	r3, #0
 800342a:	d022      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800342c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003430:	d115      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003436:	3308      	adds	r3, #8
 8003438:	2101      	movs	r1, #1
 800343a:	4618      	mov	r0, r3
 800343c:	f001 fa18 	bl	8004870 <RCCEx_PLL2_Config>
 8003440:	4603      	mov	r3, r0
 8003442:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003446:	e015      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003448:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800344c:	3328      	adds	r3, #40	; 0x28
 800344e:	2101      	movs	r1, #1
 8003450:	4618      	mov	r0, r3
 8003452:	f001 fabf 	bl	80049d4 <RCCEx_PLL3_Config>
 8003456:	4603      	mov	r3, r0
 8003458:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800345c:	e00a      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003464:	e006      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003466:	bf00      	nop
 8003468:	e004      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800346a:	bf00      	nop
 800346c:	e002      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800346e:	bf00      	nop
 8003470:	e000      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003474:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10a      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800347c:	4b3c      	ldr	r3, [pc, #240]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800347e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003480:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800348a:	4a39      	ldr	r2, [pc, #228]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800348c:	430b      	orrs	r3, r1
 800348e:	6513      	str	r3, [r2, #80]	; 0x50
 8003490:	e003      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003492:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003496:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800349a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800349e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80034a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034aa:	2300      	movs	r3, #0
 80034ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034b0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4313      	orrs	r3, r2
 80034b8:	d060      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80034ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034c2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80034c6:	d039      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80034c8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80034cc:	d832      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80034ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034d2:	d035      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80034d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034d8:	d82c      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80034da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034de:	d031      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80034e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e4:	d826      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80034e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034ea:	d02d      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80034ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034f0:	d820      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80034f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034f6:	d012      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80034f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034fc:	d81a      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d024      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003506:	d115      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800350c:	3308      	adds	r3, #8
 800350e:	2101      	movs	r1, #1
 8003510:	4618      	mov	r0, r3
 8003512:	f001 f9ad 	bl	8004870 <RCCEx_PLL2_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800351c:	e017      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800351e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003522:	3328      	adds	r3, #40	; 0x28
 8003524:	2101      	movs	r1, #1
 8003526:	4618      	mov	r0, r3
 8003528:	f001 fa54 	bl	80049d4 <RCCEx_PLL3_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003532:	e00c      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800353a:	e008      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800353c:	bf00      	nop
 800353e:	e006      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003540:	bf00      	nop
 8003542:	e004      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003544:	bf00      	nop
 8003546:	e002      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003548:	bf00      	nop
 800354a:	e000      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800354c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800354e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10e      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800355e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003562:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003566:	4a02      	ldr	r2, [pc, #8]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003568:	430b      	orrs	r3, r1
 800356a:	6593      	str	r3, [r2, #88]	; 0x58
 800356c:	e006      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800356e:	bf00      	nop
 8003570:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003574:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003578:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800357c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003584:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800358c:	2300      	movs	r3, #0
 800358e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003592:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003596:	460b      	mov	r3, r1
 8003598:	4313      	orrs	r3, r2
 800359a:	d037      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800359c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035a6:	d00e      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80035a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ac:	d816      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x664>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d018      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80035b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035b6:	d111      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b8:	4bc4      	ldr	r3, [pc, #784]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	4ac3      	ldr	r2, [pc, #780]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80035c4:	e00f      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ca:	3308      	adds	r3, #8
 80035cc:	2101      	movs	r1, #1
 80035ce:	4618      	mov	r0, r3
 80035d0:	f001 f94e 	bl	8004870 <RCCEx_PLL2_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80035da:	e004      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035e2:	e000      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80035e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10a      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035ee:	4bb7      	ldr	r3, [pc, #732]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80035f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035fc:	4ab3      	ldr	r2, [pc, #716]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035fe:	430b      	orrs	r3, r1
 8003600:	6513      	str	r3, [r2, #80]	; 0x50
 8003602:	e003      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003604:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003608:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800360c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800361c:	2300      	movs	r3, #0
 800361e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003622:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003626:	460b      	mov	r3, r1
 8003628:	4313      	orrs	r3, r2
 800362a:	d039      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800362c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003632:	2b03      	cmp	r3, #3
 8003634:	d81c      	bhi.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003636:	a201      	add	r2, pc, #4	; (adr r2, 800363c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363c:	08003679 	.word	0x08003679
 8003640:	0800364d 	.word	0x0800364d
 8003644:	0800365b 	.word	0x0800365b
 8003648:	08003679 	.word	0x08003679
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800364c:	4b9f      	ldr	r3, [pc, #636]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	4a9e      	ldr	r2, [pc, #632]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003656:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003658:	e00f      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800365a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800365e:	3308      	adds	r3, #8
 8003660:	2102      	movs	r1, #2
 8003662:	4618      	mov	r0, r3
 8003664:	f001 f904 	bl	8004870 <RCCEx_PLL2_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800366e:	e004      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003676:	e000      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800367a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10a      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003682:	4b92      	ldr	r3, [pc, #584]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003686:	f023 0103 	bic.w	r1, r3, #3
 800368a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800368e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003690:	4a8e      	ldr	r2, [pc, #568]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003692:	430b      	orrs	r3, r1
 8003694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003696:	e003      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003698:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800369c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80036ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036b0:	2300      	movs	r3, #0
 80036b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80036ba:	460b      	mov	r3, r1
 80036bc:	4313      	orrs	r3, r2
 80036be:	f000 8099 	beq.w	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036c2:	4b83      	ldr	r3, [pc, #524]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a82      	ldr	r2, [pc, #520]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036ce:	f7fd fbf1 	bl	8000eb4 <HAL_GetTick>
 80036d2:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036d6:	e00b      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d8:	f7fd fbec 	bl	8000eb4 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b64      	cmp	r3, #100	; 0x64
 80036e6:	d903      	bls.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036ee:	e005      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036f0:	4b77      	ldr	r3, [pc, #476]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ed      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80036fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003700:	2b00      	cmp	r3, #0
 8003702:	d173      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003704:	4b71      	ldr	r3, [pc, #452]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003706:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003708:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800370c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003710:	4053      	eors	r3, r2
 8003712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003716:	2b00      	cmp	r3, #0
 8003718:	d015      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800371a:	4b6c      	ldr	r3, [pc, #432]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003722:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003726:	4b69      	ldr	r3, [pc, #420]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	4a68      	ldr	r2, [pc, #416]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800372c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003730:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003732:	4b66      	ldr	r3, [pc, #408]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	4a65      	ldr	r2, [pc, #404]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800373e:	4a63      	ldr	r2, [pc, #396]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003744:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800374a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800374e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003752:	d118      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fd fbae 	bl	8000eb4 <HAL_GetTick>
 8003758:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800375c:	e00d      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375e:	f7fd fba9 	bl	8000eb4 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003768:	1ad2      	subs	r2, r2, r3
 800376a:	f241 3388 	movw	r3, #5000	; 0x1388
 800376e:	429a      	cmp	r2, r3
 8003770:	d903      	bls.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003778:	e005      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800377a:	4b54      	ldr	r3, [pc, #336]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0eb      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003786:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800378a:	2b00      	cmp	r3, #0
 800378c:	d129      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800378e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003792:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800379e:	d10e      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x846>
 80037a0:	4b4a      	ldr	r3, [pc, #296]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80037a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037b0:	091a      	lsrs	r2, r3, #4
 80037b2:	4b48      	ldr	r3, [pc, #288]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	4a45      	ldr	r2, [pc, #276]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037b8:	430b      	orrs	r3, r1
 80037ba:	6113      	str	r3, [r2, #16]
 80037bc:	e005      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x852>
 80037be:	4b43      	ldr	r3, [pc, #268]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	4a42      	ldr	r2, [pc, #264]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80037c8:	6113      	str	r3, [r2, #16]
 80037ca:	4b40      	ldr	r3, [pc, #256]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80037ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037da:	4a3c      	ldr	r2, [pc, #240]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037dc:	430b      	orrs	r3, r1
 80037de:	6713      	str	r3, [r2, #112]	; 0x70
 80037e0:	e008      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80037ea:	e003      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80037f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f002 0301 	and.w	r3, r2, #1
 8003800:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003804:	2300      	movs	r3, #0
 8003806:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800380a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800380e:	460b      	mov	r3, r1
 8003810:	4313      	orrs	r3, r2
 8003812:	f000 8090 	beq.w	8003936 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800381a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800381e:	2b28      	cmp	r3, #40	; 0x28
 8003820:	d870      	bhi.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003822:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	0800390d 	.word	0x0800390d
 800382c:	08003905 	.word	0x08003905
 8003830:	08003905 	.word	0x08003905
 8003834:	08003905 	.word	0x08003905
 8003838:	08003905 	.word	0x08003905
 800383c:	08003905 	.word	0x08003905
 8003840:	08003905 	.word	0x08003905
 8003844:	08003905 	.word	0x08003905
 8003848:	080038d9 	.word	0x080038d9
 800384c:	08003905 	.word	0x08003905
 8003850:	08003905 	.word	0x08003905
 8003854:	08003905 	.word	0x08003905
 8003858:	08003905 	.word	0x08003905
 800385c:	08003905 	.word	0x08003905
 8003860:	08003905 	.word	0x08003905
 8003864:	08003905 	.word	0x08003905
 8003868:	080038ef 	.word	0x080038ef
 800386c:	08003905 	.word	0x08003905
 8003870:	08003905 	.word	0x08003905
 8003874:	08003905 	.word	0x08003905
 8003878:	08003905 	.word	0x08003905
 800387c:	08003905 	.word	0x08003905
 8003880:	08003905 	.word	0x08003905
 8003884:	08003905 	.word	0x08003905
 8003888:	0800390d 	.word	0x0800390d
 800388c:	08003905 	.word	0x08003905
 8003890:	08003905 	.word	0x08003905
 8003894:	08003905 	.word	0x08003905
 8003898:	08003905 	.word	0x08003905
 800389c:	08003905 	.word	0x08003905
 80038a0:	08003905 	.word	0x08003905
 80038a4:	08003905 	.word	0x08003905
 80038a8:	0800390d 	.word	0x0800390d
 80038ac:	08003905 	.word	0x08003905
 80038b0:	08003905 	.word	0x08003905
 80038b4:	08003905 	.word	0x08003905
 80038b8:	08003905 	.word	0x08003905
 80038bc:	08003905 	.word	0x08003905
 80038c0:	08003905 	.word	0x08003905
 80038c4:	08003905 	.word	0x08003905
 80038c8:	0800390d 	.word	0x0800390d
 80038cc:	58024400 	.word	0x58024400
 80038d0:	58024800 	.word	0x58024800
 80038d4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038dc:	3308      	adds	r3, #8
 80038de:	2101      	movs	r1, #1
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 ffc5 	bl	8004870 <RCCEx_PLL2_Config>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80038ec:	e00f      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038f2:	3328      	adds	r3, #40	; 0x28
 80038f4:	2101      	movs	r1, #1
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 f86c 	bl	80049d4 <RCCEx_PLL3_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003902:	e004      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800390a:	e000      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800390c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800390e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10b      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003916:	4bc0      	ldr	r3, [pc, #768]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800391e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003926:	4abc      	ldr	r2, [pc, #752]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003928:	430b      	orrs	r3, r1
 800392a:	6553      	str	r3, [r2, #84]	; 0x54
 800392c:	e003      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003932:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393e:	f002 0302 	and.w	r3, r2, #2
 8003942:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003946:	2300      	movs	r3, #0
 8003948:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800394c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003950:	460b      	mov	r3, r1
 8003952:	4313      	orrs	r3, r2
 8003954:	d043      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003956:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800395a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800395e:	2b05      	cmp	r3, #5
 8003960:	d824      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003962:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003968:	080039b5 	.word	0x080039b5
 800396c:	08003981 	.word	0x08003981
 8003970:	08003997 	.word	0x08003997
 8003974:	080039b5 	.word	0x080039b5
 8003978:	080039b5 	.word	0x080039b5
 800397c:	080039b5 	.word	0x080039b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003984:	3308      	adds	r3, #8
 8003986:	2101      	movs	r1, #1
 8003988:	4618      	mov	r0, r3
 800398a:	f000 ff71 	bl	8004870 <RCCEx_PLL2_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003994:	e00f      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800399a:	3328      	adds	r3, #40	; 0x28
 800399c:	2101      	movs	r1, #1
 800399e:	4618      	mov	r0, r3
 80039a0:	f001 f818 	bl	80049d4 <RCCEx_PLL3_Config>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80039aa:	e004      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80039b2:	e000      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80039b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10b      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80039be:	4b96      	ldr	r3, [pc, #600]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c2:	f023 0107 	bic.w	r1, r3, #7
 80039c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ce:	4a92      	ldr	r2, [pc, #584]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039d0:	430b      	orrs	r3, r1
 80039d2:	6553      	str	r3, [r2, #84]	; 0x54
 80039d4:	e003      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e6:	f002 0304 	and.w	r3, r2, #4
 80039ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039ee:	2300      	movs	r3, #0
 80039f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039f4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4313      	orrs	r3, r2
 80039fc:	d043      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80039fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a06:	2b05      	cmp	r3, #5
 8003a08:	d824      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003a0a:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a5d 	.word	0x08003a5d
 8003a14:	08003a29 	.word	0x08003a29
 8003a18:	08003a3f 	.word	0x08003a3f
 8003a1c:	08003a5d 	.word	0x08003a5d
 8003a20:	08003a5d 	.word	0x08003a5d
 8003a24:	08003a5d 	.word	0x08003a5d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	2101      	movs	r1, #1
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 ff1d 	bl	8004870 <RCCEx_PLL2_Config>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a3c:	e00f      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a42:	3328      	adds	r3, #40	; 0x28
 8003a44:	2101      	movs	r1, #1
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 ffc4 	bl	80049d4 <RCCEx_PLL3_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a52:	e004      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a5a:	e000      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10b      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a66:	4b6c      	ldr	r3, [pc, #432]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6a:	f023 0107 	bic.w	r1, r3, #7
 8003a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a76:	4a68      	ldr	r2, [pc, #416]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a7c:	e003      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a82:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	f002 0320 	and.w	r3, r2, #32
 8003a92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a96:	2300      	movs	r3, #0
 8003a98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	d055      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ab2:	d033      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ab8:	d82c      	bhi.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003abe:	d02f      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac4:	d826      	bhi.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ac6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003aca:	d02b      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003acc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ad0:	d820      	bhi.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ad6:	d012      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003adc:	d81a      	bhi.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d022      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003ae2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ae6:	d115      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aec:	3308      	adds	r3, #8
 8003aee:	2100      	movs	r1, #0
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 febd 	bl	8004870 <RCCEx_PLL2_Config>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003afc:	e015      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b02:	3328      	adds	r3, #40	; 0x28
 8003b04:	2102      	movs	r1, #2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 ff64 	bl	80049d4 <RCCEx_PLL3_Config>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b12:	e00a      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b1a:	e006      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003b1c:	bf00      	nop
 8003b1e:	e004      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003b20:	bf00      	nop
 8003b22:	e002      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003b24:	bf00      	nop
 8003b26:	e000      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003b28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b2a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10b      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b32:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b42:	4a35      	ldr	r2, [pc, #212]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b44:	430b      	orrs	r3, r1
 8003b46:	6553      	str	r3, [r2, #84]	; 0x54
 8003b48:	e003      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b62:	2300      	movs	r3, #0
 8003b64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b68:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	d058      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b7a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b7e:	d033      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003b80:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b84:	d82c      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8a:	d02f      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b90:	d826      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003b92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b96:	d02b      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003b98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b9c:	d820      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba2:	d012      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba8:	d81a      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d022      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb2:	d115      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb8:	3308      	adds	r3, #8
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fe57 	bl	8004870 <RCCEx_PLL2_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003bc8:	e015      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bce:	3328      	adds	r3, #40	; 0x28
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fefe 	bl	80049d4 <RCCEx_PLL3_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003be6:	e006      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003be8:	bf00      	nop
 8003bea:	e004      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003bec:	bf00      	nop
 8003bee:	e002      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003bf0:	bf00      	nop
 8003bf2:	e000      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10e      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c02:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c0e:	4a02      	ldr	r2, [pc, #8]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c10:	430b      	orrs	r3, r1
 8003c12:	6593      	str	r3, [r2, #88]	; 0x58
 8003c14:	e006      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003c16:	bf00      	nop
 8003c18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c20:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003c30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c34:	2300      	movs	r3, #0
 8003c36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c3a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4313      	orrs	r3, r2
 8003c42:	d055      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c4c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c50:	d033      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003c52:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c56:	d82c      	bhi.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c5c:	d02f      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c62:	d826      	bhi.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003c64:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c68:	d02b      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003c6a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c6e:	d820      	bhi.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003c70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c74:	d012      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003c76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c7a:	d81a      	bhi.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d022      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c84:	d115      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c8a:	3308      	adds	r3, #8
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fdee 	bl	8004870 <RCCEx_PLL2_Config>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003c9a:	e015      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ca0:	3328      	adds	r3, #40	; 0x28
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fe95 	bl	80049d4 <RCCEx_PLL3_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003cb0:	e00a      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cb8:	e006      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003cba:	bf00      	nop
 8003cbc:	e004      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003cbe:	bf00      	nop
 8003cc0:	e002      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003cc2:	bf00      	nop
 8003cc4:	e000      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10b      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003cd0:	4ba1      	ldr	r3, [pc, #644]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ce0:	4a9d      	ldr	r2, [pc, #628]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ce2:	430b      	orrs	r3, r1
 8003ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ce6:	e003      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf8:	f002 0308 	and.w	r3, r2, #8
 8003cfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d00:	2300      	movs	r3, #0
 8003d02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d06:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	d01e      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d22:	3328      	adds	r3, #40	; 0x28
 8003d24:	2102      	movs	r1, #2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fe54 	bl	80049d4 <RCCEx_PLL3_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003d38:	4b87      	ldr	r3, [pc, #540]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d48:	4a83      	ldr	r2, [pc, #524]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d4a:	430b      	orrs	r3, r1
 8003d4c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	f002 0310 	and.w	r3, r2, #16
 8003d5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003d64:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	d01e      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d7a:	d10c      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d80:	3328      	adds	r3, #40	; 0x28
 8003d82:	2102      	movs	r1, #2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fe25 	bl	80049d4 <RCCEx_PLL3_Config>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d96:	4b70      	ldr	r3, [pc, #448]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003da2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003da6:	4a6c      	ldr	r2, [pc, #432]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003da8:	430b      	orrs	r3, r1
 8003daa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003db8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003dc2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	d03e      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dd0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dd8:	d022      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003dda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dde:	d81b      	bhi.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de8:	d00b      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003dea:	e015      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df0:	3308      	adds	r3, #8
 8003df2:	2100      	movs	r1, #0
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fd3b 	bl	8004870 <RCCEx_PLL2_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e00:	e00f      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e06:	3328      	adds	r3, #40	; 0x28
 8003e08:	2102      	movs	r1, #2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fde2 	bl	80049d4 <RCCEx_PLL3_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e16:	e004      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e1e:	e000      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e2a:	4b4b      	ldr	r3, [pc, #300]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e3a:	4a47      	ldr	r2, [pc, #284]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e40:	e003      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e52:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003e56:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e58:	2300      	movs	r3, #0
 8003e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e5c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003e60:	460b      	mov	r3, r1
 8003e62:	4313      	orrs	r3, r2
 8003e64:	d03b      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e72:	d01f      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003e74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e78:	d818      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e7e:	d003      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003e80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e84:	d007      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003e86:	e011      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e88:	4b33      	ldr	r3, [pc, #204]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	4a32      	ldr	r2, [pc, #200]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003e94:	e00f      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e9a:	3328      	adds	r3, #40	; 0x28
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fd98 	bl	80049d4 <RCCEx_PLL3_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003eaa:	e004      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10b      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ebe:	4b26      	ldr	r3, [pc, #152]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	4a22      	ldr	r2, [pc, #136]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	6553      	str	r3, [r2, #84]	; 0x54
 8003ed4:	e003      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003eda:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003eea:	673b      	str	r3, [r7, #112]	; 0x70
 8003eec:	2300      	movs	r3, #0
 8003eee:	677b      	str	r3, [r7, #116]	; 0x74
 8003ef0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	d034      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f08:	d007      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003f0a:	e011      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f0c:	4b12      	ldr	r3, [pc, #72]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	4a11      	ldr	r2, [pc, #68]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f18:	e00e      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f1e:	3308      	adds	r3, #8
 8003f20:	2102      	movs	r1, #2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fca4 	bl	8004870 <RCCEx_PLL2_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f2e:	e003      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10d      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4e:	4a02      	ldr	r2, [pc, #8]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f50:	430b      	orrs	r3, r1
 8003f52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f54:	e006      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003f56:	bf00      	nop
 8003f58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f60:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003f70:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f72:	2300      	movs	r3, #0
 8003f74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f76:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	d00c      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f84:	3328      	adds	r3, #40	; 0x28
 8003f86:	2102      	movs	r1, #2
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fd23 	bl	80049d4 <RCCEx_PLL3_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003fa6:	663b      	str	r3, [r7, #96]	; 0x60
 8003fa8:	2300      	movs	r3, #0
 8003faa:	667b      	str	r3, [r7, #100]	; 0x64
 8003fac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	d038      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fc2:	d018      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fc8:	d811      	bhi.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fce:	d014      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd4:	d80b      	bhi.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d011      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fde:	d106      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe0:	4bc3      	ldr	r3, [pc, #780]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	4ac2      	ldr	r2, [pc, #776]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003fec:	e008      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ff4:	e004      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003ff6:	bf00      	nop
 8003ff8:	e002      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003ffa:	bf00      	nop
 8003ffc:	e000      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004000:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10b      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004008:	4bb9      	ldr	r3, [pc, #740]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800400a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004018:	4ab5      	ldr	r2, [pc, #724]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800401a:	430b      	orrs	r3, r1
 800401c:	6553      	str	r3, [r2, #84]	; 0x54
 800401e:	e003      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004024:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004030:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004034:	65bb      	str	r3, [r7, #88]	; 0x58
 8004036:	2300      	movs	r3, #0
 8004038:	65fb      	str	r3, [r7, #92]	; 0x5c
 800403a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800403e:	460b      	mov	r3, r1
 8004040:	4313      	orrs	r3, r2
 8004042:	d009      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004044:	4baa      	ldr	r3, [pc, #680]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004048:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800404c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004052:	4aa7      	ldr	r2, [pc, #668]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004054:	430b      	orrs	r3, r1
 8004056:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004064:	653b      	str	r3, [r7, #80]	; 0x50
 8004066:	2300      	movs	r3, #0
 8004068:	657b      	str	r3, [r7, #84]	; 0x54
 800406a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800406e:	460b      	mov	r3, r1
 8004070:	4313      	orrs	r3, r2
 8004072:	d009      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004074:	4b9e      	ldr	r3, [pc, #632]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004078:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800407c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	4a9b      	ldr	r2, [pc, #620]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004084:	430b      	orrs	r3, r1
 8004086:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004088:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004094:	64bb      	str	r3, [r7, #72]	; 0x48
 8004096:	2300      	movs	r3, #0
 8004098:	64fb      	str	r3, [r7, #76]	; 0x4c
 800409a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800409e:	460b      	mov	r3, r1
 80040a0:	4313      	orrs	r3, r2
 80040a2:	d009      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80040a4:	4b92      	ldr	r3, [pc, #584]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a8:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80040ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b2:	4a8f      	ldr	r2, [pc, #572]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80040b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80040c4:	643b      	str	r3, [r7, #64]	; 0x40
 80040c6:	2300      	movs	r3, #0
 80040c8:	647b      	str	r3, [r7, #68]	; 0x44
 80040ca:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80040ce:	460b      	mov	r3, r1
 80040d0:	4313      	orrs	r3, r2
 80040d2:	d00e      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040d4:	4b86      	ldr	r3, [pc, #536]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	4a85      	ldr	r2, [pc, #532]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040de:	6113      	str	r3, [r2, #16]
 80040e0:	4b83      	ldr	r3, [pc, #524]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040e2:	6919      	ldr	r1, [r3, #16]
 80040e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80040ec:	4a80      	ldr	r2, [pc, #512]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040ee:	430b      	orrs	r3, r1
 80040f0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80040f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fa:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80040fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004100:	2300      	movs	r3, #0
 8004102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004104:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004108:	460b      	mov	r3, r1
 800410a:	4313      	orrs	r3, r2
 800410c:	d009      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800410e:	4b78      	ldr	r3, [pc, #480]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004112:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800411a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411c:	4a74      	ldr	r2, [pc, #464]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800411e:	430b      	orrs	r3, r1
 8004120:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800412e:	633b      	str	r3, [r7, #48]	; 0x30
 8004130:	2300      	movs	r3, #0
 8004132:	637b      	str	r3, [r7, #52]	; 0x34
 8004134:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004138:	460b      	mov	r3, r1
 800413a:	4313      	orrs	r3, r2
 800413c:	d00a      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800413e:	4b6c      	ldr	r3, [pc, #432]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004142:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800414a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414e:	4a68      	ldr	r2, [pc, #416]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004150:	430b      	orrs	r3, r1
 8004152:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415c:	2100      	movs	r1, #0
 800415e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004166:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800416a:	460b      	mov	r3, r1
 800416c:	4313      	orrs	r3, r2
 800416e:	d011      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004174:	3308      	adds	r3, #8
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fb79 	bl	8004870 <RCCEx_PLL2_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004184:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004190:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	2100      	movs	r1, #0
 800419e:	6239      	str	r1, [r7, #32]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
 80041a6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80041aa:	460b      	mov	r3, r1
 80041ac:	4313      	orrs	r3, r2
 80041ae:	d011      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b4:	3308      	adds	r3, #8
 80041b6:	2101      	movs	r1, #1
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fb59 	bl	8004870 <RCCEx_PLL2_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80041c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80041d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	2100      	movs	r1, #0
 80041de:	61b9      	str	r1, [r7, #24]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80041ea:	460b      	mov	r3, r1
 80041ec:	4313      	orrs	r3, r2
 80041ee:	d011      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f4:	3308      	adds	r3, #8
 80041f6:	2102      	movs	r1, #2
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fb39 	bl	8004870 <RCCEx_PLL2_Config>
 80041fe:	4603      	mov	r3, r0
 8004200:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004204:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004210:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	2100      	movs	r1, #0
 800421e:	6139      	str	r1, [r7, #16]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800422a:	460b      	mov	r3, r1
 800422c:	4313      	orrs	r3, r2
 800422e:	d011      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004234:	3328      	adds	r3, #40	; 0x28
 8004236:	2100      	movs	r1, #0
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fbcb 	bl	80049d4 <RCCEx_PLL3_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004244:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004250:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	2100      	movs	r1, #0
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800426a:	460b      	mov	r3, r1
 800426c:	4313      	orrs	r3, r2
 800426e:	d011      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004274:	3328      	adds	r3, #40	; 0x28
 8004276:	2101      	movs	r1, #1
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fbab 	bl	80049d4 <RCCEx_PLL3_Config>
 800427e:	4603      	mov	r3, r0
 8004280:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004284:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004290:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	2100      	movs	r1, #0
 800429e:	6039      	str	r1, [r7, #0]
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	607b      	str	r3, [r7, #4]
 80042a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80042aa:	460b      	mov	r3, r1
 80042ac:	4313      	orrs	r3, r2
 80042ae:	d011      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b4:	3328      	adds	r3, #40	; 0x28
 80042b6:	2102      	movs	r1, #2
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fb8b 	bl	80049d4 <RCCEx_PLL3_Config>
 80042be:	4603      	mov	r3, r0
 80042c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80042c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80042d4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	e000      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80042e8:	46bd      	mov	sp, r7
 80042ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ee:	bf00      	nop
 80042f0:	58024400 	.word	0x58024400

080042f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80042f8:	f7fe fde2 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 80042fc:	4602      	mov	r2, r0
 80042fe:	4b06      	ldr	r3, [pc, #24]	; (8004318 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	4904      	ldr	r1, [pc, #16]	; (800431c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800430a:	5ccb      	ldrb	r3, [r1, r3]
 800430c:	f003 031f 	and.w	r3, r3, #31
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004314:	4618      	mov	r0, r3
 8004316:	bd80      	pop	{r7, pc}
 8004318:	58024400 	.word	0x58024400
 800431c:	08009794 	.word	0x08009794

08004320 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004320:	b480      	push	{r7}
 8004322:	b089      	sub	sp, #36	; 0x24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004328:	4ba1      	ldr	r3, [pc, #644]	; (80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004332:	4b9f      	ldr	r3, [pc, #636]	; (80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	0b1b      	lsrs	r3, r3, #12
 8004338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800433c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800433e:	4b9c      	ldr	r3, [pc, #624]	; (80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800434a:	4b99      	ldr	r3, [pc, #612]	; (80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800434c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434e:	08db      	lsrs	r3, r3, #3
 8004350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004362:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8111 	beq.w	8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	2b02      	cmp	r3, #2
 8004372:	f000 8083 	beq.w	800447c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b02      	cmp	r3, #2
 800437a:	f200 80a1 	bhi.w	80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d056      	beq.n	8004438 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800438a:	e099      	b.n	80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800438c:	4b88      	ldr	r3, [pc, #544]	; (80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0320 	and.w	r3, r3, #32
 8004394:	2b00      	cmp	r3, #0
 8004396:	d02d      	beq.n	80043f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004398:	4b85      	ldr	r3, [pc, #532]	; (80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	08db      	lsrs	r3, r3, #3
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	4a84      	ldr	r2, [pc, #528]	; (80045b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80043a4:	fa22 f303 	lsr.w	r3, r2, r3
 80043a8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	ee07 3a90 	vmov	s15, r3
 80043b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043c2:	4b7b      	ldr	r3, [pc, #492]	; (80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80043f2:	e087      	b.n	8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004406:	4b6a      	ldr	r3, [pc, #424]	; (80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004416:	ed97 6a03 	vldr	s12, [r7, #12]
 800441a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800441e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800442a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800442e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004436:	e065      	b.n	8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004442:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800444a:	4b59      	ldr	r3, [pc, #356]	; (80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800445a:	ed97 6a03 	vldr	s12, [r7, #12]
 800445e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800446a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800446e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800447a:	e043      	b.n	8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004486:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800448a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800448e:	4b48      	ldr	r3, [pc, #288]	; (80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449e:	ed97 6a03 	vldr	s12, [r7, #12]
 80044a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044be:	e021      	b.n	8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d2:	4b37      	ldr	r3, [pc, #220]	; (80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004502:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004504:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	0a5b      	lsrs	r3, r3, #9
 800450a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800451a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800451e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800452a:	ee17 2a90 	vmov	r2, s15
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004532:	4b1f      	ldr	r3, [pc, #124]	; (80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	0c1b      	lsrs	r3, r3, #16
 8004538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800453c:	ee07 3a90 	vmov	s15, r3
 8004540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004548:	ee37 7a87 	vadd.f32	s14, s15, s14
 800454c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004558:	ee17 2a90 	vmov	r2, s15
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004560:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	0e1b      	lsrs	r3, r3, #24
 8004566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800456a:	ee07 3a90 	vmov	s15, r3
 800456e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004572:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004576:	ee37 7a87 	vadd.f32	s14, s15, s14
 800457a:	edd7 6a07 	vldr	s13, [r7, #28]
 800457e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004586:	ee17 2a90 	vmov	r2, s15
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800458e:	e008      	b.n	80045a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	609a      	str	r2, [r3, #8]
}
 80045a2:	bf00      	nop
 80045a4:	3724      	adds	r7, #36	; 0x24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	58024400 	.word	0x58024400
 80045b4:	03d09000 	.word	0x03d09000
 80045b8:	46000000 	.word	0x46000000
 80045bc:	4c742400 	.word	0x4c742400
 80045c0:	4a742400 	.word	0x4a742400
 80045c4:	4af42400 	.word	0x4af42400

080045c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b089      	sub	sp, #36	; 0x24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045d0:	4ba1      	ldr	r3, [pc, #644]	; (8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	f003 0303 	and.w	r3, r3, #3
 80045d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80045da:	4b9f      	ldr	r3, [pc, #636]	; (8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045de:	0d1b      	lsrs	r3, r3, #20
 80045e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80045e6:	4b9c      	ldr	r3, [pc, #624]	; (8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	0a1b      	lsrs	r3, r3, #8
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80045f2:	4b99      	ldr	r3, [pc, #612]	; (8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	08db      	lsrs	r3, r3, #3
 80045f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 8111 	beq.w	8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2b02      	cmp	r3, #2
 800461a:	f000 8083 	beq.w	8004724 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2b02      	cmp	r3, #2
 8004622:	f200 80a1 	bhi.w	8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d056      	beq.n	80046e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004632:	e099      	b.n	8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004634:	4b88      	ldr	r3, [pc, #544]	; (8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b00      	cmp	r3, #0
 800463e:	d02d      	beq.n	800469c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004640:	4b85      	ldr	r3, [pc, #532]	; (8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	08db      	lsrs	r3, r3, #3
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	4a84      	ldr	r2, [pc, #528]	; (800485c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800464c:	fa22 f303 	lsr.w	r3, r2, r3
 8004650:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	ee07 3a90 	vmov	s15, r3
 8004658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800466a:	4b7b      	ldr	r3, [pc, #492]	; (8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800467a:	ed97 6a03 	vldr	s12, [r7, #12]
 800467e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800468a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800468e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004696:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800469a:	e087      	b.n	80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80046aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ae:	4b6a      	ldr	r3, [pc, #424]	; (8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046be:	ed97 6a03 	vldr	s12, [r7, #12]
 80046c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046de:	e065      	b.n	80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004868 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80046ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f2:	4b59      	ldr	r3, [pc, #356]	; (8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004702:	ed97 6a03 	vldr	s12, [r7, #12]
 8004706:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800470a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800470e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004722:	e043      	b.n	80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800486c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004736:	4b48      	ldr	r3, [pc, #288]	; (8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004746:	ed97 6a03 	vldr	s12, [r7, #12]
 800474a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800474e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800475a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800475e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004766:	e021      	b.n	80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004772:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004868 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477a:	4b37      	ldr	r3, [pc, #220]	; (8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478a:	ed97 6a03 	vldr	s12, [r7, #12]
 800478e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800479e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80047ac:	4b2a      	ldr	r3, [pc, #168]	; (8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	0a5b      	lsrs	r3, r3, #9
 80047b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d2:	ee17 2a90 	vmov	r2, s15
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80047da:	4b1f      	ldr	r3, [pc, #124]	; (8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	0c1b      	lsrs	r3, r3, #16
 80047e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e4:	ee07 3a90 	vmov	s15, r3
 80047e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80047f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004800:	ee17 2a90 	vmov	r2, s15
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004808:	4b13      	ldr	r3, [pc, #76]	; (8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	0e1b      	lsrs	r3, r3, #24
 800480e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800481e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004822:	edd7 6a07 	vldr	s13, [r7, #28]
 8004826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800482a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800482e:	ee17 2a90 	vmov	r2, s15
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004836:	e008      	b.n	800484a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	609a      	str	r2, [r3, #8]
}
 800484a:	bf00      	nop
 800484c:	3724      	adds	r7, #36	; 0x24
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	58024400 	.word	0x58024400
 800485c:	03d09000 	.word	0x03d09000
 8004860:	46000000 	.word	0x46000000
 8004864:	4c742400 	.word	0x4c742400
 8004868:	4a742400 	.word	0x4a742400
 800486c:	4af42400 	.word	0x4af42400

08004870 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800487e:	4b53      	ldr	r3, [pc, #332]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b03      	cmp	r3, #3
 8004888:	d101      	bne.n	800488e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e099      	b.n	80049c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800488e:	4b4f      	ldr	r3, [pc, #316]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a4e      	ldr	r2, [pc, #312]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 8004894:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800489a:	f7fc fb0b 	bl	8000eb4 <HAL_GetTick>
 800489e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048a0:	e008      	b.n	80048b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80048a2:	f7fc fb07 	bl	8000eb4 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e086      	b.n	80049c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048b4:	4b45      	ldr	r3, [pc, #276]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1f0      	bne.n	80048a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80048c0:	4b42      	ldr	r3, [pc, #264]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	031b      	lsls	r3, r3, #12
 80048ce:	493f      	ldr	r1, [pc, #252]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	628b      	str	r3, [r1, #40]	; 0x28
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	3b01      	subs	r3, #1
 80048da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	025b      	lsls	r3, r3, #9
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	041b      	lsls	r3, r3, #16
 80048f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	061b      	lsls	r3, r3, #24
 8004900:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004904:	4931      	ldr	r1, [pc, #196]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 8004906:	4313      	orrs	r3, r2
 8004908:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800490a:	4b30      	ldr	r3, [pc, #192]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	492d      	ldr	r1, [pc, #180]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 8004918:	4313      	orrs	r3, r2
 800491a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800491c:	4b2b      	ldr	r3, [pc, #172]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	f023 0220 	bic.w	r2, r3, #32
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	4928      	ldr	r1, [pc, #160]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 800492a:	4313      	orrs	r3, r2
 800492c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800492e:	4b27      	ldr	r3, [pc, #156]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	4a26      	ldr	r2, [pc, #152]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 8004934:	f023 0310 	bic.w	r3, r3, #16
 8004938:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800493a:	4b24      	ldr	r3, [pc, #144]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 800493c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800493e:	4b24      	ldr	r3, [pc, #144]	; (80049d0 <RCCEx_PLL2_Config+0x160>)
 8004940:	4013      	ands	r3, r2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	69d2      	ldr	r2, [r2, #28]
 8004946:	00d2      	lsls	r2, r2, #3
 8004948:	4920      	ldr	r1, [pc, #128]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 800494a:	4313      	orrs	r3, r2
 800494c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800494e:	4b1f      	ldr	r3, [pc, #124]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	4a1e      	ldr	r2, [pc, #120]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 8004954:	f043 0310 	orr.w	r3, r3, #16
 8004958:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d106      	bne.n	800496e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004960:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	4a19      	ldr	r2, [pc, #100]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 8004966:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800496a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800496c:	e00f      	b.n	800498e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d106      	bne.n	8004982 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004974:	4b15      	ldr	r3, [pc, #84]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	4a14      	ldr	r2, [pc, #80]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 800497a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800497e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004980:	e005      	b.n	800498e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004982:	4b12      	ldr	r3, [pc, #72]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	4a11      	ldr	r2, [pc, #68]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 8004988:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800498c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800498e:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a0e      	ldr	r2, [pc, #56]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 8004994:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800499a:	f7fc fa8b 	bl	8000eb4 <HAL_GetTick>
 800499e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049a0:	e008      	b.n	80049b4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80049a2:	f7fc fa87 	bl	8000eb4 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e006      	b.n	80049c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049b4:	4b05      	ldr	r3, [pc, #20]	; (80049cc <RCCEx_PLL2_Config+0x15c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	58024400 	.word	0x58024400
 80049d0:	ffff0007 	.word	0xffff0007

080049d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049e2:	4b53      	ldr	r3, [pc, #332]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d101      	bne.n	80049f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e099      	b.n	8004b26 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80049f2:	4b4f      	ldr	r3, [pc, #316]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a4e      	ldr	r2, [pc, #312]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 80049f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049fe:	f7fc fa59 	bl	8000eb4 <HAL_GetTick>
 8004a02:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a04:	e008      	b.n	8004a18 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a06:	f7fc fa55 	bl	8000eb4 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e086      	b.n	8004b26 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a18:	4b45      	ldr	r3, [pc, #276]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1f0      	bne.n	8004a06 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a24:	4b42      	ldr	r3, [pc, #264]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	051b      	lsls	r3, r3, #20
 8004a32:	493f      	ldr	r1, [pc, #252]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	628b      	str	r3, [r1, #40]	; 0x28
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	025b      	lsls	r3, r3, #9
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	041b      	lsls	r3, r3, #16
 8004a56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	061b      	lsls	r3, r3, #24
 8004a64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a68:	4931      	ldr	r1, [pc, #196]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a6e:	4b30      	ldr	r3, [pc, #192]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	492d      	ldr	r1, [pc, #180]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a80:	4b2b      	ldr	r3, [pc, #172]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	4928      	ldr	r1, [pc, #160]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a92:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	4a26      	ldr	r2, [pc, #152]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a9e:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa2:	4b24      	ldr	r3, [pc, #144]	; (8004b34 <RCCEx_PLL3_Config+0x160>)
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	69d2      	ldr	r2, [r2, #28]
 8004aaa:	00d2      	lsls	r2, r2, #3
 8004aac:	4920      	ldr	r1, [pc, #128]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ab2:	4b1f      	ldr	r3, [pc, #124]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	4a1e      	ldr	r2, [pc, #120]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004abc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ac4:	4b1a      	ldr	r3, [pc, #104]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac8:	4a19      	ldr	r2, [pc, #100]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004aca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ace:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ad0:	e00f      	b.n	8004af2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d106      	bne.n	8004ae6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ad8:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	4a14      	ldr	r2, [pc, #80]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004ade:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ae2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ae4:	e005      	b.n	8004af2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ae6:	4b12      	ldr	r3, [pc, #72]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	4a11      	ldr	r2, [pc, #68]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004aec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004af0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004af2:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a0e      	ldr	r2, [pc, #56]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004afe:	f7fc f9d9 	bl	8000eb4 <HAL_GetTick>
 8004b02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b04:	e008      	b.n	8004b18 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b06:	f7fc f9d5 	bl	8000eb4 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e006      	b.n	8004b26 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b18:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <RCCEx_PLL3_Config+0x15c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0f0      	beq.n	8004b06 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	58024400 	.word	0x58024400
 8004b34:	ffff0007 	.word	0xffff0007

08004b38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e042      	b.n	8004bd0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d106      	bne.n	8004b62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7fb ffdb 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2224      	movs	r2, #36	; 0x24
 8004b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0201 	bic.w	r2, r2, #1
 8004b78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fc48 	bl	8005410 <UART_SetConfig>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e022      	b.n	8004bd0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f001 faa8 	bl	80060e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ba6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f001 fb2f 	bl	800622c <UART_CheckIdleState>
 8004bce:	4603      	mov	r3, r0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	; 0x28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	4613      	mov	r3, r2
 8004be4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d137      	bne.n	8004c60 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_UART_Receive_IT+0x24>
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e030      	b.n	8004c62 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a18      	ldr	r2, [pc, #96]	; (8004c6c <HAL_UART_Receive_IT+0x94>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d01f      	beq.n	8004c50 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d018      	beq.n	8004c50 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	623b      	str	r3, [r7, #32]
 8004c3e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	69f9      	ldr	r1, [r7, #28]
 8004c42:	6a3a      	ldr	r2, [r7, #32]
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e6      	bne.n	8004c1e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c50:	88fb      	ldrh	r3, [r7, #6]
 8004c52:	461a      	mov	r2, r3
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f001 fbfa 	bl	8006450 <UART_Start_Receive_IT>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	e000      	b.n	8004c62 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c60:	2302      	movs	r3, #2
  }
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3728      	adds	r7, #40	; 0x28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	58000c00 	.word	0x58000c00

08004c70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b0ba      	sub	sp, #232	; 0xe8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004c9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d11b      	bne.n	8004ce4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d015      	beq.n	8004ce4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d105      	bne.n	8004cd0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d009      	beq.n	8004ce4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 8377 	beq.w	80053c8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	4798      	blx	r3
      }
      return;
 8004ce2:	e371      	b.n	80053c8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ce4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 8123 	beq.w	8004f34 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004cee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004cf2:	4b8d      	ldr	r3, [pc, #564]	; (8004f28 <HAL_UART_IRQHandler+0x2b8>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004cfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004cfe:	4b8b      	ldr	r3, [pc, #556]	; (8004f2c <HAL_UART_IRQHandler+0x2bc>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 8116 	beq.w	8004f34 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d011      	beq.n	8004d38 <HAL_UART_IRQHandler+0xc8>
 8004d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00b      	beq.n	8004d38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2201      	movs	r2, #1
 8004d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2e:	f043 0201 	orr.w	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d011      	beq.n	8004d68 <HAL_UART_IRQHandler+0xf8>
 8004d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00b      	beq.n	8004d68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2202      	movs	r2, #2
 8004d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5e:	f043 0204 	orr.w	r2, r3, #4
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d011      	beq.n	8004d98 <HAL_UART_IRQHandler+0x128>
 8004d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00b      	beq.n	8004d98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2204      	movs	r2, #4
 8004d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8e:	f043 0202 	orr.w	r2, r3, #2
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9c:	f003 0308 	and.w	r3, r3, #8
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d017      	beq.n	8004dd4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d105      	bne.n	8004dbc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004db0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004db4:	4b5c      	ldr	r3, [pc, #368]	; (8004f28 <HAL_UART_IRQHandler+0x2b8>)
 8004db6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00b      	beq.n	8004dd4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2208      	movs	r2, #8
 8004dc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	f043 0208 	orr.w	r2, r3, #8
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d012      	beq.n	8004e06 <HAL_UART_IRQHandler+0x196>
 8004de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00c      	beq.n	8004e06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004df4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfc:	f043 0220 	orr.w	r2, r3, #32
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 82dd 	beq.w	80053cc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d013      	beq.n	8004e46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d105      	bne.n	8004e36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d007      	beq.n	8004e46 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5a:	2b40      	cmp	r3, #64	; 0x40
 8004e5c:	d005      	beq.n	8004e6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d054      	beq.n	8004f14 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f001 fc12 	bl	8006694 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b40      	cmp	r3, #64	; 0x40
 8004e7c:	d146      	bne.n	8004f0c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3308      	adds	r3, #8
 8004e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004eaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004eae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004eb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1d9      	bne.n	8004e7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d017      	beq.n	8004f04 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eda:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <HAL_UART_IRQHandler+0x2c0>)
 8004edc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fc fc1f 	bl	8001728 <HAL_DMA_Abort_IT>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d019      	beq.n	8004f24 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004efe:	4610      	mov	r0, r2
 8004f00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f02:	e00f      	b.n	8004f24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7fb fb9d 	bl	8000644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f0a:	e00b      	b.n	8004f24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7fb fb99 	bl	8000644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f12:	e007      	b.n	8004f24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7fb fb95 	bl	8000644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004f22:	e253      	b.n	80053cc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f24:	bf00      	nop
    return;
 8004f26:	e251      	b.n	80053cc <HAL_UART_IRQHandler+0x75c>
 8004f28:	10000001 	.word	0x10000001
 8004f2c:	04000120 	.word	0x04000120
 8004f30:	08006761 	.word	0x08006761

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	f040 81e7 	bne.w	800530c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f42:	f003 0310 	and.w	r3, r3, #16
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 81e0 	beq.w	800530c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 81d9 	beq.w	800530c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2210      	movs	r2, #16
 8004f60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6c:	2b40      	cmp	r3, #64	; 0x40
 8004f6e:	f040 8151 	bne.w	8005214 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a96      	ldr	r2, [pc, #600]	; (80051d4 <HAL_UART_IRQHandler+0x564>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d068      	beq.n	8005052 <HAL_UART_IRQHandler+0x3e2>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a93      	ldr	r2, [pc, #588]	; (80051d8 <HAL_UART_IRQHandler+0x568>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d061      	beq.n	8005052 <HAL_UART_IRQHandler+0x3e2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a91      	ldr	r2, [pc, #580]	; (80051dc <HAL_UART_IRQHandler+0x56c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d05a      	beq.n	8005052 <HAL_UART_IRQHandler+0x3e2>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a8e      	ldr	r2, [pc, #568]	; (80051e0 <HAL_UART_IRQHandler+0x570>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d053      	beq.n	8005052 <HAL_UART_IRQHandler+0x3e2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a8c      	ldr	r2, [pc, #560]	; (80051e4 <HAL_UART_IRQHandler+0x574>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d04c      	beq.n	8005052 <HAL_UART_IRQHandler+0x3e2>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a89      	ldr	r2, [pc, #548]	; (80051e8 <HAL_UART_IRQHandler+0x578>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d045      	beq.n	8005052 <HAL_UART_IRQHandler+0x3e2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a87      	ldr	r2, [pc, #540]	; (80051ec <HAL_UART_IRQHandler+0x57c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d03e      	beq.n	8005052 <HAL_UART_IRQHandler+0x3e2>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a84      	ldr	r2, [pc, #528]	; (80051f0 <HAL_UART_IRQHandler+0x580>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d037      	beq.n	8005052 <HAL_UART_IRQHandler+0x3e2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a82      	ldr	r2, [pc, #520]	; (80051f4 <HAL_UART_IRQHandler+0x584>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d030      	beq.n	8005052 <HAL_UART_IRQHandler+0x3e2>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a7f      	ldr	r2, [pc, #508]	; (80051f8 <HAL_UART_IRQHandler+0x588>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d029      	beq.n	8005052 <HAL_UART_IRQHandler+0x3e2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a7d      	ldr	r2, [pc, #500]	; (80051fc <HAL_UART_IRQHandler+0x58c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d022      	beq.n	8005052 <HAL_UART_IRQHandler+0x3e2>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a7a      	ldr	r2, [pc, #488]	; (8005200 <HAL_UART_IRQHandler+0x590>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d01b      	beq.n	8005052 <HAL_UART_IRQHandler+0x3e2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a78      	ldr	r2, [pc, #480]	; (8005204 <HAL_UART_IRQHandler+0x594>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d014      	beq.n	8005052 <HAL_UART_IRQHandler+0x3e2>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a75      	ldr	r2, [pc, #468]	; (8005208 <HAL_UART_IRQHandler+0x598>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00d      	beq.n	8005052 <HAL_UART_IRQHandler+0x3e2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a73      	ldr	r2, [pc, #460]	; (800520c <HAL_UART_IRQHandler+0x59c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d006      	beq.n	8005052 <HAL_UART_IRQHandler+0x3e2>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a70      	ldr	r2, [pc, #448]	; (8005210 <HAL_UART_IRQHandler+0x5a0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d106      	bne.n	8005060 <HAL_UART_IRQHandler+0x3f0>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	b29b      	uxth	r3, r3
 800505e:	e005      	b.n	800506c <HAL_UART_IRQHandler+0x3fc>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	b29b      	uxth	r3, r3
 800506c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005070:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 81ab 	beq.w	80053d0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005080:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005084:	429a      	cmp	r2, r3
 8005086:	f080 81a3 	bcs.w	80053d0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005090:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800509a:	69db      	ldr	r3, [r3, #28]
 800509c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a0:	f000 8087 	beq.w	80051b2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050b0:	e853 3f00 	ldrex	r3, [r3]
 80050b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80050d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050de:	e841 2300 	strex	r3, r2, [r1]
 80050e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80050e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1da      	bne.n	80050a4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3308      	adds	r3, #8
 80050f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80050fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005100:	f023 0301 	bic.w	r3, r3, #1
 8005104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3308      	adds	r3, #8
 800510e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005112:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005116:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800511a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e1      	bne.n	80050ee <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3308      	adds	r3, #8
 8005130:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800513a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800513c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3308      	adds	r3, #8
 800514a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800514e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005150:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005154:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800515c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e3      	bne.n	800512a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2220      	movs	r2, #32
 8005166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800517e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005180:	f023 0310 	bic.w	r3, r3, #16
 8005184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005192:	65bb      	str	r3, [r7, #88]	; 0x58
 8005194:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005196:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005198:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800519a:	e841 2300 	strex	r3, r2, [r1]
 800519e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1e4      	bne.n	8005170 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fb ff9d 	bl	80010ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2202      	movs	r2, #2
 80051b6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	4619      	mov	r1, r3
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f913 	bl	80053f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051d2:	e0fd      	b.n	80053d0 <HAL_UART_IRQHandler+0x760>
 80051d4:	40020010 	.word	0x40020010
 80051d8:	40020028 	.word	0x40020028
 80051dc:	40020040 	.word	0x40020040
 80051e0:	40020058 	.word	0x40020058
 80051e4:	40020070 	.word	0x40020070
 80051e8:	40020088 	.word	0x40020088
 80051ec:	400200a0 	.word	0x400200a0
 80051f0:	400200b8 	.word	0x400200b8
 80051f4:	40020410 	.word	0x40020410
 80051f8:	40020428 	.word	0x40020428
 80051fc:	40020440 	.word	0x40020440
 8005200:	40020458 	.word	0x40020458
 8005204:	40020470 	.word	0x40020470
 8005208:	40020488 	.word	0x40020488
 800520c:	400204a0 	.word	0x400204a0
 8005210:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005220:	b29b      	uxth	r3, r3
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800522e:	b29b      	uxth	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 80cf 	beq.w	80053d4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8005236:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 80ca 	beq.w	80053d4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800524e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005250:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005254:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	461a      	mov	r2, r3
 800525e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005262:	647b      	str	r3, [r7, #68]	; 0x44
 8005264:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005268:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1e4      	bne.n	8005240 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3308      	adds	r3, #8
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	623b      	str	r3, [r7, #32]
   return(result);
 8005286:	6a3a      	ldr	r2, [r7, #32]
 8005288:	4b55      	ldr	r3, [pc, #340]	; (80053e0 <HAL_UART_IRQHandler+0x770>)
 800528a:	4013      	ands	r3, r2
 800528c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3308      	adds	r3, #8
 8005296:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800529a:	633a      	str	r2, [r7, #48]	; 0x30
 800529c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e3      	bne.n	8005276 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0310 	bic.w	r3, r3, #16
 80052d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052e4:	61fb      	str	r3, [r7, #28]
 80052e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	69b9      	ldr	r1, [r7, #24]
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	e841 2300 	strex	r3, r2, [r1]
 80052f0:	617b      	str	r3, [r7, #20]
   return(result);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e4      	bne.n	80052c2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005302:	4619      	mov	r1, r3
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f877 	bl	80053f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800530a:	e063      	b.n	80053d4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800530c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00e      	beq.n	8005336 <HAL_UART_IRQHandler+0x6c6>
 8005318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800531c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800532c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f001 ff74 	bl	800721c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005334:	e051      	b.n	80053da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800533a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533e:	2b00      	cmp	r3, #0
 8005340:	d014      	beq.n	800536c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534a:	2b00      	cmp	r3, #0
 800534c:	d105      	bne.n	800535a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800534e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005352:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d008      	beq.n	800536c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800535e:	2b00      	cmp	r3, #0
 8005360:	d03a      	beq.n	80053d8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	4798      	blx	r3
    }
    return;
 800536a:	e035      	b.n	80053d8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800536c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d009      	beq.n	800538c <HAL_UART_IRQHandler+0x71c>
 8005378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800537c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f001 fa01 	bl	800678c <UART_EndTransmit_IT>
    return;
 800538a:	e026      	b.n	80053da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800538c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005390:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d009      	beq.n	80053ac <HAL_UART_IRQHandler+0x73c>
 8005398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800539c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f001 ff4d 	bl	8007244 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053aa:	e016      	b.n	80053da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80053ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d010      	beq.n	80053da <HAL_UART_IRQHandler+0x76a>
 80053b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	da0c      	bge.n	80053da <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f001 ff35 	bl	8007230 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053c6:	e008      	b.n	80053da <HAL_UART_IRQHandler+0x76a>
      return;
 80053c8:	bf00      	nop
 80053ca:	e006      	b.n	80053da <HAL_UART_IRQHandler+0x76a>
    return;
 80053cc:	bf00      	nop
 80053ce:	e004      	b.n	80053da <HAL_UART_IRQHandler+0x76a>
      return;
 80053d0:	bf00      	nop
 80053d2:	e002      	b.n	80053da <HAL_UART_IRQHandler+0x76a>
      return;
 80053d4:	bf00      	nop
 80053d6:	e000      	b.n	80053da <HAL_UART_IRQHandler+0x76a>
    return;
 80053d8:	bf00      	nop
  }
}
 80053da:	37e8      	adds	r7, #232	; 0xe8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	effffffe 	.word	0xeffffffe

080053e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005414:	b092      	sub	sp, #72	; 0x48
 8005416:	af00      	add	r7, sp, #0
 8005418:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	431a      	orrs	r2, r3
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	431a      	orrs	r2, r3
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	4313      	orrs	r3, r2
 8005436:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	4bbe      	ldr	r3, [pc, #760]	; (8005738 <UART_SetConfig+0x328>)
 8005440:	4013      	ands	r3, r2
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	6812      	ldr	r2, [r2, #0]
 8005446:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005448:	430b      	orrs	r3, r1
 800544a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4ab3      	ldr	r2, [pc, #716]	; (800573c <UART_SetConfig+0x32c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d004      	beq.n	800547c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005478:	4313      	orrs	r3, r2
 800547a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	4baf      	ldr	r3, [pc, #700]	; (8005740 <UART_SetConfig+0x330>)
 8005484:	4013      	ands	r3, r2
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	6812      	ldr	r2, [r2, #0]
 800548a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800548c:	430b      	orrs	r3, r1
 800548e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005496:	f023 010f 	bic.w	r1, r3, #15
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4aa6      	ldr	r2, [pc, #664]	; (8005744 <UART_SetConfig+0x334>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d177      	bne.n	80055a0 <UART_SetConfig+0x190>
 80054b0:	4ba5      	ldr	r3, [pc, #660]	; (8005748 <UART_SetConfig+0x338>)
 80054b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054b8:	2b28      	cmp	r3, #40	; 0x28
 80054ba:	d86d      	bhi.n	8005598 <UART_SetConfig+0x188>
 80054bc:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <UART_SetConfig+0xb4>)
 80054be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c2:	bf00      	nop
 80054c4:	08005569 	.word	0x08005569
 80054c8:	08005599 	.word	0x08005599
 80054cc:	08005599 	.word	0x08005599
 80054d0:	08005599 	.word	0x08005599
 80054d4:	08005599 	.word	0x08005599
 80054d8:	08005599 	.word	0x08005599
 80054dc:	08005599 	.word	0x08005599
 80054e0:	08005599 	.word	0x08005599
 80054e4:	08005571 	.word	0x08005571
 80054e8:	08005599 	.word	0x08005599
 80054ec:	08005599 	.word	0x08005599
 80054f0:	08005599 	.word	0x08005599
 80054f4:	08005599 	.word	0x08005599
 80054f8:	08005599 	.word	0x08005599
 80054fc:	08005599 	.word	0x08005599
 8005500:	08005599 	.word	0x08005599
 8005504:	08005579 	.word	0x08005579
 8005508:	08005599 	.word	0x08005599
 800550c:	08005599 	.word	0x08005599
 8005510:	08005599 	.word	0x08005599
 8005514:	08005599 	.word	0x08005599
 8005518:	08005599 	.word	0x08005599
 800551c:	08005599 	.word	0x08005599
 8005520:	08005599 	.word	0x08005599
 8005524:	08005581 	.word	0x08005581
 8005528:	08005599 	.word	0x08005599
 800552c:	08005599 	.word	0x08005599
 8005530:	08005599 	.word	0x08005599
 8005534:	08005599 	.word	0x08005599
 8005538:	08005599 	.word	0x08005599
 800553c:	08005599 	.word	0x08005599
 8005540:	08005599 	.word	0x08005599
 8005544:	08005589 	.word	0x08005589
 8005548:	08005599 	.word	0x08005599
 800554c:	08005599 	.word	0x08005599
 8005550:	08005599 	.word	0x08005599
 8005554:	08005599 	.word	0x08005599
 8005558:	08005599 	.word	0x08005599
 800555c:	08005599 	.word	0x08005599
 8005560:	08005599 	.word	0x08005599
 8005564:	08005591 	.word	0x08005591
 8005568:	2301      	movs	r3, #1
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556e:	e326      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005570:	2304      	movs	r3, #4
 8005572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005576:	e322      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005578:	2308      	movs	r3, #8
 800557a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557e:	e31e      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005580:	2310      	movs	r3, #16
 8005582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005586:	e31a      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005588:	2320      	movs	r3, #32
 800558a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558e:	e316      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005590:	2340      	movs	r3, #64	; 0x40
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005596:	e312      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005598:	2380      	movs	r3, #128	; 0x80
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559e:	e30e      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a69      	ldr	r2, [pc, #420]	; (800574c <UART_SetConfig+0x33c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d130      	bne.n	800560c <UART_SetConfig+0x1fc>
 80055aa:	4b67      	ldr	r3, [pc, #412]	; (8005748 <UART_SetConfig+0x338>)
 80055ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	2b05      	cmp	r3, #5
 80055b4:	d826      	bhi.n	8005604 <UART_SetConfig+0x1f4>
 80055b6:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <UART_SetConfig+0x1ac>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	080055d5 	.word	0x080055d5
 80055c0:	080055dd 	.word	0x080055dd
 80055c4:	080055e5 	.word	0x080055e5
 80055c8:	080055ed 	.word	0x080055ed
 80055cc:	080055f5 	.word	0x080055f5
 80055d0:	080055fd 	.word	0x080055fd
 80055d4:	2300      	movs	r3, #0
 80055d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055da:	e2f0      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80055dc:	2304      	movs	r3, #4
 80055de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055e2:	e2ec      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80055e4:	2308      	movs	r3, #8
 80055e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ea:	e2e8      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80055ec:	2310      	movs	r3, #16
 80055ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f2:	e2e4      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80055f4:	2320      	movs	r3, #32
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fa:	e2e0      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80055fc:	2340      	movs	r3, #64	; 0x40
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005602:	e2dc      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005604:	2380      	movs	r3, #128	; 0x80
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560a:	e2d8      	b.n	8005bbe <UART_SetConfig+0x7ae>
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a4f      	ldr	r2, [pc, #316]	; (8005750 <UART_SetConfig+0x340>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d130      	bne.n	8005678 <UART_SetConfig+0x268>
 8005616:	4b4c      	ldr	r3, [pc, #304]	; (8005748 <UART_SetConfig+0x338>)
 8005618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	2b05      	cmp	r3, #5
 8005620:	d826      	bhi.n	8005670 <UART_SetConfig+0x260>
 8005622:	a201      	add	r2, pc, #4	; (adr r2, 8005628 <UART_SetConfig+0x218>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	08005641 	.word	0x08005641
 800562c:	08005649 	.word	0x08005649
 8005630:	08005651 	.word	0x08005651
 8005634:	08005659 	.word	0x08005659
 8005638:	08005661 	.word	0x08005661
 800563c:	08005669 	.word	0x08005669
 8005640:	2300      	movs	r3, #0
 8005642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005646:	e2ba      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005648:	2304      	movs	r3, #4
 800564a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800564e:	e2b6      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005650:	2308      	movs	r3, #8
 8005652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005656:	e2b2      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005658:	2310      	movs	r3, #16
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800565e:	e2ae      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005660:	2320      	movs	r3, #32
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005666:	e2aa      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005668:	2340      	movs	r3, #64	; 0x40
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566e:	e2a6      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005670:	2380      	movs	r3, #128	; 0x80
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005676:	e2a2      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a35      	ldr	r2, [pc, #212]	; (8005754 <UART_SetConfig+0x344>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d130      	bne.n	80056e4 <UART_SetConfig+0x2d4>
 8005682:	4b31      	ldr	r3, [pc, #196]	; (8005748 <UART_SetConfig+0x338>)
 8005684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	2b05      	cmp	r3, #5
 800568c:	d826      	bhi.n	80056dc <UART_SetConfig+0x2cc>
 800568e:	a201      	add	r2, pc, #4	; (adr r2, 8005694 <UART_SetConfig+0x284>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056ad 	.word	0x080056ad
 8005698:	080056b5 	.word	0x080056b5
 800569c:	080056bd 	.word	0x080056bd
 80056a0:	080056c5 	.word	0x080056c5
 80056a4:	080056cd 	.word	0x080056cd
 80056a8:	080056d5 	.word	0x080056d5
 80056ac:	2300      	movs	r3, #0
 80056ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056b2:	e284      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80056b4:	2304      	movs	r3, #4
 80056b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ba:	e280      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80056bc:	2308      	movs	r3, #8
 80056be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c2:	e27c      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80056c4:	2310      	movs	r3, #16
 80056c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ca:	e278      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80056cc:	2320      	movs	r3, #32
 80056ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d2:	e274      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80056d4:	2340      	movs	r3, #64	; 0x40
 80056d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056da:	e270      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e2:	e26c      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a1b      	ldr	r2, [pc, #108]	; (8005758 <UART_SetConfig+0x348>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d142      	bne.n	8005774 <UART_SetConfig+0x364>
 80056ee:	4b16      	ldr	r3, [pc, #88]	; (8005748 <UART_SetConfig+0x338>)
 80056f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	2b05      	cmp	r3, #5
 80056f8:	d838      	bhi.n	800576c <UART_SetConfig+0x35c>
 80056fa:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <UART_SetConfig+0x2f0>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	08005719 	.word	0x08005719
 8005704:	08005721 	.word	0x08005721
 8005708:	08005729 	.word	0x08005729
 800570c:	08005731 	.word	0x08005731
 8005710:	0800575d 	.word	0x0800575d
 8005714:	08005765 	.word	0x08005765
 8005718:	2300      	movs	r3, #0
 800571a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800571e:	e24e      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005720:	2304      	movs	r3, #4
 8005722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005726:	e24a      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005728:	2308      	movs	r3, #8
 800572a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572e:	e246      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005730:	2310      	movs	r3, #16
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005736:	e242      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005738:	cfff69f3 	.word	0xcfff69f3
 800573c:	58000c00 	.word	0x58000c00
 8005740:	11fff4ff 	.word	0x11fff4ff
 8005744:	40011000 	.word	0x40011000
 8005748:	58024400 	.word	0x58024400
 800574c:	40004400 	.word	0x40004400
 8005750:	40004800 	.word	0x40004800
 8005754:	40004c00 	.word	0x40004c00
 8005758:	40005000 	.word	0x40005000
 800575c:	2320      	movs	r3, #32
 800575e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005762:	e22c      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005764:	2340      	movs	r3, #64	; 0x40
 8005766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800576a:	e228      	b.n	8005bbe <UART_SetConfig+0x7ae>
 800576c:	2380      	movs	r3, #128	; 0x80
 800576e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005772:	e224      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4ab1      	ldr	r2, [pc, #708]	; (8005a40 <UART_SetConfig+0x630>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d176      	bne.n	800586c <UART_SetConfig+0x45c>
 800577e:	4bb1      	ldr	r3, [pc, #708]	; (8005a44 <UART_SetConfig+0x634>)
 8005780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005782:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005786:	2b28      	cmp	r3, #40	; 0x28
 8005788:	d86c      	bhi.n	8005864 <UART_SetConfig+0x454>
 800578a:	a201      	add	r2, pc, #4	; (adr r2, 8005790 <UART_SetConfig+0x380>)
 800578c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005790:	08005835 	.word	0x08005835
 8005794:	08005865 	.word	0x08005865
 8005798:	08005865 	.word	0x08005865
 800579c:	08005865 	.word	0x08005865
 80057a0:	08005865 	.word	0x08005865
 80057a4:	08005865 	.word	0x08005865
 80057a8:	08005865 	.word	0x08005865
 80057ac:	08005865 	.word	0x08005865
 80057b0:	0800583d 	.word	0x0800583d
 80057b4:	08005865 	.word	0x08005865
 80057b8:	08005865 	.word	0x08005865
 80057bc:	08005865 	.word	0x08005865
 80057c0:	08005865 	.word	0x08005865
 80057c4:	08005865 	.word	0x08005865
 80057c8:	08005865 	.word	0x08005865
 80057cc:	08005865 	.word	0x08005865
 80057d0:	08005845 	.word	0x08005845
 80057d4:	08005865 	.word	0x08005865
 80057d8:	08005865 	.word	0x08005865
 80057dc:	08005865 	.word	0x08005865
 80057e0:	08005865 	.word	0x08005865
 80057e4:	08005865 	.word	0x08005865
 80057e8:	08005865 	.word	0x08005865
 80057ec:	08005865 	.word	0x08005865
 80057f0:	0800584d 	.word	0x0800584d
 80057f4:	08005865 	.word	0x08005865
 80057f8:	08005865 	.word	0x08005865
 80057fc:	08005865 	.word	0x08005865
 8005800:	08005865 	.word	0x08005865
 8005804:	08005865 	.word	0x08005865
 8005808:	08005865 	.word	0x08005865
 800580c:	08005865 	.word	0x08005865
 8005810:	08005855 	.word	0x08005855
 8005814:	08005865 	.word	0x08005865
 8005818:	08005865 	.word	0x08005865
 800581c:	08005865 	.word	0x08005865
 8005820:	08005865 	.word	0x08005865
 8005824:	08005865 	.word	0x08005865
 8005828:	08005865 	.word	0x08005865
 800582c:	08005865 	.word	0x08005865
 8005830:	0800585d 	.word	0x0800585d
 8005834:	2301      	movs	r3, #1
 8005836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800583a:	e1c0      	b.n	8005bbe <UART_SetConfig+0x7ae>
 800583c:	2304      	movs	r3, #4
 800583e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005842:	e1bc      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005844:	2308      	movs	r3, #8
 8005846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800584a:	e1b8      	b.n	8005bbe <UART_SetConfig+0x7ae>
 800584c:	2310      	movs	r3, #16
 800584e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005852:	e1b4      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005854:	2320      	movs	r3, #32
 8005856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585a:	e1b0      	b.n	8005bbe <UART_SetConfig+0x7ae>
 800585c:	2340      	movs	r3, #64	; 0x40
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005862:	e1ac      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005864:	2380      	movs	r3, #128	; 0x80
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586a:	e1a8      	b.n	8005bbe <UART_SetConfig+0x7ae>
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a75      	ldr	r2, [pc, #468]	; (8005a48 <UART_SetConfig+0x638>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d130      	bne.n	80058d8 <UART_SetConfig+0x4c8>
 8005876:	4b73      	ldr	r3, [pc, #460]	; (8005a44 <UART_SetConfig+0x634>)
 8005878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	2b05      	cmp	r3, #5
 8005880:	d826      	bhi.n	80058d0 <UART_SetConfig+0x4c0>
 8005882:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <UART_SetConfig+0x478>)
 8005884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005888:	080058a1 	.word	0x080058a1
 800588c:	080058a9 	.word	0x080058a9
 8005890:	080058b1 	.word	0x080058b1
 8005894:	080058b9 	.word	0x080058b9
 8005898:	080058c1 	.word	0x080058c1
 800589c:	080058c9 	.word	0x080058c9
 80058a0:	2300      	movs	r3, #0
 80058a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058a6:	e18a      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80058a8:	2304      	movs	r3, #4
 80058aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ae:	e186      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80058b0:	2308      	movs	r3, #8
 80058b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058b6:	e182      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80058b8:	2310      	movs	r3, #16
 80058ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058be:	e17e      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80058c0:	2320      	movs	r3, #32
 80058c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c6:	e17a      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80058c8:	2340      	movs	r3, #64	; 0x40
 80058ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ce:	e176      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80058d0:	2380      	movs	r3, #128	; 0x80
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d6:	e172      	b.n	8005bbe <UART_SetConfig+0x7ae>
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a5b      	ldr	r2, [pc, #364]	; (8005a4c <UART_SetConfig+0x63c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d130      	bne.n	8005944 <UART_SetConfig+0x534>
 80058e2:	4b58      	ldr	r3, [pc, #352]	; (8005a44 <UART_SetConfig+0x634>)
 80058e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	d826      	bhi.n	800593c <UART_SetConfig+0x52c>
 80058ee:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <UART_SetConfig+0x4e4>)
 80058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f4:	0800590d 	.word	0x0800590d
 80058f8:	08005915 	.word	0x08005915
 80058fc:	0800591d 	.word	0x0800591d
 8005900:	08005925 	.word	0x08005925
 8005904:	0800592d 	.word	0x0800592d
 8005908:	08005935 	.word	0x08005935
 800590c:	2300      	movs	r3, #0
 800590e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005912:	e154      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005914:	2304      	movs	r3, #4
 8005916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800591a:	e150      	b.n	8005bbe <UART_SetConfig+0x7ae>
 800591c:	2308      	movs	r3, #8
 800591e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005922:	e14c      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005924:	2310      	movs	r3, #16
 8005926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592a:	e148      	b.n	8005bbe <UART_SetConfig+0x7ae>
 800592c:	2320      	movs	r3, #32
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005932:	e144      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005934:	2340      	movs	r3, #64	; 0x40
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593a:	e140      	b.n	8005bbe <UART_SetConfig+0x7ae>
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005942:	e13c      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a41      	ldr	r2, [pc, #260]	; (8005a50 <UART_SetConfig+0x640>)
 800594a:	4293      	cmp	r3, r2
 800594c:	f040 8082 	bne.w	8005a54 <UART_SetConfig+0x644>
 8005950:	4b3c      	ldr	r3, [pc, #240]	; (8005a44 <UART_SetConfig+0x634>)
 8005952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005954:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005958:	2b28      	cmp	r3, #40	; 0x28
 800595a:	d86d      	bhi.n	8005a38 <UART_SetConfig+0x628>
 800595c:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <UART_SetConfig+0x554>)
 800595e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005962:	bf00      	nop
 8005964:	08005a09 	.word	0x08005a09
 8005968:	08005a39 	.word	0x08005a39
 800596c:	08005a39 	.word	0x08005a39
 8005970:	08005a39 	.word	0x08005a39
 8005974:	08005a39 	.word	0x08005a39
 8005978:	08005a39 	.word	0x08005a39
 800597c:	08005a39 	.word	0x08005a39
 8005980:	08005a39 	.word	0x08005a39
 8005984:	08005a11 	.word	0x08005a11
 8005988:	08005a39 	.word	0x08005a39
 800598c:	08005a39 	.word	0x08005a39
 8005990:	08005a39 	.word	0x08005a39
 8005994:	08005a39 	.word	0x08005a39
 8005998:	08005a39 	.word	0x08005a39
 800599c:	08005a39 	.word	0x08005a39
 80059a0:	08005a39 	.word	0x08005a39
 80059a4:	08005a19 	.word	0x08005a19
 80059a8:	08005a39 	.word	0x08005a39
 80059ac:	08005a39 	.word	0x08005a39
 80059b0:	08005a39 	.word	0x08005a39
 80059b4:	08005a39 	.word	0x08005a39
 80059b8:	08005a39 	.word	0x08005a39
 80059bc:	08005a39 	.word	0x08005a39
 80059c0:	08005a39 	.word	0x08005a39
 80059c4:	08005a21 	.word	0x08005a21
 80059c8:	08005a39 	.word	0x08005a39
 80059cc:	08005a39 	.word	0x08005a39
 80059d0:	08005a39 	.word	0x08005a39
 80059d4:	08005a39 	.word	0x08005a39
 80059d8:	08005a39 	.word	0x08005a39
 80059dc:	08005a39 	.word	0x08005a39
 80059e0:	08005a39 	.word	0x08005a39
 80059e4:	08005a29 	.word	0x08005a29
 80059e8:	08005a39 	.word	0x08005a39
 80059ec:	08005a39 	.word	0x08005a39
 80059f0:	08005a39 	.word	0x08005a39
 80059f4:	08005a39 	.word	0x08005a39
 80059f8:	08005a39 	.word	0x08005a39
 80059fc:	08005a39 	.word	0x08005a39
 8005a00:	08005a39 	.word	0x08005a39
 8005a04:	08005a31 	.word	0x08005a31
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a0e:	e0d6      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005a10:	2304      	movs	r3, #4
 8005a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a16:	e0d2      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005a18:	2308      	movs	r3, #8
 8005a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a1e:	e0ce      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005a20:	2310      	movs	r3, #16
 8005a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a26:	e0ca      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005a28:	2320      	movs	r3, #32
 8005a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a2e:	e0c6      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005a30:	2340      	movs	r3, #64	; 0x40
 8005a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a36:	e0c2      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005a38:	2380      	movs	r3, #128	; 0x80
 8005a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a3e:	e0be      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005a40:	40011400 	.word	0x40011400
 8005a44:	58024400 	.word	0x58024400
 8005a48:	40007800 	.word	0x40007800
 8005a4c:	40007c00 	.word	0x40007c00
 8005a50:	40011800 	.word	0x40011800
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4aad      	ldr	r2, [pc, #692]	; (8005d10 <UART_SetConfig+0x900>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d176      	bne.n	8005b4c <UART_SetConfig+0x73c>
 8005a5e:	4bad      	ldr	r3, [pc, #692]	; (8005d14 <UART_SetConfig+0x904>)
 8005a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a66:	2b28      	cmp	r3, #40	; 0x28
 8005a68:	d86c      	bhi.n	8005b44 <UART_SetConfig+0x734>
 8005a6a:	a201      	add	r2, pc, #4	; (adr r2, 8005a70 <UART_SetConfig+0x660>)
 8005a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a70:	08005b15 	.word	0x08005b15
 8005a74:	08005b45 	.word	0x08005b45
 8005a78:	08005b45 	.word	0x08005b45
 8005a7c:	08005b45 	.word	0x08005b45
 8005a80:	08005b45 	.word	0x08005b45
 8005a84:	08005b45 	.word	0x08005b45
 8005a88:	08005b45 	.word	0x08005b45
 8005a8c:	08005b45 	.word	0x08005b45
 8005a90:	08005b1d 	.word	0x08005b1d
 8005a94:	08005b45 	.word	0x08005b45
 8005a98:	08005b45 	.word	0x08005b45
 8005a9c:	08005b45 	.word	0x08005b45
 8005aa0:	08005b45 	.word	0x08005b45
 8005aa4:	08005b45 	.word	0x08005b45
 8005aa8:	08005b45 	.word	0x08005b45
 8005aac:	08005b45 	.word	0x08005b45
 8005ab0:	08005b25 	.word	0x08005b25
 8005ab4:	08005b45 	.word	0x08005b45
 8005ab8:	08005b45 	.word	0x08005b45
 8005abc:	08005b45 	.word	0x08005b45
 8005ac0:	08005b45 	.word	0x08005b45
 8005ac4:	08005b45 	.word	0x08005b45
 8005ac8:	08005b45 	.word	0x08005b45
 8005acc:	08005b45 	.word	0x08005b45
 8005ad0:	08005b2d 	.word	0x08005b2d
 8005ad4:	08005b45 	.word	0x08005b45
 8005ad8:	08005b45 	.word	0x08005b45
 8005adc:	08005b45 	.word	0x08005b45
 8005ae0:	08005b45 	.word	0x08005b45
 8005ae4:	08005b45 	.word	0x08005b45
 8005ae8:	08005b45 	.word	0x08005b45
 8005aec:	08005b45 	.word	0x08005b45
 8005af0:	08005b35 	.word	0x08005b35
 8005af4:	08005b45 	.word	0x08005b45
 8005af8:	08005b45 	.word	0x08005b45
 8005afc:	08005b45 	.word	0x08005b45
 8005b00:	08005b45 	.word	0x08005b45
 8005b04:	08005b45 	.word	0x08005b45
 8005b08:	08005b45 	.word	0x08005b45
 8005b0c:	08005b45 	.word	0x08005b45
 8005b10:	08005b3d 	.word	0x08005b3d
 8005b14:	2301      	movs	r3, #1
 8005b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b1a:	e050      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b22:	e04c      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005b24:	2308      	movs	r3, #8
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b2a:	e048      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b32:	e044      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005b34:	2320      	movs	r3, #32
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b3a:	e040      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005b3c:	2340      	movs	r3, #64	; 0x40
 8005b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b42:	e03c      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b4a:	e038      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a71      	ldr	r2, [pc, #452]	; (8005d18 <UART_SetConfig+0x908>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d130      	bne.n	8005bb8 <UART_SetConfig+0x7a8>
 8005b56:	4b6f      	ldr	r3, [pc, #444]	; (8005d14 <UART_SetConfig+0x904>)
 8005b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	2b05      	cmp	r3, #5
 8005b60:	d826      	bhi.n	8005bb0 <UART_SetConfig+0x7a0>
 8005b62:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <UART_SetConfig+0x758>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005b81 	.word	0x08005b81
 8005b6c:	08005b89 	.word	0x08005b89
 8005b70:	08005b91 	.word	0x08005b91
 8005b74:	08005b99 	.word	0x08005b99
 8005b78:	08005ba1 	.word	0x08005ba1
 8005b7c:	08005ba9 	.word	0x08005ba9
 8005b80:	2302      	movs	r3, #2
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b86:	e01a      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005b88:	2304      	movs	r3, #4
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8e:	e016      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005b90:	2308      	movs	r3, #8
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b96:	e012      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005b98:	2310      	movs	r3, #16
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9e:	e00e      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005ba0:	2320      	movs	r3, #32
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba6:	e00a      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005ba8:	2340      	movs	r3, #64	; 0x40
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bae:	e006      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005bb0:	2380      	movs	r3, #128	; 0x80
 8005bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bb6:	e002      	b.n	8005bbe <UART_SetConfig+0x7ae>
 8005bb8:	2380      	movs	r3, #128	; 0x80
 8005bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a55      	ldr	r2, [pc, #340]	; (8005d18 <UART_SetConfig+0x908>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	f040 80f8 	bne.w	8005dba <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	dc46      	bgt.n	8005c60 <UART_SetConfig+0x850>
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	db75      	blt.n	8005cc2 <UART_SetConfig+0x8b2>
 8005bd6:	3b02      	subs	r3, #2
 8005bd8:	2b1e      	cmp	r3, #30
 8005bda:	d872      	bhi.n	8005cc2 <UART_SetConfig+0x8b2>
 8005bdc:	a201      	add	r2, pc, #4	; (adr r2, 8005be4 <UART_SetConfig+0x7d4>)
 8005bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be2:	bf00      	nop
 8005be4:	08005c67 	.word	0x08005c67
 8005be8:	08005cc3 	.word	0x08005cc3
 8005bec:	08005c6f 	.word	0x08005c6f
 8005bf0:	08005cc3 	.word	0x08005cc3
 8005bf4:	08005cc3 	.word	0x08005cc3
 8005bf8:	08005cc3 	.word	0x08005cc3
 8005bfc:	08005c7f 	.word	0x08005c7f
 8005c00:	08005cc3 	.word	0x08005cc3
 8005c04:	08005cc3 	.word	0x08005cc3
 8005c08:	08005cc3 	.word	0x08005cc3
 8005c0c:	08005cc3 	.word	0x08005cc3
 8005c10:	08005cc3 	.word	0x08005cc3
 8005c14:	08005cc3 	.word	0x08005cc3
 8005c18:	08005cc3 	.word	0x08005cc3
 8005c1c:	08005c8f 	.word	0x08005c8f
 8005c20:	08005cc3 	.word	0x08005cc3
 8005c24:	08005cc3 	.word	0x08005cc3
 8005c28:	08005cc3 	.word	0x08005cc3
 8005c2c:	08005cc3 	.word	0x08005cc3
 8005c30:	08005cc3 	.word	0x08005cc3
 8005c34:	08005cc3 	.word	0x08005cc3
 8005c38:	08005cc3 	.word	0x08005cc3
 8005c3c:	08005cc3 	.word	0x08005cc3
 8005c40:	08005cc3 	.word	0x08005cc3
 8005c44:	08005cc3 	.word	0x08005cc3
 8005c48:	08005cc3 	.word	0x08005cc3
 8005c4c:	08005cc3 	.word	0x08005cc3
 8005c50:	08005cc3 	.word	0x08005cc3
 8005c54:	08005cc3 	.word	0x08005cc3
 8005c58:	08005cc3 	.word	0x08005cc3
 8005c5c:	08005cb5 	.word	0x08005cb5
 8005c60:	2b40      	cmp	r3, #64	; 0x40
 8005c62:	d02a      	beq.n	8005cba <UART_SetConfig+0x8aa>
 8005c64:	e02d      	b.n	8005cc2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005c66:	f7fe fb45 	bl	80042f4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005c6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c6c:	e02f      	b.n	8005cce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fe fb54 	bl	8004320 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c7c:	e027      	b.n	8005cce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c7e:	f107 0318 	add.w	r3, r7, #24
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fe fca0 	bl	80045c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c8c:	e01f      	b.n	8005cce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c8e:	4b21      	ldr	r3, [pc, #132]	; (8005d14 <UART_SetConfig+0x904>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d009      	beq.n	8005cae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c9a:	4b1e      	ldr	r3, [pc, #120]	; (8005d14 <UART_SetConfig+0x904>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	08db      	lsrs	r3, r3, #3
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	4a1d      	ldr	r2, [pc, #116]	; (8005d1c <UART_SetConfig+0x90c>)
 8005ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8005caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cac:	e00f      	b.n	8005cce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005cae:	4b1b      	ldr	r3, [pc, #108]	; (8005d1c <UART_SetConfig+0x90c>)
 8005cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cb2:	e00c      	b.n	8005cce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cb4:	4b1a      	ldr	r3, [pc, #104]	; (8005d20 <UART_SetConfig+0x910>)
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cb8:	e009      	b.n	8005cce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cc0:	e005      	b.n	8005cce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005ccc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 81ee 	beq.w	80060b2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	4a12      	ldr	r2, [pc, #72]	; (8005d24 <UART_SetConfig+0x914>)
 8005cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ce8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	4413      	add	r3, r2
 8005cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d305      	bcc.n	8005d06 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d910      	bls.n	8005d28 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d0c:	e1d1      	b.n	80060b2 <UART_SetConfig+0xca2>
 8005d0e:	bf00      	nop
 8005d10:	40011c00 	.word	0x40011c00
 8005d14:	58024400 	.word	0x58024400
 8005d18:	58000c00 	.word	0x58000c00
 8005d1c:	03d09000 	.word	0x03d09000
 8005d20:	003d0900 	.word	0x003d0900
 8005d24:	080097a4 	.word	0x080097a4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	60bb      	str	r3, [r7, #8]
 8005d2e:	60fa      	str	r2, [r7, #12]
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	4ac0      	ldr	r2, [pc, #768]	; (8006038 <UART_SetConfig+0xc28>)
 8005d36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	607a      	str	r2, [r7, #4]
 8005d42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d4a:	f7fa facf 	bl	80002ec <__aeabi_uldivmod>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4610      	mov	r0, r2
 8005d54:	4619      	mov	r1, r3
 8005d56:	f04f 0200 	mov.w	r2, #0
 8005d5a:	f04f 0300 	mov.w	r3, #0
 8005d5e:	020b      	lsls	r3, r1, #8
 8005d60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d64:	0202      	lsls	r2, r0, #8
 8005d66:	6979      	ldr	r1, [r7, #20]
 8005d68:	6849      	ldr	r1, [r1, #4]
 8005d6a:	0849      	lsrs	r1, r1, #1
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	4605      	mov	r5, r0
 8005d72:	eb12 0804 	adds.w	r8, r2, r4
 8005d76:	eb43 0905 	adc.w	r9, r3, r5
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	469a      	mov	sl, r3
 8005d82:	4693      	mov	fp, r2
 8005d84:	4652      	mov	r2, sl
 8005d86:	465b      	mov	r3, fp
 8005d88:	4640      	mov	r0, r8
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	f7fa faae 	bl	80002ec <__aeabi_uldivmod>
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	4613      	mov	r3, r2
 8005d96:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d9e:	d308      	bcc.n	8005db2 <UART_SetConfig+0x9a2>
 8005da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005da6:	d204      	bcs.n	8005db2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dae:	60da      	str	r2, [r3, #12]
 8005db0:	e17f      	b.n	80060b2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005db8:	e17b      	b.n	80060b2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc2:	f040 80bd 	bne.w	8005f40 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005dc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	dc48      	bgt.n	8005e60 <UART_SetConfig+0xa50>
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	db7b      	blt.n	8005eca <UART_SetConfig+0xaba>
 8005dd2:	2b20      	cmp	r3, #32
 8005dd4:	d879      	bhi.n	8005eca <UART_SetConfig+0xaba>
 8005dd6:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <UART_SetConfig+0x9cc>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005e67 	.word	0x08005e67
 8005de0:	08005e6f 	.word	0x08005e6f
 8005de4:	08005ecb 	.word	0x08005ecb
 8005de8:	08005ecb 	.word	0x08005ecb
 8005dec:	08005e77 	.word	0x08005e77
 8005df0:	08005ecb 	.word	0x08005ecb
 8005df4:	08005ecb 	.word	0x08005ecb
 8005df8:	08005ecb 	.word	0x08005ecb
 8005dfc:	08005e87 	.word	0x08005e87
 8005e00:	08005ecb 	.word	0x08005ecb
 8005e04:	08005ecb 	.word	0x08005ecb
 8005e08:	08005ecb 	.word	0x08005ecb
 8005e0c:	08005ecb 	.word	0x08005ecb
 8005e10:	08005ecb 	.word	0x08005ecb
 8005e14:	08005ecb 	.word	0x08005ecb
 8005e18:	08005ecb 	.word	0x08005ecb
 8005e1c:	08005e97 	.word	0x08005e97
 8005e20:	08005ecb 	.word	0x08005ecb
 8005e24:	08005ecb 	.word	0x08005ecb
 8005e28:	08005ecb 	.word	0x08005ecb
 8005e2c:	08005ecb 	.word	0x08005ecb
 8005e30:	08005ecb 	.word	0x08005ecb
 8005e34:	08005ecb 	.word	0x08005ecb
 8005e38:	08005ecb 	.word	0x08005ecb
 8005e3c:	08005ecb 	.word	0x08005ecb
 8005e40:	08005ecb 	.word	0x08005ecb
 8005e44:	08005ecb 	.word	0x08005ecb
 8005e48:	08005ecb 	.word	0x08005ecb
 8005e4c:	08005ecb 	.word	0x08005ecb
 8005e50:	08005ecb 	.word	0x08005ecb
 8005e54:	08005ecb 	.word	0x08005ecb
 8005e58:	08005ecb 	.word	0x08005ecb
 8005e5c:	08005ebd 	.word	0x08005ebd
 8005e60:	2b40      	cmp	r3, #64	; 0x40
 8005e62:	d02e      	beq.n	8005ec2 <UART_SetConfig+0xab2>
 8005e64:	e031      	b.n	8005eca <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e66:	f7fd f85b 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 8005e6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e6c:	e033      	b.n	8005ed6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e6e:	f7fd f86d 	bl	8002f4c <HAL_RCC_GetPCLK2Freq>
 8005e72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e74:	e02f      	b.n	8005ed6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fe fa50 	bl	8004320 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e84:	e027      	b.n	8005ed6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e86:	f107 0318 	add.w	r3, r7, #24
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fe fb9c 	bl	80045c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e94:	e01f      	b.n	8005ed6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e96:	4b69      	ldr	r3, [pc, #420]	; (800603c <UART_SetConfig+0xc2c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d009      	beq.n	8005eb6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ea2:	4b66      	ldr	r3, [pc, #408]	; (800603c <UART_SetConfig+0xc2c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	08db      	lsrs	r3, r3, #3
 8005ea8:	f003 0303 	and.w	r3, r3, #3
 8005eac:	4a64      	ldr	r2, [pc, #400]	; (8006040 <UART_SetConfig+0xc30>)
 8005eae:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005eb4:	e00f      	b.n	8005ed6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005eb6:	4b62      	ldr	r3, [pc, #392]	; (8006040 <UART_SetConfig+0xc30>)
 8005eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eba:	e00c      	b.n	8005ed6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ebc:	4b61      	ldr	r3, [pc, #388]	; (8006044 <UART_SetConfig+0xc34>)
 8005ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ec0:	e009      	b.n	8005ed6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ec8:	e005      	b.n	8005ed6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005ed4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 80ea 	beq.w	80060b2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	4a55      	ldr	r2, [pc, #340]	; (8006038 <UART_SetConfig+0xc28>)
 8005ee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ef0:	005a      	lsls	r2, r3, #1
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	085b      	lsrs	r3, r3, #1
 8005ef8:	441a      	add	r2, r3
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f02:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f06:	2b0f      	cmp	r3, #15
 8005f08:	d916      	bls.n	8005f38 <UART_SetConfig+0xb28>
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f10:	d212      	bcs.n	8005f38 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	f023 030f 	bic.w	r3, r3, #15
 8005f1a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005f34:	60da      	str	r2, [r3, #12]
 8005f36:	e0bc      	b.n	80060b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005f3e:	e0b8      	b.n	80060b2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f40:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005f44:	2b20      	cmp	r3, #32
 8005f46:	dc4b      	bgt.n	8005fe0 <UART_SetConfig+0xbd0>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f2c0 8087 	blt.w	800605c <UART_SetConfig+0xc4c>
 8005f4e:	2b20      	cmp	r3, #32
 8005f50:	f200 8084 	bhi.w	800605c <UART_SetConfig+0xc4c>
 8005f54:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <UART_SetConfig+0xb4c>)
 8005f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5a:	bf00      	nop
 8005f5c:	08005fe7 	.word	0x08005fe7
 8005f60:	08005fef 	.word	0x08005fef
 8005f64:	0800605d 	.word	0x0800605d
 8005f68:	0800605d 	.word	0x0800605d
 8005f6c:	08005ff7 	.word	0x08005ff7
 8005f70:	0800605d 	.word	0x0800605d
 8005f74:	0800605d 	.word	0x0800605d
 8005f78:	0800605d 	.word	0x0800605d
 8005f7c:	08006007 	.word	0x08006007
 8005f80:	0800605d 	.word	0x0800605d
 8005f84:	0800605d 	.word	0x0800605d
 8005f88:	0800605d 	.word	0x0800605d
 8005f8c:	0800605d 	.word	0x0800605d
 8005f90:	0800605d 	.word	0x0800605d
 8005f94:	0800605d 	.word	0x0800605d
 8005f98:	0800605d 	.word	0x0800605d
 8005f9c:	08006017 	.word	0x08006017
 8005fa0:	0800605d 	.word	0x0800605d
 8005fa4:	0800605d 	.word	0x0800605d
 8005fa8:	0800605d 	.word	0x0800605d
 8005fac:	0800605d 	.word	0x0800605d
 8005fb0:	0800605d 	.word	0x0800605d
 8005fb4:	0800605d 	.word	0x0800605d
 8005fb8:	0800605d 	.word	0x0800605d
 8005fbc:	0800605d 	.word	0x0800605d
 8005fc0:	0800605d 	.word	0x0800605d
 8005fc4:	0800605d 	.word	0x0800605d
 8005fc8:	0800605d 	.word	0x0800605d
 8005fcc:	0800605d 	.word	0x0800605d
 8005fd0:	0800605d 	.word	0x0800605d
 8005fd4:	0800605d 	.word	0x0800605d
 8005fd8:	0800605d 	.word	0x0800605d
 8005fdc:	0800604f 	.word	0x0800604f
 8005fe0:	2b40      	cmp	r3, #64	; 0x40
 8005fe2:	d037      	beq.n	8006054 <UART_SetConfig+0xc44>
 8005fe4:	e03a      	b.n	800605c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fe6:	f7fc ff9b 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 8005fea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005fec:	e03c      	b.n	8006068 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fee:	f7fc ffad 	bl	8002f4c <HAL_RCC_GetPCLK2Freq>
 8005ff2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ff4:	e038      	b.n	8006068 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe f990 	bl	8004320 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006004:	e030      	b.n	8006068 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006006:	f107 0318 	add.w	r3, r7, #24
 800600a:	4618      	mov	r0, r3
 800600c:	f7fe fadc 	bl	80045c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006014:	e028      	b.n	8006068 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006016:	4b09      	ldr	r3, [pc, #36]	; (800603c <UART_SetConfig+0xc2c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	d012      	beq.n	8006048 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006022:	4b06      	ldr	r3, [pc, #24]	; (800603c <UART_SetConfig+0xc2c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	08db      	lsrs	r3, r3, #3
 8006028:	f003 0303 	and.w	r3, r3, #3
 800602c:	4a04      	ldr	r2, [pc, #16]	; (8006040 <UART_SetConfig+0xc30>)
 800602e:	fa22 f303 	lsr.w	r3, r2, r3
 8006032:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006034:	e018      	b.n	8006068 <UART_SetConfig+0xc58>
 8006036:	bf00      	nop
 8006038:	080097a4 	.word	0x080097a4
 800603c:	58024400 	.word	0x58024400
 8006040:	03d09000 	.word	0x03d09000
 8006044:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006048:	4b24      	ldr	r3, [pc, #144]	; (80060dc <UART_SetConfig+0xccc>)
 800604a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800604c:	e00c      	b.n	8006068 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800604e:	4b24      	ldr	r3, [pc, #144]	; (80060e0 <UART_SetConfig+0xcd0>)
 8006050:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006052:	e009      	b.n	8006068 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006054:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006058:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800605a:	e005      	b.n	8006068 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006066:	bf00      	nop
    }

    if (pclk != 0U)
 8006068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d021      	beq.n	80060b2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	4a1c      	ldr	r2, [pc, #112]	; (80060e4 <UART_SetConfig+0xcd4>)
 8006074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006078:	461a      	mov	r2, r3
 800607a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	085b      	lsrs	r3, r3, #1
 8006086:	441a      	add	r2, r3
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006090:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	2b0f      	cmp	r3, #15
 8006096:	d909      	bls.n	80060ac <UART_SetConfig+0xc9c>
 8006098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800609e:	d205      	bcs.n	80060ac <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	60da      	str	r2, [r3, #12]
 80060aa:	e002      	b.n	80060b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2201      	movs	r2, #1
 80060be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2200      	movs	r2, #0
 80060c6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2200      	movs	r2, #0
 80060cc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80060ce:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3748      	adds	r7, #72	; 0x48
 80060d6:	46bd      	mov	sp, r7
 80060d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060dc:	03d09000 	.word	0x03d09000
 80060e0:	003d0900 	.word	0x003d0900
 80060e4:	080097a4 	.word	0x080097a4

080060e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00a      	beq.n	8006112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00a      	beq.n	8006156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617c:	f003 0310 	and.w	r3, r3, #16
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00a      	beq.n	800619a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01a      	beq.n	80061fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061e6:	d10a      	bne.n	80061fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	605a      	str	r2, [r3, #4]
  }
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b098      	sub	sp, #96	; 0x60
 8006230:	af02      	add	r7, sp, #8
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800623c:	f7fa fe3a 	bl	8000eb4 <HAL_GetTick>
 8006240:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b08      	cmp	r3, #8
 800624e:	d12f      	bne.n	80062b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006258:	2200      	movs	r2, #0
 800625a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f88e 	bl	8006380 <UART_WaitOnFlagUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d022      	beq.n	80062b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006272:	e853 3f00 	ldrex	r3, [r3]
 8006276:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800627e:	653b      	str	r3, [r7, #80]	; 0x50
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006288:	647b      	str	r3, [r7, #68]	; 0x44
 800628a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800628e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006290:	e841 2300 	strex	r3, r2, [r1]
 8006294:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1e6      	bne.n	800626a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2220      	movs	r2, #32
 80062a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e063      	b.n	8006378 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d149      	bne.n	8006352 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062c6:	2200      	movs	r2, #0
 80062c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f857 	bl	8006380 <UART_WaitOnFlagUntilTimeout>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d03c      	beq.n	8006352 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	623b      	str	r3, [r7, #32]
   return(result);
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f6:	633b      	str	r3, [r7, #48]	; 0x30
 80062f8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e6      	bne.n	80062d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3308      	adds	r3, #8
 8006310:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	60fb      	str	r3, [r7, #12]
   return(result);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f023 0301 	bic.w	r3, r3, #1
 8006320:	64bb      	str	r3, [r7, #72]	; 0x48
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3308      	adds	r3, #8
 8006328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800632a:	61fa      	str	r2, [r7, #28]
 800632c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	69b9      	ldr	r1, [r7, #24]
 8006330:	69fa      	ldr	r2, [r7, #28]
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	617b      	str	r3, [r7, #20]
   return(result);
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e5      	bne.n	800630a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e012      	b.n	8006378 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2220      	movs	r2, #32
 8006356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3758      	adds	r7, #88	; 0x58
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	4613      	mov	r3, r2
 800638e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006390:	e049      	b.n	8006426 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006398:	d045      	beq.n	8006426 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800639a:	f7fa fd8b 	bl	8000eb4 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d302      	bcc.n	80063b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e048      	b.n	8006446 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0304 	and.w	r3, r3, #4
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d031      	beq.n	8006426 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	f003 0308 	and.w	r3, r3, #8
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d110      	bne.n	80063f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2208      	movs	r2, #8
 80063d6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 f95b 	bl	8006694 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2208      	movs	r2, #8
 80063e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e029      	b.n	8006446 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006400:	d111      	bne.n	8006426 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800640a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 f941 	bl	8006694 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2220      	movs	r2, #32
 8006416:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e00f      	b.n	8006446 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69da      	ldr	r2, [r3, #28]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4013      	ands	r3, r2
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	429a      	cmp	r2, r3
 8006434:	bf0c      	ite	eq
 8006436:	2301      	moveq	r3, #1
 8006438:	2300      	movne	r3, #0
 800643a:	b2db      	uxtb	r3, r3
 800643c:	461a      	mov	r2, r3
 800643e:	79fb      	ldrb	r3, [r7, #7]
 8006440:	429a      	cmp	r2, r3
 8006442:	d0a6      	beq.n	8006392 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006450:	b480      	push	{r7}
 8006452:	b0a3      	sub	sp, #140	; 0x8c
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	4613      	mov	r3, r2
 800645c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	88fa      	ldrh	r2, [r7, #6]
 8006468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	88fa      	ldrh	r2, [r7, #6]
 8006470:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006482:	d10e      	bne.n	80064a2 <UART_Start_Receive_IT+0x52>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d105      	bne.n	8006498 <UART_Start_Receive_IT+0x48>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006492:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006496:	e02d      	b.n	80064f4 <UART_Start_Receive_IT+0xa4>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	22ff      	movs	r2, #255	; 0xff
 800649c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064a0:	e028      	b.n	80064f4 <UART_Start_Receive_IT+0xa4>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10d      	bne.n	80064c6 <UART_Start_Receive_IT+0x76>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d104      	bne.n	80064bc <UART_Start_Receive_IT+0x6c>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	22ff      	movs	r2, #255	; 0xff
 80064b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064ba:	e01b      	b.n	80064f4 <UART_Start_Receive_IT+0xa4>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	227f      	movs	r2, #127	; 0x7f
 80064c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064c4:	e016      	b.n	80064f4 <UART_Start_Receive_IT+0xa4>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064ce:	d10d      	bne.n	80064ec <UART_Start_Receive_IT+0x9c>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d104      	bne.n	80064e2 <UART_Start_Receive_IT+0x92>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	227f      	movs	r2, #127	; 0x7f
 80064dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064e0:	e008      	b.n	80064f4 <UART_Start_Receive_IT+0xa4>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	223f      	movs	r2, #63	; 0x3f
 80064e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064ea:	e003      	b.n	80064f4 <UART_Start_Receive_IT+0xa4>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2222      	movs	r2, #34	; 0x22
 8006500:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3308      	adds	r3, #8
 800650a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800650e:	e853 3f00 	ldrex	r3, [r3]
 8006512:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006514:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006516:	f043 0301 	orr.w	r3, r3, #1
 800651a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3308      	adds	r3, #8
 8006524:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006528:	673a      	str	r2, [r7, #112]	; 0x70
 800652a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800652e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006530:	e841 2300 	strex	r3, r2, [r1]
 8006534:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006536:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1e3      	bne.n	8006504 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006544:	d14f      	bne.n	80065e6 <UART_Start_Receive_IT+0x196>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800654c:	88fa      	ldrh	r2, [r7, #6]
 800654e:	429a      	cmp	r2, r3
 8006550:	d349      	bcc.n	80065e6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655a:	d107      	bne.n	800656c <UART_Start_Receive_IT+0x11c>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d103      	bne.n	800656c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4a47      	ldr	r2, [pc, #284]	; (8006684 <UART_Start_Receive_IT+0x234>)
 8006568:	675a      	str	r2, [r3, #116]	; 0x74
 800656a:	e002      	b.n	8006572 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4a46      	ldr	r2, [pc, #280]	; (8006688 <UART_Start_Receive_IT+0x238>)
 8006570:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d01a      	beq.n	80065b0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800658a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800658e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800659c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800659e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e4      	bne.n	800657a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3308      	adds	r3, #8
 80065b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3308      	adds	r3, #8
 80065ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80065d0:	64ba      	str	r2, [r7, #72]	; 0x48
 80065d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e5      	bne.n	80065b0 <UART_Start_Receive_IT+0x160>
 80065e4:	e046      	b.n	8006674 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ee:	d107      	bne.n	8006600 <UART_Start_Receive_IT+0x1b0>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d103      	bne.n	8006600 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4a24      	ldr	r2, [pc, #144]	; (800668c <UART_Start_Receive_IT+0x23c>)
 80065fc:	675a      	str	r2, [r3, #116]	; 0x74
 80065fe:	e002      	b.n	8006606 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4a23      	ldr	r2, [pc, #140]	; (8006690 <UART_Start_Receive_IT+0x240>)
 8006604:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d019      	beq.n	8006642 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006622:	677b      	str	r3, [r7, #116]	; 0x74
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800662c:	637b      	str	r3, [r7, #52]	; 0x34
 800662e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006634:	e841 2300 	strex	r3, r2, [r1]
 8006638:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e6      	bne.n	800660e <UART_Start_Receive_IT+0x1be>
 8006640:	e018      	b.n	8006674 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	e853 3f00 	ldrex	r3, [r3]
 800664e:	613b      	str	r3, [r7, #16]
   return(result);
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f043 0320 	orr.w	r3, r3, #32
 8006656:	67bb      	str	r3, [r7, #120]	; 0x78
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
 800665e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006660:	623b      	str	r3, [r7, #32]
 8006662:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	69f9      	ldr	r1, [r7, #28]
 8006666:	6a3a      	ldr	r2, [r7, #32]
 8006668:	e841 2300 	strex	r3, r2, [r1]
 800666c:	61bb      	str	r3, [r7, #24]
   return(result);
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e6      	bne.n	8006642 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	378c      	adds	r7, #140	; 0x8c
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	08006eb5 	.word	0x08006eb5
 8006688:	08006b55 	.word	0x08006b55
 800668c:	0800699d 	.word	0x0800699d
 8006690:	080067e5 	.word	0x080067e5

08006694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006694:	b480      	push	{r7}
 8006696:	b095      	sub	sp, #84	; 0x54
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ba:	643b      	str	r3, [r7, #64]	; 0x40
 80066bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e6      	bne.n	800669c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3308      	adds	r3, #8
 80066d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80066de:	69fa      	ldr	r2, [r7, #28]
 80066e0:	4b1e      	ldr	r3, [pc, #120]	; (800675c <UART_EndRxTransfer+0xc8>)
 80066e2:	4013      	ands	r3, r2
 80066e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3308      	adds	r3, #8
 80066ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e5      	bne.n	80066ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006706:	2b01      	cmp	r3, #1
 8006708:	d118      	bne.n	800673c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	e853 3f00 	ldrex	r3, [r3]
 8006716:	60bb      	str	r3, [r7, #8]
   return(result);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f023 0310 	bic.w	r3, r3, #16
 800671e:	647b      	str	r3, [r7, #68]	; 0x44
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006728:	61bb      	str	r3, [r7, #24]
 800672a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	6979      	ldr	r1, [r7, #20]
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	e841 2300 	strex	r3, r2, [r1]
 8006734:	613b      	str	r3, [r7, #16]
   return(result);
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e6      	bne.n	800670a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2220      	movs	r2, #32
 8006740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006750:	bf00      	nop
 8006752:	3754      	adds	r7, #84	; 0x54
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	effffffe 	.word	0xeffffffe

08006760 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f7f9 ff60 	bl	8000644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006784:	bf00      	nop
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067a8:	61fb      	str	r3, [r7, #28]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	61bb      	str	r3, [r7, #24]
 80067b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	6979      	ldr	r1, [r7, #20]
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	613b      	str	r3, [r7, #16]
   return(result);
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1e6      	bne.n	8006794 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7fe fe05 	bl	80053e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067da:	bf00      	nop
 80067dc:	3720      	adds	r7, #32
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b09c      	sub	sp, #112	; 0x70
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067f2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067fc:	2b22      	cmp	r3, #34	; 0x22
 80067fe:	f040 80be 	bne.w	800697e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800680c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006810:	b2d9      	uxtb	r1, r3
 8006812:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006816:	b2da      	uxtb	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681c:	400a      	ands	r2, r1
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006832:	b29b      	uxth	r3, r3
 8006834:	3b01      	subs	r3, #1
 8006836:	b29a      	uxth	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006844:	b29b      	uxth	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	f040 80a1 	bne.w	800698e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800685a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800685c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006860:	66bb      	str	r3, [r7, #104]	; 0x68
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800686a:	65bb      	str	r3, [r7, #88]	; 0x58
 800686c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006870:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e6      	bne.n	800684c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3308      	adds	r3, #8
 8006884:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800688e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006890:	f023 0301 	bic.w	r3, r3, #1
 8006894:	667b      	str	r3, [r7, #100]	; 0x64
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3308      	adds	r3, #8
 800689c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800689e:	647a      	str	r2, [r7, #68]	; 0x44
 80068a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e5      	bne.n	800687e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a33      	ldr	r2, [pc, #204]	; (8006998 <UART_RxISR_8BIT+0x1b4>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d01f      	beq.n	8006910 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d018      	beq.n	8006910 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	e853 3f00 	ldrex	r3, [r3]
 80068ea:	623b      	str	r3, [r7, #32]
   return(result);
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068f2:	663b      	str	r3, [r7, #96]	; 0x60
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	461a      	mov	r2, r3
 80068fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068fc:	633b      	str	r3, [r7, #48]	; 0x30
 80068fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006900:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006904:	e841 2300 	strex	r3, r2, [r1]
 8006908:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e6      	bne.n	80068de <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006914:	2b01      	cmp	r3, #1
 8006916:	d12e      	bne.n	8006976 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	e853 3f00 	ldrex	r3, [r3]
 800692a:	60fb      	str	r3, [r7, #12]
   return(result);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 0310 	bic.w	r3, r3, #16
 8006932:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800693c:	61fb      	str	r3, [r7, #28]
 800693e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	69b9      	ldr	r1, [r7, #24]
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	e841 2300 	strex	r3, r2, [r1]
 8006948:	617b      	str	r3, [r7, #20]
   return(result);
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e6      	bne.n	800691e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f003 0310 	and.w	r3, r3, #16
 800695a:	2b10      	cmp	r3, #16
 800695c:	d103      	bne.n	8006966 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2210      	movs	r2, #16
 8006964:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7fe fd42 	bl	80053f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006974:	e00b      	b.n	800698e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7f9 fe36 	bl	80005e8 <HAL_UART_RxCpltCallback>
}
 800697c:	e007      	b.n	800698e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	699a      	ldr	r2, [r3, #24]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f042 0208 	orr.w	r2, r2, #8
 800698c:	619a      	str	r2, [r3, #24]
}
 800698e:	bf00      	nop
 8006990:	3770      	adds	r7, #112	; 0x70
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	58000c00 	.word	0x58000c00

0800699c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b09c      	sub	sp, #112	; 0x70
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80069aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069b4:	2b22      	cmp	r3, #34	; 0x22
 80069b6:	f040 80be 	bne.w	8006b36 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80069ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80069ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80069d2:	4013      	ands	r3, r2
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069de:	1c9a      	adds	r2, r3, #2
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	3b01      	subs	r3, #1
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f040 80a1 	bne.w	8006b46 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a18:	667b      	str	r3, [r7, #100]	; 0x64
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a22:	657b      	str	r3, [r7, #84]	; 0x54
 8006a24:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e6      	bne.n	8006a04 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	f023 0301 	bic.w	r3, r3, #1
 8006a4c:	663b      	str	r3, [r7, #96]	; 0x60
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3308      	adds	r3, #8
 8006a54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a56:	643a      	str	r2, [r7, #64]	; 0x40
 8006a58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e5      	bne.n	8006a36 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a33      	ldr	r2, [pc, #204]	; (8006b50 <UART_RxISR_16BIT+0x1b4>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d01f      	beq.n	8006ac8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d018      	beq.n	8006ac8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ab6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e6      	bne.n	8006a96 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d12e      	bne.n	8006b2e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	f023 0310 	bic.w	r3, r3, #16
 8006aea:	65bb      	str	r3, [r7, #88]	; 0x58
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006af4:	61bb      	str	r3, [r7, #24]
 8006af6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	6979      	ldr	r1, [r7, #20]
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	613b      	str	r3, [r7, #16]
   return(result);
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e6      	bne.n	8006ad6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	f003 0310 	and.w	r3, r3, #16
 8006b12:	2b10      	cmp	r3, #16
 8006b14:	d103      	bne.n	8006b1e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2210      	movs	r2, #16
 8006b1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7fe fc66 	bl	80053f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b2c:	e00b      	b.n	8006b46 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7f9 fd5a 	bl	80005e8 <HAL_UART_RxCpltCallback>
}
 8006b34:	e007      	b.n	8006b46 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	699a      	ldr	r2, [r3, #24]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f042 0208 	orr.w	r2, r2, #8
 8006b44:	619a      	str	r2, [r3, #24]
}
 8006b46:	bf00      	nop
 8006b48:	3770      	adds	r7, #112	; 0x70
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	58000c00 	.word	0x58000c00

08006b54 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b0ac      	sub	sp, #176	; 0xb0
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b62:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8a:	2b22      	cmp	r3, #34	; 0x22
 8006b8c:	f040 8180 	bne.w	8006e90 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b96:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b9a:	e123      	b.n	8006de4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ba6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006baa:	b2d9      	uxtb	r1, r3
 8006bac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb6:	400a      	ands	r2, r1
 8006bb8:	b2d2      	uxtb	r2, r2
 8006bba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006be2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d053      	beq.n	8006c96 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d011      	beq.n	8006c1e <UART_RxISR_8BIT_FIFOEN+0xca>
 8006bfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00b      	beq.n	8006c1e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c14:	f043 0201 	orr.w	r2, r3, #1
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d011      	beq.n	8006c4e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006c2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00b      	beq.n	8006c4e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c44:	f043 0204 	orr.w	r2, r3, #4
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c52:	f003 0304 	and.w	r3, r3, #4
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d011      	beq.n	8006c7e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00b      	beq.n	8006c7e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c74:	f043 0202 	orr.w	r2, r3, #2
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d006      	beq.n	8006c96 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7f9 fcdb 	bl	8000644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f040 80a0 	bne.w	8006de4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cc8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006ccc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006cd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e4      	bne.n	8006ca4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3308      	adds	r3, #8
 8006ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ce4:	e853 3f00 	ldrex	r3, [r3]
 8006ce8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006cea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cec:	4b6e      	ldr	r3, [pc, #440]	; (8006ea8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8006cee:	4013      	ands	r3, r2
 8006cf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3308      	adds	r3, #8
 8006cfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cfe:	66ba      	str	r2, [r7, #104]	; 0x68
 8006d00:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d02:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006d04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d06:	e841 2300 	strex	r3, r2, [r1]
 8006d0a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006d0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1e3      	bne.n	8006cda <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a60      	ldr	r2, [pc, #384]	; (8006eac <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d021      	beq.n	8006d74 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d01a      	beq.n	8006d74 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d46:	e853 3f00 	ldrex	r3, [r3]
 8006d4a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d60:	657b      	str	r3, [r7, #84]	; 0x54
 8006d62:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e4      	bne.n	8006d3e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d130      	bne.n	8006dde <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8a:	e853 3f00 	ldrex	r3, [r3]
 8006d8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	f023 0310 	bic.w	r3, r3, #16
 8006d96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006da4:	643b      	str	r3, [r7, #64]	; 0x40
 8006da6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006daa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dac:	e841 2300 	strex	r3, r2, [r1]
 8006db0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1e4      	bne.n	8006d82 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	f003 0310 	and.w	r3, r3, #16
 8006dc2:	2b10      	cmp	r3, #16
 8006dc4:	d103      	bne.n	8006dce <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2210      	movs	r2, #16
 8006dcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7fe fb0e 	bl	80053f8 <HAL_UARTEx_RxEventCallback>
 8006ddc:	e002      	b.n	8006de4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7f9 fc02 	bl	80005e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006de4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d006      	beq.n	8006dfa <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8006dec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f47f aed1 	bne.w	8006b9c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e00:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006e04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d049      	beq.n	8006ea0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e12:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d242      	bcs.n	8006ea0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3308      	adds	r3, #8
 8006e20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3308      	adds	r3, #8
 8006e3a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1e3      	bne.n	8006e1a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a16      	ldr	r2, [pc, #88]	; (8006eb0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006e56:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f043 0320 	orr.w	r3, r3, #32
 8006e6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	461a      	mov	r2, r3
 8006e76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e7a:	61bb      	str	r3, [r7, #24]
 8006e7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6979      	ldr	r1, [r7, #20]
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	613b      	str	r3, [r7, #16]
   return(result);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e4      	bne.n	8006e58 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e8e:	e007      	b.n	8006ea0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	699a      	ldr	r2, [r3, #24]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0208 	orr.w	r2, r2, #8
 8006e9e:	619a      	str	r2, [r3, #24]
}
 8006ea0:	bf00      	nop
 8006ea2:	37b0      	adds	r7, #176	; 0xb0
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	effffffe 	.word	0xeffffffe
 8006eac:	58000c00 	.word	0x58000c00
 8006eb0:	080067e5 	.word	0x080067e5

08006eb4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b0ae      	sub	sp, #184	; 0xb8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ec2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eea:	2b22      	cmp	r3, #34	; 0x22
 8006eec:	f040 8184 	bne.w	80071f8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ef6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006efa:	e127      	b.n	800714c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006f0e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006f12:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006f16:	4013      	ands	r3, r2
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f1e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f24:	1c9a      	adds	r2, r3, #2
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	3b01      	subs	r3, #1
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f4a:	f003 0307 	and.w	r3, r3, #7
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d053      	beq.n	8006ffa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d011      	beq.n	8006f82 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00b      	beq.n	8006f82 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f78:	f043 0201 	orr.w	r2, r3, #1
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d011      	beq.n	8006fb2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006f8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00b      	beq.n	8006fb2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa8:	f043 0204 	orr.w	r2, r3, #4
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fb6:	f003 0304 	and.w	r3, r3, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d011      	beq.n	8006fe2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006fbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00b      	beq.n	8006fe2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2204      	movs	r2, #4
 8006fd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd8:	f043 0202 	orr.w	r2, r3, #2
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d006      	beq.n	8006ffa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7f9 fb29 	bl	8000644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007000:	b29b      	uxth	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	f040 80a2 	bne.w	800714c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007010:	e853 3f00 	ldrex	r3, [r3]
 8007014:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007016:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800701c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	461a      	mov	r2, r3
 8007026:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800702a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800702e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007030:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007032:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800703c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e2      	bne.n	8007008 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3308      	adds	r3, #8
 8007048:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800704c:	e853 3f00 	ldrex	r3, [r3]
 8007050:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007052:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007054:	4b6e      	ldr	r3, [pc, #440]	; (8007210 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8007056:	4013      	ands	r3, r2
 8007058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3308      	adds	r3, #8
 8007062:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007066:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007068:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800706c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1e3      	bne.n	8007042 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2220      	movs	r2, #32
 800707e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a60      	ldr	r2, [pc, #384]	; (8007214 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d021      	beq.n	80070dc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d01a      	beq.n	80070dc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ae:	e853 3f00 	ldrex	r3, [r3]
 80070b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
 80070c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80070ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e4      	bne.n	80070a6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d130      	bne.n	8007146 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f2:	e853 3f00 	ldrex	r3, [r3]
 80070f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070fa:	f023 0310 	bic.w	r3, r3, #16
 80070fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800710c:	647b      	str	r3, [r7, #68]	; 0x44
 800710e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007110:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007114:	e841 2300 	strex	r3, r2, [r1]
 8007118:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800711a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e4      	bne.n	80070ea <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	f003 0310 	and.w	r3, r3, #16
 800712a:	2b10      	cmp	r3, #16
 800712c:	d103      	bne.n	8007136 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2210      	movs	r2, #16
 8007134:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7fe f95a 	bl	80053f8 <HAL_UARTEx_RxEventCallback>
 8007144:	e002      	b.n	800714c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7f9 fa4e 	bl	80005e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800714c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007150:	2b00      	cmp	r3, #0
 8007152:	d006      	beq.n	8007162 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8007154:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007158:	f003 0320 	and.w	r3, r3, #32
 800715c:	2b00      	cmp	r3, #0
 800715e:	f47f aecd 	bne.w	8006efc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007168:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800716c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007170:	2b00      	cmp	r3, #0
 8007172:	d049      	beq.n	8007208 <UART_RxISR_16BIT_FIFOEN+0x354>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800717a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800717e:	429a      	cmp	r2, r3
 8007180:	d242      	bcs.n	8007208 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3308      	adds	r3, #8
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	e853 3f00 	ldrex	r3, [r3]
 8007190:	623b      	str	r3, [r7, #32]
   return(result);
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3308      	adds	r3, #8
 80071a2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80071a6:	633a      	str	r2, [r7, #48]	; 0x30
 80071a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ae:	e841 2300 	strex	r3, r2, [r1]
 80071b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1e3      	bne.n	8007182 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a16      	ldr	r2, [pc, #88]	; (8007218 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80071be:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f043 0320 	orr.w	r3, r3, #32
 80071d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	461a      	mov	r2, r3
 80071de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071e2:	61fb      	str	r3, [r7, #28]
 80071e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	69b9      	ldr	r1, [r7, #24]
 80071e8:	69fa      	ldr	r2, [r7, #28]
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	617b      	str	r3, [r7, #20]
   return(result);
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e4      	bne.n	80071c0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071f6:	e007      	b.n	8007208 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699a      	ldr	r2, [r3, #24]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0208 	orr.w	r2, r2, #8
 8007206:	619a      	str	r2, [r3, #24]
}
 8007208:	bf00      	nop
 800720a:	37b8      	adds	r7, #184	; 0xb8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	effffffe 	.word	0xeffffffe
 8007214:	58000c00 	.word	0x58000c00
 8007218:	0800699d 	.word	0x0800699d

0800721c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007266:	2b01      	cmp	r3, #1
 8007268:	d101      	bne.n	800726e <HAL_UARTEx_DisableFifoMode+0x16>
 800726a:	2302      	movs	r3, #2
 800726c:	e027      	b.n	80072be <HAL_UARTEx_DisableFifoMode+0x66>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2224      	movs	r2, #36	; 0x24
 800727a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0201 	bic.w	r2, r2, #1
 8007294:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800729c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2220      	movs	r2, #32
 80072b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d101      	bne.n	80072e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072de:	2302      	movs	r3, #2
 80072e0:	e02d      	b.n	800733e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2224      	movs	r2, #36	; 0x24
 80072ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 0201 	bic.w	r2, r2, #1
 8007308:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	430a      	orrs	r2, r1
 800731c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f850 	bl	80073c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2220      	movs	r2, #32
 8007330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b084      	sub	sp, #16
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800735a:	2302      	movs	r3, #2
 800735c:	e02d      	b.n	80073ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2224      	movs	r2, #36	; 0x24
 800736a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 0201 	bic.w	r2, r2, #1
 8007384:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f812 	bl	80073c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2220      	movs	r2, #32
 80073ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d108      	bne.n	80073e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073e4:	e031      	b.n	800744a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073e6:	2310      	movs	r3, #16
 80073e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073ea:	2310      	movs	r3, #16
 80073ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	0e5b      	lsrs	r3, r3, #25
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	0f5b      	lsrs	r3, r3, #29
 8007406:	b2db      	uxtb	r3, r3
 8007408:	f003 0307 	and.w	r3, r3, #7
 800740c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	7b3a      	ldrb	r2, [r7, #12]
 8007412:	4911      	ldr	r1, [pc, #68]	; (8007458 <UARTEx_SetNbDataToProcess+0x94>)
 8007414:	5c8a      	ldrb	r2, [r1, r2]
 8007416:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800741a:	7b3a      	ldrb	r2, [r7, #12]
 800741c:	490f      	ldr	r1, [pc, #60]	; (800745c <UARTEx_SetNbDataToProcess+0x98>)
 800741e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007420:	fb93 f3f2 	sdiv	r3, r3, r2
 8007424:	b29a      	uxth	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800742c:	7bfb      	ldrb	r3, [r7, #15]
 800742e:	7b7a      	ldrb	r2, [r7, #13]
 8007430:	4909      	ldr	r1, [pc, #36]	; (8007458 <UARTEx_SetNbDataToProcess+0x94>)
 8007432:	5c8a      	ldrb	r2, [r1, r2]
 8007434:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007438:	7b7a      	ldrb	r2, [r7, #13]
 800743a:	4908      	ldr	r1, [pc, #32]	; (800745c <UARTEx_SetNbDataToProcess+0x98>)
 800743c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800743e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007442:	b29a      	uxth	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800744a:	bf00      	nop
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	080097bc 	.word	0x080097bc
 800745c:	080097c4 	.word	0x080097c4

08007460 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8007460:	b480      	push	{r7}
 8007462:	b08f      	sub	sp, #60	; 0x3c
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	891a      	ldrh	r2, [r3, #8]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	8a1b      	ldrh	r3, [r3, #16]
 8007472:	429a      	cmp	r2, r3
 8007474:	d301      	bcc.n	800747a <load_descriptor_values+0x1a>
        return false;
 8007476:	2300      	movs	r3, #0
 8007478:	e156      	b.n	8007728 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	895b      	ldrh	r3, [r3, #10]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	62fb      	str	r3, [r7, #44]	; 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 800748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748e:	0a1b      	lsrs	r3, r3, #8
 8007490:	b2da      	uxtb	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8007496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007498:	f003 0303 	and.w	r3, r3, #3
 800749c:	2b02      	cmp	r3, #2
 800749e:	d05a      	beq.n	8007556 <load_descriptor_values+0xf6>
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	f200 8094 	bhi.w	80075ce <load_descriptor_values+0x16e>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d002      	beq.n	80074b0 <load_descriptor_values+0x50>
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d01f      	beq.n	80074ee <load_descriptor_values+0x8e>
 80074ae:	e08e      	b.n	80075ce <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 80074b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b8:	089b      	lsrs	r3, r3, #2
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 80074c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c8:	0e1b      	lsrs	r3, r3, #24
 80074ca:	b25b      	sxtb	r3, r3
 80074cc:	f003 030f 	and.w	r3, r3, #15
 80074d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = (word0 >> 16) & 0xFF;
 80074d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d6:	0c1b      	lsrs	r3, r3, #16
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 80074dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074de:	0f1b      	lsrs	r3, r3, #28
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f003 030f 	and.w	r3, r3, #15
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	825a      	strh	r2, [r3, #18]
            break;
 80074ec:	e0b4      	b.n	8007658 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	895b      	ldrh	r3, [r3, #10]
 80074f8:	3301      	adds	r3, #1
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 8007502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007504:	0c1b      	lsrs	r3, r3, #16
 8007506:	b29b      	uxth	r3, r3
 8007508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800750c:	b29a      	uxth	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 8007512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007514:	089b      	lsrs	r3, r3, #2
 8007516:	b29b      	uxth	r3, r3
 8007518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800751c:	b29a      	uxth	r2, r3
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	0f1b      	lsrs	r3, r3, #28
 8007522:	b29b      	uxth	r3, r3
 8007524:	019b      	lsls	r3, r3, #6
 8007526:	b29b      	uxth	r3, r3
 8007528:	4313      	orrs	r3, r2
 800752a:	b29a      	uxth	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8007530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007532:	0f1b      	lsrs	r3, r3, #28
 8007534:	b25b      	sxtb	r3, r3
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word1 & 0xFFFF;
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	b29b      	uxth	r3, r3
 8007542:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	0c1b      	lsrs	r3, r3, #16
 8007548:	b29b      	uxth	r3, r3
 800754a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800754e:	b29a      	uxth	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	825a      	strh	r2, [r3, #18]
            break;
 8007554:	e080      	b.n	8007658 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	895b      	ldrh	r3, [r3, #10]
 8007560:	3301      	adds	r3, #1
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	62bb      	str	r3, [r7, #40]	; 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	895b      	ldrh	r3, [r3, #10]
 8007574:	3302      	adds	r3, #2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	895b      	ldrh	r3, [r3, #10]
 8007588:	3303      	adds	r3, #3
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 8007592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007594:	0c1b      	lsrs	r3, r3, #16
 8007596:	b29a      	uxth	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 800759c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759e:	089b      	lsrs	r3, r3, #2
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075aa:	0a1b      	lsrs	r3, r3, #8
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	019b      	lsls	r3, r3, #6
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	4313      	orrs	r3, r2
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 80075ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	825a      	strh	r2, [r3, #18]
            break;
 80075cc:	e044      	b.n	8007658 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	895b      	ldrh	r3, [r3, #10]
 80075d8:	3301      	adds	r3, #1
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4413      	add	r3, r2
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	895b      	ldrh	r3, [r3, #10]
 80075ec:	3302      	adds	r3, #2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	895b      	ldrh	r3, [r3, #10]
 8007600:	3303      	adds	r3, #3
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	895b      	ldrh	r3, [r3, #10]
 8007614:	3304      	adds	r3, #4
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	b29a      	uxth	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8007626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007628:	089b      	lsrs	r3, r3, #2
 800762a:	b29b      	uxth	r3, r3
 800762c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007630:	b29a      	uxth	r2, r3
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	0a1b      	lsrs	r3, r3, #8
 8007636:	b29b      	uxth	r3, r3
 8007638:	019b      	lsls	r3, r3, #6
 800763a:	b29b      	uxth	r3, r3
 800763c:	4313      	orrs	r3, r2
 800763e:	b29a      	uxth	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	b29a      	uxth	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	825a      	strh	r2, [r3, #18]
            break;
 8007656:	bf00      	nop
        }
    }

    if (!iter->message)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d106      	bne.n	800766e <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	621a      	str	r2, [r3, #32]
 800766c:	e041      	b.n	80076f2 <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007674:	441a      	add	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	619a      	str	r2, [r3, #24]

        if (size_offset)
 800767a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800767e:	2b00      	cmp	r3, #0
 8007680:	d008      	beq.n	8007694 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	699a      	ldr	r2, [r3, #24]
 8007686:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800768a:	425b      	negs	r3, r3
 800768c:	441a      	add	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	621a      	str	r2, [r3, #32]
 8007692:	e01a      	b.n	80076ca <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	7d9b      	ldrb	r3, [r3, #22]
 8007698:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800769c:	2b20      	cmp	r3, #32
 800769e:	d111      	bne.n	80076c4 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	7d9b      	ldrb	r3, [r3, #22]
 80076a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d005      	beq.n	80076b8 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	7d9b      	ldrb	r3, [r3, #22]
 80076b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 80076b4:	2b80      	cmp	r3, #128	; 0x80
 80076b6:	d105      	bne.n	80076c4 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f103 0214 	add.w	r2, r3, #20
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	621a      	str	r2, [r3, #32]
 80076c2:	e002      	b.n	80076ca <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	7d9b      	ldrb	r3, [r3, #22]
 80076ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076d2:	2b80      	cmp	r3, #128	; 0x80
 80076d4:	d109      	bne.n	80076ea <load_descriptor_values+0x28a>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d005      	beq.n	80076ea <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	61da      	str	r2, [r3, #28]
 80076e8:	e003      	b.n	80076f2 <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699a      	ldr	r2, [r3, #24]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	7d9b      	ldrb	r3, [r3, #22]
 80076f6:	f003 030f 	and.w	r3, r3, #15
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	d005      	beq.n	800770a <load_descriptor_values+0x2aa>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	7d9b      	ldrb	r3, [r3, #22]
 8007702:	f003 030f 	and.w	r3, r3, #15
 8007706:	2b09      	cmp	r3, #9
 8007708:	d10a      	bne.n	8007720 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	89db      	ldrh	r3, [r3, #14]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	625a      	str	r2, [r3, #36]	; 0x24
 800771e:	e002      	b.n	8007726 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 8007726:	2301      	movs	r3, #1
}
 8007728:	4618      	mov	r0, r3
 800772a:	373c      	adds	r7, #60	; 0x3c
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
    iter->index++;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	891b      	ldrh	r3, [r3, #8]
 8007740:	3301      	adds	r3, #1
 8007742:	b29a      	uxth	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	891a      	ldrh	r2, [r3, #8]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	8a1b      	ldrh	r3, [r3, #16]
 8007752:	429a      	cmp	r2, r3
 8007754:	d30c      	bcc.n	8007770 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 800776e:	e03c      	b.n	80077ea <advance_iterator+0xb6>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	895b      	ldrh	r3, [r3, #10]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	0a1b      	lsrs	r3, r3, #8
 8007786:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f003 0303 	and.w	r3, r3, #3
 800778e:	2201      	movs	r2, #1
 8007790:	fa02 f303 	lsl.w	r3, r2, r3
 8007794:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	895a      	ldrh	r2, [r3, #10]
 800779a:	893b      	ldrh	r3, [r7, #8]
 800779c:	4413      	add	r3, r2
 800779e:	b29a      	uxth	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	899a      	ldrh	r2, [r3, #12]
 80077a8:	7afb      	ldrb	r3, [r7, #11]
 80077aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	bf0c      	ite	eq
 80077b2:	2301      	moveq	r3, #1
 80077b4:	2300      	movne	r3, #0
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	4413      	add	r3, r2
 80077bc:	b29a      	uxth	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	89da      	ldrh	r2, [r3, #14]
 80077c6:	7afb      	ldrb	r3, [r7, #11]
 80077c8:	f003 030f 	and.w	r3, r3, #15
 80077cc:	2b08      	cmp	r3, #8
 80077ce:	d004      	beq.n	80077da <advance_iterator+0xa6>
 80077d0:	7afb      	ldrb	r3, [r7, #11]
 80077d2:	f003 030f 	and.w	r3, r3, #15
 80077d6:	2b09      	cmp	r3, #9
 80077d8:	d101      	bne.n	80077de <advance_iterator+0xaa>
 80077da:	2301      	movs	r3, #1
 80077dc:	e000      	b.n	80077e0 <advance_iterator+0xac>
 80077de:	2300      	movs	r3, #0
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	4413      	add	r3, r2
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	81da      	strh	r2, [r3, #14]
}
 80077ea:	bf00      	nop
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b084      	sub	sp, #16
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	60f8      	str	r0, [r7, #12]
 80077fe:	60b9      	str	r1, [r7, #8]
 8007800:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8007802:	2228      	movs	r2, #40	; 0x28
 8007804:	2100      	movs	r1, #0
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f001 fe9e 	bl	8009548 <memset>

    iter->descriptor = desc;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f7ff fe21 	bl	8007460 <load_descriptor_values>
 800781e:	4603      	mov	r3, r0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	0a1b      	lsrs	r3, r3, #8
 8007846:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800784a:	2b80      	cmp	r3, #128	; 0x80
 800784c:	d109      	bne.n	8007862 <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	3304      	adds	r3, #4
 8007852:	461a      	mov	r2, r3
 8007854:	6939      	ldr	r1, [r7, #16]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff ffcd 	bl	80077f6 <pb_field_iter_begin>
 800785c:	4603      	mov	r3, r0
 800785e:	75fb      	strb	r3, [r7, #23]
 8007860:	e008      	b.n	8007874 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	461a      	mov	r2, r3
 8007868:	6939      	ldr	r1, [r7, #16]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7ff ffc3 	bl	80077f6 <pb_field_iter_begin>
 8007870:	4603      	mov	r3, r0
 8007872:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	f103 020c 	add.w	r2, r3, #12
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	621a      	str	r2, [r3, #32]
    return status;
 800787e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7ff ff4f 	bl	8007734 <advance_iterator>
    (void)load_descriptor_values(iter);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7ff fde2 	bl	8007460 <load_descriptor_values>
    return iter->index != 0;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	891b      	ldrh	r3, [r3, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	bf14      	ite	ne
 80078a4:	2301      	movne	r3, #1
 80078a6:	2300      	moveq	r3, #0
 80078a8:	b2db      	uxtb	r3, r3
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	8a1b      	ldrh	r3, [r3, #16]
 80078c0:	461a      	mov	r2, r3
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d101      	bne.n	80078cc <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 80078c8:	2301      	movs	r3, #1
 80078ca:	e044      	b.n	8007956 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	8a9b      	ldrh	r3, [r3, #20]
 80078d2:	461a      	mov	r2, r3
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d901      	bls.n	80078de <pb_field_iter_find+0x2c>
    {
        return false;
 80078da:	2300      	movs	r3, #0
 80078dc:	e03b      	b.n	8007956 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	891b      	ldrh	r3, [r3, #8]
 80078e2:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	8a1b      	ldrh	r3, [r3, #16]
 80078e8:	461a      	mov	r2, r3
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d204      	bcs.n	80078fa <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	8a1a      	ldrh	r2, [r3, #16]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff ff1a 	bl	8007734 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	895b      	ldrh	r3, [r3, #10]
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	089a      	lsrs	r2, r3, #2
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	4053      	eors	r3, r2
 800791a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800791e:	2b00      	cmp	r3, #0
 8007920:	d110      	bne.n	8007944 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff fd9c 	bl	8007460 <load_descriptor_values>

                if (iter->tag == tag &&
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	8a1b      	ldrh	r3, [r3, #16]
 800792c:	461a      	mov	r2, r3
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	4293      	cmp	r3, r2
 8007932:	d107      	bne.n	8007944 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	7d9b      	ldrb	r3, [r3, #22]
 8007938:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 800793c:	2b0a      	cmp	r3, #10
 800793e:	d001      	beq.n	8007944 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 8007940:	2301      	movs	r3, #1
 8007942:	e008      	b.n	8007956 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	891b      	ldrh	r3, [r3, #8]
 8007948:	89fa      	ldrh	r2, [r7, #14]
 800794a:	429a      	cmp	r2, r3
 800794c:	d1d5      	bne.n	80078fa <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff fd86 	bl	8007460 <load_descriptor_values>
        return false;
 8007954:	2300      	movs	r3, #0
    }
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	7d9b      	ldrb	r3, [r3, #22]
 800796a:	f003 030f 	and.w	r3, r3, #15
 800796e:	2b0a      	cmp	r3, #10
 8007970:	d101      	bne.n	8007976 <pb_field_iter_find_extension+0x18>
    {
        return true;
 8007972:	2301      	movs	r3, #1
 8007974:	e022      	b.n	80079bc <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	891b      	ldrh	r3, [r3, #8]
 800797a:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff fed9 	bl	8007734 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	895b      	ldrh	r3, [r3, #10]
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	0a1b      	lsrs	r3, r3, #8
 8007998:	f003 030f 	and.w	r3, r3, #15
 800799c:	2b0a      	cmp	r3, #10
 800799e:	d104      	bne.n	80079aa <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7ff fd5d 	bl	8007460 <load_descriptor_values>
 80079a6:	4603      	mov	r3, r0
 80079a8:	e008      	b.n	80079bc <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	891b      	ldrh	r3, [r3, #8]
 80079ae:	89fa      	ldrh	r2, [r7, #14]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d1e3      	bne.n	800797c <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7ff fd53 	bl	8007460 <load_descriptor_values>
        return false;
 80079ba:	2300      	movs	r3, #0
    }
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	441a      	add	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d004      	beq.n	80079f2 <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	6979      	ldr	r1, [r7, #20]
 80079ec:	68b8      	ldr	r0, [r7, #8]
 80079ee:	f001 fdd7 	bl	80095a0 <memcpy>
    }
    
    return true;
 80079f2:	2301      	movs	r3, #1
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b088      	sub	sp, #32
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <pb_read+0x16>
        return true;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e05f      	b.n	8007ad2 <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d123      	bne.n	8007a60 <pb_read+0x64>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a2f      	ldr	r2, [pc, #188]	; (8007adc <pb_read+0xe0>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d01e      	beq.n	8007a60 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8007a22:	e011      	b.n	8007a48 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8007a24:	f107 0310 	add.w	r3, r7, #16
 8007a28:	2210      	movs	r2, #16
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f7ff ffe5 	bl	80079fc <pb_read>
 8007a32:	4603      	mov	r3, r0
 8007a34:	f083 0301 	eor.w	r3, r3, #1
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <pb_read+0x46>
				return false;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e047      	b.n	8007ad2 <pb_read+0xd6>
			
			count -= 16;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	3b10      	subs	r3, #16
 8007a46:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b10      	cmp	r3, #16
 8007a4c:	d8ea      	bhi.n	8007a24 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 8007a4e:	f107 0310 	add.w	r3, r7, #16
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	4619      	mov	r1, r3
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f7ff ffd0 	bl	80079fc <pb_read>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	e038      	b.n	8007ad2 <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d90b      	bls.n	8007a82 <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d002      	beq.n	8007a78 <pb_read+0x7c>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	e000      	b.n	8007a7a <pb_read+0x7e>
 8007a78:	4b19      	ldr	r3, [pc, #100]	; (8007ae0 <pb_read+0xe4>)
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	60d3      	str	r3, [r2, #12]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	e027      	b.n	8007ad2 <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	68b9      	ldr	r1, [r7, #8]
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	4798      	blx	r3
 8007a8e:	4603      	mov	r3, r0
 8007a90:	f083 0301 	eor.w	r3, r3, #1
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00b      	beq.n	8007ab2 <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <pb_read+0xac>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	e000      	b.n	8007aaa <pb_read+0xae>
 8007aa8:	4b0e      	ldr	r3, [pc, #56]	; (8007ae4 <pb_read+0xe8>)
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	60d3      	str	r3, [r2, #12]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	e00f      	b.n	8007ad2 <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d903      	bls.n	8007ac4 <pb_read+0xc8>
        stream->bytes_left = 0;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	609a      	str	r2, [r3, #8]
 8007ac2:	e005      	b.n	8007ad0 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	1ad2      	subs	r2, r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	609a      	str	r2, [r3, #8]

    return true;
 8007ad0:	2301      	movs	r3, #1
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3720      	adds	r7, #32
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	080079c5 	.word	0x080079c5
 8007ae0:	080095d8 	.word	0x080095d8
 8007ae4:	080095e8 	.word	0x080095e8

08007ae8 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10b      	bne.n	8007b12 <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <pb_readbyte+0x20>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	e000      	b.n	8007b0a <pb_readbyte+0x22>
 8007b08:	4b13      	ldr	r3, [pc, #76]	; (8007b58 <pb_readbyte+0x70>)
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	60d3      	str	r3, [r2, #12]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	e01d      	b.n	8007b4e <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2201      	movs	r2, #1
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	4798      	blx	r3
 8007b1e:	4603      	mov	r3, r0
 8007b20:	f083 0301 	eor.w	r3, r3, #1
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00b      	beq.n	8007b42 <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <pb_readbyte+0x50>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	e000      	b.n	8007b3a <pb_readbyte+0x52>
 8007b38:	4b08      	ldr	r3, [pc, #32]	; (8007b5c <pb_readbyte+0x74>)
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	60d3      	str	r3, [r2, #12]
 8007b3e:	2300      	movs	r3, #0
 8007b40:	e005      	b.n	8007b4e <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	1e5a      	subs	r2, r3, #1
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	609a      	str	r2, [r3, #8]
    
    return true;    
 8007b4c:	2301      	movs	r3, #1
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	080095d8 	.word	0x080095d8
 8007b5c:	080095e8 	.word	0x080095e8

08007b60 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8007b60:	b490      	push	{r4, r7}
 8007b62:	b08a      	sub	sp, #40	; 0x28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8007b6c:	4b0a      	ldr	r3, [pc, #40]	; (8007b98 <pb_istream_from_buffer+0x38>)
 8007b6e:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	461c      	mov	r4, r3
 8007b84:	f107 0318 	add.w	r3, r7, #24
 8007b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	3728      	adds	r7, #40	; 0x28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bc90      	pop	{r4, r7}
 8007b96:	4770      	bx	lr
 8007b98:	080079c5 	.word	0x080079c5

08007b9c <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b088      	sub	sp, #32
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8007ba8:	f107 0315 	add.w	r3, r7, #21
 8007bac:	4619      	mov	r1, r3
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f7ff ff9a 	bl	8007ae8 <pb_readbyte>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	f083 0301 	eor.w	r3, r3, #1
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00b      	beq.n	8007bd8 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d105      	bne.n	8007bd4 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d002      	beq.n	8007bd4 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	e084      	b.n	8007ce2 <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8007bd8:	7d7b      	ldrb	r3, [r7, #21]
 8007bda:	b25b      	sxtb	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	db02      	blt.n	8007be6 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8007be0:	7d7b      	ldrb	r3, [r7, #21]
 8007be2:	61fb      	str	r3, [r7, #28]
 8007be4:	e079      	b.n	8007cda <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8007be6:	2307      	movs	r3, #7
 8007be8:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8007bea:	7d7b      	ldrb	r3, [r7, #21]
 8007bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bf0:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8007bf2:	f107 0315 	add.w	r3, r7, #21
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f7ff ff75 	bl	8007ae8 <pb_readbyte>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	f083 0301 	eor.w	r3, r3, #1
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <pb_decode_varint32_eof+0x72>
                return false;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e069      	b.n	8007ce2 <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	2b1f      	cmp	r3, #31
 8007c12:	d92f      	bls.n	8007c74 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	2b3e      	cmp	r3, #62	; 0x3e
 8007c18:	d801      	bhi.n	8007c1e <pb_decode_varint32_eof+0x82>
 8007c1a:	23ff      	movs	r3, #255	; 0xff
 8007c1c:	e000      	b.n	8007c20 <pb_decode_varint32_eof+0x84>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8007c22:	7d7b      	ldrb	r3, [r7, #21]
 8007c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d006      	beq.n	8007c3a <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8007c2c:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	da05      	bge.n	8007c3e <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 8007c32:	7d7b      	ldrb	r3, [r7, #21]
 8007c34:	7dfa      	ldrb	r2, [r7, #23]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d101      	bne.n	8007c3e <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e000      	b.n	8007c40 <pb_decode_varint32_eof+0xa4>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	75bb      	strb	r3, [r7, #22]
 8007c42:	7dbb      	ldrb	r3, [r7, #22]
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	2b3f      	cmp	r3, #63	; 0x3f
 8007c4e:	d805      	bhi.n	8007c5c <pb_decode_varint32_eof+0xc0>
 8007c50:	7dbb      	ldrb	r3, [r7, #22]
 8007c52:	f083 0301 	eor.w	r3, r3, #1
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d037      	beq.n	8007ccc <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <pb_decode_varint32_eof+0xce>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	e000      	b.n	8007c6c <pb_decode_varint32_eof+0xd0>
 8007c6a:	4b20      	ldr	r3, [pc, #128]	; (8007cec <pb_decode_varint32_eof+0x150>)
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	60d3      	str	r3, [r2, #12]
 8007c70:	2300      	movs	r3, #0
 8007c72:	e036      	b.n	8007ce2 <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	2b1c      	cmp	r3, #28
 8007c78:	d11f      	bne.n	8007cba <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 8007c7a:	7d7b      	ldrb	r3, [r7, #21]
 8007c7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d010      	beq.n	8007ca6 <pb_decode_varint32_eof+0x10a>
 8007c84:	7d7b      	ldrb	r3, [r7, #21]
 8007c86:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007c8a:	2b78      	cmp	r3, #120	; 0x78
 8007c8c:	d00b      	beq.n	8007ca6 <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <pb_decode_varint32_eof+0x100>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	e000      	b.n	8007c9e <pb_decode_varint32_eof+0x102>
 8007c9c:	4b13      	ldr	r3, [pc, #76]	; (8007cec <pb_decode_varint32_eof+0x150>)
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	60d3      	str	r3, [r2, #12]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e01d      	b.n	8007ce2 <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 8007ca6:	7d7b      	ldrb	r3, [r7, #21]
 8007ca8:	f003 020f 	and.w	r2, r3, #15
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb2:	69fa      	ldr	r2, [r7, #28]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	61fb      	str	r3, [r7, #28]
 8007cb8:	e008      	b.n	8007ccc <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8007cba:	7d7b      	ldrb	r3, [r7, #21]
 8007cbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc6:	69fa      	ldr	r2, [r7, #28]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	3307      	adds	r3, #7
 8007cd0:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8007cd2:	7d7b      	ldrb	r3, [r7, #21]
 8007cd4:	b25b      	sxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	db8b      	blt.n	8007bf2 <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	69fa      	ldr	r2, [r7, #28]
 8007cde:	601a      	str	r2, [r3, #0]
   return true;
 8007ce0:	2301      	movs	r3, #1
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3720      	adds	r7, #32
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	080095f4 	.word	0x080095f4

08007cf0 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff ff4c 	bl	8007b9c <pb_decode_varint32_eof>
 8007d04:	4603      	mov	r3, r0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
	...

08007d10 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8007d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d14:	b08a      	sub	sp, #40	; 0x28
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	60f8      	str	r0, [r7, #12]
 8007d1a:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	627b      	str	r3, [r7, #36]	; 0x24
    uint64_t result = 0;
 8007d20:	f04f 0200 	mov.w	r2, #0
 8007d24:	f04f 0300 	mov.w	r3, #0
 8007d28:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 8007d2c:	f107 0317 	add.w	r3, r7, #23
 8007d30:	4619      	mov	r1, r3
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f7ff fed8 	bl	8007ae8 <pb_readbyte>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	f083 0301 	eor.w	r3, r3, #1
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <pb_decode_varint+0x38>
            return false;
 8007d44:	2300      	movs	r3, #0
 8007d46:	e041      	b.n	8007dcc <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	2b3e      	cmp	r3, #62	; 0x3e
 8007d4c:	d910      	bls.n	8007d70 <pb_decode_varint+0x60>
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00b      	beq.n	8007d70 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d002      	beq.n	8007d66 <pb_decode_varint+0x56>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	e000      	b.n	8007d68 <pb_decode_varint+0x58>
 8007d66:	4b1c      	ldr	r3, [pc, #112]	; (8007dd8 <pb_decode_varint+0xc8>)
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	60d3      	str	r3, [r2, #12]
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	e02d      	b.n	8007dcc <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8007d70:	7dfb      	ldrb	r3, [r7, #23]
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2200      	movs	r2, #0
 8007d76:	603b      	str	r3, [r7, #0]
 8007d78:	607a      	str	r2, [r7, #4]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	f003 087f 	and.w	r8, r3, #127	; 0x7f
 8007d80:	f04f 0900 	mov.w	r9, #0
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d86:	f1a3 0120 	sub.w	r1, r3, #32
 8007d8a:	f1c3 0220 	rsb	r2, r3, #32
 8007d8e:	fa09 f503 	lsl.w	r5, r9, r3
 8007d92:	fa08 f101 	lsl.w	r1, r8, r1
 8007d96:	430d      	orrs	r5, r1
 8007d98:	fa28 f202 	lsr.w	r2, r8, r2
 8007d9c:	4315      	orrs	r5, r2
 8007d9e:	fa08 f403 	lsl.w	r4, r8, r3
 8007da2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007da6:	ea42 0a04 	orr.w	sl, r2, r4
 8007daa:	ea43 0b05 	orr.w	fp, r3, r5
 8007dae:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	3307      	adds	r3, #7
 8007db6:	627b      	str	r3, [r7, #36]	; 0x24
    } while (byte & 0x80);
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
 8007dba:	b25b      	sxtb	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	dbb5      	blt.n	8007d2c <pb_decode_varint+0x1c>
    
    *dest = result;
 8007dc0:	68b9      	ldr	r1, [r7, #8]
 8007dc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dc6:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 8007dca:	2301      	movs	r3, #1
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3728      	adds	r7, #40	; 0x28
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dd6:	bf00      	nop
 8007dd8:	080095f4 	.word	0x080095f4

08007ddc <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8007de4:	f107 030f 	add.w	r3, r7, #15
 8007de8:	2201      	movs	r2, #1
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7ff fe05 	bl	80079fc <pb_read>
 8007df2:	4603      	mov	r3, r0
 8007df4:	f083 0301 	eor.w	r3, r3, #1
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <pb_skip_varint+0x26>
            return false;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	e004      	b.n	8007e0c <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	b25b      	sxtb	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	dbec      	blt.n	8007de4 <pb_skip_varint+0x8>
    return true;
 8007e0a:	2301      	movs	r3, #1
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8007e1c:	f107 030c 	add.w	r3, r7, #12
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff ff64 	bl	8007cf0 <pb_decode_varint32>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	f083 0301 	eor.w	r3, r3, #1
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <pb_skip_string+0x24>
        return false;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e006      	b.n	8007e46 <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7ff fddc 	bl	80079fc <pb_read>
 8007e44:	4603      	mov	r3, r0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b086      	sub	sp, #24
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	60f8      	str	r0, [r7, #12]
 8007e56:	60b9      	str	r1, [r7, #8]
 8007e58:	607a      	str	r2, [r7, #4]
 8007e5a:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2200      	movs	r2, #0
 8007e66:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8007e6e:	f107 0314 	add.w	r3, r7, #20
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	4619      	mov	r1, r3
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f7ff fe90 	bl	8007b9c <pb_decode_varint32_eof>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	f083 0301 	eor.w	r3, r3, #1
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <pb_decode_tag+0x3e>
    {
        return false;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	e00b      	b.n	8007ea4 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	08da      	lsrs	r2, r3, #3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	f003 0307 	and.w	r3, r3, #7
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	701a      	strb	r2, [r3, #0]
    return true;
 8007ea2:	2301      	movs	r3, #1
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 8007eb8:	78fb      	ldrb	r3, [r7, #3]
 8007eba:	2b05      	cmp	r3, #5
 8007ebc:	d826      	bhi.n	8007f0c <pb_skip_field+0x60>
 8007ebe:	a201      	add	r2, pc, #4	; (adr r2, 8007ec4 <pb_skip_field+0x18>)
 8007ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec4:	08007edd 	.word	0x08007edd
 8007ec8:	08007ee7 	.word	0x08007ee7
 8007ecc:	08007ef5 	.word	0x08007ef5
 8007ed0:	08007f0d 	.word	0x08007f0d
 8007ed4:	08007f0d 	.word	0x08007f0d
 8007ed8:	08007eff 	.word	0x08007eff
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff ff7d 	bl	8007ddc <pb_skip_varint>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	e01d      	b.n	8007f22 <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8007ee6:	2208      	movs	r2, #8
 8007ee8:	2100      	movs	r1, #0
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7ff fd86 	bl	80079fc <pb_read>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	e016      	b.n	8007f22 <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f7ff ff8d 	bl	8007e14 <pb_skip_string>
 8007efa:	4603      	mov	r3, r0
 8007efc:	e011      	b.n	8007f22 <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8007efe:	2204      	movs	r2, #4
 8007f00:	2100      	movs	r1, #0
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7ff fd7a 	bl	80079fc <pb_read>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	e00a      	b.n	8007f22 <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <pb_skip_field+0x6e>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	e000      	b.n	8007f1c <pb_skip_field+0x70>
 8007f1a:	4b04      	ldr	r3, [pc, #16]	; (8007f2c <pb_skip_field+0x80>)
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	60d3      	str	r3, [r2, #12]
 8007f20:	2300      	movs	r3, #0
    }
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	08009604 	.word	0x08009604

08007f30 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	607a      	str	r2, [r7, #4]
 8007f3a:	603b      	str	r3, [r7, #0]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 8007f46:	7afb      	ldrb	r3, [r7, #11]
 8007f48:	2b05      	cmp	r3, #5
 8007f4a:	d03f      	beq.n	8007fcc <read_raw_value+0x9c>
 8007f4c:	2b05      	cmp	r3, #5
 8007f4e:	dc47      	bgt.n	8007fe0 <read_raw_value+0xb0>
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d002      	beq.n	8007f5a <read_raw_value+0x2a>
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d02f      	beq.n	8007fb8 <read_raw_value+0x88>
 8007f58:	e042      	b.n	8007fe0 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d20b      	bcs.n	8007f8c <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d002      	beq.n	8007f82 <read_raw_value+0x52>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	e000      	b.n	8007f84 <read_raw_value+0x54>
 8007f82:	4b1f      	ldr	r3, [pc, #124]	; (8008000 <read_raw_value+0xd0>)
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	60d3      	str	r3, [r2, #12]
 8007f88:	2300      	movs	r3, #0
 8007f8a:	e034      	b.n	8007ff6 <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	6879      	ldr	r1, [r7, #4]
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f7ff fd33 	bl	80079fc <pb_read>
 8007f96:	4603      	mov	r3, r0
 8007f98:	f083 0301 	eor.w	r3, r3, #1
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <read_raw_value+0x76>
                    return false;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	e027      	b.n	8007ff6 <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	1c5a      	adds	r2, r3, #1
 8007faa:	607a      	str	r2, [r7, #4]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	b25b      	sxtb	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	dbd5      	blt.n	8007f60 <read_raw_value+0x30>
            return true;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e01e      	b.n	8007ff6 <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2208      	movs	r2, #8
 8007fbc:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 8007fbe:	2208      	movs	r2, #8
 8007fc0:	6879      	ldr	r1, [r7, #4]
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f7ff fd1a 	bl	80079fc <pb_read>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	e014      	b.n	8007ff6 <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2204      	movs	r2, #4
 8007fd0:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 8007fd2:	2204      	movs	r2, #4
 8007fd4:	6879      	ldr	r1, [r7, #4]
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f7ff fd10 	bl	80079fc <pb_read>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	e00a      	b.n	8007ff6 <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <read_raw_value+0xbe>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	e000      	b.n	8007ff0 <read_raw_value+0xc0>
 8007fee:	4b05      	ldr	r3, [pc, #20]	; (8008004 <read_raw_value+0xd4>)
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	60d3      	str	r3, [r2, #12]
 8007ff4:	2300      	movs	r3, #0
    }
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	080095f4 	.word	0x080095f4
 8008004:	08009604 	.word	0x08009604

08008008 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8008008:	b590      	push	{r4, r7, lr}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 8008012:	f107 030c 	add.w	r3, r7, #12
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7ff fe69 	bl	8007cf0 <pb_decode_varint32>
 800801e:	4603      	mov	r3, r0
 8008020:	f083 0301 	eor.w	r3, r3, #1
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <pb_make_string_substream+0x26>
        return false;
 800802a:	2300      	movs	r3, #0
 800802c:	e020      	b.n	8008070 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4614      	mov	r4, r2
 8008034:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008036:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	429a      	cmp	r2, r3
 8008042:	d20b      	bcs.n	800805c <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d002      	beq.n	8008052 <pb_make_string_substream+0x4a>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	e000      	b.n	8008054 <pb_make_string_substream+0x4c>
 8008052:	4b09      	ldr	r3, [pc, #36]	; (8008078 <pb_make_string_substream+0x70>)
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	60d3      	str	r3, [r2, #12]
 8008058:	2300      	movs	r3, #0
 800805a:	e009      	b.n	8008070 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	689a      	ldr	r2, [r3, #8]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	1ad2      	subs	r2, r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	609a      	str	r2, [r3, #8]
    return true;
 800806e:	2301      	movs	r3, #1
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	bd90      	pop	{r4, r7, pc}
 8008078:	08009618 	.word	0x08009618

0800807c <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00e      	beq.n	80080ac <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	461a      	mov	r2, r3
 8008094:	2100      	movs	r1, #0
 8008096:	6838      	ldr	r0, [r7, #0]
 8008098:	f7ff fcb0 	bl	80079fc <pb_read>
 800809c:	4603      	mov	r3, r0
 800809e:	f083 0301 	eor.w	r3, r3, #1
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <pb_close_string_substream+0x30>
            return false;
 80080a8:	2300      	movs	r3, #0
 80080aa:	e008      	b.n	80080be <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	68da      	ldr	r2, [r3, #12]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	60da      	str	r2, [r3, #12]
#endif
    return true;
 80080bc:	2301      	movs	r3, #1
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
	...

080080c8 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	460b      	mov	r3, r1
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	7d9b      	ldrb	r3, [r3, #22]
 80080da:	f003 030f 	and.w	r3, r3, #15
 80080de:	2b0b      	cmp	r3, #11
 80080e0:	f200 80d4 	bhi.w	800828c <decode_basic_field+0x1c4>
 80080e4:	a201      	add	r2, pc, #4	; (adr r2, 80080ec <decode_basic_field+0x24>)
 80080e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ea:	bf00      	nop
 80080ec:	0800811d 	.word	0x0800811d
 80080f0:	0800814d 	.word	0x0800814d
 80080f4:	0800814d 	.word	0x0800814d
 80080f8:	0800814d 	.word	0x0800814d
 80080fc:	0800817d 	.word	0x0800817d
 8008100:	080081b1 	.word	0x080081b1
 8008104:	080081e5 	.word	0x080081e5
 8008108:	0800820f 	.word	0x0800820f
 800810c:	08008239 	.word	0x08008239
 8008110:	08008239 	.word	0x08008239
 8008114:	0800828d 	.word	0x0800828d
 8008118:	08008263 	.word	0x08008263
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 800811c:	7afb      	ldrb	r3, [r7, #11]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00e      	beq.n	8008140 <decode_basic_field+0x78>
 8008122:	7afb      	ldrb	r3, [r7, #11]
 8008124:	2bff      	cmp	r3, #255	; 0xff
 8008126:	d00b      	beq.n	8008140 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <decode_basic_field+0x6e>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	e000      	b.n	8008138 <decode_basic_field+0x70>
 8008136:	4b5d      	ldr	r3, [pc, #372]	; (80082ac <decode_basic_field+0x1e4>)
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	60d3      	str	r3, [r2, #12]
 800813c:	2300      	movs	r3, #0
 800813e:	e0b0      	b.n	80082a2 <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f000 fef6 	bl	8008f34 <pb_dec_bool>
 8008148:	4603      	mov	r3, r0
 800814a:	e0aa      	b.n	80082a2 <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 800814c:	7afb      	ldrb	r3, [r7, #11]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00e      	beq.n	8008170 <decode_basic_field+0xa8>
 8008152:	7afb      	ldrb	r3, [r7, #11]
 8008154:	2bff      	cmp	r3, #255	; 0xff
 8008156:	d00b      	beq.n	8008170 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d002      	beq.n	8008166 <decode_basic_field+0x9e>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	e000      	b.n	8008168 <decode_basic_field+0xa0>
 8008166:	4b51      	ldr	r3, [pc, #324]	; (80082ac <decode_basic_field+0x1e4>)
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	60d3      	str	r3, [r2, #12]
 800816c:	2300      	movs	r3, #0
 800816e:	e098      	b.n	80082a2 <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 8008170:	6879      	ldr	r1, [r7, #4]
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f000 feee 	bl	8008f54 <pb_dec_varint>
 8008178:	4603      	mov	r3, r0
 800817a:	e092      	b.n	80082a2 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 800817c:	7afb      	ldrb	r3, [r7, #11]
 800817e:	2b05      	cmp	r3, #5
 8008180:	d00e      	beq.n	80081a0 <decode_basic_field+0xd8>
 8008182:	7afb      	ldrb	r3, [r7, #11]
 8008184:	2bff      	cmp	r3, #255	; 0xff
 8008186:	d00b      	beq.n	80081a0 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <decode_basic_field+0xce>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	e000      	b.n	8008198 <decode_basic_field+0xd0>
 8008196:	4b45      	ldr	r3, [pc, #276]	; (80082ac <decode_basic_field+0x1e4>)
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	60d3      	str	r3, [r2, #12]
 800819c:	2300      	movs	r3, #0
 800819e:	e080      	b.n	80082a2 <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	4619      	mov	r1, r3
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f000 fe8a 	bl	8008ec0 <pb_decode_fixed32>
 80081ac:	4603      	mov	r3, r0
 80081ae:	e078      	b.n	80082a2 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 80081b0:	7afb      	ldrb	r3, [r7, #11]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d00e      	beq.n	80081d4 <decode_basic_field+0x10c>
 80081b6:	7afb      	ldrb	r3, [r7, #11]
 80081b8:	2bff      	cmp	r3, #255	; 0xff
 80081ba:	d00b      	beq.n	80081d4 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <decode_basic_field+0x102>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	e000      	b.n	80081cc <decode_basic_field+0x104>
 80081ca:	4b38      	ldr	r3, [pc, #224]	; (80082ac <decode_basic_field+0x1e4>)
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	60d3      	str	r3, [r2, #12]
 80081d0:	2300      	movs	r3, #0
 80081d2:	e066      	b.n	80082a2 <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	69db      	ldr	r3, [r3, #28]
 80081d8:	4619      	mov	r1, r3
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 fe8c 	bl	8008ef8 <pb_decode_fixed64>
 80081e0:	4603      	mov	r3, r0
 80081e2:	e05e      	b.n	80082a2 <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 80081e4:	7afb      	ldrb	r3, [r7, #11]
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d00b      	beq.n	8008202 <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <decode_basic_field+0x130>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	e000      	b.n	80081fa <decode_basic_field+0x132>
 80081f8:	4b2c      	ldr	r3, [pc, #176]	; (80082ac <decode_basic_field+0x1e4>)
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	60d3      	str	r3, [r2, #12]
 80081fe:	2300      	movs	r3, #0
 8008200:	e04f      	b.n	80082a2 <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 8008202:	6879      	ldr	r1, [r7, #4]
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 ffd1 	bl	80091ac <pb_dec_bytes>
 800820a:	4603      	mov	r3, r0
 800820c:	e049      	b.n	80082a2 <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 800820e:	7afb      	ldrb	r3, [r7, #11]
 8008210:	2b02      	cmp	r3, #2
 8008212:	d00b      	beq.n	800822c <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <decode_basic_field+0x15a>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	e000      	b.n	8008224 <decode_basic_field+0x15c>
 8008222:	4b22      	ldr	r3, [pc, #136]	; (80082ac <decode_basic_field+0x1e4>)
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	60d3      	str	r3, [r2, #12]
 8008228:	2300      	movs	r3, #0
 800822a:	e03a      	b.n	80082a2 <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 800822c:	6879      	ldr	r1, [r7, #4]
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f001 f830 	bl	8009294 <pb_dec_string>
 8008234:	4603      	mov	r3, r0
 8008236:	e034      	b.n	80082a2 <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 8008238:	7afb      	ldrb	r3, [r7, #11]
 800823a:	2b02      	cmp	r3, #2
 800823c:	d00b      	beq.n	8008256 <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d002      	beq.n	800824c <decode_basic_field+0x184>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	e000      	b.n	800824e <decode_basic_field+0x186>
 800824c:	4b17      	ldr	r3, [pc, #92]	; (80082ac <decode_basic_field+0x1e4>)
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	60d3      	str	r3, [r2, #12]
 8008252:	2300      	movs	r3, #0
 8008254:	e025      	b.n	80082a2 <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 8008256:	6879      	ldr	r1, [r7, #4]
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f001 f897 	bl	800938c <pb_dec_submessage>
 800825e:	4603      	mov	r3, r0
 8008260:	e01f      	b.n	80082a2 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 8008262:	7afb      	ldrb	r3, [r7, #11]
 8008264:	2b02      	cmp	r3, #2
 8008266:	d00b      	beq.n	8008280 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <decode_basic_field+0x1ae>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	e000      	b.n	8008278 <decode_basic_field+0x1b0>
 8008276:	4b0d      	ldr	r3, [pc, #52]	; (80082ac <decode_basic_field+0x1e4>)
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	60d3      	str	r3, [r2, #12]
 800827c:	2300      	movs	r3, #0
 800827e:	e010      	b.n	80082a2 <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 8008280:	6879      	ldr	r1, [r7, #4]
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f001 f90c 	bl	80094a0 <pb_dec_fixed_length_bytes>
 8008288:	4603      	mov	r3, r0
 800828a:	e00a      	b.n	80082a2 <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d002      	beq.n	800829a <decode_basic_field+0x1d2>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	e000      	b.n	800829c <decode_basic_field+0x1d4>
 800829a:	4b05      	ldr	r3, [pc, #20]	; (80082b0 <decode_basic_field+0x1e8>)
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	60d3      	str	r3, [r2, #12]
 80082a0:	2300      	movs	r3, #0
    }
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	08009630 	.word	0x08009630
 80082b0:	08009640 	.word	0x08009640

080082b4 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b096      	sub	sp, #88	; 0x58
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	460b      	mov	r3, r1
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	7d9b      	ldrb	r3, [r3, #22]
 80082c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80082ca:	2b30      	cmp	r3, #48	; 0x30
 80082cc:	f000 80c2 	beq.w	8008454 <decode_static_field+0x1a0>
 80082d0:	2b30      	cmp	r3, #48	; 0x30
 80082d2:	f200 811a 	bhi.w	800850a <decode_static_field+0x256>
 80082d6:	2b20      	cmp	r3, #32
 80082d8:	d01f      	beq.n	800831a <decode_static_field+0x66>
 80082da:	2b20      	cmp	r3, #32
 80082dc:	f200 8115 	bhi.w	800850a <decode_static_field+0x256>
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <decode_static_field+0x36>
 80082e4:	2b10      	cmp	r3, #16
 80082e6:	d008      	beq.n	80082fa <decode_static_field+0x46>
 80082e8:	e10f      	b.n	800850a <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 80082ea:	7afb      	ldrb	r3, [r7, #11]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	4619      	mov	r1, r3
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f7ff fee9 	bl	80080c8 <decode_basic_field>
 80082f6:	4603      	mov	r3, r0
 80082f8:	e112      	b.n	8008520 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	2201      	movs	r2, #1
 8008308:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 800830a:	7afb      	ldrb	r3, [r7, #11]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	4619      	mov	r1, r3
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f7ff fed9 	bl	80080c8 <decode_basic_field>
 8008316:	4603      	mov	r3, r0
 8008318:	e102      	b.n	8008520 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 800831a:	7afb      	ldrb	r3, [r7, #11]
 800831c:	2b02      	cmp	r3, #2
 800831e:	d16c      	bne.n	80083fa <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	7d9b      	ldrb	r3, [r3, #22]
 8008324:	f003 030f 	and.w	r3, r3, #15
 8008328:	2b05      	cmp	r3, #5
 800832a:	d866      	bhi.n	80083fa <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 800832c:	2301      	movs	r3, #1
 800832e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	653b      	str	r3, [r7, #80]	; 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	8a52      	ldrh	r2, [r2, #18]
 8008340:	4611      	mov	r1, r2
 8008342:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008344:	8812      	ldrh	r2, [r2, #0]
 8008346:	fb01 f202 	mul.w	r2, r1, r2
 800834a:	441a      	add	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 8008350:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008354:	4619      	mov	r1, r3
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7ff fe56 	bl	8008008 <pb_make_string_substream>
 800835c:	4603      	mov	r3, r0
 800835e:	f083 0301 	eor.w	r3, r3, #1
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b00      	cmp	r3, #0
 8008366:	d01f      	beq.n	80083a8 <decode_static_field+0xf4>
                    return false;
 8008368:	2300      	movs	r3, #0
 800836a:	e0d9      	b.n	8008520 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 800836c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	21ff      	movs	r1, #255	; 0xff
 8008374:	4618      	mov	r0, r3
 8008376:	f7ff fea7 	bl	80080c8 <decode_basic_field>
 800837a:	4603      	mov	r3, r0
 800837c:	f083 0301 	eor.w	r3, r3, #1
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	d003      	beq.n	800838e <decode_static_field+0xda>
                    {
                        status = false;
 8008386:	2300      	movs	r3, #0
 8008388:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 800838c:	e015      	b.n	80083ba <decode_static_field+0x106>
                    }
                    (*size)++;
 800838e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	3301      	adds	r3, #1
 8008394:	b29a      	uxth	r2, r3
 8008396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008398:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	8a52      	ldrh	r2, [r2, #18]
 80083a2:	441a      	add	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 80083a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d005      	beq.n	80083ba <decode_static_field+0x106>
 80083ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083b0:	881a      	ldrh	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	8a9b      	ldrh	r3, [r3, #20]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d3d8      	bcc.n	800836c <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 80083ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00b      	beq.n	80083d8 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <decode_static_field+0x11a>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	e000      	b.n	80083d0 <decode_static_field+0x11c>
 80083ce:	4b56      	ldr	r3, [pc, #344]	; (8008528 <decode_static_field+0x274>)
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	60d3      	str	r3, [r2, #12]
 80083d4:	2300      	movs	r3, #0
 80083d6:	e0a3      	b.n	8008520 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 80083d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80083dc:	4619      	mov	r1, r3
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f7ff fe4c 	bl	800807c <pb_close_string_substream>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f083 0301 	eor.w	r3, r3, #1
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <decode_static_field+0x140>
                    return false;
 80083f0:	2300      	movs	r3, #0
 80083f2:	e095      	b.n	8008520 <decode_static_field+0x26c>

                return status;
 80083f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083f8:	e092      	b.n	8008520 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	64fb      	str	r3, [r7, #76]	; 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	8a52      	ldrh	r2, [r2, #18]
 8008408:	4611      	mov	r1, r2
 800840a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800840c:	8812      	ldrh	r2, [r2, #0]
 800840e:	fb01 f202 	mul.w	r2, r1, r2
 8008412:	441a      	add	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 8008418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	1c5a      	adds	r2, r3, #1
 800841e:	b291      	uxth	r1, r2
 8008420:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008422:	8011      	strh	r1, [r2, #0]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	8a92      	ldrh	r2, [r2, #20]
 8008428:	4293      	cmp	r3, r2
 800842a:	d30b      	bcc.n	8008444 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d002      	beq.n	800843a <decode_static_field+0x186>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	e000      	b.n	800843c <decode_static_field+0x188>
 800843a:	4b3b      	ldr	r3, [pc, #236]	; (8008528 <decode_static_field+0x274>)
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	60d3      	str	r3, [r2, #12]
 8008440:	2300      	movs	r3, #0
 8008442:	e06d      	b.n	8008520 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 8008444:	7afb      	ldrb	r3, [r7, #11]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	4619      	mov	r1, r3
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f7ff fe3c 	bl	80080c8 <decode_basic_field>
 8008450:	4603      	mov	r3, r0
 8008452:	e065      	b.n	8008520 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	7d9b      	ldrb	r3, [r3, #22]
 8008458:	f003 030f 	and.w	r3, r3, #15
 800845c:	2b08      	cmp	r3, #8
 800845e:	d005      	beq.n	800846c <decode_static_field+0x1b8>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	7d9b      	ldrb	r3, [r3, #22]
 8008464:	f003 030f 	and.w	r3, r3, #15
 8008468:	2b09      	cmp	r3, #9
 800846a:	d141      	bne.n	80084f0 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a1b      	ldr	r3, [r3, #32]
 8008470:	881a      	ldrh	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8008476:	429a      	cmp	r2, r3
 8008478:	d03a      	beq.n	80084f0 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	69d8      	ldr	r0, [r3, #28]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	8a5b      	ldrh	r3, [r3, #18]
 8008482:	461a      	mov	r2, r3
 8008484:	2100      	movs	r1, #0
 8008486:	f001 f85f 	bl	8009548 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10a      	bne.n	80084aa <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 800849a:	2b00      	cmp	r3, #0
 800849c:	d105      	bne.n	80084aa <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d022      	beq.n	80084f0 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	69da      	ldr	r2, [r3, #28]
 80084b2:	f107 0314 	add.w	r3, r7, #20
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7ff f99d 	bl	80077f6 <pb_field_iter_begin>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d016      	beq.n	80084f0 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 80084c2:	f107 0314 	add.w	r3, r7, #20
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 fa4d 	bl	8008966 <pb_message_set_to_defaults>
 80084cc:	4603      	mov	r3, r0
 80084ce:	f083 0301 	eor.w	r3, r3, #1
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00b      	beq.n	80084f0 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d002      	beq.n	80084e6 <decode_static_field+0x232>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	e000      	b.n	80084e8 <decode_static_field+0x234>
 80084e6:	4b11      	ldr	r3, [pc, #68]	; (800852c <decode_static_field+0x278>)
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	60d3      	str	r3, [r2, #12]
 80084ec:	2300      	movs	r3, #0
 80084ee:	e017      	b.n	8008520 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	8a12      	ldrh	r2, [r2, #16]
 80084f8:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 80084fa:	7afb      	ldrb	r3, [r7, #11]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	4619      	mov	r1, r3
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f7ff fde1 	bl	80080c8 <decode_basic_field>
 8008506:	4603      	mov	r3, r0
 8008508:	e00a      	b.n	8008520 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <decode_static_field+0x264>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	e000      	b.n	800851a <decode_static_field+0x266>
 8008518:	4b05      	ldr	r3, [pc, #20]	; (8008530 <decode_static_field+0x27c>)
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	60d3      	str	r3, [r2, #12]
 800851e:	2300      	movs	r3, #0
    }
}
 8008520:	4618      	mov	r0, r3
 8008522:	3758      	adds	r7, #88	; 0x58
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	08009654 	.word	0x08009654
 800852c:	08009664 	.word	0x08009664
 8008530:	08009640 	.word	0x08009640

08008534 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	460b      	mov	r3, r1
 800853e:	607a      	str	r2, [r7, #4]
 8008540:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <decode_pointer_field+0x1c>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	e000      	b.n	8008552 <decode_pointer_field+0x1e>
 8008550:	4b04      	ldr	r3, [pc, #16]	; (8008564 <decode_pointer_field+0x30>)
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	60d3      	str	r3, [r2, #12]
 8008556:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8008558:	4618      	mov	r0, r3
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	0800967c 	.word	0x0800967c

08008568 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8008568:	b590      	push	{r4, r7, lr}
 800856a:	b097      	sub	sp, #92	; 0x5c
 800856c:	af00      	add	r7, sp, #0
 800856e:	61f8      	str	r0, [r7, #28]
 8008570:	460b      	mov	r3, r1
 8008572:	617a      	str	r2, [r7, #20]
 8008574:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d106      	bne.n	800858e <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8008580:	7efb      	ldrb	r3, [r7, #27]
 8008582:	4619      	mov	r1, r3
 8008584:	69f8      	ldr	r0, [r7, #28]
 8008586:	f7ff fc91 	bl	8007eac <pb_skip_field>
 800858a:	4603      	mov	r3, r0
 800858c:	e070      	b.n	8008670 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 800858e:	7efb      	ldrb	r3, [r7, #27]
 8008590:	2b02      	cmp	r3, #2
 8008592:	d145      	bne.n	8008620 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8008594:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008598:	4619      	mov	r1, r3
 800859a:	69f8      	ldr	r0, [r7, #28]
 800859c:	f7ff fd34 	bl	8008008 <pb_make_string_substream>
 80085a0:	4603      	mov	r3, r0
 80085a2:	f083 0301 	eor.w	r3, r3, #1
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d001      	beq.n	80085b0 <decode_callback_field+0x48>
            return false;
 80085ac:	2300      	movs	r3, #0
 80085ae:	e05f      	b.n	8008670 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 80085b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b2:	657b      	str	r3, [r7, #84]	; 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	2100      	movs	r1, #0
 80085c2:	4798      	blx	r3
 80085c4:	4603      	mov	r3, r0
 80085c6:	f083 0301 	eor.w	r3, r3, #1
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d010      	beq.n	80085f2 <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d002      	beq.n	80085de <decode_callback_field+0x76>
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	e005      	b.n	80085ea <decode_callback_field+0x82>
 80085de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <decode_callback_field+0x80>
 80085e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085e6:	e000      	b.n	80085ea <decode_callback_field+0x82>
 80085e8:	4b23      	ldr	r3, [pc, #140]	; (8008678 <decode_callback_field+0x110>)
 80085ea:	69fa      	ldr	r2, [r7, #28]
 80085ec:	60d3      	str	r3, [r2, #12]
                return false;
 80085ee:	2300      	movs	r3, #0
 80085f0:	e03e      	b.n	8008670 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 80085f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <decode_callback_field+0x98>
 80085f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d8d7      	bhi.n	80085b0 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8008600:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008604:	4619      	mov	r1, r3
 8008606:	69f8      	ldr	r0, [r7, #28]
 8008608:	f7ff fd38 	bl	800807c <pb_close_string_substream>
 800860c:	4603      	mov	r3, r0
 800860e:	f083 0301 	eor.w	r3, r3, #1
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <decode_callback_field+0xb4>
            return false;
 8008618:	2300      	movs	r3, #0
 800861a:	e029      	b.n	8008670 <decode_callback_field+0x108>

        return true;
 800861c:	2301      	movs	r3, #1
 800861e:	e027      	b.n	8008670 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8008620:	230a      	movs	r3, #10
 8008622:	627b      	str	r3, [r7, #36]	; 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8008624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008628:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800862c:	7ef9      	ldrb	r1, [r7, #27]
 800862e:	69f8      	ldr	r0, [r7, #28]
 8008630:	f7ff fc7e 	bl	8007f30 <read_raw_value>
 8008634:	4603      	mov	r3, r0
 8008636:	f083 0301 	eor.w	r3, r3, #1
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d001      	beq.n	8008644 <decode_callback_field+0xdc>
            return false;
 8008640:	2300      	movs	r3, #0
 8008642:	e015      	b.n	8008670 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 8008644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008646:	463b      	mov	r3, r7
 8008648:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800864c:	4618      	mov	r0, r3
 800864e:	f7ff fa87 	bl	8007b60 <pb_istream_from_buffer>
 8008652:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8008656:	463b      	mov	r3, r7
 8008658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800865a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	2100      	movs	r1, #0
 800866c:	4798      	blx	r3
 800866e:	4603      	mov	r3, r0
    }
}
 8008670:	4618      	mov	r0, r3
 8008672:	375c      	adds	r7, #92	; 0x5c
 8008674:	46bd      	mov	sp, r7
 8008676:	bd90      	pop	{r4, r7, pc}
 8008678:	08009690 	.word	0x08009690

0800867c <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	460b      	mov	r3, r1
 8008686:	607a      	str	r2, [r7, #4]
 8008688:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	7d9b      	ldrb	r3, [r3, #22]
 800868e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008692:	2b80      	cmp	r3, #128	; 0x80
 8008694:	d00e      	beq.n	80086b4 <decode_field+0x38>
 8008696:	2b80      	cmp	r3, #128	; 0x80
 8008698:	d81c      	bhi.n	80086d4 <decode_field+0x58>
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <decode_field+0x28>
 800869e:	2b40      	cmp	r3, #64	; 0x40
 80086a0:	d010      	beq.n	80086c4 <decode_field+0x48>
 80086a2:	e017      	b.n	80086d4 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 80086a4:	7afb      	ldrb	r3, [r7, #11]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	4619      	mov	r1, r3
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f7ff fe02 	bl	80082b4 <decode_static_field>
 80086b0:	4603      	mov	r3, r0
 80086b2:	e01a      	b.n	80086ea <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 80086b4:	7afb      	ldrb	r3, [r7, #11]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	4619      	mov	r1, r3
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f7ff ff3a 	bl	8008534 <decode_pointer_field>
 80086c0:	4603      	mov	r3, r0
 80086c2:	e012      	b.n	80086ea <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 80086c4:	7afb      	ldrb	r3, [r7, #11]
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	4619      	mov	r1, r3
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f7ff ff4c 	bl	8008568 <decode_callback_field>
 80086d0:	4603      	mov	r3, r0
 80086d2:	e00a      	b.n	80086ea <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <decode_field+0x66>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	e000      	b.n	80086e4 <decode_field+0x68>
 80086e2:	4b04      	ldr	r3, [pc, #16]	; (80086f4 <decode_field+0x78>)
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	60d3      	str	r3, [r2, #12]
 80086e8:	2300      	movs	r3, #0
    }
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	08009640 	.word	0x08009640

080086f8 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08e      	sub	sp, #56	; 0x38
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8008706:	f107 0310 	add.w	r3, r7, #16
 800870a:	68b9      	ldr	r1, [r7, #8]
 800870c:	4618      	mov	r0, r3
 800870e:	f7ff f88b 	bl	8007828 <pb_field_iter_begin_extension>
 8008712:	4603      	mov	r3, r0
 8008714:	f083 0301 	eor.w	r3, r3, #1
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00b      	beq.n	8008736 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d002      	beq.n	800872c <default_extension_decoder+0x34>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	e000      	b.n	800872e <default_extension_decoder+0x36>
 800872c:	4b0e      	ldr	r3, [pc, #56]	; (8008768 <default_extension_decoder+0x70>)
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	60d3      	str	r3, [r2, #12]
 8008732:	2300      	movs	r3, #0
 8008734:	e014      	b.n	8008760 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 8008736:	8c3b      	ldrh	r3, [r7, #32]
 8008738:	461a      	mov	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4293      	cmp	r3, r2
 800873e:	d102      	bne.n	8008746 <default_extension_decoder+0x4e>
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <default_extension_decoder+0x52>
        return true;
 8008746:	2301      	movs	r3, #1
 8008748:	e00a      	b.n	8008760 <default_extension_decoder+0x68>

    extension->found = true;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2201      	movs	r2, #1
 800874e:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8008750:	f107 0210 	add.w	r2, r7, #16
 8008754:	78fb      	ldrb	r3, [r7, #3]
 8008756:	4619      	mov	r1, r3
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f7ff ff8f 	bl	800867c <decode_field>
 800875e:	4603      	mov	r3, r0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3738      	adds	r7, #56	; 0x38
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	080096a0 	.word	0x080096a0

0800876c <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 800876c:	b590      	push	{r4, r7, lr}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	603b      	str	r3, [r7, #0]
 8008778:	4613      	mov	r3, r2
 800877a:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 8008782:	e022      	b.n	80087ca <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00a      	beq.n	80087a4 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681c      	ldr	r4, [r3, #0]
 8008794:	79fb      	ldrb	r3, [r7, #7]
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	47a0      	blx	r4
 800879e:	4603      	mov	r3, r0
 80087a0:	75fb      	strb	r3, [r7, #23]
 80087a2:	e007      	b.n	80087b4 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 80087a4:	79fb      	ldrb	r3, [r7, #7]
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f7ff ffa4 	bl	80086f8 <default_extension_decoder>
 80087b0:	4603      	mov	r3, r0
 80087b2:	75fb      	strb	r3, [r7, #23]

        if (!status)
 80087b4:	7dfb      	ldrb	r3, [r7, #23]
 80087b6:	f083 0301 	eor.w	r3, r3, #1
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d001      	beq.n	80087c4 <decode_extension+0x58>
            return false;
 80087c0:	2300      	movs	r3, #0
 80087c2:	e00b      	b.n	80087dc <decode_extension+0x70>
        
        extension = extension->next;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d004      	beq.n	80087da <decode_extension+0x6e>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d0d4      	beq.n	8008784 <decode_extension+0x18>
    }
    
    return true;
 80087da:	2301      	movs	r3, #1
}
 80087dc:	4618      	mov	r0, r3
 80087de:	371c      	adds	r7, #28
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd90      	pop	{r4, r7, pc}

080087e4 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b08e      	sub	sp, #56	; 0x38
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	7d9b      	ldrb	r3, [r3, #22]
 80087f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 80087f4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80087f8:	f003 030f 	and.w	r3, r3, #15
 80087fc:	2b0a      	cmp	r3, #10
 80087fe:	d124      	bne.n	800884a <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	69db      	ldr	r3, [r3, #28]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 8008808:	e01b      	b.n	8008842 <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 800880a:	f107 0308 	add.w	r3, r7, #8
 800880e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008810:	4618      	mov	r0, r3
 8008812:	f7ff f809 	bl	8007828 <pb_field_iter_begin_extension>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00f      	beq.n	800883c <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 800881c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881e:	2200      	movs	r2, #0
 8008820:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 8008822:	f107 0308 	add.w	r3, r7, #8
 8008826:	4618      	mov	r0, r3
 8008828:	f000 f89d 	bl	8008966 <pb_message_set_to_defaults>
 800882c:	4603      	mov	r3, r0
 800882e:	f083 0301 	eor.w	r3, r3, #1
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <pb_field_set_to_default+0x58>
                    return false;
 8008838:	2300      	movs	r3, #0
 800883a:	e090      	b.n	800895e <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 800883c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 8008842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e0      	bne.n	800880a <pb_field_set_to_default+0x26>
 8008848:	e088      	b.n	800895c <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800884a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800884e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d166      	bne.n	8008924 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 8008856:	2301      	movs	r3, #1
 8008858:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 800885c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008860:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008864:	2b10      	cmp	r3, #16
 8008866:	d108      	bne.n	800887a <pb_field_set_to_default+0x96>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a1b      	ldr	r3, [r3, #32]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d004      	beq.n	800887a <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a1b      	ldr	r3, [r3, #32]
 8008874:	2200      	movs	r2, #0
 8008876:	701a      	strb	r2, [r3, #0]
 8008878:	e012      	b.n	80088a0 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800887a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800887e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008882:	2b20      	cmp	r3, #32
 8008884:	d005      	beq.n	8008892 <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8008886:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800888a:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800888e:	2b30      	cmp	r3, #48	; 0x30
 8008890:	d106      	bne.n	80088a0 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	2200      	movs	r2, #0
 8008898:	801a      	strh	r2, [r3, #0]
            init_data = false;
 800889a:	2300      	movs	r3, #0
 800889c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        if (init_data)
 80088a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d059      	beq.n	800895c <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	7d9b      	ldrb	r3, [r3, #22]
 80088ac:	f003 030f 	and.w	r3, r3, #15
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	d005      	beq.n	80088c0 <pb_field_set_to_default+0xdc>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	7d9b      	ldrb	r3, [r3, #22]
 80088b8:	f003 030f 	and.w	r3, r3, #15
 80088bc:	2b09      	cmp	r3, #9
 80088be:	d128      	bne.n	8008912 <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c4:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10a      	bne.n	80088e0 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d105      	bne.n	80088e0 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d018      	beq.n	8008912 <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	69da      	ldr	r2, [r3, #28]
 80088e8:	f107 0308 	add.w	r3, r7, #8
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fe ff82 	bl	80077f6 <pb_field_iter_begin>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d030      	beq.n	800895a <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 80088f8:	f107 0308 	add.w	r3, r7, #8
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 f832 	bl	8008966 <pb_message_set_to_defaults>
 8008902:	4603      	mov	r3, r0
 8008904:	f083 0301 	eor.w	r3, r3, #1
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d025      	beq.n	800895a <pb_field_set_to_default+0x176>
                        return false;
 800890e:	2300      	movs	r3, #0
 8008910:	e025      	b.n	800895e <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	69d8      	ldr	r0, [r3, #28]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	8a5b      	ldrh	r3, [r3, #18]
 800891a:	461a      	mov	r2, r3
 800891c:	2100      	movs	r1, #0
 800891e:	f000 fe13 	bl	8009548 <memset>
 8008922:	e01b      	b.n	800895c <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8008924:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008928:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800892c:	2b80      	cmp	r3, #128	; 0x80
 800892e:	d115      	bne.n	800895c <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	2200      	movs	r2, #0
 8008936:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8008938:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800893c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008940:	2b20      	cmp	r3, #32
 8008942:	d005      	beq.n	8008950 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8008944:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008948:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800894c:	2b30      	cmp	r3, #48	; 0x30
 800894e:	d105      	bne.n	800895c <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	2200      	movs	r2, #0
 8008956:	801a      	strh	r2, [r3, #0]
 8008958:	e000      	b.n	800895c <pb_field_set_to_default+0x178>
            {
 800895a:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 800895c:	2301      	movs	r3, #1
}
 800895e:	4618      	mov	r0, r3
 8008960:	3738      	adds	r7, #56	; 0x38
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 8008966:	b590      	push	{r4, r7, lr}
 8008968:	b08d      	sub	sp, #52	; 0x34
 800896a:	af00      	add	r7, sp, #0
 800896c:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 800896e:	f107 0320 	add.w	r3, r7, #32
 8008972:	2200      	movs	r2, #0
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	605a      	str	r2, [r3, #4]
 8008978:	609a      	str	r2, [r3, #8]
 800897a:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 800897c:	2300      	movs	r3, #0
 800897e:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8008980:	2300      	movs	r3, #0
 8008982:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d020      	beq.n	80089d0 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6899      	ldr	r1, [r3, #8]
 8008994:	463b      	mov	r3, r7
 8008996:	f04f 32ff 	mov.w	r2, #4294967295
 800899a:	4618      	mov	r0, r3
 800899c:	f7ff f8e0 	bl	8007b60 <pb_istream_from_buffer>
 80089a0:	f107 0420 	add.w	r4, r7, #32
 80089a4:	463b      	mov	r3, r7
 80089a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80089a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 80089ac:	f107 031a 	add.w	r3, r7, #26
 80089b0:	f107 021c 	add.w	r2, r7, #28
 80089b4:	f107 011b 	add.w	r1, r7, #27
 80089b8:	f107 0020 	add.w	r0, r7, #32
 80089bc:	f7ff fa47 	bl	8007e4e <pb_decode_tag>
 80089c0:	4603      	mov	r3, r0
 80089c2:	f083 0301 	eor.w	r3, r3, #1
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d001      	beq.n	80089d0 <pb_message_set_to_defaults+0x6a>
            return false;
 80089cc:	2300      	movs	r3, #0
 80089ce:	e043      	b.n	8008a58 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 80089d0:	6978      	ldr	r0, [r7, #20]
 80089d2:	f7ff ff07 	bl	80087e4 <pb_field_set_to_default>
 80089d6:	4603      	mov	r3, r0
 80089d8:	f083 0301 	eor.w	r3, r3, #1
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <pb_message_set_to_defaults+0x80>
            return false;
 80089e2:	2300      	movs	r3, #0
 80089e4:	e038      	b.n	8008a58 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d02e      	beq.n	8008a4a <pb_message_set_to_defaults+0xe4>
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	8a1b      	ldrh	r3, [r3, #16]
 80089f0:	461a      	mov	r2, r3
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d128      	bne.n	8008a4a <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 80089f8:	7ef9      	ldrb	r1, [r7, #27]
 80089fa:	f107 0320 	add.w	r3, r7, #32
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7ff fe3b 	bl	800867c <decode_field>
 8008a06:	4603      	mov	r3, r0
 8008a08:	f083 0301 	eor.w	r3, r3, #1
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <pb_message_set_to_defaults+0xb0>
                return false;
 8008a12:	2300      	movs	r3, #0
 8008a14:	e020      	b.n	8008a58 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8008a16:	f107 031a 	add.w	r3, r7, #26
 8008a1a:	f107 021c 	add.w	r2, r7, #28
 8008a1e:	f107 011b 	add.w	r1, r7, #27
 8008a22:	f107 0020 	add.w	r0, r7, #32
 8008a26:	f7ff fa12 	bl	8007e4e <pb_decode_tag>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	f083 0301 	eor.w	r3, r3, #1
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <pb_message_set_to_defaults+0xd4>
                return false;
 8008a36:	2300      	movs	r3, #0
 8008a38:	e00e      	b.n	8008a58 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d003      	beq.n	8008a4a <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	2200      	movs	r2, #0
 8008a48:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 8008a4a:	6978      	ldr	r0, [r7, #20]
 8008a4c:	f7fe ff1c 	bl	8007888 <pb_field_iter_next>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1bc      	bne.n	80089d0 <pb_message_set_to_defaults+0x6a>

    return true;
 8008a56:	2301      	movs	r3, #1
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3734      	adds	r7, #52	; 0x34
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd90      	pop	{r4, r7, pc}

08008a60 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b09a      	sub	sp, #104	; 0x68
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
 8008a6c:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	667b      	str	r3, [r7, #100]	; 0x64
    pb_extension_t *extensions = NULL;
 8008a72:	2300      	movs	r3, #0
 8008a74:	663b      	str	r3, [r7, #96]	; 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 8008a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a7a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    pb_size_t fixed_count_size = 0;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    pb_size_t fixed_count_total_size = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	643b      	str	r3, [r7, #64]	; 0x40
 8008a8e:	2300      	movs	r3, #0
 8008a90:	647b      	str	r3, [r7, #68]	; 0x44
    const uint32_t allbits = ~(uint32_t)0;
 8008a92:	f04f 33ff 	mov.w	r3, #4294967295
 8008a96:	657b      	str	r3, [r7, #84]	; 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8008a98:	f107 0318 	add.w	r3, r7, #24
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	68b9      	ldr	r1, [r7, #8]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fe fea8 	bl	80077f6 <pb_field_iter_begin>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f000 8102 	beq.w	8008cb2 <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f040 80fc 	bne.w	8008cb2 <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 8008aba:	f107 0318 	add.w	r3, r7, #24
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7ff ff51 	bl	8008966 <pb_message_set_to_defaults>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f083 0301 	eor.w	r3, r3, #1
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 80f0 	beq.w	8008cb2 <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <pb_decode_inner+0x80>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	e000      	b.n	8008ae2 <pb_decode_inner+0x82>
 8008ae0:	4b99      	ldr	r3, [pc, #612]	; (8008d48 <pb_decode_inner+0x2e8>)
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	60d3      	str	r3, [r2, #12]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	e16d      	b.n	8008dc6 <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8008aea:	f107 0312 	add.w	r3, r7, #18
 8008aee:	f107 0214 	add.w	r2, r7, #20
 8008af2:	f107 0113 	add.w	r1, r7, #19
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f7ff f9a9 	bl	8007e4e <pb_decode_tag>
 8008afc:	4603      	mov	r3, r0
 8008afe:	f083 0301 	eor.w	r3, r3, #1
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d005      	beq.n	8008b14 <pb_decode_inner+0xb4>
        {
            if (eof)
 8008b08:	7cbb      	ldrb	r3, [r7, #18]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f040 80d7 	bne.w	8008cbe <pb_decode_inner+0x25e>
                break;
            else
                return false;
 8008b10:	2300      	movs	r3, #0
 8008b12:	e158      	b.n	8008dc6 <pb_decode_inner+0x366>
        }

        if (tag == 0)
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d111      	bne.n	8008b3e <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	f003 0304 	and.w	r3, r3, #4
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f040 80ce 	bne.w	8008cc2 <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d002      	beq.n	8008b34 <pb_decode_inner+0xd4>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	e000      	b.n	8008b36 <pb_decode_inner+0xd6>
 8008b34:	4b85      	ldr	r3, [pc, #532]	; (8008d4c <pb_decode_inner+0x2ec>)
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	60d3      	str	r3, [r2, #12]
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	e143      	b.n	8008dc6 <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	f107 0318 	add.w	r3, r7, #24
 8008b44:	4611      	mov	r1, r2
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fe feb3 	bl	80078b2 <pb_field_iter_find>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	f083 0301 	eor.w	r3, r3, #1
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d105      	bne.n	8008b64 <pb_decode_inner+0x104>
 8008b58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008b5c:	f003 030f 	and.w	r3, r3, #15
 8008b60:	2b0a      	cmp	r3, #10
 8008b62:	d13c      	bne.n	8008bde <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8008b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d112      	bne.n	8008b90 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 8008b6a:	f107 0318 	add.w	r3, r7, #24
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fe fef5 	bl	800795e <pb_field_iter_find_extension>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d004      	beq.n	8008b84 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 8008b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	663b      	str	r3, [r7, #96]	; 0x60
                    extension_range_start = iter.tag;
 8008b80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b82:	667b      	str	r3, [r7, #100]	; 0x64
                }

                if (!extensions)
 8008b84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d102      	bne.n	8008b90 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 8008b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b8e:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            if (tag >= extension_range_start)
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d815      	bhi.n	8008bc4 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	64fb      	str	r3, [r7, #76]	; 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 8008b9e:	6979      	ldr	r1, [r7, #20]
 8008ba0:	7cfa      	ldrb	r2, [r7, #19]
 8008ba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f7ff fde1 	bl	800876c <decode_extension>
 8008baa:	4603      	mov	r3, r0
 8008bac:	f083 0301 	eor.w	r3, r3, #1
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <pb_decode_inner+0x15a>
                    return false;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	e105      	b.n	8008dc6 <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d173      	bne.n	8008cac <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8008bc4:	7cfb      	ldrb	r3, [r7, #19]
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f7ff f96f 	bl	8007eac <pb_skip_field>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	f083 0301 	eor.w	r3, r3, #1
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d06a      	beq.n	8008cb0 <pb_decode_inner+0x250>
                return false;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	e0f3      	b.n	8008dc6 <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 8008bde:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008be2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008be6:	2b20      	cmp	r3, #32
 8008be8:	d12e      	bne.n	8008c48 <pb_decode_inner+0x1e8>
 8008bea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bec:	f107 0318 	add.w	r3, r7, #24
 8008bf0:	3314      	adds	r3, #20
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d128      	bne.n	8008c48 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 8008bf6:	8c3b      	ldrh	r3, [r7, #32]
 8008bf8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d020      	beq.n	8008c42 <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8008c00:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d011      	beq.n	8008c30 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 8008c0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8008c10:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d00b      	beq.n	8008c30 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <pb_decode_inner+0x1c6>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	e000      	b.n	8008c28 <pb_decode_inner+0x1c8>
 8008c26:	4b4a      	ldr	r3, [pc, #296]	; (8008d50 <pb_decode_inner+0x2f0>)
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	60d3      	str	r3, [r2, #12]
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	e0ca      	b.n	8008dc6 <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8008c30:	8c3b      	ldrh	r3, [r7, #32]
 8008c32:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                fixed_count_size = 0;
 8008c36:	2300      	movs	r3, #0
 8008c38:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                fixed_count_total_size = iter.array_size;
 8008c3c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c3e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }

            iter.pSize = &fixed_count_size;
 8008c42:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8008c46:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8008c48:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008c4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d11c      	bne.n	8008c8e <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8008c54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c56:	2b3f      	cmp	r3, #63	; 0x3f
 8008c58:	d819      	bhi.n	8008c8e <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8008c5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c5c:	f003 031f 	and.w	r3, r3, #31
 8008c60:	2201      	movs	r2, #1
 8008c62:	fa02 f303 	lsl.w	r3, r2, r3
 8008c66:	653b      	str	r3, [r7, #80]	; 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 8008c68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c6a:	095b      	lsrs	r3, r3, #5
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	3368      	adds	r3, #104	; 0x68
 8008c72:	443b      	add	r3, r7
 8008c74:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8008c78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c7a:	095b      	lsrs	r3, r3, #5
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c82:	431a      	orrs	r2, r3
 8008c84:	008b      	lsls	r3, r1, #2
 8008c86:	3368      	adds	r3, #104	; 0x68
 8008c88:	443b      	add	r3, r7
 8008c8a:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8008c8e:	7cfb      	ldrb	r3, [r7, #19]
 8008c90:	f107 0218 	add.w	r2, r7, #24
 8008c94:	4619      	mov	r1, r3
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f7ff fcf0 	bl	800867c <decode_field>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	f083 0301 	eor.w	r3, r3, #1
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d004      	beq.n	8008cb2 <pb_decode_inner+0x252>
            return false;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	e08c      	b.n	8008dc6 <pb_decode_inner+0x366>
                    continue;
 8008cac:	bf00      	nop
 8008cae:	e000      	b.n	8008cb2 <pb_decode_inner+0x252>
            continue;
 8008cb0:	bf00      	nop
    while (stream->bytes_left)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f47f af17 	bne.w	8008aea <pb_decode_inner+0x8a>
 8008cbc:	e002      	b.n	8008cc4 <pb_decode_inner+0x264>
                break;
 8008cbe:	bf00      	nop
 8008cc0:	e000      	b.n	8008cc4 <pb_decode_inner+0x264>
            break;
 8008cc2:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 8008cc4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008cc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d011      	beq.n	8008cf4 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8008cd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8008cd4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d00b      	beq.n	8008cf4 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d002      	beq.n	8008cea <pb_decode_inner+0x28a>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	e000      	b.n	8008cec <pb_decode_inner+0x28c>
 8008cea:	4b19      	ldr	r3, [pc, #100]	; (8008d50 <pb_decode_inner+0x2f0>)
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	60d3      	str	r3, [r2, #12]
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	e068      	b.n	8008dc6 <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	8a5b      	ldrh	r3, [r3, #18]
 8008cf8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        if (req_field_count > 0)
 8008cfc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d05f      	beq.n	8008dc4 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8008d04:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008d08:	2b40      	cmp	r3, #64	; 0x40
 8008d0a:	d902      	bls.n	8008d12 <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 8008d0c:	2340      	movs	r3, #64	; 0x40
 8008d0e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8008d12:	2300      	movs	r3, #0
 8008d14:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8008d18:	e023      	b.n	8008d62 <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 8008d1a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	3368      	adds	r3, #104	; 0x68
 8008d22:	443b      	add	r3, r7
 8008d24:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8008d28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d014      	beq.n	8008d58 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d002      	beq.n	8008d3c <pb_decode_inner+0x2dc>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	e000      	b.n	8008d3e <pb_decode_inner+0x2de>
 8008d3c:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <pb_decode_inner+0x2f4>)
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	60d3      	str	r3, [r2, #12]
 8008d42:	2300      	movs	r3, #0
 8008d44:	e03f      	b.n	8008dc6 <pb_decode_inner+0x366>
 8008d46:	bf00      	nop
 8008d48:	08009664 	.word	0x08009664
 8008d4c:	080096b4 	.word	0x080096b4
 8008d50:	080096c0 	.word	0x080096c0
 8008d54:	080096e4 	.word	0x080096e4
            for (i = 0; i < (req_field_count >> 5); i++)
 8008d58:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8008d62:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008d66:	095b      	lsrs	r3, r3, #5
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d3d3      	bcc.n	8008d1a <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8008d72:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008d76:	f003 031f 	and.w	r3, r3, #31
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d022      	beq.n	8008dc4 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8008d7e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008d82:	095b      	lsrs	r3, r3, #5
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	3368      	adds	r3, #104	; 0x68
 8008d8a:	443b      	add	r3, r7
 8008d8c:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8008d90:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	f003 031f 	and.w	r3, r3, #31
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	f1c3 0320 	rsb	r3, r3, #32
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	4619      	mov	r1, r3
 8008da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008da6:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d00b      	beq.n	8008dc4 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d002      	beq.n	8008dba <pb_decode_inner+0x35a>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	e000      	b.n	8008dbc <pb_decode_inner+0x35c>
 8008dba:	4b05      	ldr	r3, [pc, #20]	; (8008dd0 <pb_decode_inner+0x370>)
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	60d3      	str	r3, [r2, #12]
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	e000      	b.n	8008dc6 <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 8008dc4:	2301      	movs	r3, #1
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3768      	adds	r7, #104	; 0x68
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	080096e4 	.word	0x080096e4

08008dd4 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 8008de0:	2300      	movs	r3, #0
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	68b9      	ldr	r1, [r7, #8]
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f7ff fe3a 	bl	8008a60 <pb_decode_inner>
 8008dec:	4603      	mov	r3, r0
 8008dee:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 8008df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3718      	adds	r7, #24
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b084      	sub	sp, #16
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 8008e04:	f107 030c 	add.w	r3, r7, #12
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7fe ff70 	bl	8007cf0 <pb_decode_varint32>
 8008e10:	4603      	mov	r3, r0
 8008e12:	f083 0301 	eor.w	r3, r3, #1
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <pb_decode_bool+0x26>
        return false;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	e008      	b.n	8008e32 <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	bf14      	ite	ne
 8008e26:	2301      	movne	r3, #1
 8008e28:	2300      	moveq	r3, #0
 8008e2a:	b2da      	uxtb	r2, r3
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	701a      	strb	r2, [r3, #0]
    return true;
 8008e30:	2301      	movs	r3, #1
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 8008e3a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 8008e46:	f107 0308 	add.w	r3, r7, #8
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7fe ff5f 	bl	8007d10 <pb_decode_varint>
 8008e52:	4603      	mov	r3, r0
 8008e54:	f083 0301 	eor.w	r3, r3, #1
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <pb_decode_svarint+0x28>
        return false;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	e029      	b.n	8008eb6 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 8008e62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e66:	f002 0401 	and.w	r4, r2, #1
 8008e6a:	2500      	movs	r5, #0
 8008e6c:	ea54 0305 	orrs.w	r3, r4, r5
 8008e70:	d013      	beq.n	8008e9a <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 8008e72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e76:	f04f 0200 	mov.w	r2, #0
 8008e7a:	f04f 0300 	mov.w	r3, #0
 8008e7e:	0842      	lsrs	r2, r0, #1
 8008e80:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8008e84:	084b      	lsrs	r3, r1, #1
 8008e86:	ea6f 0802 	mvn.w	r8, r2
 8008e8a:	ea6f 0903 	mvn.w	r9, r3
 8008e8e:	4642      	mov	r2, r8
 8008e90:	464b      	mov	r3, r9
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	e9c1 2300 	strd	r2, r3, [r1]
 8008e98:	e00c      	b.n	8008eb4 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 8008e9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e9e:	f04f 0200 	mov.w	r2, #0
 8008ea2:	f04f 0300 	mov.w	r3, #0
 8008ea6:	0842      	lsrs	r2, r0, #1
 8008ea8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8008eac:	084b      	lsrs	r3, r1, #1
 8008eae:	6839      	ldr	r1, [r7, #0]
 8008eb0:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 8008eb4:	2301      	movs	r3, #1
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08008ec0 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 8008eca:	f107 030c 	add.w	r3, r7, #12
 8008ece:	2204      	movs	r2, #4
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7fe fd92 	bl	80079fc <pb_read>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	f083 0301 	eor.w	r3, r3, #1
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <pb_decode_fixed32+0x28>
        return false;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	e003      	b.n	8008ef0 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 8008eee:	2301      	movs	r3, #1
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 8008f02:	f107 0308 	add.w	r3, r7, #8
 8008f06:	2208      	movs	r2, #8
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7fe fd76 	bl	80079fc <pb_read>
 8008f10:	4603      	mov	r3, r0
 8008f12:	f083 0301 	eor.w	r3, r3, #1
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <pb_decode_fixed64+0x28>
        return false;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	e005      	b.n	8008f2c <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 8008f20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 8008f2a:	2301      	movs	r3, #1
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff ff58 	bl	8008dfa <pb_decode_bool>
 8008f4a:	4603      	mov	r3, r0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8008f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f58:	b094      	sub	sp, #80	; 0x50
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6278      	str	r0, [r7, #36]	; 0x24
 8008f5e:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8008f60:	6a3b      	ldr	r3, [r7, #32]
 8008f62:	7d9b      	ldrb	r3, [r3, #22]
 8008f64:	f003 030f 	and.w	r3, r3, #15
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d179      	bne.n	8009060 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 8008f6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008f70:	4619      	mov	r1, r3
 8008f72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f74:	f7fe fecc 	bl	8007d10 <pb_decode_varint>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	f083 0301 	eor.w	r3, r3, #1
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d001      	beq.n	8008f88 <pb_dec_varint+0x34>
            return false;
 8008f84:	2300      	movs	r3, #0
 8008f86:	e107      	b.n	8009198 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	8a5b      	ldrh	r3, [r3, #18]
 8008f8c:	2b08      	cmp	r3, #8
 8008f8e:	d10a      	bne.n	8008fa6 <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8008f90:	6a3b      	ldr	r3, [r7, #32]
 8008f92:	69d9      	ldr	r1, [r3, #28]
 8008f94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f98:	e9c1 2300 	strd	r2, r3, [r1]
 8008f9c:	e9d1 2300 	ldrd	r2, r3, [r1]
 8008fa0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8008fa4:	e046      	b.n	8009034 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 8008fa6:	6a3b      	ldr	r3, [r7, #32]
 8008fa8:	8a5b      	ldrh	r3, [r3, #18]
 8008faa:	2b04      	cmp	r3, #4
 8008fac:	d10e      	bne.n	8008fcc <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 8008fae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008fb2:	6a3b      	ldr	r3, [r7, #32]
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	613b      	str	r3, [r7, #16]
 8008fc0:	617a      	str	r2, [r7, #20]
 8008fc2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008fc6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8008fca:	e033      	b.n	8009034 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 8008fcc:	6a3b      	ldr	r3, [r7, #32]
 8008fce:	8a5b      	ldrh	r3, [r3, #18]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d10f      	bne.n	8008ff4 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 8008fd4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008fd8:	6a3b      	ldr	r3, [r7, #32]
 8008fda:	69db      	ldr	r3, [r3, #28]
 8008fdc:	b282      	uxth	r2, r0
 8008fde:	801a      	strh	r2, [r3, #0]
 8008fe0:	881b      	ldrh	r3, [r3, #0]
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	60bb      	str	r3, [r7, #8]
 8008fe8:	60fa      	str	r2, [r7, #12]
 8008fea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008fee:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8008ff2:	e01f      	b.n	8009034 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 8008ff4:	6a3b      	ldr	r3, [r7, #32]
 8008ff6:	8a5b      	ldrh	r3, [r3, #18]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d10f      	bne.n	800901c <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 8008ffc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009000:	6a3b      	ldr	r3, [r7, #32]
 8009002:	69db      	ldr	r3, [r3, #28]
 8009004:	b2c2      	uxtb	r2, r0
 8009006:	701a      	strb	r2, [r3, #0]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2200      	movs	r2, #0
 800900e:	603b      	str	r3, [r7, #0]
 8009010:	607a      	str	r2, [r7, #4]
 8009012:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009016:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 800901a:	e00b      	b.n	8009034 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d002      	beq.n	800902a <pb_dec_varint+0xd6>
 8009024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	e000      	b.n	800902c <pb_dec_varint+0xd8>
 800902a:	4b5e      	ldr	r3, [pc, #376]	; (80091a4 <pb_dec_varint+0x250>)
 800902c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800902e:	60d3      	str	r3, [r2, #12]
 8009030:	2300      	movs	r3, #0
 8009032:	e0b1      	b.n	8009198 <pb_dec_varint+0x244>

        if (clamped != value)
 8009034:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009038:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800903c:	4299      	cmp	r1, r3
 800903e:	bf08      	it	eq
 8009040:	4290      	cmpeq	r0, r2
 8009042:	d00b      	beq.n	800905c <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <pb_dec_varint+0xfe>
 800904c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	e000      	b.n	8009054 <pb_dec_varint+0x100>
 8009052:	4b55      	ldr	r3, [pc, #340]	; (80091a8 <pb_dec_varint+0x254>)
 8009054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009056:	60d3      	str	r3, [r2, #12]
 8009058:	2300      	movs	r3, #0
 800905a:	e09d      	b.n	8009198 <pb_dec_varint+0x244>

        return true;
 800905c:	2301      	movs	r3, #1
 800905e:	e09b      	b.n	8009198 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	7d9b      	ldrb	r3, [r3, #22]
 8009064:	f003 030f 	and.w	r3, r3, #15
 8009068:	2b03      	cmp	r3, #3
 800906a:	d10d      	bne.n	8009088 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 800906c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009070:	4619      	mov	r1, r3
 8009072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009074:	f7ff fee1 	bl	8008e3a <pb_decode_svarint>
 8009078:	4603      	mov	r3, r0
 800907a:	f083 0301 	eor.w	r3, r3, #1
 800907e:	b2db      	uxtb	r3, r3
 8009080:	2b00      	cmp	r3, #0
 8009082:	d022      	beq.n	80090ca <pb_dec_varint+0x176>
                return false;
 8009084:	2300      	movs	r3, #0
 8009086:	e087      	b.n	8009198 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 8009088:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800908c:	4619      	mov	r1, r3
 800908e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009090:	f7fe fe3e 	bl	8007d10 <pb_decode_varint>
 8009094:	4603      	mov	r3, r0
 8009096:	f083 0301 	eor.w	r3, r3, #1
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b00      	cmp	r3, #0
 800909e:	d001      	beq.n	80090a4 <pb_dec_varint+0x150>
                return false;
 80090a0:	2300      	movs	r3, #0
 80090a2:	e079      	b.n	8009198 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	8a5b      	ldrh	r3, [r3, #18]
 80090a8:	2b08      	cmp	r3, #8
 80090aa:	d104      	bne.n	80090b6 <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 80090ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80090b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80090b4:	e009      	b.n	80090ca <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 80090b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80090ba:	4613      	mov	r3, r2
 80090bc:	17da      	asrs	r2, r3, #31
 80090be:	61bb      	str	r3, [r7, #24]
 80090c0:	61fa      	str	r2, [r7, #28]
 80090c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 80090ca:	6a3b      	ldr	r3, [r7, #32]
 80090cc:	8a5b      	ldrh	r3, [r3, #18]
 80090ce:	2b08      	cmp	r3, #8
 80090d0:	d10a      	bne.n	80090e8 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 80090d2:	6a3b      	ldr	r3, [r7, #32]
 80090d4:	69d9      	ldr	r1, [r3, #28]
 80090d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090da:	e9c1 2300 	strd	r2, r3, [r1]
 80090de:	e9d1 2300 	ldrd	r2, r3, [r1]
 80090e2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80090e6:	e042      	b.n	800916e <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 80090e8:	6a3b      	ldr	r3, [r7, #32]
 80090ea:	8a5b      	ldrh	r3, [r3, #18]
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	d10c      	bne.n	800910a <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 80090f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80090f4:	6a3b      	ldr	r3, [r7, #32]
 80090f6:	69db      	ldr	r3, [r3, #28]
 80090f8:	4602      	mov	r2, r0
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	17da      	asrs	r2, r3, #31
 8009100:	469a      	mov	sl, r3
 8009102:	4693      	mov	fp, r2
 8009104:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
 8009108:	e031      	b.n	800916e <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	8a5b      	ldrh	r3, [r3, #18]
 800910e:	2b02      	cmp	r3, #2
 8009110:	d10e      	bne.n	8009130 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 8009112:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	b202      	sxth	r2, r0
 800911c:	801a      	strh	r2, [r3, #0]
 800911e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009122:	b21b      	sxth	r3, r3
 8009124:	17da      	asrs	r2, r3, #31
 8009126:	4698      	mov	r8, r3
 8009128:	4691      	mov	r9, r2
 800912a:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 800912e:	e01e      	b.n	800916e <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 8009130:	6a3b      	ldr	r3, [r7, #32]
 8009132:	8a5b      	ldrh	r3, [r3, #18]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d10e      	bne.n	8009156 <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 8009138:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800913c:	6a3b      	ldr	r3, [r7, #32]
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	b242      	sxtb	r2, r0
 8009142:	701a      	strb	r2, [r3, #0]
 8009144:	f993 3000 	ldrsb.w	r3, [r3]
 8009148:	b25b      	sxtb	r3, r3
 800914a:	17da      	asrs	r2, r3, #31
 800914c:	461c      	mov	r4, r3
 800914e:	4615      	mov	r5, r2
 8009150:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 8009154:	e00b      	b.n	800916e <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8009156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d002      	beq.n	8009164 <pb_dec_varint+0x210>
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	e000      	b.n	8009166 <pb_dec_varint+0x212>
 8009164:	4b0f      	ldr	r3, [pc, #60]	; (80091a4 <pb_dec_varint+0x250>)
 8009166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009168:	60d3      	str	r3, [r2, #12]
 800916a:	2300      	movs	r3, #0
 800916c:	e014      	b.n	8009198 <pb_dec_varint+0x244>

        if (clamped != svalue)
 800916e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009172:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009176:	4299      	cmp	r1, r3
 8009178:	bf08      	it	eq
 800917a:	4290      	cmpeq	r0, r2
 800917c:	d00b      	beq.n	8009196 <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 800917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <pb_dec_varint+0x238>
 8009186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	e000      	b.n	800918e <pb_dec_varint+0x23a>
 800918c:	4b06      	ldr	r3, [pc, #24]	; (80091a8 <pb_dec_varint+0x254>)
 800918e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009190:	60d3      	str	r3, [r2, #12]
 8009192:	2300      	movs	r3, #0
 8009194:	e000      	b.n	8009198 <pb_dec_varint+0x244>

        return true;
 8009196:	2301      	movs	r3, #1
    }
}
 8009198:	4618      	mov	r0, r3
 800919a:	3750      	adds	r7, #80	; 0x50
 800919c:	46bd      	mov	sp, r7
 800919e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091a2:	bf00      	nop
 80091a4:	080096fc 	.word	0x080096fc
 80091a8:	08009710 	.word	0x08009710

080091ac <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 80091b6:	f107 030c 	add.w	r3, r7, #12
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7fe fd97 	bl	8007cf0 <pb_decode_varint32>
 80091c2:	4603      	mov	r3, r0
 80091c4:	f083 0301 	eor.w	r3, r3, #1
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <pb_dec_bytes+0x26>
        return false;
 80091ce:	2300      	movs	r3, #0
 80091d0:	e055      	b.n	800927e <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d8:	d30b      	bcc.n	80091f2 <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d002      	beq.n	80091e8 <pb_dec_bytes+0x3c>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	e000      	b.n	80091ea <pb_dec_bytes+0x3e>
 80091e8:	4b27      	ldr	r3, [pc, #156]	; (8009288 <pb_dec_bytes+0xdc>)
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	60d3      	str	r3, [r2, #12]
 80091ee:	2300      	movs	r3, #0
 80091f0:	e045      	b.n	800927e <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	3302      	adds	r3, #2
 80091f6:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d20b      	bcs.n	8009218 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <pb_dec_bytes+0x62>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	e000      	b.n	8009210 <pb_dec_bytes+0x64>
 800920e:	4b1f      	ldr	r3, [pc, #124]	; (800928c <pb_dec_bytes+0xe0>)
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	60d3      	str	r3, [r2, #12]
 8009214:	2300      	movs	r3, #0
 8009216:	e032      	b.n	800927e <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	7d9b      	ldrb	r3, [r3, #22]
 800921c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009220:	2b80      	cmp	r3, #128	; 0x80
 8009222:	d10b      	bne.n	800923c <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d002      	beq.n	8009232 <pb_dec_bytes+0x86>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	e000      	b.n	8009234 <pb_dec_bytes+0x88>
 8009232:	4b17      	ldr	r3, [pc, #92]	; (8009290 <pb_dec_bytes+0xe4>)
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	60d3      	str	r3, [r2, #12]
 8009238:	2300      	movs	r3, #0
 800923a:	e020      	b.n	800927e <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	8a5b      	ldrh	r3, [r3, #18]
 8009240:	461a      	mov	r2, r3
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	4293      	cmp	r3, r2
 8009246:	d90b      	bls.n	8009260 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d002      	beq.n	8009256 <pb_dec_bytes+0xaa>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	e000      	b.n	8009258 <pb_dec_bytes+0xac>
 8009256:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <pb_dec_bytes+0xdc>)
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	60d3      	str	r3, [r2, #12]
 800925c:	2300      	movs	r3, #0
 800925e:	e00e      	b.n	800927e <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	69db      	ldr	r3, [r3, #28]
 8009264:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	b29a      	uxth	r2, r3
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	3302      	adds	r3, #2
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	4619      	mov	r1, r3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f7fe fbc0 	bl	80079fc <pb_read>
 800927c:	4603      	mov	r3, r0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3718      	adds	r7, #24
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	08009724 	.word	0x08009724
 800928c:	08009734 	.word	0x08009734
 8009290:	0800967c 	.word	0x0800967c

08009294 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 80092a4:	f107 030c 	add.w	r3, r7, #12
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7fe fd20 	bl	8007cf0 <pb_decode_varint32>
 80092b0:	4603      	mov	r3, r0
 80092b2:	f083 0301 	eor.w	r3, r3, #1
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d001      	beq.n	80092c0 <pb_dec_string+0x2c>
        return false;
 80092bc:	2300      	movs	r3, #0
 80092be:	e05a      	b.n	8009376 <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c6:	d10b      	bne.n	80092e0 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <pb_dec_string+0x42>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	e000      	b.n	80092d8 <pb_dec_string+0x44>
 80092d6:	4b2a      	ldr	r3, [pc, #168]	; (8009380 <pb_dec_string+0xec>)
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	60d3      	str	r3, [r2, #12]
 80092dc:	2300      	movs	r3, #0
 80092de:	e04a      	b.n	8009376 <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	3301      	adds	r3, #1
 80092e4:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d20b      	bcs.n	8009306 <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d002      	beq.n	80092fc <pb_dec_string+0x68>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	e000      	b.n	80092fe <pb_dec_string+0x6a>
 80092fc:	4b20      	ldr	r3, [pc, #128]	; (8009380 <pb_dec_string+0xec>)
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	60d3      	str	r3, [r2, #12]
 8009302:	2300      	movs	r3, #0
 8009304:	e037      	b.n	8009376 <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	7d9b      	ldrb	r3, [r3, #22]
 800930a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800930e:	2b80      	cmp	r3, #128	; 0x80
 8009310:	d10b      	bne.n	800932a <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d002      	beq.n	8009320 <pb_dec_string+0x8c>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	e000      	b.n	8009322 <pb_dec_string+0x8e>
 8009320:	4b18      	ldr	r3, [pc, #96]	; (8009384 <pb_dec_string+0xf0>)
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	60d3      	str	r3, [r2, #12]
 8009326:	2300      	movs	r3, #0
 8009328:	e025      	b.n	8009376 <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	8a5b      	ldrh	r3, [r3, #18]
 800932e:	461a      	mov	r2, r3
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	4293      	cmp	r3, r2
 8009334:	d90b      	bls.n	800934e <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d002      	beq.n	8009344 <pb_dec_string+0xb0>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	e000      	b.n	8009346 <pb_dec_string+0xb2>
 8009344:	4b10      	ldr	r3, [pc, #64]	; (8009388 <pb_dec_string+0xf4>)
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	60d3      	str	r3, [r2, #12]
 800934a:	2300      	movs	r3, #0
 800934c:	e013      	b.n	8009376 <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	4413      	add	r3, r2
 8009354:	2200      	movs	r2, #0
 8009356:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	461a      	mov	r2, r3
 800935c:	6979      	ldr	r1, [r7, #20]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7fe fb4c 	bl	80079fc <pb_read>
 8009364:	4603      	mov	r3, r0
 8009366:	f083 0301 	eor.w	r3, r3, #1
 800936a:	b2db      	uxtb	r3, r3
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <pb_dec_string+0xe0>
        return false;
 8009370:	2300      	movs	r3, #0
 8009372:	e000      	b.n	8009376 <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8009374:	2301      	movs	r3, #1
}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	08009734 	.word	0x08009734
 8009384:	0800967c 	.word	0x0800967c
 8009388:	08009744 	.word	0x08009744

0800938c <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b08a      	sub	sp, #40	; 0x28
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
    bool status = true;
 8009396:	2301      	movs	r3, #1
 8009398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool submsg_consumed = false;
 800939c:	2300      	movs	r3, #0
 800939e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 80093a2:	f107 030c 	add.w	r3, r7, #12
 80093a6:	4619      	mov	r1, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7fe fe2d 	bl	8008008 <pb_make_string_substream>
 80093ae:	4603      	mov	r3, r0
 80093b0:	f083 0301 	eor.w	r3, r3, #1
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <pb_dec_submessage+0x32>
        return false;
 80093ba:	2300      	movs	r3, #0
 80093bc:	e069      	b.n	8009492 <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10b      	bne.n	80093de <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d002      	beq.n	80093d4 <pb_dec_submessage+0x48>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	e000      	b.n	80093d6 <pb_dec_submessage+0x4a>
 80093d4:	4b31      	ldr	r3, [pc, #196]	; (800949c <pb_dec_submessage+0x110>)
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	60d3      	str	r3, [r2, #12]
 80093da:	2300      	movs	r3, #0
 80093dc:	e059      	b.n	8009492 <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	7d9b      	ldrb	r3, [r3, #22]
 80093e2:	f003 030f 	and.w	r3, r3, #15
 80093e6:	2b09      	cmp	r3, #9
 80093e8:	d11c      	bne.n	8009424 <pb_dec_submessage+0x98>
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	6a1b      	ldr	r3, [r3, #32]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d018      	beq.n	8009424 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	6a1b      	ldr	r3, [r3, #32]
 80093f6:	3b08      	subs	r3, #8
 80093f8:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d010      	beq.n	8009424 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	69fa      	ldr	r2, [r7, #28]
 8009408:	3204      	adds	r2, #4
 800940a:	f107 000c 	add.w	r0, r7, #12
 800940e:	6839      	ldr	r1, [r7, #0]
 8009410:	4798      	blx	r3
 8009412:	4603      	mov	r3, r0
 8009414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (substream.bytes_left == 0)
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d102      	bne.n	8009424 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 800941e:	2301      	movs	r3, #1
 8009420:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 8009424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009428:	2b00      	cmp	r3, #0
 800942a:	d022      	beq.n	8009472 <pb_dec_submessage+0xe6>
 800942c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009430:	f083 0301 	eor.w	r3, r3, #1
 8009434:	b2db      	uxtb	r3, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	d01b      	beq.n	8009472 <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	7d9b      	ldrb	r3, [r3, #22]
 8009442:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d107      	bne.n	800945a <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	7d9b      	ldrb	r3, [r3, #22]
 800944e:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8009452:	2b20      	cmp	r3, #32
 8009454:	d001      	beq.n	800945a <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 8009456:	2301      	movs	r3, #1
 8009458:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	69da      	ldr	r2, [r3, #28]
 8009462:	f107 000c 	add.w	r0, r7, #12
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	f7ff fafa 	bl	8008a60 <pb_decode_inner>
 800946c:	4603      	mov	r3, r0
 800946e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 8009472:	f107 030c 	add.w	r3, r7, #12
 8009476:	4619      	mov	r1, r3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f7fe fdff 	bl	800807c <pb_close_string_substream>
 800947e:	4603      	mov	r3, r0
 8009480:	f083 0301 	eor.w	r3, r3, #1
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <pb_dec_submessage+0x102>
        return false;
 800948a:	2300      	movs	r3, #0
 800948c:	e001      	b.n	8009492 <pb_dec_submessage+0x106>

    return status;
 800948e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009492:	4618      	mov	r0, r3
 8009494:	3728      	adds	r7, #40	; 0x28
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	08009754 	.word	0x08009754

080094a0 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 80094aa:	f107 030c 	add.w	r3, r7, #12
 80094ae:	4619      	mov	r1, r3
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f7fe fc1d 	bl	8007cf0 <pb_decode_varint32>
 80094b6:	4603      	mov	r3, r0
 80094b8:	f083 0301 	eor.w	r3, r3, #1
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <pb_dec_fixed_length_bytes+0x26>
        return false;
 80094c2:	2300      	movs	r3, #0
 80094c4:	e037      	b.n	8009536 <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094cc:	d30b      	bcc.n	80094e6 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <pb_dec_fixed_length_bytes+0x3c>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	e000      	b.n	80094de <pb_dec_fixed_length_bytes+0x3e>
 80094dc:	4b18      	ldr	r3, [pc, #96]	; (8009540 <pb_dec_fixed_length_bytes+0xa0>)
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	60d3      	str	r3, [r2, #12]
 80094e2:	2300      	movs	r3, #0
 80094e4:	e027      	b.n	8009536 <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d109      	bne.n	8009500 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	69d8      	ldr	r0, [r3, #28]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	8a5b      	ldrh	r3, [r3, #18]
 80094f4:	461a      	mov	r2, r3
 80094f6:	2100      	movs	r1, #0
 80094f8:	f000 f826 	bl	8009548 <memset>
        return true;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e01a      	b.n	8009536 <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	8a5b      	ldrh	r3, [r3, #18]
 8009504:	461a      	mov	r2, r3
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	429a      	cmp	r2, r3
 800950a:	d00b      	beq.n	8009524 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d002      	beq.n	800951a <pb_dec_fixed_length_bytes+0x7a>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	e000      	b.n	800951c <pb_dec_fixed_length_bytes+0x7c>
 800951a:	4b0a      	ldr	r3, [pc, #40]	; (8009544 <pb_dec_fixed_length_bytes+0xa4>)
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	60d3      	str	r3, [r2, #12]
 8009520:	2300      	movs	r3, #0
 8009522:	e008      	b.n	8009536 <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	69d9      	ldr	r1, [r3, #28]
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	8a5b      	ldrh	r3, [r3, #18]
 800952c:	461a      	mov	r2, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f7fe fa64 	bl	80079fc <pb_read>
 8009534:	4603      	mov	r3, r0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	08009724 	.word	0x08009724
 8009544:	08009770 	.word	0x08009770

08009548 <memset>:
 8009548:	4402      	add	r2, r0
 800954a:	4603      	mov	r3, r0
 800954c:	4293      	cmp	r3, r2
 800954e:	d100      	bne.n	8009552 <memset+0xa>
 8009550:	4770      	bx	lr
 8009552:	f803 1b01 	strb.w	r1, [r3], #1
 8009556:	e7f9      	b.n	800954c <memset+0x4>

08009558 <__libc_init_array>:
 8009558:	b570      	push	{r4, r5, r6, lr}
 800955a:	4d0d      	ldr	r5, [pc, #52]	; (8009590 <__libc_init_array+0x38>)
 800955c:	4c0d      	ldr	r4, [pc, #52]	; (8009594 <__libc_init_array+0x3c>)
 800955e:	1b64      	subs	r4, r4, r5
 8009560:	10a4      	asrs	r4, r4, #2
 8009562:	2600      	movs	r6, #0
 8009564:	42a6      	cmp	r6, r4
 8009566:	d109      	bne.n	800957c <__libc_init_array+0x24>
 8009568:	4d0b      	ldr	r5, [pc, #44]	; (8009598 <__libc_init_array+0x40>)
 800956a:	4c0c      	ldr	r4, [pc, #48]	; (800959c <__libc_init_array+0x44>)
 800956c:	f000 f826 	bl	80095bc <_init>
 8009570:	1b64      	subs	r4, r4, r5
 8009572:	10a4      	asrs	r4, r4, #2
 8009574:	2600      	movs	r6, #0
 8009576:	42a6      	cmp	r6, r4
 8009578:	d105      	bne.n	8009586 <__libc_init_array+0x2e>
 800957a:	bd70      	pop	{r4, r5, r6, pc}
 800957c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009580:	4798      	blx	r3
 8009582:	3601      	adds	r6, #1
 8009584:	e7ee      	b.n	8009564 <__libc_init_array+0xc>
 8009586:	f855 3b04 	ldr.w	r3, [r5], #4
 800958a:	4798      	blx	r3
 800958c:	3601      	adds	r6, #1
 800958e:	e7f2      	b.n	8009576 <__libc_init_array+0x1e>
 8009590:	080097f8 	.word	0x080097f8
 8009594:	080097f8 	.word	0x080097f8
 8009598:	080097f8 	.word	0x080097f8
 800959c:	080097fc 	.word	0x080097fc

080095a0 <memcpy>:
 80095a0:	440a      	add	r2, r1
 80095a2:	4291      	cmp	r1, r2
 80095a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80095a8:	d100      	bne.n	80095ac <memcpy+0xc>
 80095aa:	4770      	bx	lr
 80095ac:	b510      	push	{r4, lr}
 80095ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095b6:	4291      	cmp	r1, r2
 80095b8:	d1f9      	bne.n	80095ae <memcpy+0xe>
 80095ba:	bd10      	pop	{r4, pc}

080095bc <_init>:
 80095bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095be:	bf00      	nop
 80095c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095c2:	bc08      	pop	{r3}
 80095c4:	469e      	mov	lr, r3
 80095c6:	4770      	bx	lr

080095c8 <_fini>:
 80095c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ca:	bf00      	nop
 80095cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ce:	bc08      	pop	{r3}
 80095d0:	469e      	mov	lr, r3
 80095d2:	4770      	bx	lr
